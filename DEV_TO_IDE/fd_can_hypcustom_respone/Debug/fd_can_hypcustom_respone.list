
fd_can_hypcustom_respone.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e0c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08004fe4  08004fe4  00005fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005020  08005020  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005020  08005020  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005020  08005020  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005020  08005020  00006020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005024  08005024  00006024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005028  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  2000000c  08005034  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08005034  00007504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b565  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd6  00000000  00000000  000125a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00014578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000812  00000000  00000000  00015040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024ed4  00000000  00000000  00015852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b087  00000000  00000000  0003a726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e95bc  00000000  00000000  000457ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ed69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bec  00000000  00000000  0012edac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00131998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004fcc 	.word	0x08004fcc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004fcc 	.word	0x08004fcc

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f9fb 	bl	8000616 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80c 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f89a 	bl	800035c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000228:	f000 f852 	bl	80002d0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  FDCan_Init(&hfdcan1);
 800022c:	4802      	ldr	r0, [pc, #8]	@ (8000238 <main+0x20>)
 800022e:	f002 fd35 	bl	8002c9c <FDCan_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 FDCan_Handle();
 8000232:	f002 fd65 	bl	8002d00 <FDCan_Handle>
 8000236:	e7fc      	b.n	8000232 <main+0x1a>
 8000238:	20000028 	.word	0x20000028

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b094      	sub	sp, #80	@ 0x50
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2238      	movs	r2, #56	@ 0x38
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f004 fe72 	bl	8004f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800025e:	2000      	movs	r0, #0
 8000260:	f001 fba8 	bl	80019b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000264:	2301      	movs	r3, #1
 8000266:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000268:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800026c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026e:	2302      	movs	r3, #2
 8000270:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000272:	2303      	movs	r3, #3
 8000274:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000276:	2302      	movs	r3, #2
 8000278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 800027a:	231c      	movs	r3, #28
 800027c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800027e:	2302      	movs	r3, #2
 8000280:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000282:	2302      	movs	r3, #2
 8000284:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000286:	2302      	movs	r3, #2
 8000288:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fc44 	bl	8001b1c <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800029a:	f000 f8a9 	bl	80003f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2303      	movs	r3, #3
 80002a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2104      	movs	r1, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 ff42 	bl	8002140 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002c2:	f000 f895 	bl	80003f0 <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3750      	adds	r7, #80	@ 0x50
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002d6:	4a20      	ldr	r2, [pc, #128]	@ (8000358 <MX_FDCAN1_Init+0x88>)
 80002d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002da:	4b1e      	ldr	r3, [pc, #120]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002dc:	2200      	movs	r2, #0
 80002de:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80002e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80002ec:	4b19      	ldr	r3, [pc, #100]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80002f2:	4b18      	ldr	r3, [pc, #96]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80002f8:	4b16      	ldr	r3, [pc, #88]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 12;
 80002fe:	4b15      	ldr	r3, [pc, #84]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000300:	220c      	movs	r2, #12
 8000302:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000304:	4b13      	ldr	r3, [pc, #76]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000306:	2201      	movs	r2, #1
 8000308:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 800030a:	4b12      	ldr	r3, [pc, #72]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 800030c:	220c      	movs	r2, #12
 800030e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000310:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000312:	2201      	movs	r2, #1
 8000314:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000316:	4b0f      	ldr	r3, [pc, #60]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000318:	2201      	movs	r2, #1
 800031a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800031c:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 800031e:	2201      	movs	r2, #1
 8000320:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000322:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000324:	2201      	movs	r2, #1
 8000326:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000328:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 800032a:	2201      	movs	r2, #1
 800032c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800032e:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000330:	2201      	movs	r2, #1
 8000332:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000334:	4b07      	ldr	r3, [pc, #28]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000336:	2201      	movs	r2, #1
 8000338:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800033a:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 800033c:	2200      	movs	r2, #0
 800033e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000340:	4804      	ldr	r0, [pc, #16]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000342:	f000 fb0b 	bl	800095c <HAL_FDCAN_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800034c:	f000 f850 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000028 	.word	0x20000028
 8000358:	40006400 	.word	0x40006400

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b088      	sub	sp, #32
 8000360:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000362:	f107 030c 	add.w	r3, r7, #12
 8000366:	2200      	movs	r2, #0
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	605a      	str	r2, [r3, #4]
 800036c:	609a      	str	r2, [r3, #8]
 800036e:	60da      	str	r2, [r3, #12]
 8000370:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000372:	4b1e      	ldr	r3, [pc, #120]	@ (80003ec <MX_GPIO_Init+0x90>)
 8000374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000376:	4a1d      	ldr	r2, [pc, #116]	@ (80003ec <MX_GPIO_Init+0x90>)
 8000378:	f043 0320 	orr.w	r3, r3, #32
 800037c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800037e:	4b1b      	ldr	r3, [pc, #108]	@ (80003ec <MX_GPIO_Init+0x90>)
 8000380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000382:	f003 0320 	and.w	r3, r3, #32
 8000386:	60bb      	str	r3, [r7, #8]
 8000388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800038a:	4b18      	ldr	r3, [pc, #96]	@ (80003ec <MX_GPIO_Init+0x90>)
 800038c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038e:	4a17      	ldr	r2, [pc, #92]	@ (80003ec <MX_GPIO_Init+0x90>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000396:	4b15      	ldr	r3, [pc, #84]	@ (80003ec <MX_GPIO_Init+0x90>)
 8000398:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	607b      	str	r3, [r7, #4]
 80003a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003a2:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <MX_GPIO_Init+0x90>)
 80003a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a6:	4a11      	ldr	r2, [pc, #68]	@ (80003ec <MX_GPIO_Init+0x90>)
 80003a8:	f043 0302 	orr.w	r3, r3, #2
 80003ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80003ae:	4b0f      	ldr	r3, [pc, #60]	@ (80003ec <MX_GPIO_Init+0x90>)
 80003b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003b2:	f003 0302 	and.w	r3, r3, #2
 80003b6:	603b      	str	r3, [r7, #0]
 80003b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80003ba:	2201      	movs	r2, #1
 80003bc:	2120      	movs	r1, #32
 80003be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c2:	f001 fadf 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80003c6:	2320      	movs	r3, #32
 80003c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ca:	2301      	movs	r3, #1
 80003cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d2:	2300      	movs	r3, #0
 80003d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003d6:	f107 030c 	add.w	r3, r7, #12
 80003da:	4619      	mov	r1, r3
 80003dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003e0:	f001 f94e 	bl	8001680 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003e4:	bf00      	nop
 80003e6:	3720      	adds	r7, #32
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	40021000 	.word	0x40021000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003f4:	b672      	cpsid	i
}
 80003f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <Error_Handler+0x8>

080003fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000402:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <HAL_MspInit+0x44>)
 8000404:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000406:	4a0e      	ldr	r2, [pc, #56]	@ (8000440 <HAL_MspInit+0x44>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6613      	str	r3, [r2, #96]	@ 0x60
 800040e:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <HAL_MspInit+0x44>)
 8000410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	607b      	str	r3, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800041a:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <HAL_MspInit+0x44>)
 800041c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800041e:	4a08      	ldr	r2, [pc, #32]	@ (8000440 <HAL_MspInit+0x44>)
 8000420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000424:	6593      	str	r3, [r2, #88]	@ 0x58
 8000426:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <HAL_MspInit+0x44>)
 8000428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800042a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800042e:	603b      	str	r3, [r7, #0]
 8000430:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000432:	f001 fb63 	bl	8001afc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000436:	bf00      	nop
 8000438:	3708      	adds	r7, #8
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40021000 	.word	0x40021000

08000444 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b09e      	sub	sp, #120	@ 0x78
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045c:	f107 0310 	add.w	r3, r7, #16
 8000460:	2254      	movs	r2, #84	@ 0x54
 8000462:	2100      	movs	r1, #0
 8000464:	4618      	mov	r0, r3
 8000466:	f004 fd65 	bl	8004f34 <memset>
  if(hfdcan->Instance==FDCAN1)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4a2c      	ldr	r2, [pc, #176]	@ (8000520 <HAL_FDCAN_MspInit+0xdc>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d151      	bne.n	8000518 <HAL_FDCAN_MspInit+0xd4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000474:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000478:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800047a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800047e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000480:	f107 0310 	add.w	r3, r7, #16
 8000484:	4618      	mov	r0, r3
 8000486:	f002 f83f 	bl	8002508 <HAL_RCCEx_PeriphCLKConfig>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000490:	f7ff ffae 	bl	80003f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000494:	4b23      	ldr	r3, [pc, #140]	@ (8000524 <HAL_FDCAN_MspInit+0xe0>)
 8000496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000498:	4a22      	ldr	r2, [pc, #136]	@ (8000524 <HAL_FDCAN_MspInit+0xe0>)
 800049a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800049e:	6593      	str	r3, [r2, #88]	@ 0x58
 80004a0:	4b20      	ldr	r3, [pc, #128]	@ (8000524 <HAL_FDCAN_MspInit+0xe0>)
 80004a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004a8:	60fb      	str	r3, [r7, #12]
 80004aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ac:	4b1d      	ldr	r3, [pc, #116]	@ (8000524 <HAL_FDCAN_MspInit+0xe0>)
 80004ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000524 <HAL_FDCAN_MspInit+0xe0>)
 80004b2:	f043 0302 	orr.w	r3, r3, #2
 80004b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000524 <HAL_FDCAN_MspInit+0xe0>)
 80004ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004bc:	f003 0302 	and.w	r3, r3, #2
 80004c0:	60bb      	str	r3, [r7, #8]
 80004c2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80004c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004c8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ca:	2302      	movs	r3, #2
 80004cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004ce:	2301      	movs	r3, #1
 80004d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2300      	movs	r3, #0
 80004d4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80004d6:	2309      	movs	r3, #9
 80004d8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004da:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80004de:	4619      	mov	r1, r3
 80004e0:	4811      	ldr	r0, [pc, #68]	@ (8000528 <HAL_FDCAN_MspInit+0xe4>)
 80004e2:	f001 f8cd 	bl	8001680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004ea:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ec:	2302      	movs	r3, #2
 80004ee:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f4:	2300      	movs	r3, #0
 80004f6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80004f8:	2309      	movs	r3, #9
 80004fa:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000500:	4619      	mov	r1, r3
 8000502:	4809      	ldr	r0, [pc, #36]	@ (8000528 <HAL_FDCAN_MspInit+0xe4>)
 8000504:	f001 f8bc 	bl	8001680 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000508:	2200      	movs	r2, #0
 800050a:	2100      	movs	r1, #0
 800050c:	2015      	movs	r0, #21
 800050e:	f000 f9f0 	bl	80008f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000512:	2015      	movs	r0, #21
 8000514:	f000 fa07 	bl	8000926 <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8000518:	bf00      	nop
 800051a:	3778      	adds	r7, #120	@ 0x78
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40006400 	.word	0x40006400
 8000524:	40021000 	.word	0x40021000
 8000528:	48000400 	.word	0x48000400

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000530:	bf00      	nop
 8000532:	e7fd      	b.n	8000530 <NMI_Handler+0x4>

08000534 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000538:	bf00      	nop
 800053a:	e7fd      	b.n	8000538 <HardFault_Handler+0x4>

0800053c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000540:	bf00      	nop
 8000542:	e7fd      	b.n	8000540 <MemManage_Handler+0x4>

08000544 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000548:	bf00      	nop
 800054a:	e7fd      	b.n	8000548 <BusFault_Handler+0x4>

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000550:	bf00      	nop
 8000552:	e7fd      	b.n	8000550 <UsageFault_Handler+0x4>

08000554 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr

08000562 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057e:	b580      	push	{r7, lr}
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000582:	f000 f89b 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000590:	4802      	ldr	r0, [pc, #8]	@ (800059c <FDCAN1_IT0_IRQHandler+0x10>)
 8000592:	f000 fdf1 	bl	8001178 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000028 	.word	0x20000028

080005a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005a4:	4b06      	ldr	r3, [pc, #24]	@ (80005c0 <SystemInit+0x20>)
 80005a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005aa:	4a05      	ldr	r2, [pc, #20]	@ (80005c0 <SystemInit+0x20>)
 80005ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c4:	480d      	ldr	r0, [pc, #52]	@ (80005fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c8:	f7ff ffea 	bl	80005a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005cc:	480c      	ldr	r0, [pc, #48]	@ (8000600 <LoopForever+0x6>)
  ldr r1, =_edata
 80005ce:	490d      	ldr	r1, [pc, #52]	@ (8000604 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <LoopForever+0xe>)
  movs r3, #0
 80005d2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80005d4:	e002      	b.n	80005dc <LoopCopyDataInit>

080005d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005da:	3304      	adds	r3, #4

080005dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e0:	d3f9      	bcc.n	80005d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e2:	4a0a      	ldr	r2, [pc, #40]	@ (800060c <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000610 <LoopForever+0x16>)
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e8:	e001      	b.n	80005ee <LoopFillZerobss>

080005ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ec:	3204      	adds	r2, #4

080005ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f0:	d3fb      	bcc.n	80005ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005f2:	f004 fcb9 	bl	8004f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005f6:	f7ff fe0f 	bl	8000218 <main>

080005fa <LoopForever>:

LoopForever:
    b LoopForever
 80005fa:	e7fe      	b.n	80005fa <LoopForever>
  ldr   r0, =_estack
 80005fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000600:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000604:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000608:	08005028 	.word	0x08005028
  ldr r2, =_sbss
 800060c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000610:	20000504 	.word	0x20000504

08000614 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC1_2_IRQHandler>

08000616 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800061c:	2300      	movs	r3, #0
 800061e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f95b 	bl	80008dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000626:	200f      	movs	r0, #15
 8000628:	f000 f80e 	bl	8000648 <HAL_InitTick>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	e001      	b.n	800063c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000638:	f7ff fee0 	bl	80003fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800063c:	79fb      	ldrb	r3, [r7, #7]

}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <HAL_InitTick+0x68>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d022      	beq.n	80006a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800065c:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <HAL_InitTick+0x6c>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <HAL_InitTick+0x68>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000668:	fbb1 f3f3 	udiv	r3, r1, r3
 800066c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f966 	bl	8000942 <HAL_SYSTICK_Config>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d10f      	bne.n	800069c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b0f      	cmp	r3, #15
 8000680:	d809      	bhi.n	8000696 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000682:	2200      	movs	r2, #0
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800068a:	f000 f932 	bl	80008f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800068e:	4a0a      	ldr	r2, [pc, #40]	@ (80006b8 <HAL_InitTick+0x70>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	e007      	b.n	80006a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	73fb      	strb	r3, [r7, #15]
 800069a:	e004      	b.n	80006a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800069c:	2301      	movs	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e001      	b.n	80006a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000004 	.word	0x20000004

080006bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <HAL_IncTick+0x1c>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b05      	ldr	r3, [pc, #20]	@ (80006dc <HAL_IncTick+0x20>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4413      	add	r3, r2
 80006ca:	4a03      	ldr	r2, [pc, #12]	@ (80006d8 <HAL_IncTick+0x1c>)
 80006cc:	6013      	str	r3, [r2, #0]
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	2000008c 	.word	0x2000008c
 80006dc:	20000008 	.word	0x20000008

080006e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;
 80006e4:	4b03      	ldr	r3, [pc, #12]	@ (80006f4 <HAL_GetTick+0x14>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	2000008c 	.word	0x2000008c

080006f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000700:	f7ff ffee 	bl	80006e0 <HAL_GetTick>
 8000704:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000710:	d004      	beq.n	800071c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <HAL_Delay+0x40>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	4413      	add	r3, r2
 800071a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800071c:	bf00      	nop
 800071e:	f7ff ffdf 	bl	80006e0 <HAL_GetTick>
 8000722:	4602      	mov	r2, r0
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	429a      	cmp	r2, r3
 800072c:	d8f7      	bhi.n	800071e <HAL_Delay+0x26>
  {
  }
}
 800072e:	bf00      	nop
 8000730:	bf00      	nop
 8000732:	3710      	adds	r7, #16
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	20000008 	.word	0x20000008

0800073c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 800074e:	68db      	ldr	r3, [r3, #12]
 8000750:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000752:	68ba      	ldr	r2, [r7, #8]
 8000754:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000758:	4013      	ands	r3, r2
 800075a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000764:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000768:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800076c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076e:	4a04      	ldr	r2, [pc, #16]	@ (8000780 <__NVIC_SetPriorityGrouping+0x44>)
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	60d3      	str	r3, [r2, #12]
}
 8000774:	bf00      	nop
 8000776:	3714      	adds	r7, #20
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000788:	4b04      	ldr	r3, [pc, #16]	@ (800079c <__NVIC_GetPriorityGrouping+0x18>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	0a1b      	lsrs	r3, r3, #8
 800078e:	f003 0307 	and.w	r3, r3, #7
}
 8000792:	4618      	mov	r0, r3
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	db0b      	blt.n	80007ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	f003 021f 	and.w	r2, r3, #31
 80007b8:	4907      	ldr	r1, [pc, #28]	@ (80007d8 <__NVIC_EnableIRQ+0x38>)
 80007ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007be:	095b      	lsrs	r3, r3, #5
 80007c0:	2001      	movs	r0, #1
 80007c2:	fa00 f202 	lsl.w	r2, r0, r2
 80007c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007ca:	bf00      	nop
 80007cc:	370c      	adds	r7, #12
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000e100 	.word	0xe000e100

080007dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	6039      	str	r1, [r7, #0]
 80007e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	db0a      	blt.n	8000806 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	490c      	ldr	r1, [pc, #48]	@ (8000828 <__NVIC_SetPriority+0x4c>)
 80007f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fa:	0112      	lsls	r2, r2, #4
 80007fc:	b2d2      	uxtb	r2, r2
 80007fe:	440b      	add	r3, r1
 8000800:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000804:	e00a      	b.n	800081c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	b2da      	uxtb	r2, r3
 800080a:	4908      	ldr	r1, [pc, #32]	@ (800082c <__NVIC_SetPriority+0x50>)
 800080c:	79fb      	ldrb	r3, [r7, #7]
 800080e:	f003 030f 	and.w	r3, r3, #15
 8000812:	3b04      	subs	r3, #4
 8000814:	0112      	lsls	r2, r2, #4
 8000816:	b2d2      	uxtb	r2, r2
 8000818:	440b      	add	r3, r1
 800081a:	761a      	strb	r2, [r3, #24]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr
 8000828:	e000e100 	.word	0xe000e100
 800082c:	e000ed00 	.word	0xe000ed00

08000830 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000830:	b480      	push	{r7}
 8000832:	b089      	sub	sp, #36	@ 0x24
 8000834:	af00      	add	r7, sp, #0
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000844:	69fb      	ldr	r3, [r7, #28]
 8000846:	f1c3 0307 	rsb	r3, r3, #7
 800084a:	2b04      	cmp	r3, #4
 800084c:	bf28      	it	cs
 800084e:	2304      	movcs	r3, #4
 8000850:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	3304      	adds	r3, #4
 8000856:	2b06      	cmp	r3, #6
 8000858:	d902      	bls.n	8000860 <NVIC_EncodePriority+0x30>
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	3b03      	subs	r3, #3
 800085e:	e000      	b.n	8000862 <NVIC_EncodePriority+0x32>
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000868:	69bb      	ldr	r3, [r7, #24]
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43da      	mvns	r2, r3
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	401a      	ands	r2, r3
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000878:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800087c:	697b      	ldr	r3, [r7, #20]
 800087e:	fa01 f303 	lsl.w	r3, r1, r3
 8000882:	43d9      	mvns	r1, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	4313      	orrs	r3, r2
         );
}
 800088a:	4618      	mov	r0, r3
 800088c:	3724      	adds	r7, #36	@ 0x24
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008a8:	d301      	bcc.n	80008ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008aa:	2301      	movs	r3, #1
 80008ac:	e00f      	b.n	80008ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ae:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <SysTick_Config+0x40>)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b6:	210f      	movs	r1, #15
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008bc:	f7ff ff8e 	bl	80007dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c0:	4b05      	ldr	r3, [pc, #20]	@ (80008d8 <SysTick_Config+0x40>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c6:	4b04      	ldr	r3, [pc, #16]	@ (80008d8 <SysTick_Config+0x40>)
 80008c8:	2207      	movs	r2, #7
 80008ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008cc:	2300      	movs	r3, #0
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	e000e010 	.word	0xe000e010

080008dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f7ff ff29 	bl	800073c <__NVIC_SetPriorityGrouping>
}
 80008ea:	bf00      	nop
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
 80008fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000900:	f7ff ff40 	bl	8000784 <__NVIC_GetPriorityGrouping>
 8000904:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	68b9      	ldr	r1, [r7, #8]
 800090a:	6978      	ldr	r0, [r7, #20]
 800090c:	f7ff ff90 	bl	8000830 <NVIC_EncodePriority>
 8000910:	4602      	mov	r2, r0
 8000912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff5f 	bl	80007dc <__NVIC_SetPriority>
}
 800091e:	bf00      	nop
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff33 	bl	80007a0 <__NVIC_EnableIRQ>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffa4 	bl	8000898 <SysTick_Config>
 8000950:	4603      	mov	r3, r0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b084      	sub	sp, #16
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2b00      	cmp	r3, #0
 8000968:	d101      	bne.n	800096e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	e147      	b.n	8000bfe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d106      	bne.n	8000988 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2200      	movs	r2, #0
 800097e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff fd5e 	bl	8000444 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	699a      	ldr	r2, [r3, #24]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f022 0210 	bic.w	r2, r2, #16
 8000996:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000998:	f7ff fea2 	bl	80006e0 <HAL_GetTick>
 800099c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800099e:	e012      	b.n	80009c6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80009a0:	f7ff fe9e 	bl	80006e0 <HAL_GetTick>
 80009a4:	4602      	mov	r2, r0
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	2b0a      	cmp	r3, #10
 80009ac:	d90b      	bls.n	80009c6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b2:	f043 0201 	orr.w	r2, r3, #1
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2203      	movs	r2, #3
 80009be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e11b      	b.n	8000bfe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	2b08      	cmp	r3, #8
 80009d2:	d0e5      	beq.n	80009a0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	699a      	ldr	r2, [r3, #24]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 0201 	orr.w	r2, r2, #1
 80009e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009e4:	f7ff fe7c 	bl	80006e0 <HAL_GetTick>
 80009e8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80009ea:	e012      	b.n	8000a12 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80009ec:	f7ff fe78 	bl	80006e0 <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	2b0a      	cmp	r3, #10
 80009f8:	d90b      	bls.n	8000a12 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009fe:	f043 0201 	orr.w	r2, r3, #1
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	2203      	movs	r2, #3
 8000a0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e0f5      	b.n	8000bfe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0301 	and.w	r3, r3, #1
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0e5      	beq.n	80009ec <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	699a      	ldr	r2, [r3, #24]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f042 0202 	orr.w	r2, r2, #2
 8000a2e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a74      	ldr	r2, [pc, #464]	@ (8000c08 <HAL_FDCAN_Init+0x2ac>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d103      	bne.n	8000a42 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8000a3a:	4a74      	ldr	r2, [pc, #464]	@ (8000c0c <HAL_FDCAN_Init+0x2b0>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	7c1b      	ldrb	r3, [r3, #16]
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d108      	bne.n	8000a5c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	699a      	ldr	r2, [r3, #24]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a58:	619a      	str	r2, [r3, #24]
 8000a5a:	e007      	b.n	8000a6c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	699a      	ldr	r2, [r3, #24]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a6a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	7c5b      	ldrb	r3, [r3, #17]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d108      	bne.n	8000a86 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	699a      	ldr	r2, [r3, #24]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000a82:	619a      	str	r2, [r3, #24]
 8000a84:	e007      	b.n	8000a96 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	699a      	ldr	r2, [r3, #24]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000a94:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	7c9b      	ldrb	r3, [r3, #18]
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d108      	bne.n	8000ab0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	699a      	ldr	r2, [r3, #24]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000aac:	619a      	str	r2, [r3, #24]
 8000aae:	e007      	b.n	8000ac0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	699a      	ldr	r2, [r3, #24]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000abe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	689a      	ldr	r2, [r3, #8]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	699a      	ldr	r2, [r3, #24]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000ae4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	691a      	ldr	r2, [r3, #16]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f022 0210 	bic.w	r2, r2, #16
 8000af4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d108      	bne.n	8000b10 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	699a      	ldr	r2, [r3, #24]
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f042 0204 	orr.w	r2, r2, #4
 8000b0c:	619a      	str	r2, [r3, #24]
 8000b0e:	e02c      	b.n	8000b6a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d028      	beq.n	8000b6a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d01c      	beq.n	8000b5a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	699a      	ldr	r2, [r3, #24]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b2e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f042 0210 	orr.w	r2, r2, #16
 8000b3e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d110      	bne.n	8000b6a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	699a      	ldr	r2, [r3, #24]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f042 0220 	orr.w	r2, r2, #32
 8000b56:	619a      	str	r2, [r3, #24]
 8000b58:	e007      	b.n	8000b6a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	699a      	ldr	r2, [r3, #24]
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f042 0220 	orr.w	r2, r2, #32
 8000b68:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	3b01      	subs	r3, #1
 8000b70:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b7a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b82:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b92:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b94:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000b9e:	d115      	bne.n	8000bcc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ba4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000baa:	3b01      	subs	r3, #1
 8000bac:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000bae:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000bb8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bc0:	3b01      	subs	r3, #1
 8000bc2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000bc8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000bca:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 fc64 	bl	80014b0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40006400 	.word	0x40006400
 8000c0c:	40006500 	.word	0x40006500

08000c10 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000c20:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000c22:	7dfb      	ldrb	r3, [r7, #23]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d002      	beq.n	8000c2e <HAL_FDCAN_ConfigFilter+0x1e>
 8000c28:	7dfb      	ldrb	r3, [r7, #23]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d13d      	bne.n	8000caa <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d119      	bne.n	8000c6a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000c42:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691b      	ldr	r3, [r3, #16]
 8000c48:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000c4a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	e01d      	b.n	8000ca6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	075a      	lsls	r2, r3, #29
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	691b      	ldr	r3, [r3, #16]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	079a      	lsls	r2, r3, #30
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	00db      	lsls	r3, r3, #3
 8000c90:	4413      	add	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e006      	b.n	8000cb8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cae:	f043 0202 	orr.w	r2, r3, #2
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
  }
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	371c      	adds	r7, #28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d110      	bne.n	8000cfa <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2202      	movs	r2, #2
 8000cdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	699a      	ldr	r2, [r3, #24]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f022 0201 	bic.w	r2, r2, #1
 8000cee:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e006      	b.n	8000d08 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cfe:	f043 0204 	orr.w	r2, r3, #4
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
  }
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr

08000d14 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d12c      	bne.n	8000d86 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d007      	beq.n	8000d4c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d40:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e023      	b.n	8000d94 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000d54:	0c1b      	lsrs	r3, r3, #16
 8000d56:	f003 0303 	and.w	r3, r3, #3
 8000d5a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	68b9      	ldr	r1, [r7, #8]
 8000d62:	68f8      	ldr	r0, [r7, #12]
 8000d64:	f000 fc10 	bl	8001588 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2101      	movs	r1, #1
 8000d6e:	697a      	ldr	r2, [r7, #20]
 8000d70:	fa01 f202 	lsl.w	r2, r1, r2
 8000d74:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	409a      	lsls	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e006      	b.n	8000d94 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d8a:	f043 0208 	orr.w	r2, r3, #8
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
  }
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3718      	adds	r7, #24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b08b      	sub	sp, #44	@ 0x2c
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
 8000da8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000db4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000db6:	7efb      	ldrb	r3, [r7, #27]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	f040 80e8 	bne.w	8000f8e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	2b40      	cmp	r3, #64	@ 0x40
 8000dc2:	d137      	bne.n	8000e34 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000dcc:	f003 030f 	and.w	r3, r3, #15
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d107      	bne.n	8000de4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e0db      	b.n	8000f9c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000dec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000df4:	d10a      	bne.n	8000e0c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000dfe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000e06:	d101      	bne.n	8000e0c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000e14:	0a1b      	lsrs	r3, r3, #8
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	69fa      	ldr	r2, [r7, #28]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000e24:	69fa      	ldr	r2, [r7, #28]
 8000e26:	4613      	mov	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	4413      	add	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	440b      	add	r3, r1
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e32:	e036      	b.n	8000ea2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000e3c:	f003 030f 	and.w	r3, r3, #15
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d107      	bne.n	8000e54 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e48:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	e0a3      	b.n	8000f9c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000e5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e64:	d10a      	bne.n	8000e7c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e76:	d101      	bne.n	8000e7c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	69fa      	ldr	r2, [r7, #28]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000e94:	69fa      	ldr	r2, [r7, #28]
 8000e96:	4613      	mov	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	440b      	add	r3, r1
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d107      	bne.n	8000ec6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	0c9b      	lsrs	r3, r3, #18
 8000ebc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	e005      	b.n	8000ed2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8000eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eec:	3304      	adds	r3, #4
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	b29a      	uxth	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8000efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	0c1b      	lsrs	r3, r3, #16
 8000f00:	f003 020f 	and.w	r2, r3, #15
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	0e1b      	lsrs	r3, r3, #24
 8000f26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	0fda      	lsrs	r2, r3, #31
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
 8000f46:	e00a      	b.n	8000f5e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	6a3b      	ldr	r3, [r7, #32]
 8000f4c:	441a      	add	r2, r3
 8000f4e:	6839      	ldr	r1, [r7, #0]
 8000f50:	6a3b      	ldr	r3, [r7, #32]
 8000f52:	440b      	add	r3, r1
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	623b      	str	r3, [r7, #32]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	4a11      	ldr	r2, [pc, #68]	@ (8000fa8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8000f64:	5cd3      	ldrb	r3, [r2, r3]
 8000f66:	461a      	mov	r2, r3
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d3ec      	bcc.n	8000f48 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	2b40      	cmp	r3, #64	@ 0x40
 8000f72:	d105      	bne.n	8000f80 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8000f7e:	e004      	b.n	8000f8a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	69fa      	ldr	r2, [r7, #28]
 8000f86:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	e006      	b.n	8000f9c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f92:	f043 0208 	orr.w	r2, r3, #8
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
  }
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	372c      	adds	r7, #44	@ 0x2c
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	08005010 	.word	0x08005010

08000fac <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000fbe:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000fc0:	7dfb      	ldrb	r3, [r7, #23]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d003      	beq.n	8000fce <HAL_FDCAN_ActivateNotification+0x22>
 8000fc6:	7dfb      	ldrb	r3, [r7, #23]
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	f040 80c8 	bne.w	800115e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d004      	beq.n	8000fea <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d03b      	beq.n	8001062 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d004      	beq.n	8000ffe <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	f003 0302 	and.w	r3, r3, #2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d031      	beq.n	8001062 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001004:	2b00      	cmp	r3, #0
 8001006:	d004      	beq.n	8001012 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	2b00      	cmp	r3, #0
 8001010:	d027      	beq.n	8001062 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001018:	2b00      	cmp	r3, #0
 800101a:	d004      	beq.n	8001026 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	f003 0308 	and.w	r3, r3, #8
 8001022:	2b00      	cmp	r3, #0
 8001024:	d01d      	beq.n	8001062 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800102c:	2b00      	cmp	r3, #0
 800102e:	d004      	beq.n	800103a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	f003 0310 	and.w	r3, r3, #16
 8001036:	2b00      	cmp	r3, #0
 8001038:	d013      	beq.n	8001062 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8001040:	2b00      	cmp	r3, #0
 8001042:	d004      	beq.n	800104e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	f003 0320 	and.w	r3, r3, #32
 800104a:	2b00      	cmp	r3, #0
 800104c:	d009      	beq.n	8001062 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001054:	2b00      	cmp	r3, #0
 8001056:	d00c      	beq.n	8001072 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800105e:	2b00      	cmp	r3, #0
 8001060:	d107      	bne.n	8001072 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 0201 	orr.w	r2, r2, #1
 8001070:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	2b00      	cmp	r3, #0
 800107a:	d004      	beq.n	8001086 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d13b      	bne.n	80010fe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800108c:	2b00      	cmp	r3, #0
 800108e:	d004      	beq.n	800109a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d131      	bne.n	80010fe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	f003 0304 	and.w	r3, r3, #4
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d127      	bne.n	80010fe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d004      	beq.n	80010c2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d11d      	bne.n	80010fe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	f003 0310 	and.w	r3, r3, #16
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d113      	bne.n	80010fe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d109      	bne.n	80010fe <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00c      	beq.n	800110e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f042 0202 	orr.w	r2, r2, #2
 800110c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001114:	2b00      	cmp	r3, #0
 8001116:	d009      	beq.n	800112c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	430a      	orrs	r2, r1
 8001128:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001132:	2b00      	cmp	r3, #0
 8001134:	d009      	beq.n	800114a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	430a      	orrs	r2, r1
 8001146:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	430a      	orrs	r2, r1
 8001158:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e006      	b.n	800116c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001162:	f043 0202 	orr.w	r2, r3, #2
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
  }
}
 800116c:	4618      	mov	r0, r3
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	@ 0x30
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001186:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 800118a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001194:	4013      	ands	r3, r2
 8001196:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011ac:	4013      	ands	r3, r2
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011c4:	4013      	ands	r3, r2
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011ce:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80011d2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011da:	6a3a      	ldr	r2, [r7, #32]
 80011dc:	4013      	ands	r3, r2
 80011de:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80011e6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80011ea:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011fe:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001206:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	099b      	lsrs	r3, r3, #6
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	2b00      	cmp	r3, #0
 8001212:	d00c      	beq.n	800122e <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	099b      	lsrs	r3, r3, #6
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2240      	movs	r2, #64	@ 0x40
 8001226:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f922 	bl	8001472 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0301 	and.w	r3, r3, #1
 8001236:	2b00      	cmp	r3, #0
 8001238:	d01a      	beq.n	8001270 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	0a1b      	lsrs	r3, r3, #8
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d014      	beq.n	8001270 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800124e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001266:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001268:	6939      	ldr	r1, [r7, #16]
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f8e2 	bl	8001434 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001272:	2b00      	cmp	r3, #0
 8001274:	d007      	beq.n	8001286 <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800127c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800127e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 f8ac 	bl	80013de <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001288:	2b00      	cmp	r3, #0
 800128a:	d007      	beq.n	800129c <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001292:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f001 fb84 	bl	80029a4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800129c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d007      	beq.n	80012b2 <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80012aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f8a1 	bl	80013f4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	0a5b      	lsrs	r3, r3, #9
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d00d      	beq.n	80012da <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	0a5b      	lsrs	r3, r3, #9
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d007      	beq.n	80012da <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 f898 	bl	800140a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	09db      	lsrs	r3, r3, #7
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d019      	beq.n	800131a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80012e6:	69bb      	ldr	r3, [r7, #24]
 80012e8:	09db      	lsrs	r3, r3, #7
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d013      	beq.n	800131a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80012fa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4013      	ands	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	2280      	movs	r2, #128	@ 0x80
 8001310:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001312:	68f9      	ldr	r1, [r7, #12]
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 f882 	bl	800141e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	0b5b      	lsrs	r3, r3, #13
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00d      	beq.n	8001342 <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	0b5b      	lsrs	r3, r3, #13
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d007      	beq.n	8001342 <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800133a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f000 f884 	bl	800144a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	0bdb      	lsrs	r3, r3, #15
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00d      	beq.n	800136a <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	0bdb      	lsrs	r3, r3, #15
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d007      	beq.n	800136a <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001362:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f87a 	bl	800145e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	0b9b      	lsrs	r3, r3, #14
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d010      	beq.n	8001398 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	0b9b      	lsrs	r3, r3, #14
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d00a      	beq.n	8001398 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800138a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001390:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d007      	beq.n	80013ae <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	69fa      	ldr	r2, [r7, #28]
 80013a4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80013a6:	69f9      	ldr	r1, [r7, #28]
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 f876 	bl	800149a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d009      	beq.n	80013c8 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6a3a      	ldr	r2, [r7, #32]
 80013ba:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	431a      	orrs	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f858 	bl	8001486 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80013d6:	bf00      	nop
 80013d8:	3730      	adds	r7, #48	@ 0x30
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80013de:	b480      	push	{r7}
 80013e0:	b083      	sub	sp, #12
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
 80013e6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800140a:	b480      	push	{r7}
 800140c:	b083      	sub	sp, #12
 800140e:	af00      	add	r7, sp, #0
 8001410:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
 8001426:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr

0800144a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800144a:	b480      	push	{r7}
 800144c:	b083      	sub	sp, #12
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80014b8:	4b30      	ldr	r3, [pc, #192]	@ (800157c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80014ba:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a2f      	ldr	r2, [pc, #188]	@ (8001580 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d103      	bne.n	80014ce <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80014cc:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001584 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d103      	bne.n	80014e0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 80014de:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ee:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014f6:	041a      	lsls	r2, r3, #16
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001514:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151c:	061a      	lsls	r2, r3, #24
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	e005      	b.n	8001562 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	3304      	adds	r3, #4
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	429a      	cmp	r2, r3
 800156c:	d3f3      	bcc.n	8001556 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 800156e:	bf00      	nop
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	4000a400 	.word	0x4000a400
 8001580:	40006800 	.word	0x40006800
 8001584:	40006c00 	.word	0x40006c00

08001588 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	@ 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10a      	bne.n	80015b4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80015a6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80015ae:	4313      	orrs	r3, r2
 80015b0:	61fb      	str	r3, [r7, #28]
 80015b2:	e00a      	b.n	80015ca <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80015bc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80015c2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80015c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015c8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80015d4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80015da:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80015e0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80015f0:	683a      	ldr	r2, [r7, #0]
 80015f2:	4613      	mov	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	4413      	add	r3, r2
 80015f8:	00db      	lsls	r3, r3, #3
 80015fa:	440b      	add	r3, r1
 80015fc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	3304      	adds	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	3304      	adds	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e020      	b.n	800165e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3303      	adds	r3, #3
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	3302      	adds	r3, #2
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	440b      	add	r3, r1
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8001634:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	6879      	ldr	r1, [r7, #4]
 800163c:	440b      	add	r3, r1
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8001642:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001644:	6879      	ldr	r1, [r7, #4]
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	440a      	add	r2, r1
 800164a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800164c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	3304      	adds	r3, #4
 8001656:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	3304      	adds	r3, #4
 800165c:	617b      	str	r3, [r7, #20]
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	4a06      	ldr	r2, [pc, #24]	@ (800167c <FDCAN_CopyMessageToRAM+0xf4>)
 8001664:	5cd3      	ldrb	r3, [r2, r3]
 8001666:	461a      	mov	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	4293      	cmp	r3, r2
 800166c:	d3d6      	bcc.n	800161c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800166e:	bf00      	nop
 8001670:	bf00      	nop
 8001672:	3724      	adds	r7, #36	@ 0x24
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	08005010 	.word	0x08005010

08001680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001680:	b480      	push	{r7}
 8001682:	b087      	sub	sp, #28
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800168e:	e15a      	b.n	8001946 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2101      	movs	r1, #1
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	4013      	ands	r3, r2
 800169e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 814c 	beq.w	8001940 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 0303 	and.w	r3, r3, #3
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d005      	beq.n	80016c0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d130      	bne.n	8001722 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	2203      	movs	r2, #3
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016f6:	2201      	movs	r2, #1
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43db      	mvns	r3, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4013      	ands	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	f003 0201 	and.w	r2, r3, #1
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	4313      	orrs	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b03      	cmp	r3, #3
 800172c:	d017      	beq.n	800175e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d123      	bne.n	80017b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	08da      	lsrs	r2, r3, #3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3208      	adds	r2, #8
 8001772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	220f      	movs	r2, #15
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4013      	ands	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	691a      	ldr	r2, [r3, #16]
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	009b      	lsls	r3, r3, #2
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	6939      	ldr	r1, [r7, #16]
 80017ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	2203      	movs	r2, #3
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f003 0203 	and.w	r2, r3, #3
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 80a6 	beq.w	8001940 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001964 <HAL_GPIO_Init+0x2e4>)
 80017f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017f8:	4a5a      	ldr	r2, [pc, #360]	@ (8001964 <HAL_GPIO_Init+0x2e4>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6613      	str	r3, [r2, #96]	@ 0x60
 8001800:	4b58      	ldr	r3, [pc, #352]	@ (8001964 <HAL_GPIO_Init+0x2e4>)
 8001802:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800180c:	4a56      	ldr	r2, [pc, #344]	@ (8001968 <HAL_GPIO_Init+0x2e8>)
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3302      	adds	r3, #2
 8001814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001818:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	220f      	movs	r2, #15
 8001824:	fa02 f303 	lsl.w	r3, r2, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001836:	d01f      	beq.n	8001878 <HAL_GPIO_Init+0x1f8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a4c      	ldr	r2, [pc, #304]	@ (800196c <HAL_GPIO_Init+0x2ec>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d019      	beq.n	8001874 <HAL_GPIO_Init+0x1f4>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a4b      	ldr	r2, [pc, #300]	@ (8001970 <HAL_GPIO_Init+0x2f0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d013      	beq.n	8001870 <HAL_GPIO_Init+0x1f0>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a4a      	ldr	r2, [pc, #296]	@ (8001974 <HAL_GPIO_Init+0x2f4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d00d      	beq.n	800186c <HAL_GPIO_Init+0x1ec>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a49      	ldr	r2, [pc, #292]	@ (8001978 <HAL_GPIO_Init+0x2f8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d007      	beq.n	8001868 <HAL_GPIO_Init+0x1e8>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a48      	ldr	r2, [pc, #288]	@ (800197c <HAL_GPIO_Init+0x2fc>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d101      	bne.n	8001864 <HAL_GPIO_Init+0x1e4>
 8001860:	2305      	movs	r3, #5
 8001862:	e00a      	b.n	800187a <HAL_GPIO_Init+0x1fa>
 8001864:	2306      	movs	r3, #6
 8001866:	e008      	b.n	800187a <HAL_GPIO_Init+0x1fa>
 8001868:	2304      	movs	r3, #4
 800186a:	e006      	b.n	800187a <HAL_GPIO_Init+0x1fa>
 800186c:	2303      	movs	r3, #3
 800186e:	e004      	b.n	800187a <HAL_GPIO_Init+0x1fa>
 8001870:	2302      	movs	r3, #2
 8001872:	e002      	b.n	800187a <HAL_GPIO_Init+0x1fa>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_GPIO_Init+0x1fa>
 8001878:	2300      	movs	r3, #0
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	f002 0203 	and.w	r2, r2, #3
 8001880:	0092      	lsls	r2, r2, #2
 8001882:	4093      	lsls	r3, r2
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800188a:	4937      	ldr	r1, [pc, #220]	@ (8001968 <HAL_GPIO_Init+0x2e8>)
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	089b      	lsrs	r3, r3, #2
 8001890:	3302      	adds	r3, #2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001898:	4b39      	ldr	r3, [pc, #228]	@ (8001980 <HAL_GPIO_Init+0x300>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	43db      	mvns	r3, r3
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	4013      	ands	r3, r2
 80018a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d003      	beq.n	80018bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018bc:	4a30      	ldr	r2, [pc, #192]	@ (8001980 <HAL_GPIO_Init+0x300>)
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001980 <HAL_GPIO_Init+0x300>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	693a      	ldr	r2, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018e6:	4a26      	ldr	r2, [pc, #152]	@ (8001980 <HAL_GPIO_Init+0x300>)
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018ec:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <HAL_GPIO_Init+0x300>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d003      	beq.n	8001910 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001910:	4a1b      	ldr	r2, [pc, #108]	@ (8001980 <HAL_GPIO_Init+0x300>)
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001916:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <HAL_GPIO_Init+0x300>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	43db      	mvns	r3, r3
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	4013      	ands	r3, r2
 8001924:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800192e:	2b00      	cmp	r3, #0
 8001930:	d003      	beq.n	800193a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4313      	orrs	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800193a:	4a11      	ldr	r2, [pc, #68]	@ (8001980 <HAL_GPIO_Init+0x300>)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	3301      	adds	r3, #1
 8001944:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
 8001950:	2b00      	cmp	r3, #0
 8001952:	f47f ae9d 	bne.w	8001690 <HAL_GPIO_Init+0x10>
  }
}
 8001956:	bf00      	nop
 8001958:	bf00      	nop
 800195a:	371c      	adds	r7, #28
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40021000 	.word	0x40021000
 8001968:	40010000 	.word	0x40010000
 800196c:	48000400 	.word	0x48000400
 8001970:	48000800 	.word	0x48000800
 8001974:	48000c00 	.word	0x48000c00
 8001978:	48001000 	.word	0x48001000
 800197c:	48001400 	.word	0x48001400
 8001980:	40010400 	.word	0x40010400

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a0:	e002      	b.n	80019a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a2:	887a      	ldrh	r2, [r7, #2]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b085      	sub	sp, #20
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d141      	bne.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019c2:	4b4b      	ldr	r3, [pc, #300]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019ce:	d131      	bne.n	8001a34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019d0:	4b47      	ldr	r3, [pc, #284]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019d6:	4a46      	ldr	r2, [pc, #280]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019dc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e0:	4b43      	ldr	r3, [pc, #268]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019e8:	4a41      	ldr	r2, [pc, #260]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019f0:	4b40      	ldr	r3, [pc, #256]	@ (8001af4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2232      	movs	r2, #50	@ 0x32
 80019f6:	fb02 f303 	mul.w	r3, r2, r3
 80019fa:	4a3f      	ldr	r2, [pc, #252]	@ (8001af8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001a00:	0c9b      	lsrs	r3, r3, #18
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a06:	e002      	b.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a1a:	d102      	bne.n	8001a22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f2      	bne.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a22:	4b33      	ldr	r3, [pc, #204]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a2e:	d158      	bne.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e057      	b.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a34:	4b2e      	ldr	r3, [pc, #184]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a44:	e04d      	b.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a4c:	d141      	bne.n	8001ad2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a4e:	4b28      	ldr	r3, [pc, #160]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a5a:	d131      	bne.n	8001ac0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a5c:	4b24      	ldr	r3, [pc, #144]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a62:	4a23      	ldr	r2, [pc, #140]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a74:	4a1e      	ldr	r2, [pc, #120]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2232      	movs	r2, #50	@ 0x32
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	0c9b      	lsrs	r3, r3, #18
 8001a8e:	3301      	adds	r3, #1
 8001a90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a92:	e002      	b.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aa6:	d102      	bne.n	8001aae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1f2      	bne.n	8001a94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aae:	4b10      	ldr	r3, [pc, #64]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001aba:	d112      	bne.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e011      	b.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001acc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ad0:	e007      	b.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ad2:	4b07      	ldr	r3, [pc, #28]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ada:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ae0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	40007000 	.word	0x40007000
 8001af4:	20000000 	.word	0x20000000
 8001af8:	431bde83 	.word	0x431bde83

08001afc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0a:	6093      	str	r3, [r2, #8]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40007000 	.word	0x40007000

08001b1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e2fe      	b.n	800212c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d075      	beq.n	8001c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b3a:	4b97      	ldr	r3, [pc, #604]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 030c 	and.w	r3, r3, #12
 8001b42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b44:	4b94      	ldr	r3, [pc, #592]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b0c      	cmp	r3, #12
 8001b52:	d102      	bne.n	8001b5a <HAL_RCC_OscConfig+0x3e>
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d002      	beq.n	8001b60 <HAL_RCC_OscConfig+0x44>
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	2b08      	cmp	r3, #8
 8001b5e:	d10b      	bne.n	8001b78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b60:	4b8d      	ldr	r3, [pc, #564]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d05b      	beq.n	8001c24 <HAL_RCC_OscConfig+0x108>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d157      	bne.n	8001c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e2d9      	b.n	800212c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_OscConfig+0x74>
 8001b82:	4b85      	ldr	r3, [pc, #532]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a84      	ldr	r2, [pc, #528]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	e01d      	b.n	8001bcc <HAL_RCC_OscConfig+0xb0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b98:	d10c      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x98>
 8001b9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	4b7c      	ldr	r3, [pc, #496]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a7b      	ldr	r2, [pc, #492]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e00b      	b.n	8001bcc <HAL_RCC_OscConfig+0xb0>
 8001bb4:	4b78      	ldr	r3, [pc, #480]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a77      	ldr	r2, [pc, #476]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b75      	ldr	r3, [pc, #468]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a74      	ldr	r2, [pc, #464]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d013      	beq.n	8001bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd4:	f7fe fd84 	bl	80006e0 <HAL_GetTick>
 8001bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bda:	e008      	b.n	8001bee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bdc:	f7fe fd80 	bl	80006e0 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	2b64      	cmp	r3, #100	@ 0x64
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e29e      	b.n	800212c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bee:	4b6a      	ldr	r3, [pc, #424]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0f0      	beq.n	8001bdc <HAL_RCC_OscConfig+0xc0>
 8001bfa:	e014      	b.n	8001c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bfc:	f7fe fd70 	bl	80006e0 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7fe fd6c 	bl	80006e0 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	@ 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e28a      	b.n	800212c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c16:	4b60      	ldr	r3, [pc, #384]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1f0      	bne.n	8001c04 <HAL_RCC_OscConfig+0xe8>
 8001c22:	e000      	b.n	8001c26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d075      	beq.n	8001d1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c32:	4b59      	ldr	r3, [pc, #356]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c3c:	4b56      	ldr	r3, [pc, #344]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d102      	bne.n	8001c52 <HAL_RCC_OscConfig+0x136>
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d002      	beq.n	8001c58 <HAL_RCC_OscConfig+0x13c>
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2b04      	cmp	r3, #4
 8001c56:	d11f      	bne.n	8001c98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c58:	4b4f      	ldr	r3, [pc, #316]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_OscConfig+0x154>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e25d      	b.n	800212c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c70:	4b49      	ldr	r3, [pc, #292]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	4946      	ldr	r1, [pc, #280]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c84:	4b45      	ldr	r3, [pc, #276]	@ (8001d9c <HAL_RCC_OscConfig+0x280>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe fcdd 	bl	8000648 <HAL_InitTick>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d043      	beq.n	8001d1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e249      	b.n	800212c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d023      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ca0:	4b3d      	ldr	r3, [pc, #244]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a3c      	ldr	r2, [pc, #240]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001caa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cac:	f7fe fd18 	bl	80006e0 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cb4:	f7fe fd14 	bl	80006e0 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e232      	b.n	800212c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cc6:	4b34      	ldr	r3, [pc, #208]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd2:	4b31      	ldr	r3, [pc, #196]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	061b      	lsls	r3, r3, #24
 8001ce0:	492d      	ldr	r1, [pc, #180]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	604b      	str	r3, [r1, #4]
 8001ce6:	e01a      	b.n	8001d1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a2a      	ldr	r2, [pc, #168]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001cee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7fe fcf4 	bl	80006e0 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfc:	f7fe fcf0 	bl	80006e0 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e20e      	b.n	800212c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d0e:	4b22      	ldr	r3, [pc, #136]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x1e0>
 8001d1a:	e000      	b.n	8001d1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d041      	beq.n	8001dae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01c      	beq.n	8001d6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d32:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001d34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d38:	4a17      	ldr	r2, [pc, #92]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d42:	f7fe fccd 	bl	80006e0 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7fe fcc9 	bl	80006e0 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1e7      	b.n	800212c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001d5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0ef      	beq.n	8001d4a <HAL_RCC_OscConfig+0x22e>
 8001d6a:	e020      	b.n	8001dae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d72:	4a09      	ldr	r2, [pc, #36]	@ (8001d98 <HAL_RCC_OscConfig+0x27c>)
 8001d74:	f023 0301 	bic.w	r3, r3, #1
 8001d78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f7fe fcb0 	bl	80006e0 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d82:	e00d      	b.n	8001da0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d84:	f7fe fcac 	bl	80006e0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d906      	bls.n	8001da0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1ca      	b.n	800212c <HAL_RCC_OscConfig+0x610>
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001da0:	4b8c      	ldr	r3, [pc, #560]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001da2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1ea      	bne.n	8001d84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0304 	and.w	r3, r3, #4
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80a6 	beq.w	8001f08 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dc0:	4b84      	ldr	r3, [pc, #528]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2b4>
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x2b6>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00d      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd6:	4b7f      	ldr	r3, [pc, #508]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dda:	4a7e      	ldr	r2, [pc, #504]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001de2:	4b7c      	ldr	r3, [pc, #496]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df2:	4b79      	ldr	r3, [pc, #484]	@ (8001fd8 <HAL_RCC_OscConfig+0x4bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d118      	bne.n	8001e30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dfe:	4b76      	ldr	r3, [pc, #472]	@ (8001fd8 <HAL_RCC_OscConfig+0x4bc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a75      	ldr	r2, [pc, #468]	@ (8001fd8 <HAL_RCC_OscConfig+0x4bc>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7fe fc69 	bl	80006e0 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e12:	f7fe fc65 	bl	80006e0 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e183      	b.n	800212c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e24:	4b6c      	ldr	r3, [pc, #432]	@ (8001fd8 <HAL_RCC_OscConfig+0x4bc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d108      	bne.n	8001e4a <HAL_RCC_OscConfig+0x32e>
 8001e38:	4b66      	ldr	r3, [pc, #408]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e3e:	4a65      	ldr	r2, [pc, #404]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e48:	e024      	b.n	8001e94 <HAL_RCC_OscConfig+0x378>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b05      	cmp	r3, #5
 8001e50:	d110      	bne.n	8001e74 <HAL_RCC_OscConfig+0x358>
 8001e52:	4b60      	ldr	r3, [pc, #384]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e58:	4a5e      	ldr	r2, [pc, #376]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e62:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e68:	4a5a      	ldr	r2, [pc, #360]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e72:	e00f      	b.n	8001e94 <HAL_RCC_OscConfig+0x378>
 8001e74:	4b57      	ldr	r3, [pc, #348]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7a:	4a56      	ldr	r2, [pc, #344]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e84:	4b53      	ldr	r3, [pc, #332]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8a:	4a52      	ldr	r2, [pc, #328]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001e8c:	f023 0304 	bic.w	r3, r3, #4
 8001e90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d016      	beq.n	8001eca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fc20 	bl	80006e0 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ea2:	e00a      	b.n	8001eba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7fe fc1c 	bl	80006e0 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e138      	b.n	800212c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eba:	4b46      	ldr	r3, [pc, #280]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0ed      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x388>
 8001ec8:	e015      	b.n	8001ef6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eca:	f7fe fc09 	bl	80006e0 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed2:	f7fe fc05 	bl	80006e0 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e121      	b.n	800212c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1ed      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ef6:	7ffb      	ldrb	r3, [r7, #31]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d105      	bne.n	8001f08 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001efc:	4b35      	ldr	r3, [pc, #212]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f00:	4a34      	ldr	r2, [pc, #208]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001f02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f06:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d03c      	beq.n	8001f8e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d01c      	beq.n	8001f56 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001f1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f22:	4a2c      	ldr	r2, [pc, #176]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7fe fbd8 	bl	80006e0 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f34:	f7fe fbd4 	bl	80006e0 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e0f2      	b.n	800212c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f46:	4b23      	ldr	r3, [pc, #140]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001f48:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ef      	beq.n	8001f34 <HAL_RCC_OscConfig+0x418>
 8001f54:	e01b      	b.n	8001f8e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f56:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001f58:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7fe fbbb 	bl	80006e0 <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f6e:	f7fe fbb7 	bl	80006e0 <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e0d5      	b.n	800212c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f80:	4b14      	ldr	r3, [pc, #80]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001f82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1ef      	bne.n	8001f6e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80c9 	beq.w	800212a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f98:	4b0e      	ldr	r3, [pc, #56]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b0c      	cmp	r3, #12
 8001fa2:	f000 8083 	beq.w	80020ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d15e      	bne.n	800206c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a08      	ldr	r2, [pc, #32]	@ (8001fd4 <HAL_RCC_OscConfig+0x4b8>)
 8001fb4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7fe fb91 	bl	80006e0 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc0:	e00c      	b.n	8001fdc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc2:	f7fe fb8d 	bl	80006e0 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d905      	bls.n	8001fdc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e0ab      	b.n	800212c <HAL_RCC_OscConfig+0x610>
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fdc:	4b55      	ldr	r3, [pc, #340]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1ec      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe8:	4b52      	ldr	r3, [pc, #328]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 8001fea:	68da      	ldr	r2, [r3, #12]
 8001fec:	4b52      	ldr	r3, [pc, #328]	@ (8002138 <HAL_RCC_OscConfig+0x61c>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6a11      	ldr	r1, [r2, #32]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ff8:	3a01      	subs	r2, #1
 8001ffa:	0112      	lsls	r2, r2, #4
 8001ffc:	4311      	orrs	r1, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002002:	0212      	lsls	r2, r2, #8
 8002004:	4311      	orrs	r1, r2
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800200a:	0852      	lsrs	r2, r2, #1
 800200c:	3a01      	subs	r2, #1
 800200e:	0552      	lsls	r2, r2, #21
 8002010:	4311      	orrs	r1, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002016:	0852      	lsrs	r2, r2, #1
 8002018:	3a01      	subs	r2, #1
 800201a:	0652      	lsls	r2, r2, #25
 800201c:	4311      	orrs	r1, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002022:	06d2      	lsls	r2, r2, #27
 8002024:	430a      	orrs	r2, r1
 8002026:	4943      	ldr	r1, [pc, #268]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 8002028:	4313      	orrs	r3, r2
 800202a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800202c:	4b41      	ldr	r3, [pc, #260]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a40      	ldr	r2, [pc, #256]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 8002032:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002036:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002038:	4b3e      	ldr	r3, [pc, #248]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	4a3d      	ldr	r2, [pc, #244]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 800203e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002042:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe fb4c 	bl	80006e0 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe fb48 	bl	80006e0 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e066      	b.n	800212c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800205e:	4b35      	ldr	r3, [pc, #212]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0x530>
 800206a:	e05e      	b.n	800212a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206c:	4b31      	ldr	r3, [pc, #196]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a30      	ldr	r2, [pc, #192]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 8002072:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002076:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002078:	f7fe fb32 	bl	80006e0 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002080:	f7fe fb2e 	bl	80006e0 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e04c      	b.n	800212c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002092:	4b28      	ldr	r3, [pc, #160]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d1f0      	bne.n	8002080 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800209e:	4b25      	ldr	r3, [pc, #148]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 80020a0:	68da      	ldr	r2, [r3, #12]
 80020a2:	4924      	ldr	r1, [pc, #144]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 80020a4:	4b25      	ldr	r3, [pc, #148]	@ (800213c <HAL_RCC_OscConfig+0x620>)
 80020a6:	4013      	ands	r3, r2
 80020a8:	60cb      	str	r3, [r1, #12]
 80020aa:	e03e      	b.n	800212a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e039      	b.n	800212c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002134 <HAL_RCC_OscConfig+0x618>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0203 	and.w	r2, r3, #3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d12c      	bne.n	8002126 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	3b01      	subs	r3, #1
 80020d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d123      	bne.n	8002126 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d11b      	bne.n	8002126 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d113      	bne.n	8002126 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002108:	085b      	lsrs	r3, r3, #1
 800210a:	3b01      	subs	r3, #1
 800210c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d109      	bne.n	8002126 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800211c:	085b      	lsrs	r3, r3, #1
 800211e:	3b01      	subs	r3, #1
 8002120:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d001      	beq.n	800212a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e000      	b.n	800212c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800212a:	2300      	movs	r3, #0
}
 800212c:	4618      	mov	r0, r3
 800212e:	3720      	adds	r7, #32
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	40021000 	.word	0x40021000
 8002138:	019f800c 	.word	0x019f800c
 800213c:	feeefffc 	.word	0xfeeefffc

08002140 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e11e      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b91      	ldr	r3, [pc, #580]	@ (80023a0 <HAL_RCC_ClockConfig+0x260>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 030f 	and.w	r3, r3, #15
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d910      	bls.n	8002188 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b8e      	ldr	r3, [pc, #568]	@ (80023a0 <HAL_RCC_ClockConfig+0x260>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 020f 	bic.w	r2, r3, #15
 800216e:	498c      	ldr	r1, [pc, #560]	@ (80023a0 <HAL_RCC_ClockConfig+0x260>)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002176:	4b8a      	ldr	r3, [pc, #552]	@ (80023a0 <HAL_RCC_ClockConfig+0x260>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d001      	beq.n	8002188 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e106      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0301 	and.w	r3, r3, #1
 8002190:	2b00      	cmp	r3, #0
 8002192:	d073      	beq.n	800227c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d129      	bne.n	80021f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219c:	4b81      	ldr	r3, [pc, #516]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0f4      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021ac:	f000 f966 	bl	800247c <RCC_GetSysClockFreqFromPLLSource>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4a7c      	ldr	r2, [pc, #496]	@ (80023a8 <HAL_RCC_ClockConfig+0x268>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d93f      	bls.n	800223a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021ba:	4b7a      	ldr	r3, [pc, #488]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d009      	beq.n	80021da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d033      	beq.n	800223a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d12f      	bne.n	800223a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021da:	4b72      	ldr	r3, [pc, #456]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80021e2:	4a70      	ldr	r2, [pc, #448]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80021e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021ea:	2380      	movs	r3, #128	@ 0x80
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	e024      	b.n	800223a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f8:	4b6a      	ldr	r3, [pc, #424]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d109      	bne.n	8002218 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0c6      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002208:	4b66      	ldr	r3, [pc, #408]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0be      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002218:	f000 f8ce 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 800221c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4a61      	ldr	r2, [pc, #388]	@ (80023a8 <HAL_RCC_ClockConfig+0x268>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d909      	bls.n	800223a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002226:	4b5f      	ldr	r3, [pc, #380]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800222e:	4a5d      	ldr	r2, [pc, #372]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002230:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002234:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002236:	2380      	movs	r3, #128	@ 0x80
 8002238:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800223a:	4b5a      	ldr	r3, [pc, #360]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f023 0203 	bic.w	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4957      	ldr	r1, [pc, #348]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002248:	4313      	orrs	r3, r2
 800224a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800224c:	f7fe fa48 	bl	80006e0 <HAL_GetTick>
 8002250:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	e00a      	b.n	800226a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002254:	f7fe fa44 	bl	80006e0 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002262:	4293      	cmp	r3, r2
 8002264:	d901      	bls.n	800226a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e095      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226a:	4b4e      	ldr	r3, [pc, #312]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f003 020c 	and.w	r2, r3, #12
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	429a      	cmp	r2, r3
 800227a:	d1eb      	bne.n	8002254 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d023      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002294:	4b43      	ldr	r3, [pc, #268]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a42      	ldr	r2, [pc, #264]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 800229a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800229e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0308 	and.w	r3, r3, #8
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022ac:	4b3d      	ldr	r3, [pc, #244]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80022b4:	4a3b      	ldr	r2, [pc, #236]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80022b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80022ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b39      	ldr	r3, [pc, #228]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	4936      	ldr	r1, [pc, #216]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b80      	cmp	r3, #128	@ 0x80
 80022d4:	d105      	bne.n	80022e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022d6:	4b33      	ldr	r3, [pc, #204]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	4a32      	ldr	r2, [pc, #200]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 80022dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80022e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e2:	4b2f      	ldr	r3, [pc, #188]	@ (80023a0 <HAL_RCC_ClockConfig+0x260>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d21d      	bcs.n	800232c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f0:	4b2b      	ldr	r3, [pc, #172]	@ (80023a0 <HAL_RCC_ClockConfig+0x260>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f023 020f 	bic.w	r2, r3, #15
 80022f8:	4929      	ldr	r1, [pc, #164]	@ (80023a0 <HAL_RCC_ClockConfig+0x260>)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002300:	f7fe f9ee 	bl	80006e0 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002306:	e00a      	b.n	800231e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002308:	f7fe f9ea 	bl	80006e0 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002316:	4293      	cmp	r3, r2
 8002318:	d901      	bls.n	800231e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e03b      	b.n	8002396 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <HAL_RCC_ClockConfig+0x260>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d1ed      	bne.n	8002308 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	4b1a      	ldr	r3, [pc, #104]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4917      	ldr	r1, [pc, #92]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0308 	and.w	r3, r3, #8
 8002352:	2b00      	cmp	r3, #0
 8002354:	d009      	beq.n	800236a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002356:	4b13      	ldr	r3, [pc, #76]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	490f      	ldr	r1, [pc, #60]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002366:	4313      	orrs	r3, r2
 8002368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800236a:	f000 f825 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 800236e:	4602      	mov	r2, r0
 8002370:	4b0c      	ldr	r3, [pc, #48]	@ (80023a4 <HAL_RCC_ClockConfig+0x264>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	490c      	ldr	r1, [pc, #48]	@ (80023ac <HAL_RCC_ClockConfig+0x26c>)
 800237c:	5ccb      	ldrb	r3, [r1, r3]
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <HAL_RCC_ClockConfig+0x270>)
 8002388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800238a:	4b0a      	ldr	r3, [pc, #40]	@ (80023b4 <HAL_RCC_ClockConfig+0x274>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f95a 	bl	8000648 <HAL_InitTick>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40022000 	.word	0x40022000
 80023a4:	40021000 	.word	0x40021000
 80023a8:	04c4b400 	.word	0x04c4b400
 80023ac:	08005000 	.word	0x08005000
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b087      	sub	sp, #28
 80023bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023be:	4b2c      	ldr	r3, [pc, #176]	@ (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d102      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002474 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	e047      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023d0:	4b27      	ldr	r3, [pc, #156]	@ (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023dc:	4b26      	ldr	r3, [pc, #152]	@ (8002478 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023de:	613b      	str	r3, [r7, #16]
 80023e0:	e03e      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023e2:	4b23      	ldr	r3, [pc, #140]	@ (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b0c      	cmp	r3, #12
 80023ec:	d136      	bne.n	800245c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ee:	4b20      	ldr	r3, [pc, #128]	@ (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3301      	adds	r3, #1
 8002404:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b03      	cmp	r3, #3
 800240a:	d10c      	bne.n	8002426 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800240c:	4a1a      	ldr	r2, [pc, #104]	@ (8002478 <HAL_RCC_GetSysClockFreq+0xc0>)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	fbb2 f3f3 	udiv	r3, r2, r3
 8002414:	4a16      	ldr	r2, [pc, #88]	@ (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002416:	68d2      	ldr	r2, [r2, #12]
 8002418:	0a12      	lsrs	r2, r2, #8
 800241a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800241e:	fb02 f303 	mul.w	r3, r2, r3
 8002422:	617b      	str	r3, [r7, #20]
      break;
 8002424:	e00c      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002426:	4a13      	ldr	r2, [pc, #76]	@ (8002474 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	4a10      	ldr	r2, [pc, #64]	@ (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002430:	68d2      	ldr	r2, [r2, #12]
 8002432:	0a12      	lsrs	r2, r2, #8
 8002434:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002438:	fb02 f303 	mul.w	r3, r2, r3
 800243c:	617b      	str	r3, [r7, #20]
      break;
 800243e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002440:	4b0b      	ldr	r3, [pc, #44]	@ (8002470 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	0e5b      	lsrs	r3, r3, #25
 8002446:	f003 0303 	and.w	r3, r3, #3
 800244a:	3301      	adds	r3, #1
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	fbb2 f3f3 	udiv	r3, r2, r3
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	e001      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002460:	693b      	ldr	r3, [r7, #16]
}
 8002462:	4618      	mov	r0, r3
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	00f42400 	.word	0x00f42400
 8002478:	016e3600 	.word	0x016e3600

0800247c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002482:	4b1e      	ldr	r3, [pc, #120]	@ (80024fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800248c:	4b1b      	ldr	r3, [pc, #108]	@ (80024fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	3301      	adds	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d10c      	bne.n	80024ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024a0:	4a17      	ldr	r2, [pc, #92]	@ (8002500 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a8:	4a14      	ldr	r2, [pc, #80]	@ (80024fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024aa:	68d2      	ldr	r2, [r2, #12]
 80024ac:	0a12      	lsrs	r2, r2, #8
 80024ae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	617b      	str	r3, [r7, #20]
    break;
 80024b8:	e00c      	b.n	80024d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ba:	4a12      	ldr	r2, [pc, #72]	@ (8002504 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4a0e      	ldr	r2, [pc, #56]	@ (80024fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024c4:	68d2      	ldr	r2, [r2, #12]
 80024c6:	0a12      	lsrs	r2, r2, #8
 80024c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80024cc:	fb02 f303 	mul.w	r3, r2, r3
 80024d0:	617b      	str	r3, [r7, #20]
    break;
 80024d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024d4:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	0e5b      	lsrs	r3, r3, #25
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	3301      	adds	r3, #1
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024ee:	687b      	ldr	r3, [r7, #4]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	371c      	adds	r7, #28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	40021000 	.word	0x40021000
 8002500:	016e3600 	.word	0x016e3600
 8002504:	00f42400 	.word	0x00f42400

08002508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002510:	2300      	movs	r3, #0
 8002512:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002514:	2300      	movs	r3, #0
 8002516:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002520:	2b00      	cmp	r3, #0
 8002522:	f000 8098 	beq.w	8002656 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002526:	2300      	movs	r3, #0
 8002528:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252a:	4b43      	ldr	r3, [pc, #268]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10d      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	4b40      	ldr	r3, [pc, #256]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253a:	4a3f      	ldr	r2, [pc, #252]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002540:	6593      	str	r3, [r2, #88]	@ 0x58
 8002542:	4b3d      	ldr	r3, [pc, #244]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254e:	2301      	movs	r3, #1
 8002550:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002552:	4b3a      	ldr	r3, [pc, #232]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a39      	ldr	r2, [pc, #228]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002558:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800255c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800255e:	f7fe f8bf 	bl	80006e0 <HAL_GetTick>
 8002562:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002564:	e009      	b.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002566:	f7fe f8bb 	bl	80006e0 <HAL_GetTick>
 800256a:	4602      	mov	r2, r0
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	1ad3      	subs	r3, r2, r3
 8002570:	2b02      	cmp	r3, #2
 8002572:	d902      	bls.n	800257a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	74fb      	strb	r3, [r7, #19]
        break;
 8002578:	e005      	b.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800257a:	4b30      	ldr	r3, [pc, #192]	@ (800263c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0ef      	beq.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d159      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800258c:	4b2a      	ldr	r3, [pc, #168]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002596:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d01e      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d019      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80025a8:	4b23      	ldr	r3, [pc, #140]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025b4:	4b20      	ldr	r3, [pc, #128]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ca:	4a1b      	ldr	r2, [pc, #108]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025d4:	4a18      	ldr	r2, [pc, #96]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d016      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e6:	f7fe f87b 	bl	80006e0 <HAL_GetTick>
 80025ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ec:	e00b      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ee:	f7fe f877 	bl	80006e0 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d902      	bls.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	74fb      	strb	r3, [r7, #19]
            break;
 8002604:	e006      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002606:	4b0c      	ldr	r3, [pc, #48]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002608:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0ec      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002614:	7cfb      	ldrb	r3, [r7, #19]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10b      	bne.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800261a:	4b07      	ldr	r3, [pc, #28]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800261c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002620:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002628:	4903      	ldr	r1, [pc, #12]	@ (8002638 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800262a:	4313      	orrs	r3, r2
 800262c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002630:	e008      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	74bb      	strb	r3, [r7, #18]
 8002636:	e005      	b.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002638:	40021000 	.word	0x40021000
 800263c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002644:	7c7b      	ldrb	r3, [r7, #17]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d105      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264a:	4ba7      	ldr	r3, [pc, #668]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800264c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264e:	4aa6      	ldr	r2, [pc, #664]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002654:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002662:	4ba1      	ldr	r3, [pc, #644]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002668:	f023 0203 	bic.w	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	499d      	ldr	r1, [pc, #628]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002684:	4b98      	ldr	r3, [pc, #608]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268a:	f023 020c 	bic.w	r2, r3, #12
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	4995      	ldr	r1, [pc, #596]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026a6:	4b90      	ldr	r3, [pc, #576]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	498c      	ldr	r1, [pc, #560]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0308 	and.w	r3, r3, #8
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026c8:	4b87      	ldr	r3, [pc, #540]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	4984      	ldr	r1, [pc, #528]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0310 	and.w	r3, r3, #16
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026ea:	4b7f      	ldr	r3, [pc, #508]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	497b      	ldr	r1, [pc, #492]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800270c:	4b76      	ldr	r3, [pc, #472]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002712:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	4973      	ldr	r1, [pc, #460]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800272e:	4b6e      	ldr	r3, [pc, #440]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002734:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
 800273c:	496a      	ldr	r1, [pc, #424]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002750:	4b65      	ldr	r3, [pc, #404]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002756:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4962      	ldr	r1, [pc, #392]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002772:	4b5d      	ldr	r3, [pc, #372]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002778:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	4959      	ldr	r1, [pc, #356]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002794:	4b54      	ldr	r3, [pc, #336]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002796:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800279a:	f023 0203 	bic.w	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a2:	4951      	ldr	r1, [pc, #324]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027b6:	4b4c      	ldr	r3, [pc, #304]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c4:	4948      	ldr	r1, [pc, #288]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027d8:	4b43      	ldr	r3, [pc, #268]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e6:	4940      	ldr	r1, [pc, #256]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027f6:	d105      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f8:	4b3b      	ldr	r3, [pc, #236]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a3a      	ldr	r2, [pc, #232]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002802:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800280c:	2b00      	cmp	r3, #0
 800280e:	d015      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002810:	4b35      	ldr	r3, [pc, #212]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002816:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800281e:	4932      	ldr	r1, [pc, #200]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800282a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800282e:	d105      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b2d      	ldr	r3, [pc, #180]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a2c      	ldr	r2, [pc, #176]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800283a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d015      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002848:	4b27      	ldr	r3, [pc, #156]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002856:	4924      	ldr	r1, [pc, #144]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002858:	4313      	orrs	r3, r2
 800285a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002862:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002866:	d105      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002868:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	4a1e      	ldr	r2, [pc, #120]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002872:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002880:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002886:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288e:	4916      	ldr	r1, [pc, #88]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002890:	4313      	orrs	r3, r2
 8002892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800289e:	d105      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028a0:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a10      	ldr	r2, [pc, #64]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d019      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028b8:	4b0b      	ldr	r3, [pc, #44]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c6:	4908      	ldr	r1, [pc, #32]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80028d6:	d109      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028d8:	4b03      	ldr	r3, [pc, #12]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4a02      	ldr	r2, [pc, #8]	@ (80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028e2:	60d3      	str	r3, [r2, #12]
 80028e4:	e002      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d015      	beq.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028f8:	4b29      	ldr	r3, [pc, #164]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	4926      	ldr	r1, [pc, #152]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002916:	d105      	bne.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002918:	4b21      	ldr	r3, [pc, #132]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	4a20      	ldr	r2, [pc, #128]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800291e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002922:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d015      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002930:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002936:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800293e:	4918      	ldr	r1, [pc, #96]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002940:	4313      	orrs	r3, r2
 8002942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800294e:	d105      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002950:	4b13      	ldr	r3, [pc, #76]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002956:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800295a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d015      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002968:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800296a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800296e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002976:	490a      	ldr	r1, [pc, #40]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002978:	4313      	orrs	r3, r2
 800297a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002982:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002986:	d105      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	4a04      	ldr	r2, [pc, #16]	@ (80029a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800298e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002992:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002994:	7cbb      	ldrb	r3, [r7, #18]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3718      	adds	r7, #24
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40021000 	.word	0x40021000

080029a4 <HAL_FDCAN_RxFifo0Callback>:
uint8_t canard_memory_pool[1024];
CanardInstance canard;
struct hyp_msg_BatteryStatus_Hyp req;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t filterIndex)
{
 80029a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a8:	b092      	sub	sp, #72	@ 0x48
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
 80029ae:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 80029b0:	f107 0318 	add.w	r3, r7, #24
 80029b4:	f107 0220 	add.w	r2, r7, #32
 80029b8:	2140      	movs	r1, #64	@ 0x40
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe f9ee 	bl	8000d9c <HAL_FDCAN_GetRxMessage>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d155      	bne.n	8002a72 <HAL_FDCAN_RxFifo0Callback+0xce>
			return;
	CanardCANFrame frame;
	frame.id = rxHeader.Identifier;
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	60bb      	str	r3, [r7, #8]
	if (rxHeader.IdType == FDCAN_EXTENDED_ID)
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d0:	d103      	bne.n	80029da <HAL_FDCAN_RxFifo0Callback+0x36>
			frame.id |= (1UL << 31); // set extended bit
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80029d8:	60bb      	str	r3, [r7, #8]
	frame.data_len = rxHeader.DataLength;
 80029da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	753b      	strb	r3, [r7, #20]
	if (frame.data_len > 8) frame.data_len = 8;
 80029e0:	7d3b      	ldrb	r3, [r7, #20]
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d901      	bls.n	80029ea <HAL_FDCAN_RxFifo0Callback+0x46>
 80029e6:	2308      	movs	r3, #8
 80029e8:	753b      	strb	r3, [r7, #20]

	memcpy(frame.data, rxData, frame.data_len);
 80029ea:	7d3b      	ldrb	r3, [r7, #20]
 80029ec:	461a      	mov	r2, r3
 80029ee:	f107 0118 	add.w	r1, r7, #24
 80029f2:	f107 0308 	add.w	r3, r7, #8
 80029f6:	3304      	adds	r3, #4
 80029f8:	4618      	mov	r0, r3
 80029fa:	f002 fad9 	bl	8004fb0 <memcpy>
	frame.iface_id = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	757b      	strb	r3, [r7, #21]

	canardHandleRxFrame(&canard, &frame, HAL_GetTick() * 1000ULL);
 8002a02:	f7fd fe6d 	bl	80006e0 <HAL_GetTick>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4698      	mov	r8, r3
 8002a0c:	4691      	mov	r9, r2
 8002a0e:	4642      	mov	r2, r8
 8002a10:	464b      	mov	r3, r9
 8002a12:	f04f 0000 	mov.w	r0, #0
 8002a16:	f04f 0100 	mov.w	r1, #0
 8002a1a:	0159      	lsls	r1, r3, #5
 8002a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a20:	0150      	lsls	r0, r2, #5
 8002a22:	4602      	mov	r2, r0
 8002a24:	460b      	mov	r3, r1
 8002a26:	ebb2 0408 	subs.w	r4, r2, r8
 8002a2a:	eb63 0509 	sbc.w	r5, r3, r9
 8002a2e:	f04f 0200 	mov.w	r2, #0
 8002a32:	f04f 0300 	mov.w	r3, #0
 8002a36:	00ab      	lsls	r3, r5, #2
 8002a38:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002a3c:	00a2      	lsls	r2, r4, #2
 8002a3e:	4614      	mov	r4, r2
 8002a40:	461d      	mov	r5, r3
 8002a42:	eb14 0a08 	adds.w	sl, r4, r8
 8002a46:	eb45 0b09 	adc.w	fp, r5, r9
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a56:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a5e:	4692      	mov	sl, r2
 8002a60:	469b      	mov	fp, r3
 8002a62:	4652      	mov	r2, sl
 8002a64:	465b      	mov	r3, fp
 8002a66:	f107 0108 	add.w	r1, r7, #8
 8002a6a:	4804      	ldr	r0, [pc, #16]	@ (8002a7c <HAL_FDCAN_RxFifo0Callback+0xd8>)
 8002a6c:	f000 faac 	bl	8002fc8 <canardHandleRxFrame>
 8002a70:	e000      	b.n	8002a74 <HAL_FDCAN_RxFifo0Callback+0xd0>
			return;
 8002a72:	bf00      	nop
}
 8002a74:	3748      	adds	r7, #72	@ 0x48
 8002a76:	46bd      	mov	sp, r7
 8002a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a7c:	20000494 	.word	0x20000494

08002a80 <should_accept>:

bool should_accept(const CanardInstance* ins, uint64_t* out_sig, uint16_t data_type_id,
                   CanardTransferType transfer_type, uint8_t source_node_id) {
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	460b      	mov	r3, r1
 8002a90:	80fb      	strh	r3, [r7, #6]
 8002a92:	4613      	mov	r3, r2
 8002a94:	717b      	strb	r3, [r7, #5]
    if (data_type_id == 232 && transfer_type == CanardTransferTypeRequest) {
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	2be8      	cmp	r3, #232	@ 0xe8
 8002a9a:	d10a      	bne.n	8002ab2 <should_accept+0x32>
 8002a9c:	797b      	ldrb	r3, [r7, #5]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d107      	bne.n	8002ab2 <should_accept+0x32>
        *out_sig = HYP_MSG_BATTERYSTATUS_HYP_SIGNATURE;
 8002aa2:	68b9      	ldr	r1, [r7, #8]
 8002aa4:	a306      	add	r3, pc, #24	@ (adr r3, 8002ac0 <should_accept+0x40>)
 8002aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aaa:	e9c1 2300 	strd	r2, r3, [r1]
        return true;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <should_accept+0x34>
    }
    return false;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	fa81025f 	.word	0xfa81025f
 8002ac4:	cf2a3806 	.word	0xcf2a3806

08002ac8 <on_reception>:

void on_reception(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b0ac      	sub	sp, #176	@ 0xb0
 8002acc:	af06      	add	r7, sp, #24
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
	if (transfer->data_type_id == 232 && transfer->transfer_type == CanardTransferTypeRequest)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	8adb      	ldrh	r3, [r3, #22]
 8002ad6:	2be8      	cmp	r3, #232	@ 0xe8
 8002ad8:	d14b      	bne.n	8002b72 <on_reception+0xaa>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	7e1b      	ldrb	r3, [r3, #24]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d147      	bne.n	8002b72 <on_reception+0xaa>
	{
		hyp_msg_BatteryStatus_Hyp_decode(transfer,&req);
 8002ae2:	4929      	ldr	r1, [pc, #164]	@ (8002b88 <on_reception+0xc0>)
 8002ae4:	6838      	ldr	r0, [r7, #0]
 8002ae6:	f002 fa01 	bl	8004eec <hyp_msg_BatteryStatus_Hyp_decode>
		if (strncmp((char*)req.name.data, "Get_batt", req.name.len) == 0)
 8002aea:	4b27      	ldr	r3, [pc, #156]	@ (8002b88 <on_reception+0xc0>)
 8002aec:	7bdb      	ldrb	r3, [r3, #15]
 8002aee:	461a      	mov	r2, r3
 8002af0:	4926      	ldr	r1, [pc, #152]	@ (8002b8c <on_reception+0xc4>)
 8002af2:	4827      	ldr	r0, [pc, #156]	@ (8002b90 <on_reception+0xc8>)
 8002af4:	f002 fa26 	bl	8004f44 <strncmp>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d139      	bne.n	8002b72 <on_reception+0xaa>
		{
			struct hyp_msg_BatteryStatus_Hyp value;
			value.current = 4;
 8002afe:	2304      	movs	r3, #4
 8002b00:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
			value.voltage = 22;
 8002b04:	2316      	movs	r3, #22
 8002b06:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
			value.name.len = strlen("HYPMOTION_BATT1");
 8002b0a:	230f      	movs	r3, #15
 8002b0c:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			memcpy(value.name.data, "HYPMOTION_BATT1", value.name.len);
 8002b10:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002b14:	461a      	mov	r2, r3
 8002b16:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b1a:	3310      	adds	r3, #16
 8002b1c:	491d      	ldr	r1, [pc, #116]	@ (8002b94 <on_reception+0xcc>)
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f002 fa46 	bl	8004fb0 <memcpy>
			uint8_t buffer[HYP_MSG_BATTERYSTATUS_HYP_MAX_SIZE];
			uint32_t len = hyp_msg_BatteryStatus_Hyp_encode(&value, buffer
 8002b24:	f107 0208 	add.w	r2, r7, #8
 8002b28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f002 f9c2 	bl	8004eb8 <hyp_msg_BatteryStatus_Hyp_encode>
 8002b34:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
#if CANARD_ENABLE_TAO_OPTION
		, true
#endif
		    );
			uint8_t tid = transfer->transfer_id;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	7e5b      	ldrb	r3, [r3, #25]
 8002b3c:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
			canardRequestOrRespond(&canard, transfer->source_node_id,
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	7ed9      	ldrb	r1, [r3, #27]
 8002b44:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	9305      	str	r3, [sp, #20]
 8002b4c:	f107 0308 	add.w	r3, r7, #8
 8002b50:	9304      	str	r3, [sp, #16]
 8002b52:	2300      	movs	r3, #0
 8002b54:	9303      	str	r3, [sp, #12]
 8002b56:	2318      	movs	r3, #24
 8002b58:	9302      	str	r3, [sp, #8]
 8002b5a:	f107 0393 	add.w	r3, r7, #147	@ 0x93
 8002b5e:	9301      	str	r3, [sp, #4]
 8002b60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	a306      	add	r3, pc, #24	@ (adr r3, 8002b80 <on_reception+0xb8>)
 8002b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6c:	480a      	ldr	r0, [pc, #40]	@ (8002b98 <on_reception+0xd0>)
 8002b6e:	f000 f97b 	bl	8002e68 <canardRequestOrRespond>
					HYP_MSG_BATTERYSTATUS_HYP_ID,
					&tid, CANARD_TRANSFER_PRIORITY_LOW,
					CanardResponse, buffer, len);
		}
	}
}
 8002b72:	bf00      	nop
 8002b74:	3798      	adds	r7, #152	@ 0x98
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	f3af 8000 	nop.w
 8002b80:	fa81025f 	.word	0xfa81025f
 8002b84:	cf2a3806 	.word	0xcf2a3806
 8002b88:	200004c0 	.word	0x200004c0
 8002b8c:	08004fe4 	.word	0x08004fe4
 8002b90:	200004d0 	.word	0x200004d0
 8002b94:	08004ff0 	.word	0x08004ff0
 8002b98:	20000494 	.word	0x20000494

08002b9c <config_fdcan_filter_all>:
static void config_fdcan_filter_all(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
    FDCAN_FilterTypeDef sFilterConfig;

    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002baa:	2302      	movs	r3, #2
 8002bac:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x000;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x000;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(fdcan_src, &sFilterConfig) != HAL_OK)
 8002bba:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <config_fdcan_filter_all+0x70>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	463a      	mov	r2, r7
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe f824 	bl	8000c10 <HAL_FDCAN_ConfigFilter>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <config_fdcan_filter_all+0x36>
    {
        Error_Handler();
 8002bce:	f7fd fc0f 	bl	80003f0 <Error_Handler>
    }

    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8002bd2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002bd6:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 1;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002be0:	2301      	movs	r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x00000000;
 8002be4:	2300      	movs	r3, #0
 8002be6:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x00000000;
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(fdcan_src, &sFilterConfig) != HAL_OK)
 8002bec:	4b07      	ldr	r3, [pc, #28]	@ (8002c0c <config_fdcan_filter_all+0x70>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	463a      	mov	r2, r7
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7fe f80b 	bl	8000c10 <HAL_FDCAN_ConfigFilter>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <config_fdcan_filter_all+0x68>
    {
        Error_Handler();
 8002c00:	f7fd fbf6 	bl	80003f0 <Error_Handler>
    }
}
 8002c04:	bf00      	nop
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000090 	.word	0x20000090

08002c10 <FDCan_tx_frame>:

static void FDCan_tx_frame(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	@ 0x28
 8002c14:	af00      	add	r7, sp, #0
    const CanardCANFrame* txf;
    while ((txf = canardPeekTxQueue(&canard)) != NULL)
 8002c16:	e02b      	b.n	8002c70 <FDCan_tx_frame+0x60>
    {
    	FDCAN_TxHeaderTypeDef txHeader;
        if ((fdcan_src->Instance->TXFQS & FDCAN_TXFQS_TFQF) == 0) // TX FIFO not full
 8002c18:	4b1e      	ldr	r3, [pc, #120]	@ (8002c94 <FDCan_tx_frame+0x84>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002c22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d12a      	bne.n	8002c80 <FDCan_tx_frame+0x70>
        {
            txHeader.Identifier = txf->id & 0x1FFFFFFF;
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8002c32:	603b      	str	r3, [r7, #0]
            txHeader.IdType = FDCAN_EXTENDED_ID;
 8002c34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c38:	607b      	str	r3, [r7, #4]
            txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60bb      	str	r3, [r7, #8]
            txHeader.DataLength = txf->data_len;
 8002c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c40:	7b1b      	ldrb	r3, [r3, #12]
 8002c42:	60fb      	str	r3, [r7, #12]
            txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
            txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
            txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61fb      	str	r3, [r7, #28]
            txHeader.MessageMarker = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	623b      	str	r3, [r7, #32]

            if (HAL_FDCAN_AddMessageToTxFifoQ(fdcan_src, &txHeader, (uint8_t*)txf->data) == HAL_OK)
 8002c54:	4b0f      	ldr	r3, [pc, #60]	@ (8002c94 <FDCan_tx_frame+0x84>)
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	1d1a      	adds	r2, r3, #4
 8002c5c:	463b      	mov	r3, r7
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f7fe f858 	bl	8000d14 <HAL_FDCAN_AddMessageToTxFifoQ>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10c      	bne.n	8002c84 <FDCan_tx_frame+0x74>
            {
                canardPopTxQueue(&canard);
 8002c6a:	480b      	ldr	r0, [pc, #44]	@ (8002c98 <FDCan_tx_frame+0x88>)
 8002c6c:	f000 f996 	bl	8002f9c <canardPopTxQueue>
    while ((txf = canardPeekTxQueue(&canard)) != NULL)
 8002c70:	4809      	ldr	r0, [pc, #36]	@ (8002c98 <FDCan_tx_frame+0x88>)
 8002c72:	f000 f980 	bl	8002f76 <canardPeekTxQueue>
 8002c76:	6278      	str	r0, [r7, #36]	@ 0x24
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1cc      	bne.n	8002c18 <FDCan_tx_frame+0x8>
 8002c7e:	e002      	b.n	8002c86 <FDCan_tx_frame+0x76>
                break;
            }
        }
        else
        {
            break;
 8002c80:	bf00      	nop
 8002c82:	e000      	b.n	8002c86 <FDCan_tx_frame+0x76>
                break;
 8002c84:	bf00      	nop
        }
    }
    HAL_Delay(1);
 8002c86:	2001      	movs	r0, #1
 8002c88:	f7fd fd36 	bl	80006f8 <HAL_Delay>
}
 8002c8c:	bf00      	nop
 8002c8e:	3728      	adds	r7, #40	@ 0x28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	20000090 	.word	0x20000090
 8002c98:	20000494 	.word	0x20000494

08002c9c <FDCan_Init>:

void FDCan_Init(FDCAN_HandleTypeDef* fdcan)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af02      	add	r7, sp, #8
 8002ca2:	6078      	str	r0, [r7, #4]
    fdcan_src = fdcan;
 8002ca4:	4a11      	ldr	r2, [pc, #68]	@ (8002cec <FDCan_Init+0x50>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]

    // Init CAN hardware
    HAL_FDCAN_Start(fdcan_src);
 8002caa:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <FDCan_Init+0x50>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fe f808 	bl	8000cc4 <HAL_FDCAN_Start>
    HAL_FDCAN_ActivateNotification(fdcan_src, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	@ (8002cec <FDCan_Init+0x50>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fe f975 	bl	8000fac <HAL_FDCAN_ActivateNotification>
    config_fdcan_filter_all();
 8002cc2:	f7ff ff6b 	bl	8002b9c <config_fdcan_filter_all>

    // Init libcanard
    canardInit(&canard,
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	4b09      	ldr	r3, [pc, #36]	@ (8002cf0 <FDCan_Init+0x54>)
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <FDCan_Init+0x58>)
 8002cd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cd4:	4908      	ldr	r1, [pc, #32]	@ (8002cf8 <FDCan_Init+0x5c>)
 8002cd6:	4809      	ldr	r0, [pc, #36]	@ (8002cfc <FDCan_Init+0x60>)
 8002cd8:	f000 f818 	bl	8002d0c <canardInit>
				canard_memory_pool,
				sizeof(canard_memory_pool),
				on_reception,
				should_accept,
				NULL);
    canardSetLocalNodeID(&canard, 11);
 8002cdc:	210b      	movs	r1, #11
 8002cde:	4807      	ldr	r0, [pc, #28]	@ (8002cfc <FDCan_Init+0x60>)
 8002ce0:	f000 f848 	bl	8002d74 <canardSetLocalNodeID>
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	20000090 	.word	0x20000090
 8002cf0:	08002a81 	.word	0x08002a81
 8002cf4:	08002ac9 	.word	0x08002ac9
 8002cf8:	20000094 	.word	0x20000094
 8002cfc:	20000494 	.word	0x20000494

08002d00 <FDCan_Handle>:

void FDCan_Handle(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
	FDCan_tx_frame();
 8002d04:	f7ff ff84 	bl	8002c10 <FDCan_tx_frame>
}
 8002d08:	bf00      	nop
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 8002d1a:	222c      	movs	r2, #44	@ 0x2c
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f002 f908 	bl	8004f34 <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a3a      	ldr	r2, [r7, #32]
 8002d34:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d46:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d54:	d302      	bcc.n	8002d5c <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 8002d56:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002d5a:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	330c      	adds	r3, #12
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	b292      	uxth	r2, r2
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f001 fe73 	bl	8004a52 <initPoolAllocator>
}
 8002d6c:	bf00      	nop
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <canardSetLocalNodeID+0x28>
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d006      	beq.n	8002d9c <canardSetLocalNodeID+0x28>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 8002d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db02      	blt.n	8002d9c <canardSetLocalNodeID+0x28>
    {
        ins->node_id = self_node_id;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	781b      	ldrb	r3, [r3, #0]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 8002dca:	683b      	ldr	r3, [r7, #0]
#endif
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 8002de2:	683b      	ldr	r3, [r7, #0]
#endif
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 8002dfa:	683b      	ldr	r3, [r7, #0]
#endif
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <canardRxToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)rx;
 8002e12:	683b      	ldr	r3, [r7, #0]
#endif
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <calculateCRC>:

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 8002e28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e2c:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8c1b      	ldrh	r3, [r3, #32]
 8002e32:	2b07      	cmp	r3, #7
 8002e34:	d913      	bls.n	8002e5e <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e3c:	89f9      	ldrh	r1, [r7, #14]
 8002e3e:	4608      	mov	r0, r1
 8002e40:	f001 fdbb 	bl	80049ba <crcAddSignature>
 8002e44:	4603      	mov	r3, r0
 8002e46:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69d9      	ldr	r1, [r3, #28]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8c1b      	ldrh	r3, [r3, #32]
 8002e50:	461a      	mov	r2, r3
 8002e52:	89fb      	ldrh	r3, [r7, #14]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f001 fddf 	bl	8004a18 <crcAdd>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 8002e5e:	89fb      	ldrh	r3, [r7, #14]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b08e      	sub	sp, #56	@ 0x38
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	e9c7 2300 	strd	r2, r3, [r7]
 8002e74:	460b      	mov	r3, r1
 8002e76:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 8002e78:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	bf0c      	ite	eq
 8002e80:	2301      	moveq	r3, #1
 8002e82:	2300      	movne	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 8002e86:	743b      	strb	r3, [r7, #16]
 8002e88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002e90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e94:	843b      	strh	r3, [r7, #32]
 8002e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e9a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002e9e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002eaa:	863b      	strh	r3, [r7, #48]	@ 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 8002eac:	f107 0210 	add.w	r2, r7, #16
 8002eb0:	7afb      	ldrb	r3, [r7, #11]
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 f805 	bl	8002ec4 <canardRequestOrRespondObj>
 8002eba:	4603      	mov	r3, r0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3738      	adds	r7, #56	@ 0x38
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 8002ec4:	b590      	push	{r4, r7, lr}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d106      	bne.n	8002ee8 <canardRequestOrRespondObj+0x24>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	8c1b      	ldrh	r3, [r3, #32]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8002ee2:	f06f 0301 	mvn.w	r3, #1
 8002ee6:	e042      	b.n	8002f6e <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	7e1b      	ldrb	r3, [r3, #24]
 8002eec:	2b1f      	cmp	r3, #31
 8002eee:	d902      	bls.n	8002ef6 <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8002ef0:	f06f 0301 	mvn.w	r3, #1
 8002ef4:	e03b      	b.n	8002f6e <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff ff56 	bl	8002da8 <canardGetLocalNodeID>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d102      	bne.n	8002f08 <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8002f02:	f06f 0303 	mvn.w	r3, #3
 8002f06:	e032      	b.n	8002f6e <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7e1b      	ldrb	r3, [r3, #24]
 8002f0c:	061a      	lsls	r2, r3, #24
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8a1b      	ldrh	r3, [r3, #16]
 8002f12:	041b      	lsls	r3, r3, #16
 8002f14:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8002f1c:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8002f1e:	7afb      	ldrb	r3, [r7, #11]
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff ff3e 	bl	8002da8 <canardGetLocalNodeID>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8002f30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f34:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff ff72 	bl	8002e20 <calculateCRC>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8002f40:	8a7a      	ldrh	r2, [r7, #18]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6979      	ldr	r1, [r7, #20]
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 ff2e 	bl	8003da8 <enqueueTxFrames>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 8002f50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	dd08      	ble.n	8002f6a <canardRequestOrRespondObj+0xa6>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d104      	bne.n	8002f6a <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 feaa 	bl	8003cbe <incrementTransferID>
    }

    return result;
 8002f6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd90      	pop	{r4, r7, pc}

08002f76 <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <canardPeekTxQueue+0x14>
    {
        return NULL;
 8002f86:	2300      	movs	r3, #0
 8002f88:	e002      	b.n	8002f90 <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	3304      	adds	r3, #4
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa8:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f001 fdaa 	bl	8004b12 <freeBlock>
}
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8002fc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fcc:	b09f      	sub	sp, #124	@ 0x7c
 8002fce:	af02      	add	r7, sp, #8
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 f90d 	bl	80041fc <extractTransferType>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8002fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d007      	beq.n	8003000 <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8002ff8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	e000      	b.n	8003002 <canardHandleRxFrame+0x3a>
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b00      	cmp	r3, #0
 800300c:	da0f      	bge.n	800302e <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	d109      	bne.n	800302e <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8003022:	2b00      	cmp	r3, #0
 8003024:	d103      	bne.n	800302e <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 800302a:	2b00      	cmp	r3, #0
 800302c:	d102      	bne.n	8003034 <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 800302e:	f06f 0309 	mvn.w	r3, #9
 8003032:	e361      	b.n	80036f8 <canardHandleRxFrame+0x730>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 8003034:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003038:	2b02      	cmp	r3, #2
 800303a:	d00b      	beq.n	8003054 <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f7ff feb3 	bl	8002da8 <canardGetLocalNodeID>
 8003042:	4603      	mov	r3, r0
 8003044:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8003046:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800304a:	4293      	cmp	r3, r2
 800304c:	d002      	beq.n	8003054 <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 800304e:	f06f 030a 	mvn.w	r3, #10
 8003052:	e351      	b.n	80036f8 <canardHandleRxFrame+0x730>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	0e1b      	lsrs	r3, r3, #24
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800306e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4618      	mov	r0, r3
 8003078:	f001 f8a0 	bl	80041bc <extractDataType>
 800307c:	4603      	mov	r3, r0
 800307e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8003082:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8003086:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	431a      	orrs	r2, r3
 800308e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8003092:	049b      	lsls	r3, r3, #18
 8003094:	431a      	orrs	r2, r3
 8003096:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800309a:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 800309c:	4313      	orrs	r3, r2
 800309e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	7b1b      	ldrb	r3, [r3, #12]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	4413      	add	r3, r2
 80030aa:	791b      	ldrb	r3, [r3, #4]
 80030ac:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    uint64_t data_type_signature = 0;
 80030b0:	f04f 0200 	mov.w	r2, #0
 80030b4:	f04f 0300 	mov.w	r3, #0
 80030b8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    CanardRxState* rx_state = NULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 80030c0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80030c4:	09db      	lsrs	r3, r3, #7
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01e      	beq.n	800310e <canardHandleRxFrame+0x146>
    {

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685e      	ldr	r6, [r3, #4]
 80030d4:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 80030d8:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80030dc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80030e0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	4603      	mov	r3, r0
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	47b0      	blx	r6
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <canardHandleRxFrame+0x140>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 80030f2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f001 f8a5 	bl	8004244 <traverseRxStates>
 80030fa:	66f8      	str	r0, [r7, #108]	@ 0x6c

            if(rx_state == NULL)
 80030fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d110      	bne.n	8003124 <canardHandleRxFrame+0x15c>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8003102:	f06f 0302 	mvn.w	r3, #2
 8003106:	e2f7      	b.n	80036f8 <canardHandleRxFrame+0x730>
            }
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 8003108:	f06f 030b 	mvn.w	r3, #11
 800310c:	e2f4      	b.n	80036f8 <canardHandleRxFrame+0x730>
        }
    }
    else
    {
        rx_state = findRxState(ins, transfer_descriptor);
 800310e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f001 f8c6 	bl	80042a2 <findRxState>
 8003116:	66f8      	str	r0, [r7, #108]	@ 0x6c

        if (rx_state == NULL)
 8003118:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d102      	bne.n	8003124 <canardHandleRxFrame+0x15c>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 800311e:	f06f 030c 	mvn.w	r3, #12
 8003122:	e2e9      	b.n	80036f8 <canardHandleRxFrame+0x730>
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 8003124:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003126:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800312a:	4313      	orrs	r3, r2
 800312c:	bf0c      	ite	eq
 800312e:	2301      	moveq	r3, #1
 8003130:	2300      	movne	r3, #0
 8003132:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8003136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003138:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800313c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003140:	ebb0 0802 	subs.w	r8, r0, r2
 8003144:	eb61 0903 	sbc.w	r9, r1, r3
 8003148:	4ba9      	ldr	r3, [pc, #676]	@ (80033f0 <canardHandleRxFrame+0x428>)
 800314a:	4598      	cmp	r8, r3
 800314c:	f179 0300 	sbcs.w	r3, r9, #0
 8003150:	bf2c      	ite	cs
 8003152:	2301      	movcs	r3, #1
 8003154:	2300      	movcc	r3, #0
 8003156:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    const bool same_iface = frame->iface_id == rx_state->iface_id;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	7b5a      	ldrb	r2, [r3, #13]
 800315e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003160:	7e9b      	ldrb	r3, [r3, #26]
 8003162:	429a      	cmp	r2, r3
 8003164:	bf0c      	ite	eq
 8003166:	2301      	moveq	r3, #1
 8003168:	2300      	movne	r3, #0
 800316a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 800316e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003172:	09db      	lsrs	r3, r3, #7
 8003174:	b2db      	uxtb	r3, r3
 8003176:	f003 0301 	and.w	r3, r3, #1
 800317a:	2b00      	cmp	r3, #0
 800317c:	bf14      	ite	ne
 800317e:	2301      	movne	r3, #1
 8003180:	2300      	moveq	r3, #0
 8003182:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8003186:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003188:	7ddb      	ldrb	r3, [r3, #23]
 800318a:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	461a      	mov	r2, r3
 8003192:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	b2db      	uxtb	r3, r3
 800319c:	4619      	mov	r1, r3
 800319e:	4610      	mov	r0, r2
 80031a0:	f000 fd6e 	bl	8003c80 <computeTransferIDForwardDistance>
 80031a4:	4603      	mov	r3, r0
    const bool not_previous_tid =
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	bfcc      	ite	gt
 80031aa:	2301      	movgt	r3, #1
 80031ac:	2300      	movle	r3, #0
 80031ae:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 80031b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031bc:	1a84      	subs	r4, r0, r2
 80031be:	eb61 0503 	sbc.w	r5, r1, r3
 80031c2:	4b8c      	ldr	r3, [pc, #560]	@ (80033f4 <canardHandleRxFrame+0x42c>)
 80031c4:	429c      	cmp	r4, r3
 80031c6:	f175 0300 	sbcs.w	r3, r5, #0
 80031ca:	bf2c      	ite	cs
 80031cc:	2301      	movcs	r3, #1
 80031ce:	2300      	movcc	r3, #0
 80031d0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 80031d4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80031d8:	f003 031f 	and.w	r3, r3, #31
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031e0:	7ddb      	ldrb	r3, [r3, #23]
 80031e2:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	4619      	mov	r1, r3
 80031ea:	4610      	mov	r0, r2
 80031ec:	f000 fd48 	bl	8003c80 <computeTransferIDForwardDistance>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b0f      	cmp	r3, #15
 80031f4:	bfd4      	ite	le
 80031f6:	2301      	movle	r3, #1
 80031f8:	2300      	movgt	r3, #0
 80031fa:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 80031fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf14      	ite	ne
 8003206:	2301      	movne	r3, #1
 8003208:	2300      	moveq	r3, #0
 800320a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 800320e:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8003212:	2b00      	cmp	r3, #0
 8003214:	d11f      	bne.n	8003256 <canardHandleRxFrame+0x28e>
            (not_initialized) ||
 8003216:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800321a:	2b00      	cmp	r3, #0
 800321c:	d11b      	bne.n	8003256 <canardHandleRxFrame+0x28e>
            (tid_timed_out) ||
 800321e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <canardHandleRxFrame+0x276>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8003226:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <canardHandleRxFrame+0x276>
 800322e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003232:	2b00      	cmp	r3, #0
 8003234:	d10f      	bne.n	8003256 <canardHandleRxFrame+0x28e>
 8003236:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10b      	bne.n	8003256 <canardHandleRxFrame+0x28e>
 800323e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <canardHandleRxFrame+0x292>
            (iface_switch_allowed && first_frame && non_wrapped_tid);
 8003246:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <canardHandleRxFrame+0x292>
 800324e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <canardHandleRxFrame+0x292>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <canardHandleRxFrame+0x294>
 800325a:	2300      	movs	r3, #0
    const bool need_restart =
 800325c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003260:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

    if (need_restart)
 800326c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003270:	2b00      	cmp	r3, #0
 8003272:	d02f      	beq.n	80032d4 <canardHandleRxFrame+0x30c>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8003274:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003278:	f003 031f 	and.w	r3, r3, #31
 800327c:	b2d9      	uxtb	r1, r3
 800327e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003280:	7dd3      	ldrb	r3, [r2, #23]
 8003282:	f361 0386 	bfi	r3, r1, #2, #5
 8003286:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 8003288:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800328a:	7dd3      	ldrb	r3, [r2, #23]
 800328c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003290:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 8003292:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f001 f86e 	bl	8004376 <releaseStatePayload>
        rx_state->iface_id = frame->iface_id;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	7b5a      	ldrb	r2, [r3, #13]
 800329e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a0:	769a      	strb	r2, [r3, #26]
        if (!IS_START_OF_TRANSFER(tail_byte))
 80032a2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80032a6:	09db      	lsrs	r3, r3, #7
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d110      	bne.n	80032d4 <canardHandleRxFrame+0x30c>
        {
            rx_state->transfer_id++;
 80032b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032b4:	7ddb      	ldrb	r3, [r3, #23]
 80032b6:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	f003 031f 	and.w	r3, r3, #31
 80032c2:	b2d9      	uxtb	r1, r3
 80032c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032c6:	7dd3      	ldrb	r3, [r2, #23]
 80032c8:	f361 0386 	bfi	r3, r1, #2, #5
 80032cc:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 80032ce:	f06f 030c 	mvn.w	r3, #12
 80032d2:	e211      	b.n	80036f8 <canardHandleRxFrame+0x730>
        }
    }

    if (frame->iface_id != rx_state->iface_id)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	7b5a      	ldrb	r2, [r3, #13]
 80032d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032da:	7e9b      	ldrb	r3, [r3, #26]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <canardHandleRxFrame+0x31c>
    {
        // drop frame if coming from unexpected interface
        return CANARD_OK;
 80032e0:	2300      	movs	r3, #0
 80032e2:	e209      	b.n	80036f8 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 80032e4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80032e8:	09db      	lsrs	r3, r3, #7
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d041      	beq.n	8003378 <canardHandleRxFrame+0x3b0>
 80032f4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80032f8:	099b      	lsrs	r3, r3, #6
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d039      	beq.n	8003378 <canardHandleRxFrame+0x3b0>
    {
        rx_state->timestamp_usec = timestamp_usec;
 8003304:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800330a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        CanardRxTransfer rx_transfer = {
 800330e:	f107 0310 	add.w	r3, r7, #16
 8003312:	2220      	movs	r2, #32
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f001 fe0c 	bl	8004f34 <memset>
 800331c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003320:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 8003328:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	7b1b      	ldrb	r3, [r3, #12]
 800332e:	3b01      	subs	r3, #1
 8003330:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8003332:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003334:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003338:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800333a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800333e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8003342:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 800334c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8003350:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003354:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003358:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800335c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        ins->on_reception(ins, &rx_transfer);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f107 0210 	add.w	r2, r7, #16
 8003368:	4611      	mov	r1, r2
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 800336e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003370:	f000 ff02 	bl	8004178 <prepareForNextTransfer>
        return CANARD_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e1bf      	b.n	80036f8 <canardHandleRxFrame+0x730>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 8003378:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800337c:	095b      	lsrs	r3, r3, #5
 800337e:	b2db      	uxtb	r3, r3
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003392:	7ddb      	ldrb	r3, [r3, #23]
 8003394:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003398:	b2db      	uxtb	r3, r3
 800339a:	429a      	cmp	r2, r3
 800339c:	d002      	beq.n	80033a4 <canardHandleRxFrame+0x3dc>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 800339e:	f06f 030d 	mvn.w	r3, #13
 80033a2:	e1a9      	b.n	80036f8 <canardHandleRxFrame+0x730>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 80033a4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033ae:	7dd2      	ldrb	r2, [r2, #23]
 80033b0:	f3c2 0284 	ubfx	r2, r2, #2, #5
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d002      	beq.n	80033c0 <canardHandleRxFrame+0x3f8>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 80033ba:	f06f 030e 	mvn.w	r3, #14
 80033be:	e19b      	b.n	80036f8 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 80033c0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80033c4:	09db      	lsrs	r3, r3, #7
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d061      	beq.n	8003494 <canardHandleRxFrame+0x4cc>
 80033d0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80033d4:	099b      	lsrs	r3, r3, #6
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d159      	bne.n	8003494 <canardHandleRxFrame+0x4cc>
    {
        if (frame->data_len <= 3)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	7b1b      	ldrb	r3, [r3, #12]
 80033e4:	2b03      	cmp	r3, #3
 80033e6:	d807      	bhi.n	80033f8 <canardHandleRxFrame+0x430>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 80033e8:	f06f 030f 	mvn.w	r3, #15
 80033ec:	e184      	b.n	80036f8 <canardHandleRxFrame+0x730>
 80033ee:	bf00      	nop
 80033f0:	001e8481 	.word	0x001e8481
 80033f4:	000f4241 	.word	0x000f4241
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 80033f8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80033fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rx_state->payload_len = 0;
 8003402:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003404:	8ad3      	ldrh	r3, [r2, #22]
 8003406:	f36f 0309 	bfc	r3, #0, #10
 800340a:	82d3      	strh	r3, [r2, #22]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f103 000c 	add.w	r0, r3, #12
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	3304      	adds	r3, #4
 8003416:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 800341c:	3b03      	subs	r3, #3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003422:	f000 ffdd 	bl	80043e0 <bufferBlockPushBytes>
 8003426:	4603      	mov	r3, r0
 8003428:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if (ret < 0)
 800342c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8003430:	2b00      	cmp	r3, #0
 8003432:	da09      	bge.n	8003448 <canardHandleRxFrame+0x480>
        {
            releaseStatePayload(ins, rx_state);
 8003434:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 ff9d 	bl	8004376 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 800343c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800343e:	f000 fe9b 	bl	8004178 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8003442:	f06f 0302 	mvn.w	r3, #2
 8003446:	e157      	b.n	80036f8 <canardHandleRxFrame+0x730>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	791b      	ldrb	r3, [r3, #4]
 800344c:	461a      	mov	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	795b      	ldrb	r3, [r3, #5]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	b29b      	uxth	r3, r3
 8003456:	4313      	orrs	r3, r2
 8003458:	b29a      	uxth	r2, r3
 800345a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800345c:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 800345e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003462:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003466:	f001 faa8 	bl	80049ba <crcAddSignature>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003470:	829a      	strh	r2, [r3, #20]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8003472:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003474:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800347a:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	7b1b      	ldrb	r3, [r3, #12]
 8003480:	3b03      	subs	r3, #3
 8003482:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8003484:	461a      	mov	r2, r3
 8003486:	f001 fac7 	bl	8004a18 <crcAdd>
 800348a:	4603      	mov	r3, r0
 800348c:	461a      	mov	r2, r3
 800348e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003490:	829a      	strh	r2, [r3, #20]
    {
 8003492:	e124      	b.n	80036de <canardHandleRxFrame+0x716>
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8003494:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003498:	09db      	lsrs	r3, r3, #7
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d133      	bne.n	800350c <canardHandleRxFrame+0x544>
 80034a4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80034a8:	099b      	lsrs	r3, r3, #6
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f003 0301 	and.w	r3, r3, #1
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d12b      	bne.n	800350c <canardHandleRxFrame+0x544>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f103 000c 	add.w	r0, r3, #12
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80034c8:	f000 ff8a 	bl	80043e0 <bufferBlockPushBytes>
 80034cc:	4603      	mov	r3, r0
 80034ce:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (ret < 0)
 80034d0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	da09      	bge.n	80034ec <canardHandleRxFrame+0x524>
        {
            releaseStatePayload(ins, rx_state);
 80034d8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 ff4b 	bl	8004376 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 80034e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80034e2:	f000 fe49 	bl	8004178 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80034e6:	f06f 0302 	mvn.w	r3, #2
 80034ea:	e105      	b.n	80036f8 <canardHandleRxFrame+0x730>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80034ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034ee:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	1d19      	adds	r1, r3, #4
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	7b1b      	ldrb	r3, [r3, #12]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80034fc:	461a      	mov	r2, r3
 80034fe:	f001 fa8b 	bl	8004a18 <crcAdd>
 8003502:	4603      	mov	r3, r0
 8003504:	461a      	mov	r2, r3
 8003506:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003508:	829a      	strh	r2, [r3, #20]
    {
 800350a:	e0e8      	b.n	80036de <canardHandleRxFrame+0x716>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	7b1b      	ldrb	r3, [r3, #12]
 8003510:	3b01      	subs	r3, #1
 8003512:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

        uint8_t tail_offset = 0;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 800351c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800351e:	8adb      	ldrh	r3, [r3, #22]
 8003520:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003524:	b29b      	uxth	r3, r3
 8003526:	2b04      	cmp	r3, #4
 8003528:	d823      	bhi.n	8003572 <canardHandleRxFrame+0x5aa>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 800352a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800352c:	8adb      	ldrh	r3, [r3, #22]
 800352e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003532:	b29b      	uxth	r3, r3
 8003534:	667b      	str	r3, [r7, #100]	@ 0x64
 8003536:	e012      	b.n	800355e <canardHandleRxFrame+0x596>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 8003538:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	4413      	add	r3, r2
 8003540:	7919      	ldrb	r1, [r3, #4]
 8003542:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003544:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003546:	4413      	add	r3, r2
 8003548:	331b      	adds	r3, #27
 800354a:	460a      	mov	r2, r1
 800354c:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 800354e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003550:	3301      	adds	r3, #1
 8003552:	667b      	str	r3, [r7, #100]	@ 0x64
 8003554:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003558:	3301      	adds	r3, #1
 800355a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 800355e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003560:	2b04      	cmp	r3, #4
 8003562:	d848      	bhi.n	80035f6 <canardHandleRxFrame+0x62e>
 8003564:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8003568:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800356c:	429a      	cmp	r2, r3
 800356e:	d3e3      	bcc.n	8003538 <canardHandleRxFrame+0x570>
 8003570:	e041      	b.n	80035f6 <canardHandleRxFrame+0x62e>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f103 020c 	add.w	r2, r3, #12
 8003578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f7ff fc1e 	bl	8002dc0 <canardBufferFromIdx>
 8003584:	6638      	str	r0, [r7, #96]	@ 0x60
            if (block != NULL)
 8003586:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003588:	2b00      	cmp	r3, #0
 800358a:	d034      	beq.n	80035f6 <canardHandleRxFrame+0x62e>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 800358c:	2305      	movs	r3, #5
 800358e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 8003590:	e005      	b.n	800359e <canardHandleRxFrame+0x5d6>
                {
                    block = block->next;
 8003592:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	663b      	str	r3, [r7, #96]	@ 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 8003598:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800359a:	331c      	adds	r3, #28
 800359c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 800359e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f5      	bne.n	8003592 <canardHandleRxFrame+0x5ca>
                }
                CANARD_ASSERT(block != NULL);

                const size_t offset_within_block = rx_state->payload_len - offset;
 80035a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035a8:	8adb      	ldrh	r3, [r3, #22]
 80035aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	461a      	mov	r2, r3
 80035b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	63bb      	str	r3, [r7, #56]	@ 0x38
                CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                for (size_t i = offset_within_block;
 80035b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035bc:	e012      	b.n	80035e4 <canardHandleRxFrame+0x61c>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 80035be:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	4413      	add	r3, r2
 80035c6:	7919      	ldrb	r1, [r3, #4]
 80035c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80035ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035cc:	4413      	add	r3, r2
 80035ce:	3304      	adds	r3, #4
 80035d0:	460a      	mov	r2, r1
 80035d2:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 80035d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035d6:	3301      	adds	r3, #1
 80035d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035da:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80035de:	3301      	adds	r3, #1
 80035e0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 80035e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035e6:	2b1b      	cmp	r3, #27
 80035e8:	d805      	bhi.n	80035f6 <canardHandleRxFrame+0x62e>
 80035ea:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80035ee:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d3e3      	bcc.n	80035be <canardHandleRxFrame+0x5f6>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 80035f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 80035fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003600:	331b      	adds	r3, #27
        CanardRxTransfer rx_transfer = {
 8003602:	61bb      	str	r3, [r7, #24]
            .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f103 020c 	add.w	r2, r3, #12
 800360a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	4619      	mov	r1, r3
 8003610:	4610      	mov	r0, r2
 8003612:	f7ff fbd5 	bl	8002dc0 <canardBufferFromIdx>
 8003616:	4603      	mov	r3, r0
        CanardRxTransfer rx_transfer = {
 8003618:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 800361a:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800361e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003622:	429a      	cmp	r2, r3
 8003624:	d205      	bcs.n	8003632 <canardHandleRxFrame+0x66a>
 8003626:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	4413      	add	r3, r2
 800362e:	3304      	adds	r3, #4
 8003630:	e000      	b.n	8003634 <canardHandleRxFrame+0x66c>
 8003632:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 8003634:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 8003636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003638:	8adb      	ldrh	r3, [r3, #22]
 800363a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800363e:	b29b      	uxth	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003646:	b29b      	uxth	r3, r3
 8003648:	4413      	add	r3, r2
 800364a:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 800364c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800364e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003652:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003654:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003658:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 800365c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8003666:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800366a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800366e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003672:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8003676:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 800367a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800367c:	2200      	movs	r2, #0
 800367e:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 8003680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003682:	8a98      	ldrh	r0, [r3, #20]
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	1d19      	adds	r1, r3, #4
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	7b1b      	ldrb	r3, [r3, #12]
 800368c:	3b01      	subs	r3, #1
 800368e:	461a      	mov	r2, r3
 8003690:	f001 f9c2 	bl	8004a18 <crcAdd>
 8003694:	4603      	mov	r3, r0
 8003696:	461a      	mov	r2, r3
 8003698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800369a:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 800369c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800369e:	8a9a      	ldrh	r2, [r3, #20]
 80036a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036a2:	8b1b      	ldrh	r3, [r3, #24]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d106      	bne.n	80036b6 <canardHandleRxFrame+0x6ee>
        {
            ins->on_reception(ins, &rx_transfer);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f107 0210 	add.w	r2, r7, #16
 80036b0:	4611      	mov	r1, r2
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 80036b6:	f107 0310 	add.w	r3, r7, #16
 80036ba:	4619      	mov	r1, r3
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fa27 	bl	8003b10 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 80036c2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80036c4:	f000 fd58 	bl	8004178 <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 80036c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ca:	8a9a      	ldrh	r2, [r3, #20]
 80036cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ce:	8b1b      	ldrh	r3, [r3, #24]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d101      	bne.n	80036d8 <canardHandleRxFrame+0x710>
        {
            return CANARD_OK;
 80036d4:	2300      	movs	r3, #0
 80036d6:	e00f      	b.n	80036f8 <canardHandleRxFrame+0x730>
        }
        else
        {
            return -CANARD_ERROR_RX_BAD_CRC;
 80036d8:	f06f 0310 	mvn.w	r3, #16
 80036dc:	e00c      	b.n	80036f8 <canardHandleRxFrame+0x730>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 80036de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036e0:	7ddb      	ldrb	r3, [r3, #23]
 80036e2:	b25b      	sxtb	r3, r3
 80036e4:	43db      	mvns	r3, r3
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	09db      	lsrs	r3, r3, #7
 80036ea:	b2d9      	uxtb	r1, r3
 80036ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036ee:	7dd3      	ldrb	r3, [r2, #23]
 80036f0:	f361 13c7 	bfi	r3, r1, #7, #1
 80036f4:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3774      	adds	r7, #116	@ 0x74
 80036fc:	46bd      	mov	sp, r7
 80036fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003702:	bf00      	nop

08003704 <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 8003704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003708:	b08d      	sub	sp, #52	@ 0x34
 800370a:	af00      	add	r7, sp, #0
 800370c:	61f8      	str	r0, [r7, #28]
 800370e:	61b9      	str	r1, [r7, #24]
 8003710:	4611      	mov	r1, r2
 8003712:	461a      	mov	r2, r3
 8003714:	460b      	mov	r3, r1
 8003716:	75fb      	strb	r3, [r7, #23]
 8003718:	4613      	mov	r3, r2
 800371a:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <canardDecodeScalar+0x24>
 8003722:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003724:	2b00      	cmp	r3, #0
 8003726:	d102      	bne.n	800372e <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003728:	f06f 0301 	mvn.w	r3, #1
 800372c:	e16e      	b.n	8003a0c <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <canardDecodeScalar+0x36>
 8003734:	7dfb      	ldrb	r3, [r7, #23]
 8003736:	2b40      	cmp	r3, #64	@ 0x40
 8003738:	d902      	bls.n	8003740 <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800373a:	f06f 0301 	mvn.w	r3, #1
 800373e:	e165      	b.n	8003a0c <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 8003740:	7dfb      	ldrb	r3, [r7, #23]
 8003742:	2b01      	cmp	r3, #1
 8003744:	d105      	bne.n	8003752 <canardDecodeScalar+0x4e>
 8003746:	7dbb      	ldrb	r3, [r7, #22]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800374c:	f06f 0301 	mvn.w	r3, #1
 8003750:	e15c      	b.n	8003a0c <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 8003752:	f107 0320 	add.w	r3, r7, #32
 8003756:	2208      	movs	r2, #8
 8003758:	2100      	movs	r1, #0
 800375a:	4618      	mov	r0, r3
 800375c:	f001 fbea 	bl	8004f34 <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8003760:	f107 0320 	add.w	r3, r7, #32
 8003764:	7dfa      	ldrb	r2, [r7, #23]
 8003766:	69b9      	ldr	r1, [r7, #24]
 8003768:	69f8      	ldr	r0, [r7, #28]
 800376a:	f000 ffc1 	bl	80046f0 <descatterTransferPayload>
 800376e:	4603      	mov	r3, r0
 8003770:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (result <= 0)
 8003772:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003776:	2b00      	cmp	r3, #0
 8003778:	dc02      	bgt.n	8003780 <canardDecodeScalar+0x7c>
    {
        return result;
 800377a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800377e:	e145      	b.n	8003a0c <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	f003 0307 	and.w	r3, r3, #7
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d018      	beq.n	80037be <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 800378c:	7dfb      	ldrb	r3, [r7, #23]
 800378e:	08db      	lsrs	r3, r3, #3
 8003790:	b2db      	uxtb	r3, r3
 8003792:	3320      	adds	r3, #32
 8003794:	f107 0210 	add.w	r2, r7, #16
 8003798:	4413      	add	r3, r2
 800379a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800379e:	461a      	mov	r2, r3
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	425b      	negs	r3, r3
 80037a4:	f003 0307 	and.w	r3, r3, #7
 80037a8:	411a      	asrs	r2, r3
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
 80037ac:	08db      	lsrs	r3, r3, #3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	3320      	adds	r3, #32
 80037b4:	f107 0110 	add.w	r1, r7, #16
 80037b8:	440b      	add	r3, r1
 80037ba:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 80037be:	2300      	movs	r3, #0
 80037c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 80037c4:	7dfb      	ldrb	r3, [r7, #23]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d103      	bne.n	80037d2 <canardDecodeScalar+0xce>
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037d0:	e01e      	b.n	8003810 <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d803      	bhi.n	80037e0 <canardDecodeScalar+0xdc>
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037de:	e017      	b.n	8003810 <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	2b10      	cmp	r3, #16
 80037e4:	d803      	bhi.n	80037ee <canardDecodeScalar+0xea>
 80037e6:	2302      	movs	r3, #2
 80037e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037ec:	e010      	b.n	8003810 <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d803      	bhi.n	80037fc <canardDecodeScalar+0xf8>
 80037f4:	2304      	movs	r3, #4
 80037f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037fa:	e009      	b.n	8003810 <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 80037fc:	7dfb      	ldrb	r3, [r7, #23]
 80037fe:	2b40      	cmp	r3, #64	@ 0x40
 8003800:	d803      	bhi.n	800380a <canardDecodeScalar+0x106>
 8003802:	2308      	movs	r3, #8
 8003804:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003808:	e002      	b.n	8003810 <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 800380a:	f06f 0308 	mvn.w	r3, #8
 800380e:	e0fd      	b.n	8003a0c <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 8003810:	f001 f863 	bl	80048da <isBigEndian>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 800381a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800381e:	f107 0320 	add.w	r3, r7, #32
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f001 f869 	bl	80048fc <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 800382a:	7dbb      	ldrb	r3, [r7, #22]
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 809b 	beq.w	8003968 <canardDecodeScalar+0x264>
 8003832:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003836:	00da      	lsls	r2, r3, #3
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	429a      	cmp	r2, r3
 800383c:	f000 8094 	beq.w	8003968 <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	2b08      	cmp	r3, #8
 8003844:	d819      	bhi.n	800387a <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 8003846:	f897 3020 	ldrb.w	r3, [r7, #32]
 800384a:	461a      	mov	r2, r3
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	3b01      	subs	r3, #1
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8085 	beq.w	8003968 <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 800385e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003862:	7dfb      	ldrb	r3, [r7, #23]
 8003864:	2101      	movs	r1, #1
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	b2db      	uxtb	r3, r3
 800386c:	425b      	negs	r3, r3
 800386e:	b2db      	uxtb	r3, r3
 8003870:	4313      	orrs	r3, r2
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f887 3020 	strb.w	r3, [r7, #32]
 8003878:	e076      	b.n	8003968 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b10      	cmp	r3, #16
 800387e:	d815      	bhi.n	80038ac <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 8003880:	8c3b      	ldrh	r3, [r7, #32]
 8003882:	461a      	mov	r2, r3
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	3b01      	subs	r3, #1
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
 800388c:	f003 0301 	and.w	r3, r3, #1
 8003890:	2b00      	cmp	r3, #0
 8003892:	d069      	beq.n	8003968 <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8003894:	8c3a      	ldrh	r2, [r7, #32]
 8003896:	7dfb      	ldrb	r3, [r7, #23]
 8003898:	2101      	movs	r1, #1
 800389a:	fa01 f303 	lsl.w	r3, r1, r3
 800389e:	b29b      	uxth	r3, r3
 80038a0:	425b      	negs	r3, r3
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	4313      	orrs	r3, r2
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	843b      	strh	r3, [r7, #32]
 80038aa:	e05d      	b.n	8003968 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 80038ac:	7dfb      	ldrb	r3, [r7, #23]
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d811      	bhi.n	80038d6 <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 80038b2:	6a3a      	ldr	r2, [r7, #32]
 80038b4:	7dfb      	ldrb	r3, [r7, #23]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d051      	beq.n	8003968 <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 80038c4:	6a3a      	ldr	r2, [r7, #32]
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2101      	movs	r1, #1
 80038ca:	fa01 f303 	lsl.w	r3, r1, r3
 80038ce:	425b      	negs	r3, r3
 80038d0:	4313      	orrs	r3, r2
 80038d2:	623b      	str	r3, [r7, #32]
 80038d4:	e048      	b.n	8003968 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80038da:	d842      	bhi.n	8003962 <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 80038dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038e0:	7df9      	ldrb	r1, [r7, #23]
 80038e2:	1e48      	subs	r0, r1, #1
 80038e4:	f1c0 0620 	rsb	r6, r0, #32
 80038e8:	f1a0 0120 	sub.w	r1, r0, #32
 80038ec:	fa22 f400 	lsr.w	r4, r2, r0
 80038f0:	fa03 f606 	lsl.w	r6, r3, r6
 80038f4:	4334      	orrs	r4, r6
 80038f6:	fa23 f101 	lsr.w	r1, r3, r1
 80038fa:	430c      	orrs	r4, r1
 80038fc:	fa23 f500 	lsr.w	r5, r3, r0
 8003900:	f004 0301 	and.w	r3, r4, #1
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	2300      	movs	r3, #0
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800390e:	460b      	mov	r3, r1
 8003910:	4313      	orrs	r3, r2
 8003912:	d029      	beq.n	8003968 <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8003914:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003918:	7df9      	ldrb	r1, [r7, #23]
 800391a:	f04f 0201 	mov.w	r2, #1
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	f1a1 0620 	sub.w	r6, r1, #32
 8003926:	f1c1 0020 	rsb	r0, r1, #32
 800392a:	fa03 f901 	lsl.w	r9, r3, r1
 800392e:	fa02 f606 	lsl.w	r6, r2, r6
 8003932:	ea49 0906 	orr.w	r9, r9, r6
 8003936:	fa22 f000 	lsr.w	r0, r2, r0
 800393a:	ea49 0900 	orr.w	r9, r9, r0
 800393e:	fa02 f801 	lsl.w	r8, r2, r1
 8003942:	2300      	movs	r3, #0
 8003944:	f1d8 0a00 	rsbs	sl, r8, #0
 8003948:	eb63 0b09 	sbc.w	fp, r3, r9
 800394c:	ea44 030a 	orr.w	r3, r4, sl
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	ea45 030b 	orr.w	r3, r5, fp
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	e9d7 3400 	ldrd	r3, r4, [r7]
 800395c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8003960:	e002      	b.n	8003968 <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8003962:	f06f 0308 	mvn.w	r3, #8
 8003966:	e051      	b.n	8003a0c <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 8003968:	7dbb      	ldrb	r3, [r7, #22]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d022      	beq.n	80039b4 <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d804      	bhi.n	800397e <canardDecodeScalar+0x27a>
 8003974:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8003978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	e044      	b.n	8003a08 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 800397e:	7dfb      	ldrb	r3, [r7, #23]
 8003980:	2b10      	cmp	r3, #16
 8003982:	d804      	bhi.n	800398e <canardDecodeScalar+0x28a>
 8003984:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003988:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800398a:	801a      	strh	r2, [r3, #0]
 800398c:	e03c      	b.n	8003a08 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 800398e:	7dfb      	ldrb	r3, [r7, #23]
 8003990:	2b20      	cmp	r3, #32
 8003992:	d803      	bhi.n	800399c <canardDecodeScalar+0x298>
 8003994:	6a3a      	ldr	r2, [r7, #32]
 8003996:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e035      	b.n	8003a08 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 800399c:	7dfb      	ldrb	r3, [r7, #23]
 800399e:	2b40      	cmp	r3, #64	@ 0x40
 80039a0:	d805      	bhi.n	80039ae <canardDecodeScalar+0x2aa>
 80039a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80039a8:	e9c1 2300 	strd	r2, r3, [r1]
 80039ac:	e02c      	b.n	8003a08 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 80039ae:	f06f 0308 	mvn.w	r3, #8
 80039b2:	e02b      	b.n	8003a0c <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d104      	bne.n	80039c4 <canardDecodeScalar+0x2c0>
 80039ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80039be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e021      	b.n	8003a08 <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d804      	bhi.n	80039d4 <canardDecodeScalar+0x2d0>
 80039ca:	f897 2020 	ldrb.w	r2, [r7, #32]
 80039ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	e019      	b.n	8003a08 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	2b10      	cmp	r3, #16
 80039d8:	d803      	bhi.n	80039e2 <canardDecodeScalar+0x2de>
 80039da:	8c3a      	ldrh	r2, [r7, #32]
 80039dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039de:	801a      	strh	r2, [r3, #0]
 80039e0:	e012      	b.n	8003a08 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 80039e2:	7dfb      	ldrb	r3, [r7, #23]
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d803      	bhi.n	80039f0 <canardDecodeScalar+0x2ec>
 80039e8:	6a3a      	ldr	r2, [r7, #32]
 80039ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	e00b      	b.n	8003a08 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
 80039f2:	2b40      	cmp	r3, #64	@ 0x40
 80039f4:	d805      	bhi.n	8003a02 <canardDecodeScalar+0x2fe>
 80039f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039fa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80039fc:	e9c1 2300 	strd	r2, r3, [r1]
 8003a00:	e002      	b.n	8003a08 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8003a02:	f06f 0308 	mvn.w	r3, #8
 8003a06:	e001      	b.n	8003a0c <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 8003a08:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3734      	adds	r7, #52	@ 0x34
 8003a10:	46bd      	mov	sp, r7
 8003a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003a16 <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b08a      	sub	sp, #40	@ 0x28
 8003a1a:	af02      	add	r7, sp, #8
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	4613      	mov	r3, r2
 8003a24:	71fb      	strb	r3, [r7, #7]
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
    CANARD_ASSERT(value != NULL);

    if (bit_length > 64)
 8003a26:	79fb      	ldrb	r3, [r7, #7]
 8003a28:	2b40      	cmp	r3, #64	@ 0x40
 8003a2a:	d901      	bls.n	8003a30 <canardEncodeScalar+0x1a>
    {
        CANARD_ASSERT(false);
        bit_length = 64;
 8003a2c:	2340      	movs	r3, #64	@ 0x40
 8003a2e:	71fb      	strb	r3, [r7, #7]
    }

    if (bit_length < 1)
 8003a30:	79fb      	ldrb	r3, [r7, #7]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d101      	bne.n	8003a3a <canardEncodeScalar+0x24>
    {
        CANARD_ASSERT(false);
        bit_length = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	71fb      	strb	r3, [r7, #7]
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 8003a3a:	f107 0310 	add.w	r3, r7, #16
 8003a3e:	2208      	movs	r2, #8
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f001 fa76 	bl	8004f34 <memset>

    uint8_t std_byte_length = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8003a4c:	79fb      	ldrb	r3, [r7, #7]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d105      	bne.n	8003a5e <canardEncodeScalar+0x48>
 8003a52:	2301      	movs	r3, #1
 8003a54:	77fb      	strb	r3, [r7, #31]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	743b      	strb	r3, [r7, #16]
 8003a5c:	e024      	b.n	8003aa8 <canardEncodeScalar+0x92>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d805      	bhi.n	8003a70 <canardEncodeScalar+0x5a>
 8003a64:	2301      	movs	r3, #1
 8003a66:	77fb      	strb	r3, [r7, #31]
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	743b      	strb	r3, [r7, #16]
 8003a6e:	e01b      	b.n	8003aa8 <canardEncodeScalar+0x92>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8003a70:	79fb      	ldrb	r3, [r7, #7]
 8003a72:	2b10      	cmp	r3, #16
 8003a74:	d805      	bhi.n	8003a82 <canardEncodeScalar+0x6c>
 8003a76:	2302      	movs	r3, #2
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	881b      	ldrh	r3, [r3, #0]
 8003a7e:	823b      	strh	r3, [r7, #16]
 8003a80:	e012      	b.n	8003aa8 <canardEncodeScalar+0x92>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d805      	bhi.n	8003a94 <canardEncodeScalar+0x7e>
 8003a88:	2304      	movs	r3, #4
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	613b      	str	r3, [r7, #16]
 8003a92:	e009      	b.n	8003aa8 <canardEncodeScalar+0x92>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8003a94:	79fb      	ldrb	r3, [r7, #7]
 8003a96:	2b40      	cmp	r3, #64	@ 0x40
 8003a98:	d806      	bhi.n	8003aa8 <canardEncodeScalar+0x92>
 8003a9a:	2308      	movs	r3, #8
 8003a9c:	77fb      	strb	r3, [r7, #31]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
            storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
        }
    }
#endif

    if (isBigEndian())
 8003aa8:	f000 ff17 	bl	80048da <isBigEndian>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d006      	beq.n	8003ac0 <canardEncodeScalar+0xaa>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8003ab2:	7ffa      	ldrb	r2, [r7, #31]
 8003ab4:	f107 0310 	add.w	r3, r7, #16
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f000 ff1e 	bl	80048fc <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8003ac0:	79fb      	ldrb	r3, [r7, #7]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d014      	beq.n	8003af6 <canardEncodeScalar+0xe0>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	08db      	lsrs	r3, r3, #3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	3320      	adds	r3, #32
 8003ad4:	443b      	add	r3, r7
 8003ad6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003ada:	461a      	mov	r2, r3
 8003adc:	79fb      	ldrb	r3, [r7, #7]
 8003ade:	425b      	negs	r3, r3
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	409a      	lsls	r2, r3
 8003ae6:	79fb      	ldrb	r3, [r7, #7]
 8003ae8:	08db      	lsrs	r3, r3, #3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	3320      	adds	r3, #32
 8003af0:	443b      	add	r3, r7
 8003af2:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 8003af6:	79fa      	ldrb	r2, [r7, #7]
 8003af8:	f107 0010 	add.w	r0, r7, #16
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2100      	movs	r1, #0
 8003b04:	f000 fd7d 	bl	8004602 <copyBitArray>
}
 8003b08:	bf00      	nop
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <canardReleaseRxTransferPayload>:

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 8003b1a:	e00f      	b.n	8003b3c <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f103 020c 	add.w	r2, r3, #12
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f000 ffee 	bl	8004b12 <freeBlock>
        transfer->payload_middle = temp;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1eb      	bne.n	8003b1c <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2200      	movs	r2, #0
 8003b54:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	829a      	strh	r2, [r3, #20]
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <canardConvertNativeFloatToFloat16>:
{
    return ins->allocator.statistics;
}

uint16_t canardConvertNativeFloatToFloat16(float value)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b08b      	sub	sp, #44	@ 0x2c
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        uint32_t u;
        float f;
    };

    const union FP32 f32inf = { 255UL << 23U };
 8003b6e:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8003b72:	617b      	str	r3, [r7, #20]
    const union FP32 f16inf = { 31UL << 23U };
 8003b74:	f04f 6378 	mov.w	r3, #260046848	@ 0xf800000
 8003b78:	613b      	str	r3, [r7, #16]
    const union FP32 magic = { 15UL << 23U };
 8003b7a:	f04f 63f0 	mov.w	r3, #125829120	@ 0x7800000
 8003b7e:	60fb      	str	r3, [r7, #12]
    const uint32_t sign_mask = 0x80000000UL;
 8003b80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b84:	623b      	str	r3, [r7, #32]
    const uint32_t round_mask = 0xFFFFF000UL;
 8003b86:	4b21      	ldr	r3, [pc, #132]	@ (8003c0c <canardConvertNativeFloatToFloat16+0xa8>)
 8003b88:	61fb      	str	r3, [r7, #28]

    union FP32 in;
    in.f = value;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	60bb      	str	r3, [r7, #8]
    uint32_t sign = in.u & sign_mask;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	6a3a      	ldr	r2, [r7, #32]
 8003b92:	4013      	ands	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
    in.u ^= sign;
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	4053      	eors	r3, r2
 8003b9c:	60bb      	str	r3, [r7, #8]

    uint16_t out = 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (in.u >= f32inf.u)
 8003ba2:	68ba      	ldr	r2, [r7, #8]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d30a      	bcc.n	8003bc0 <canardConvertNativeFloatToFloat16+0x5c>
    {
        out = (in.u > f32inf.u) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d902      	bls.n	8003bb8 <canardConvertNativeFloatToFloat16+0x54>
 8003bb2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8003bb6:	e001      	b.n	8003bbc <canardConvertNativeFloatToFloat16+0x58>
 8003bb8:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8003bbc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003bbe:	e018      	b.n	8003bf2 <canardConvertNativeFloatToFloat16+0x8e>
    }
    else
    {
        in.u &= round_mask;
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]
        in.f *= magic.f;
 8003bc8:	ed97 7a02 	vldr	s14, [r7, #8]
 8003bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd4:	edc7 7a02 	vstr	s15, [r7, #8]
        in.u -= round_mask;
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	60bb      	str	r3, [r7, #8]
        if (in.u > f16inf.u)
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d901      	bls.n	8003bec <canardConvertNativeFloatToFloat16+0x88>
        {
            in.u = f16inf.u;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	60bb      	str	r3, [r7, #8]
        }
        out = (uint16_t)(in.u >> 13U);
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	0b5b      	lsrs	r3, r3, #13
 8003bf0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    out |= (uint16_t)(sign >> 16U);
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	0c1b      	lsrs	r3, r3, #16
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    return out;
 8003bfe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	372c      	adds	r7, #44	@ 0x2c
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	fffff000 	.word	0xfffff000

08003c10 <canardConvertFloat16ToNativeFloat>:

float canardConvertFloat16ToNativeFloat(uint16_t value)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	4603      	mov	r3, r0
 8003c18:	80fb      	strh	r3, [r7, #6]
    {
        uint32_t u;
        float f;
    };

    const union FP32 magic = { (254UL - 15UL) << 23U };
 8003c1a:	f04f 43ef 	mov.w	r3, #2004877312	@ 0x77800000
 8003c1e:	617b      	str	r3, [r7, #20]
    const union FP32 was_inf_nan = { (127UL + 16UL) << 23U };
 8003c20:	f04f 438f 	mov.w	r3, #1199570944	@ 0x47800000
 8003c24:	613b      	str	r3, [r7, #16]
    union FP32 out;

    out.u = (value & 0x7FFFU) << 13U;
 8003c26:	88fb      	ldrh	r3, [r7, #6]
 8003c28:	035a      	lsls	r2, r3, #13
 8003c2a:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <canardConvertFloat16ToNativeFloat+0x6c>)
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
    out.f *= magic.f;
 8003c30:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c34:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3c:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.f >= was_inf_nan.f)
 8003c40:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c44:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c50:	db03      	blt.n	8003c5a <canardConvertFloat16ToNativeFloat+0x4a>
    {
        out.u |= 255UL << 23U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f043 43ff 	orr.w	r3, r3, #2139095040	@ 0x7f800000
 8003c58:	60fb      	str	r3, [r7, #12]
    }
    out.u |= (value & 0x8000UL) << 16U;
 8003c5a:	68fa      	ldr	r2, [r7, #12]
 8003c5c:	88fb      	ldrh	r3, [r7, #6]
 8003c5e:	041b      	lsls	r3, r3, #16
 8003c60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c64:	4313      	orrs	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]

    return out.f;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	ee07 3a90 	vmov	s15, r3
}
 8003c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c72:	371c      	adds	r7, #28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	0fffe000 	.word	0x0fffe000

08003c80 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	460a      	mov	r2, r1
 8003c8a:	71fb      	strb	r3, [r7, #7]
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(a - b);
 8003c90:	79fb      	ldrb	r3, [r7, #7]
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	79bb      	ldrb	r3, [r7, #6]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 8003c9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	da03      	bge.n	8003cae <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 8003ca6:	89fb      	ldrh	r3, [r7, #14]
 8003ca8:	3320      	adds	r3, #32
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 8003cae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr

08003cbe <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 8003cbe:	b480      	push	{r7}
 8003cc0:	b083      	sub	sp, #12
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b1f      	cmp	r3, #31
 8003cd8:	d902      	bls.n	8003ce0 <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	701a      	strb	r2, [r3, #0]
    }
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 8003cf6:	88fb      	ldrh	r3, [r7, #6]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d801      	bhi.n	8003d00 <dlcToDataLength+0x14>
        return dlc;
 8003cfc:	88fb      	ldrh	r3, [r7, #6]
 8003cfe:	e01e      	b.n	8003d3e <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	2b09      	cmp	r3, #9
 8003d04:	d101      	bne.n	8003d0a <dlcToDataLength+0x1e>
        return 12;
 8003d06:	230c      	movs	r3, #12
 8003d08:	e019      	b.n	8003d3e <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 8003d0a:	88fb      	ldrh	r3, [r7, #6]
 8003d0c:	2b0a      	cmp	r3, #10
 8003d0e:	d101      	bne.n	8003d14 <dlcToDataLength+0x28>
        return 16;
 8003d10:	2310      	movs	r3, #16
 8003d12:	e014      	b.n	8003d3e <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	2b0b      	cmp	r3, #11
 8003d18:	d101      	bne.n	8003d1e <dlcToDataLength+0x32>
        return 20;
 8003d1a:	2314      	movs	r3, #20
 8003d1c:	e00f      	b.n	8003d3e <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 8003d1e:	88fb      	ldrh	r3, [r7, #6]
 8003d20:	2b0c      	cmp	r3, #12
 8003d22:	d101      	bne.n	8003d28 <dlcToDataLength+0x3c>
        return 24;
 8003d24:	2318      	movs	r3, #24
 8003d26:	e00a      	b.n	8003d3e <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	2b0d      	cmp	r3, #13
 8003d2c:	d101      	bne.n	8003d32 <dlcToDataLength+0x46>
        return 32;
 8003d2e:	2320      	movs	r3, #32
 8003d30:	e005      	b.n	8003d3e <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 8003d32:	88fb      	ldrh	r3, [r7, #6]
 8003d34:	2b0e      	cmp	r3, #14
 8003d36:	d101      	bne.n	8003d3c <dlcToDataLength+0x50>
        return 48;
 8003d38:	2330      	movs	r3, #48	@ 0x30
 8003d3a:	e000      	b.n	8003d3e <dlcToDataLength+0x52>
    }
    return 64;
 8003d3c:	2340      	movs	r3, #64	@ 0x40
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	4603      	mov	r3, r0
 8003d52:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d801      	bhi.n	8003d5e <dataLengthToDlc+0x14>
        return data_length;
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	e01e      	b.n	8003d9c <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 8003d5e:	88fb      	ldrh	r3, [r7, #6]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d801      	bhi.n	8003d68 <dataLengthToDlc+0x1e>
        return 9;
 8003d64:	2309      	movs	r3, #9
 8003d66:	e019      	b.n	8003d9c <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	2b10      	cmp	r3, #16
 8003d6c:	d801      	bhi.n	8003d72 <dataLengthToDlc+0x28>
        return 10;
 8003d6e:	230a      	movs	r3, #10
 8003d70:	e014      	b.n	8003d9c <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	2b14      	cmp	r3, #20
 8003d76:	d801      	bhi.n	8003d7c <dataLengthToDlc+0x32>
        return 11;
 8003d78:	230b      	movs	r3, #11
 8003d7a:	e00f      	b.n	8003d9c <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 8003d7c:	88fb      	ldrh	r3, [r7, #6]
 8003d7e:	2b18      	cmp	r3, #24
 8003d80:	d801      	bhi.n	8003d86 <dataLengthToDlc+0x3c>
        return 12;
 8003d82:	230c      	movs	r3, #12
 8003d84:	e00a      	b.n	8003d9c <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	2b20      	cmp	r3, #32
 8003d8a:	d801      	bhi.n	8003d90 <dataLengthToDlc+0x46>
        return 13;
 8003d8c:	230d      	movs	r3, #13
 8003d8e:	e005      	b.n	8003d9c <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	2b30      	cmp	r3, #48	@ 0x30
 8003d94:	d801      	bhi.n	8003d9a <dataLengthToDlc+0x50>
        return 14;
 8003d96:	230e      	movs	r3, #14
 8003d98:	e000      	b.n	8003d9c <dataLengthToDlc+0x52>
    }
    return 15;
 8003d9a:	230f      	movs	r3, #15
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08c      	sub	sp, #48	@ 0x30
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	4613      	mov	r3, r2
 8003db6:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003dc0:	f06f 0301 	mvn.w	r3, #1
 8003dc4:	e11c      	b.n	8004000 <enqueueTxFrames+0x258>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	8c1b      	ldrh	r3, [r3, #32]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d006      	beq.n	8003ddc <enqueueTxFrames+0x34>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003dd6:	f06f 0301 	mvn.w	r3, #1
 8003dda:	e111      	b.n	8004000 <enqueueTxFrames+0x258>
    }

    int16_t result = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 8003de0:	2308      	movs	r3, #8
 8003de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	8c1a      	ldrh	r2, [r3, #32]
 8003dea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d24b      	bcs.n	8003e8c <enqueueTxFrames+0xe4>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	330c      	adds	r3, #12
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 f94a 	bl	8004092 <createTxItem>
 8003dfe:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <enqueueTxFrames+0x64>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8003e06:	f06f 0302 	mvn.w	r3, #2
 8003e0a:	e0f9      	b.n	8004000 <enqueueTxFrames+0x258>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f103 0008 	add.w	r0, r3, #8
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	69d9      	ldr	r1, [r3, #28]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	8c1b      	ldrh	r3, [r3, #32]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	f001 f8c8 	bl	8004fb0 <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	8c1b      	ldrh	r3, [r3, #32]
 8003e24:	3301      	adds	r3, #1
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7ff ff8e 	bl	8003d4a <dataLengthToDlc>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff5b 	bl	8003cec <dlcToDataLength>
 8003e36:	4603      	mov	r3, r0
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	8c1b      	ldrh	r3, [r3, #32]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	3301      	adds	r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	f003 031f 	and.w	r3, r3, #31
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	8c12      	ldrh	r2, [r2, #32]
 8003e5e:	4611      	mov	r1, r2
 8003e60:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8003e64:	b2da      	uxtb	r2, r3
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	440b      	add	r3, r1
 8003e6a:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 8003e76:	6979      	ldr	r1, [r7, #20]
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f8c5 	bl	8004008 <pushTxQueue>
        result++;
 8003e7e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3301      	adds	r3, #1
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003e8a:	e0b7      	b.n	8003ffc <enqueueTxFrames+0x254>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        uint8_t toggle = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint8_t sot_eot = 0x80;
 8003e96:	2380      	movs	r3, #128	@ 0x80
 8003e98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
          see if we are going to be able to allocate enough blocks for
          this transfer. If not then stop now, otherwise we will end
          up doing a partial (corrupt) transfer which will just make
          the situation worse as it will waste bus bandwidth
         */
        const uint16_t total_bytes = transfer->payload_len + 2; // including CRC
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	8c1b      	ldrh	r3, [r3, #32]
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	84bb      	strh	r3, [r7, #36]	@ 0x24
        const uint8_t bytes_per_frame = frame_max_data_len-1; // sot/eot byte consumes one byte
 8003ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        const uint16_t frames_needed = (total_bytes + (bytes_per_frame-1)) / bytes_per_frame;
 8003eae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003eb0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	441a      	add	r2, r3
 8003eb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ebc:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ec0:	843b      	strh	r3, [r7, #32]
        const uint16_t blocks_available = ins->allocator.statistics.capacity_blocks - ins->allocator.statistics.current_usage_blocks;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8a9a      	ldrh	r2, [r3, #20]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	8adb      	ldrh	r3, [r3, #22]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	83fb      	strh	r3, [r7, #30]
        if (blocks_available < frames_needed) {
 8003ece:	8bfa      	ldrh	r2, [r7, #30]
 8003ed0:	8c3b      	ldrh	r3, [r7, #32]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d202      	bcs.n	8003edc <enqueueTxFrames+0x134>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8003ed6:	f06f 0302 	mvn.w	r3, #2
 8003eda:	e091      	b.n	8004000 <enqueueTxFrames+0x258>
        }

        CanardTxQueueItem* queue_item = NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 8003ee0:	e086      	b.n	8003ff0 <enqueueTxFrames+0x248>
        {
            queue_item = createTxItem(&ins->allocator);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	330c      	adds	r3, #12
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f8d3 	bl	8004092 <createTxItem>
 8003eec:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <enqueueTxFrames+0x152>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8003ef4:	f06f 0302 	mvn.w	r3, #2
 8003ef8:	e082      	b.n	8004000 <enqueueTxFrames+0x258>
            }

            uint16_t i = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	853b      	strh	r3, [r7, #40]	@ 0x28
            if (data_index == 0)
 8003efe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10c      	bne.n	8003f1e <enqueueTxFrames+0x176>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
 8003f0e:	0a1b      	lsrs	r3, r3, #8
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	725a      	strb	r2, [r3, #9]
                i = 2;
 8003f18:	2302      	movs	r3, #2
 8003f1a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003f1c:	e012      	b.n	8003f44 <enqueueTxFrames+0x19c>
            }
            else
            {
                i = 0;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	853b      	strh	r3, [r7, #40]	@ 0x28
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8003f22:	e00f      	b.n	8003f44 <enqueueTxFrames+0x19c>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003f2a:	441a      	add	r2, r3
 8003f2c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f2e:	7811      	ldrb	r1, [r2, #0]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4413      	add	r3, r2
 8003f34:	460a      	mov	r2, r1
 8003f36:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8003f38:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003f3e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003f40:	3301      	adds	r3, #1
 8003f42:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8003f44:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003f46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	da04      	bge.n	8003f5a <enqueueTxFrames+0x1b2>
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	8c1b      	ldrh	r3, [r3, #32]
 8003f54:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d3e4      	bcc.n	8003f24 <enqueueTxFrames+0x17c>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	8c1b      	ldrh	r3, [r3, #32]
 8003f5e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d002      	beq.n	8003f6a <enqueueTxFrames+0x1c2>
 8003f64:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003f68:	e000      	b.n	8003f6c <enqueueTxFrames+0x1c4>
 8003f6a:	2340      	movs	r3, #64	@ 0x40
 8003f6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8003f70:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f72:	3301      	adds	r3, #1
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff fee7 	bl	8003d4a <dataLengthToDlc>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff feb4 	bl	8003cec <dlcToDataLength>
 8003f84:	4603      	mov	r3, r0
 8003f86:	3b01      	subs	r3, #1
 8003f88:	853b      	strh	r3, [r7, #40]	@ 0x28
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 8003f8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f8e:	015b      	lsls	r3, r3, #5
 8003f90:	b2da      	uxtb	r2, r3
 8003f92:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003f96:	4313      	orrs	r3, r2
 8003f98:	b2d9      	uxtb	r1, r3
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	f003 031f 	and.w	r3, r3, #31
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	b2d1      	uxtb	r1, r2
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4413      	add	r3, r2
 8003fb0:	460a      	mov	r2, r1
 8003fb2:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8003fbe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	b2da      	uxtb	r2, r3
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 8003fca:	69b9      	ldr	r1, [r7, #24]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f81b 	bl	8004008 <pushTxQueue>

            result++;
 8003fd2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3301      	adds	r3, #1
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            toggle ^= 1;
 8003fde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fe2:	f083 0301 	eor.w	r3, r3, #1
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            sot_eot = 0;
 8003fea:	2300      	movs	r3, #0
 8003fec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        while (transfer->payload_len - data_index != 0)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	8c1b      	ldrh	r3, [r3, #32]
 8003ff4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	f47f af73 	bne.w	8003ee2 <enqueueTxFrames+0x13a>
        }
    }

    return result;
 8003ffc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
}
 8004000:	4618      	mov	r0, r3
 8004002:	3730      	adds	r7, #48	@ 0x30
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004016:	2b00      	cmp	r3, #0
 8004018:	d103      	bne.n	8004022 <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8004020:	e034      	b.n	800408c <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004026:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 800402e:	e02a      	b.n	8004086 <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4619      	mov	r1, r3
 800403a:	4610      	mov	r0, r2
 800403c:	f000 f840 	bl	80040c0 <isPriorityHigher>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d012      	beq.n	800406c <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	429a      	cmp	r2, r3
 800404e:	d106      	bne.n	800405e <pushTxQueue+0x56>
            {
                item->next = queue;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 800405c:	e016      	b.n	800408c <pushTxQueue+0x84>
                previous->next = item;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	601a      	str	r2, [r3, #0]
            return;
 800406a:	e00f      	b.n	800408c <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d103      	bne.n	800407c <pushTxQueue+0x74>
            {
                queue->next = item;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	601a      	str	r2, [r3, #0]
                return;
 800407a:	e007      	b.n	800408c <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1d1      	bne.n	8004030 <pushTxQueue+0x28>
            }
        }
    }
}
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 fd10 	bl	8004ac0 <allocateBlock>
 80040a0:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <createTxItem+0x1a>
    {
        return NULL;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e005      	b.n	80040b8 <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 80040ac:	2214      	movs	r2, #20
 80040ae:	2100      	movs	r1, #0
 80040b0:	68f8      	ldr	r0, [r7, #12]
 80040b2:	f000 ff3f 	bl	8004f34 <memset>
    return item;
 80040b6:	68fb      	ldr	r3, [r7, #12]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b089      	sub	sp, #36	@ 0x24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80040d0:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80040d8:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	0fdb      	lsrs	r3, r3, #31
 80040de:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	0fdb      	lsrs	r3, r3, #31
 80040e4:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 80040e6:	7dfa      	ldrb	r2, [r7, #23]
 80040e8:	7dbb      	ldrb	r3, [r7, #22]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d01d      	beq.n	800412a <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 80040ee:	7dfb      	ldrb	r3, [r7, #23]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <isPriorityHigher+0x3a>
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	0c9b      	lsrs	r3, r3, #18
 80040f8:	e000      	b.n	80040fc <isPriorityHigher+0x3c>
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 80040fe:	7dbb      	ldrb	r3, [r7, #22]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d002      	beq.n	800410a <isPriorityHigher+0x4a>
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	0c9b      	lsrs	r3, r3, #18
 8004108:	e000      	b.n	800410c <isPriorityHigher+0x4c>
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	429a      	cmp	r2, r3
 8004114:	d007      	beq.n	8004126 <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 8004116:	693a      	ldr	r2, [r7, #16]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	429a      	cmp	r2, r3
 800411c:	bf34      	ite	cc
 800411e:	2301      	movcc	r3, #1
 8004120:	2300      	movcs	r3, #0
 8004122:	b2db      	uxtb	r3, r3
 8004124:	e022      	b.n	800416c <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 8004126:	7dbb      	ldrb	r3, [r7, #22]
 8004128:	e020      	b.n	800416c <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 800414a:	69fa      	ldr	r2, [r7, #28]
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	429a      	cmp	r2, r3
 8004150:	d105      	bne.n	800415e <isPriorityHigher+0x9e>
 8004152:	7d7a      	ldrb	r2, [r7, #21]
 8004154:	7d3b      	ldrb	r3, [r7, #20]
 8004156:	429a      	cmp	r2, r3
 8004158:	d001      	beq.n	800415e <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 800415a:	7d3b      	ldrb	r3, [r7, #20]
 800415c:	e006      	b.n	800416c <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 800415e:	69fa      	ldr	r2, [r7, #28]
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	429a      	cmp	r2, r3
 8004164:	bf34      	ite	cc
 8004166:	2301      	movcc	r3, #1
 8004168:	2300      	movcs	r3, #0
 800416a:	b2db      	uxtb	r3, r3
}
 800416c:	4618      	mov	r0, r3
 800416e:	3724      	adds	r7, #36	@ 0x24
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
    state->transfer_id++;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	7ddb      	ldrb	r3, [r3, #23]
 8004184:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8004188:	b2db      	uxtb	r3, r3
 800418a:	3301      	adds	r3, #1
 800418c:	f003 031f 	and.w	r3, r3, #31
 8004190:	b2d9      	uxtb	r1, r3
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	7dd3      	ldrb	r3, [r2, #23]
 8004196:	f361 0386 	bfi	r3, r1, #2, #5
 800419a:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	8ad3      	ldrh	r3, [r2, #22]
 80041a0:	f36f 0309 	bfc	r3, #0, #10
 80041a4:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	7dd3      	ldrb	r3, [r2, #23]
 80041aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041ae:	75d3      	strb	r3, [r2, #23]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <extractDataType>:

/**
 * returns data type from id
 */
uint16_t extractDataType(uint32_t id)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f819 	bl	80041fc <extractTransferType>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d10e      	bne.n	80041ee <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	0a1b      	lsrs	r3, r3, #8
 80041d4:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d103      	bne.n	80041ea <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 80041e2:	89fb      	ldrh	r3, [r7, #14]
 80041e4:	f003 0303 	and.w	r3, r3, #3
 80041e8:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 80041ea:	89fb      	ldrh	r3, [r7, #14]
 80041ec:	e002      	b.n	80041f4 <extractDataType+0x38>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	b2db      	uxtb	r3, r3
    }
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <extractTransferType>:

/**
 * returns transfer type from id
 */
CanardTransferType extractTransferType(uint32_t id)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	09db      	lsrs	r3, r3, #7
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf14      	ite	ne
 8004210:	2301      	movne	r3, #1
 8004212:	2300      	moveq	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 8004216:	7bfb      	ldrb	r3, [r7, #15]
 8004218:	f083 0301 	eor.w	r3, r3, #1
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <extractTransferType+0x2a>
    {
        return CanardTransferTypeBroadcast;
 8004222:	2302      	movs	r3, #2
 8004224:	e008      	b.n	8004238 <extractTransferType+0x3c>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0bdb      	lsrs	r3, r3, #15
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <extractTransferType+0x3a>
    {
        return CanardTransferTypeRequest;
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <extractTransferType+0x3c>
    }
    else
    {
        return CanardTransferTypeResponse;
 8004236:	2300      	movs	r3, #0
    }
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d110      	bne.n	800427c <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	330c      	adds	r3, #12
 800425e:	6839      	ldr	r1, [r7, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 f865 	bl	8004330 <createRxState>
 8004266:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <traverseRxStates+0x2e>
        {
            return NULL;
 800426e:	2300      	movs	r3, #0
 8004270:	e013      	b.n	800429a <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	621a      	str	r2, [r3, #32]
        return states;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	e00e      	b.n	800429a <traverseRxStates+0x56>
    }

    states = findRxState(ins, transfer_descriptor);
 800427c:	6839      	ldr	r1, [r7, #0]
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f80f 	bl	80042a2 <findRxState>
 8004284:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <traverseRxStates+0x4c>
    {
        return states;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	e004      	b.n	800429a <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f827 	bl	80042e6 <prependRxState>
 8004298:	4603      	mov	r3, r0
    }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
    CanardRxState *state = ins->rx_states;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	60fb      	str	r3, [r7, #12]
    while (state != NULL)
 80042b2:	e010      	b.n	80042d6 <findRxState+0x34>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d101      	bne.n	80042c2 <findRxState+0x20>
        {
            return state;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	e00d      	b.n	80042de <findRxState+0x3c>
        }
        state = canardRxFromIdx(&ins->allocator, state->next);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f103 020c 	add.w	r2, r3, #12
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4619      	mov	r1, r3
 80042ce:	4610      	mov	r0, r2
 80042d0:	f7fe fd8e 	bl	8002df0 <canardRxFromIdx>
 80042d4:	60f8      	str	r0, [r7, #12]
    while (state != NULL)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1eb      	bne.n	80042b4 <findRxState+0x12>
    }
    return NULL;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	330c      	adds	r3, #12
 80042f4:	6839      	ldr	r1, [r7, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f000 f81a 	bl	8004330 <createRxState>
 80042fc:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <prependRxState+0x22>
    {
        return NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	e00f      	b.n	8004328 <prependRxState+0x42>
    }

    state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f103 020c 	add.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f7fe fd77 	bl	8002e08 <canardRxToIdx>
 800431a:	4602      	mov	r2, r0
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	621a      	str	r2, [r3, #32]
    return state;
 8004326:	68fb      	ldr	r3, [r7, #12]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08c      	sub	sp, #48	@ 0x30
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 800433a:	f107 0308 	add.w	r3, r7, #8
 800433e:	2220      	movs	r2, #32
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fdf6 	bl	8004f34 <memset>
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	61bb      	str	r3, [r7, #24]
        .next = CANARD_BUFFER_IDX_NONE,
        .buffer_blocks = CANARD_BUFFER_IDX_NONE,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fbb7 	bl	8004ac0 <allocateBlock>
 8004352:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (state == NULL)
 8004354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <createRxState+0x2e>
    {
        return NULL;
 800435a:	2300      	movs	r3, #0
 800435c:	e007      	b.n	800436e <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 800435e:	f107 0308 	add.w	r3, r7, #8
 8004362:	2220      	movs	r2, #32
 8004364:	4619      	mov	r1, r3
 8004366:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004368:	f000 fe22 	bl	8004fb0 <memcpy>

    return state;
 800436c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800436e:	4618      	mov	r0, r3
 8004370:	3730      	adds	r7, #48	@ 0x30
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b084      	sub	sp, #16
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8004380:	e01b      	b.n	80043ba <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f103 020c 	add.w	r2, r3, #12
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f7fe fd16 	bl	8002dc0 <canardBufferFromIdx>
 8004394:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	330c      	adds	r3, #12
 80043a0:	68f9      	ldr	r1, [r7, #12]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fbb5 	bl	8004b12 <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	330c      	adds	r3, #12
 80043ac:	68b9      	ldr	r1, [r7, #8]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7fe fd12 	bl	8002dd8 <canardBufferToIdx>
 80043b4:	4602      	mov	r2, r0
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1df      	bne.n	8004382 <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	8ad3      	ldrh	r3, [r2, #22]
 80043c6:	f36f 0309 	bfc	r3, #0, #10
 80043ca:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 80043cc:	f04f 0200 	mov.w	r2, #0
 80043d0:	f04f 0300 	mov.w	r3, #0
}
 80043d4:	4610      	mov	r0, r2
 80043d6:	4619      	mov	r1, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08a      	sub	sp, #40	@ 0x28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 80043ee:	2300      	movs	r3, #0
 80043f0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	8adb      	ldrh	r3, [r3, #22]
 80043f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	2b05      	cmp	r3, #5
 80043fe:	d036      	beq.n	800446e <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	8adb      	ldrh	r3, [r3, #22]
 8004404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004408:	b29b      	uxth	r3, r3
 800440a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800440c:	e00e      	b.n	800442c <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 800440e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	441a      	add	r2, r3
 8004414:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004416:	7811      	ldrb	r1, [r2, #0]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	4413      	add	r3, r2
 800441c:	460a      	mov	r2, r1
 800441e:	76da      	strb	r2, [r3, #27]
             i++, data_index++)
 8004420:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004422:	3301      	adds	r3, #1
 8004424:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004426:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004428:	3301      	adds	r3, #1
 800442a:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 800442c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800442e:	2b04      	cmp	r3, #4
 8004430:	d804      	bhi.n	800443c <bufferBlockPushBytes+0x5c>
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	b29b      	uxth	r3, r3
 8004436:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004438:	429a      	cmp	r2, r3
 800443a:	d3e8      	bcc.n	800440e <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	b29b      	uxth	r3, r3
 8004440:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004442:	429a      	cmp	r2, r3
 8004444:	d313      	bcc.n	800446e <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	8adb      	ldrh	r3, [r3, #22]
 800444a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800444e:	b29b      	uxth	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	b29b      	uxth	r3, r3
 8004456:	4413      	add	r3, r2
 8004458:	b29b      	uxth	r3, r3
 800445a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800445e:	b299      	uxth	r1, r3
            state->payload_len =
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	8ad3      	ldrh	r3, [r2, #22]
 8004464:	f361 0309 	bfi	r3, r1, #0, #10
 8004468:	82d3      	strh	r3, [r2, #22]
            return 1;
 800446a:	2301      	movs	r3, #1
 800446c:	e0ae      	b.n	80045cc <bufferBlockPushBytes+0x1ec>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	8adb      	ldrh	r3, [r3, #22]
 8004472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004476:	b29b      	uxth	r3, r3
 8004478:	1f5a      	subs	r2, r3, #5
 800447a:	0893      	lsrs	r3, r2, #2
 800447c:	4955      	ldr	r1, [pc, #340]	@ (80045d4 <bufferBlockPushBytes+0x1f4>)
 800447e:	fba1 3103 	umull	r3, r1, r1, r3
 8004482:	460b      	mov	r3, r1
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	1a5b      	subs	r3, r3, r1
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 800448c:	847b      	strh	r3, [r7, #34]	@ 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d113      	bne.n	80044c2 <bufferBlockPushBytes+0xe2>
    {
        block = createBufferBlock(allocator);
 800449a:	68f8      	ldr	r0, [r7, #12]
 800449c:	f000 f89c 	bl	80045d8 <createBufferBlock>
 80044a0:	61f8      	str	r0, [r7, #28]
        state->buffer_blocks = canardBufferToIdx(allocator, block);
 80044a2:	69f9      	ldr	r1, [r7, #28]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7fe fc97 	bl	8002dd8 <canardBufferToIdx>
 80044aa:	4602      	mov	r2, r0
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	605a      	str	r2, [r3, #4]
        if (block == NULL)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d102      	bne.n	80044bc <bufferBlockPushBytes+0xdc>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80044b6:	f06f 0302 	mvn.w	r3, #2
 80044ba:	e087      	b.n	80045cc <bufferBlockPushBytes+0x1ec>
        }

        index_at_nth_block = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	847b      	strh	r3, [r7, #34]	@ 0x22
 80044c0:	e06c      	b.n	800459c <bufferBlockPushBytes+0x1bc>
    }
    else
    {
        uint16_t nth_block = 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	837b      	strh	r3, [r7, #26]

        // get to block
        block = canardBufferFromIdx(allocator, state->buffer_blocks);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	4619      	mov	r1, r3
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7fe fc77 	bl	8002dc0 <canardBufferFromIdx>
 80044d2:	61f8      	str	r0, [r7, #28]
        while (block->next != NULL)
 80044d4:	e005      	b.n	80044e2 <bufferBlockPushBytes+0x102>
        {
            nth_block++;
 80044d6:	8b7b      	ldrh	r3, [r7, #26]
 80044d8:	3301      	adds	r3, #1
 80044da:	837b      	strh	r3, [r7, #26]
            block = block->next;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1f5      	bne.n	80044d6 <bufferBlockPushBytes+0xf6>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	8adb      	ldrh	r3, [r3, #22]
 80044ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	461a      	mov	r2, r3
 80044f6:	78fb      	ldrb	r3, [r7, #3]
 80044f8:	4413      	add	r3, r2
 80044fa:	3b05      	subs	r3, #5
 80044fc:	089b      	lsrs	r3, r3, #2
 80044fe:	4a35      	ldr	r2, [pc, #212]	@ (80045d4 <bufferBlockPushBytes+0x1f4>)
 8004500:	fba2 2303 	umull	r2, r3, r2, r3
 8004504:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 8004506:	3301      	adds	r3, #1
 8004508:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 800450a:	8afa      	ldrh	r2, [r7, #22]
 800450c:	8b7b      	ldrh	r3, [r7, #26]
 800450e:	429a      	cmp	r2, r3
 8004510:	d944      	bls.n	800459c <bufferBlockPushBytes+0x1bc>
 8004512:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004514:	2b00      	cmp	r3, #0
 8004516:	d141      	bne.n	800459c <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f85d 	bl	80045d8 <createBufferBlock>
 800451e:	4602      	mov	r2, r0
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d102      	bne.n	8004532 <bufferBlockPushBytes+0x152>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 800452c:	f06f 0302 	mvn.w	r3, #2
 8004530:	e04c      	b.n	80045cc <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 8004538:	e030      	b.n	800459c <bufferBlockPushBytes+0x1bc>
    {
        for (uint16_t i = index_at_nth_block;
 800453a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800453c:	833b      	strh	r3, [r7, #24]
 800453e:	e00e      	b.n	800455e <bufferBlockPushBytes+0x17e>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8004540:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	441a      	add	r2, r3
 8004546:	8b3b      	ldrh	r3, [r7, #24]
 8004548:	7811      	ldrb	r1, [r2, #0]
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	4413      	add	r3, r2
 800454e:	460a      	mov	r2, r1
 8004550:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 8004552:	8b3b      	ldrh	r3, [r7, #24]
 8004554:	3301      	adds	r3, #1
 8004556:	833b      	strh	r3, [r7, #24]
 8004558:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800455a:	3301      	adds	r3, #1
 800455c:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 800455e:	8b3b      	ldrh	r3, [r7, #24]
 8004560:	2b1b      	cmp	r3, #27
 8004562:	d804      	bhi.n	800456e <bufferBlockPushBytes+0x18e>
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	b29b      	uxth	r3, r3
 8004568:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800456a:	429a      	cmp	r2, r3
 800456c:	d3e8      	bcc.n	8004540 <bufferBlockPushBytes+0x160>
        }

        if (data_index < data_len)
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	b29b      	uxth	r3, r3
 8004572:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004574:	429a      	cmp	r2, r3
 8004576:	d211      	bcs.n	800459c <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f82d 	bl	80045d8 <createBufferBlock>
 800457e:	4602      	mov	r2, r0
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <bufferBlockPushBytes+0x1b2>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 800458c:	f06f 0302 	mvn.w	r3, #2
 8004590:	e01c      	b.n	80045cc <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	847b      	strh	r3, [r7, #34]	@ 0x22
    while (data_index < data_len)
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d3c9      	bcc.n	800453a <bufferBlockPushBytes+0x15a>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	8adb      	ldrh	r3, [r3, #22]
 80045aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	78fb      	ldrb	r3, [r7, #3]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045be:	b299      	uxth	r1, r3
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	8ad3      	ldrh	r3, [r2, #22]
 80045c4:	f361 0309 	bfi	r3, r1, #0, #10
 80045c8:	82d3      	strh	r3, [r2, #22]

    return 1;
 80045ca:	2301      	movs	r3, #1
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3728      	adds	r7, #40	@ 0x28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	24924925 	.word	0x24924925

080045d8 <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 fa6d 	bl	8004ac0 <allocateBlock>
 80045e6:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <createBufferBlock+0x1a>
    {
        return NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	e003      	b.n	80045fa <createBufferBlock+0x22>
    }
    block->next = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	601a      	str	r2, [r3, #0]
    return block;
 80045f8:	68fb      	ldr	r3, [r7, #12]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 8004602:	b480      	push	{r7}
 8004604:	b089      	sub	sp, #36	@ 0x24
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
 800460e:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	08db      	lsrs	r3, r3, #3
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 800461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461c:	08db      	lsrs	r3, r3, #3
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	4413      	add	r3, r2
 8004622:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 0307 	and.w	r3, r3, #7
 800462a:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 8004634:	68ba      	ldr	r2, [r7, #8]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4413      	add	r3, r2
 800463a:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 800463c:	e04d      	b.n	80046da <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8004648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464a:	b2db      	uxtb	r3, r3
 800464c:	f003 0307 	and.w	r3, r3, #7
 8004650:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8004652:	7eba      	ldrb	r2, [r7, #26]
 8004654:	7efb      	ldrb	r3, [r7, #27]
 8004656:	4293      	cmp	r3, r2
 8004658:	bf38      	it	cc
 800465a:	4613      	movcc	r3, r2
 800465c:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 800465e:	7e7b      	ldrb	r3, [r7, #25]
 8004660:	f1c3 0208 	rsb	r2, r3, #8
 8004664:	69f9      	ldr	r1, [r7, #28]
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	1acb      	subs	r3, r1, r3
 800466a:	4293      	cmp	r3, r2
 800466c:	bf28      	it	cs
 800466e:	4613      	movcs	r3, r2
 8004670:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8004672:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	fa22 f303 	lsr.w	r3, r2, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	7ebb      	ldrb	r3, [r7, #26]
 8004682:	fa42 f303 	asr.w	r3, r2, r3
 8004686:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	08db      	lsrs	r3, r3, #3
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	7efb      	ldrb	r3, [r7, #27]
 8004696:	409a      	lsls	r2, r3
 8004698:	7ebb      	ldrb	r3, [r7, #26]
 800469a:	fa22 f303 	lsr.w	r3, r2, r3
 800469e:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 80046a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a2:	08db      	lsrs	r3, r3, #3
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	4413      	add	r3, r2
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	7cfb      	ldrb	r3, [r7, #19]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	4013      	ands	r3, r2
 80046b2:	b2d9      	uxtb	r1, r3
 80046b4:	7cba      	ldrb	r2, [r7, #18]
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	4013      	ands	r3, r2
 80046ba:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 80046bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046be:	08db      	lsrs	r3, r3, #3
 80046c0:	6838      	ldr	r0, [r7, #0]
 80046c2:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 80046c4:	430a      	orrs	r2, r1
 80046c6:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 80046c8:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	4413      	add	r3, r2
 80046d0:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 80046d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	4413      	add	r3, r2
 80046d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 80046da:	69fa      	ldr	r2, [r7, #28]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d1ad      	bne.n	800463e <copyBitArray+0x3c>
    }
}
 80046e2:	bf00      	nop
 80046e4:	bf00      	nop
 80046e6:	3724      	adds	r7, #36	@ 0x24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b090      	sub	sp, #64	@ 0x40
 80046f4:	af02      	add	r7, sp, #8
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	4613      	mov	r3, r2
 80046fe:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8a9b      	ldrh	r3, [r3, #20]
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	461a      	mov	r2, r3
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4293      	cmp	r3, r2
 800470c:	d301      	bcc.n	8004712 <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 800470e:	2300      	movs	r3, #0
 8004710:	e0df      	b.n	80048d2 <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 8004712:	79fa      	ldrb	r2, [r7, #7]
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	4413      	add	r3, r2
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	8a92      	ldrh	r2, [r2, #20]
 800471c:	00d2      	lsls	r2, r2, #3
 800471e:	4293      	cmp	r3, r2
 8004720:	d908      	bls.n	8004734 <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8a9b      	ldrh	r3, [r3, #20]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	b2da      	uxtb	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	b2db      	uxtb	r3, r3
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d104      	bne.n	8004746 <descatterTransferPayload+0x56>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80b9 	beq.w	80048b8 <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t output_bit_offset = 0;
 800474a:	2300      	movs	r3, #0
 800474c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        uint8_t remaining_bit_length = bit_length;
 8004750:	79fb      	ldrb	r3, [r7, #7]
 8004752:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8004756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004758:	2b27      	cmp	r3, #39	@ 0x27
 800475a:	d82d      	bhi.n	80047b8 <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 800475c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8004760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004762:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8004766:	429a      	cmp	r2, r3
 8004768:	d305      	bcc.n	8004776 <descatterTransferPayload+0x86>
 800476a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8004772:	b2db      	uxtb	r3, r3
 8004774:	e001      	b.n	800477a <descatterTransferPayload+0x8a>
 8004776:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6898      	ldr	r0, [r3, #8]
 8004782:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004786:	2300      	movs	r3, #0
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800478e:	f7ff ff38 	bl	8004602 <copyBitArray>

            input_bit_offset += amount;
 8004792:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004796:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004798:	4413      	add	r3, r2
 800479a:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 800479c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80047a0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047a4:	4413      	add	r3, r2
 80047a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80047aa:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80047ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8a9b      	ldrh	r3, [r3, #20]
 80047bc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80047c0:	3b05      	subs	r3, #5
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 80047c6:	2328      	movs	r3, #40	@ 0x28
 80047c8:	62bb      	str	r3, [r7, #40]	@ 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 80047d0:	e044      	b.n	800485c <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 80047d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d4:	2be0      	cmp	r3, #224	@ 0xe0
 80047d6:	bf28      	it	cs
 80047d8:	23e0      	movcs	r3, #224	@ 0xe0
 80047da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047dc:	4413      	add	r3, r2
 80047de:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 80047e0:	69fa      	ldr	r2, [r7, #28]
 80047e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d92e      	bls.n	8004846 <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 80047e8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80047ec:	69f9      	ldr	r1, [r7, #28]
 80047ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047f0:	1acb      	subs	r3, r1, r3
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d306      	bcc.n	8004804 <descatterTransferPayload+0x114>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	b2db      	uxtb	r3, r3
 8004802:	e001      	b.n	8004808 <descatterTransferPayload+0x118>
 8004804:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004808:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 800480a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800480c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8004812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004814:	1d18      	adds	r0, r3, #4
 8004816:	7efa      	ldrb	r2, [r7, #27]
 8004818:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800481c:	9300      	str	r3, [sp, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6979      	ldr	r1, [r7, #20]
 8004822:	f7ff feee 	bl	8004602 <copyBitArray>

                input_bit_offset += amount;
 8004826:	7efb      	ldrb	r3, [r7, #27]
 8004828:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800482a:	4413      	add	r3, r2
 800482c:	637b      	str	r3, [r7, #52]	@ 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 800482e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8004832:	7efb      	ldrb	r3, [r7, #27]
 8004834:	4413      	add	r3, r2
 8004836:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 800483a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800483e:	7efb      	ldrb	r3, [r7, #27]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8004846:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800484e:	4413      	add	r3, r2
 8004850:	62fb      	str	r3, [r7, #44]	@ 0x2c
            block_bit_offset = block_end_bit_offset;
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	62bb      	str	r3, [r7, #40]	@ 0x28
            block = block->next;
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 800485c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <descatterTransferPayload+0x17a>
 8004862:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1b3      	bne.n	80047d2 <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d02c      	beq.n	80048cc <descatterTransferPayload+0x1dc>
 8004872:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d028      	beq.n	80048cc <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 800487a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800487c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6918      	ldr	r0, [r3, #16]
 8004886:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800488a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	6939      	ldr	r1, [r7, #16]
 8004894:	f7ff feb5 	bl	8004602 <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 8004898:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800489c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800489e:	4413      	add	r3, r2
 80048a0:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 80048a2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80048a6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80048aa:	4413      	add	r3, r2
 80048ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    {
 80048b6:	e009      	b.n	80048cc <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6898      	ldr	r0, [r3, #8]
 80048bc:	79fa      	ldrb	r2, [r7, #7]
 80048be:	2300      	movs	r3, #0
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	68b9      	ldr	r1, [r7, #8]
 80048c6:	f7ff fe9c 	bl	8004602 <copyBitArray>
 80048ca:	e000      	b.n	80048ce <descatterTransferPayload+0x1de>
    {
 80048cc:	bf00      	nop
    }

    return bit_length;
 80048ce:	79fb      	ldrb	r3, [r7, #7]
 80048d0:	b21b      	sxth	r3, r3
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3738      	adds	r7, #56	@ 0x38
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 80048e0:	2301      	movs	r3, #1
 80048e2:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 80048e4:	797b      	ldrb	r3, [r7, #5]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	bf0c      	ite	eq
 80048ea:	2301      	moveq	r3, #1
 80048ec:	2300      	movne	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
#endif
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	3b01      	subs	r3, #1
 8004912:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 8004914:	e017      	b.n	8004946 <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	4413      	add	r3, r2
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	441a      	add	r2, r3
 8004926:	68f9      	ldr	r1, [r7, #12]
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	440b      	add	r3, r1
 800492c:	7812      	ldrb	r2, [r2, #0]
 800492e:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4413      	add	r3, r2
 8004936:	7afa      	ldrb	r2, [r7, #11]
 8004938:	701a      	strb	r2, [r3, #0]
        fwd++;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	3301      	adds	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
        rev--;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	3b01      	subs	r3, #1
 8004944:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	429a      	cmp	r2, r3
 800494c:	d3e3      	bcc.n	8004916 <swapByteOrder+0x1a>
    }
}
 800494e:	bf00      	nop
 8004950:	bf00      	nop
 8004952:	371c      	adds	r7, #28
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	460a      	mov	r2, r1
 8004966:	80fb      	strh	r3, [r7, #6]
 8004968:	4613      	mov	r3, r2
 800496a:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 800496c:	797b      	ldrb	r3, [r7, #5]
 800496e:	b29b      	uxth	r3, r3
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	b29a      	uxth	r2, r3
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	4053      	eors	r3, r2
 8004978:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 800497a:	2300      	movs	r3, #0
 800497c:	73fb      	strb	r3, [r7, #15]
 800497e:	e012      	b.n	80049a6 <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 8004980:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004984:	2b00      	cmp	r3, #0
 8004986:	da08      	bge.n	800499a <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8004988:	88fb      	ldrh	r3, [r7, #6]
 800498a:	005b      	lsls	r3, r3, #1
 800498c:	b29b      	uxth	r3, r3
 800498e:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8004992:	f083 0301 	eor.w	r3, r3, #1
 8004996:	80fb      	strh	r3, [r7, #6]
 8004998:	e002      	b.n	80049a0 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 800499a:	88fb      	ldrh	r3, [r7, #6]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	3301      	adds	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	2b07      	cmp	r3, #7
 80049aa:	d9e9      	bls.n	8004980 <crcAddByte+0x24>
        }
    }
    return crc_val;
 80049ac:	88fb      	ldrh	r3, [r7, #6]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 80049ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049bc:	b087      	sub	sp, #28
 80049be:	af00      	add	r7, sp, #0
 80049c0:	4601      	mov	r1, r0
 80049c2:	e9c7 2300 	strd	r2, r3, [r7]
 80049c6:	460b      	mov	r3, r1
 80049c8:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80049ca:	2300      	movs	r3, #0
 80049cc:	82fb      	strh	r3, [r7, #22]
 80049ce:	e01b      	b.n	8004a08 <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 80049d0:	8af9      	ldrh	r1, [r7, #22]
 80049d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049d6:	f1c1 0620 	rsb	r6, r1, #32
 80049da:	f1a1 0020 	sub.w	r0, r1, #32
 80049de:	fa22 f401 	lsr.w	r4, r2, r1
 80049e2:	fa03 f606 	lsl.w	r6, r3, r6
 80049e6:	4334      	orrs	r4, r6
 80049e8:	fa23 f000 	lsr.w	r0, r3, r0
 80049ec:	4304      	orrs	r4, r0
 80049ee:	fa23 f501 	lsr.w	r5, r3, r1
 80049f2:	b2e2      	uxtb	r2, r4
 80049f4:	89fb      	ldrh	r3, [r7, #14]
 80049f6:	4611      	mov	r1, r2
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff ffaf 	bl	800495c <crcAddByte>
 80049fe:	4603      	mov	r3, r0
 8004a00:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8004a02:	8afb      	ldrh	r3, [r7, #22]
 8004a04:	3308      	adds	r3, #8
 8004a06:	82fb      	strh	r3, [r7, #22]
 8004a08:	8afb      	ldrh	r3, [r7, #22]
 8004a0a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a0c:	d9e0      	bls.n	80049d0 <crcAddSignature+0x16>
    }
    return crc_val;
 8004a0e:	89fb      	ldrh	r3, [r7, #14]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	371c      	adds	r7, #28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a18 <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	4603      	mov	r3, r0
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8004a26:	e00a      	b.n	8004a3e <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	60ba      	str	r2, [r7, #8]
 8004a2e:	781a      	ldrb	r2, [r3, #0]
 8004a30:	89fb      	ldrh	r3, [r7, #14]
 8004a32:	4611      	mov	r1, r2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff ff91 	bl	800495c <crcAddByte>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	1e5a      	subs	r2, r3, #1
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d1ef      	bne.n	8004a28 <crcAdd+0x10>
    }
    return crc_val;
 8004a48:	89fb      	ldrh	r3, [r7, #14]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3710      	adds	r7, #16
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b089      	sub	sp, #36	@ 0x24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	60f8      	str	r0, [r7, #12]
 8004a5a:	60b9      	str	r1, [r7, #8]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3304      	adds	r3, #4
 8004a72:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 8004a74:	e00b      	b.n	8004a8e <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	015b      	lsls	r3, r3, #5
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	441a      	add	r2, r3
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	61bb      	str	r3, [r7, #24]
        current_index++;
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	69fa      	ldr	r2, [r7, #28]
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d3ef      	bcc.n	8004a76 <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	88fa      	ldrh	r2, [r7, #6]
 8004aa0:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	3724      	adds	r7, #36	@ 0x24
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b085      	sub	sp, #20
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d101      	bne.n	8004ad4 <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	e018      	b.n	8004b06 <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	895b      	ldrh	r3, [r3, #10]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	899a      	ldrh	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	895b      	ldrh	r3, [r3, #10]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d203      	bcs.n	8004b04 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	895a      	ldrh	r2, [r3, #10]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 8004b04:	68fb      	ldr	r3, [r7, #12]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8004b12:	b480      	push	{r7}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
 8004b1a:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	895b      	ldrh	r3, [r3, #10]
 8004b32:	3b01      	subs	r3, #1
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 8004b3a:	bf00      	nop
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <_hyp_msg_BatteryStatus_Hyp_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _hyp_msg_BatteryStatus_Hyp_encode(uint8_t* buffer, uint32_t* bit_ofs, struct hyp_msg_BatteryStatus_Hyp* msg, bool tao);
static inline bool _hyp_msg_BatteryStatus_Hyp_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct hyp_msg_BatteryStatus_Hyp* msg, bool tao);
void _hyp_msg_BatteryStatus_Hyp_encode(uint8_t* buffer, uint32_t* bit_ofs, struct hyp_msg_BatteryStatus_Hyp* msg, bool tao) {
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b086      	sub	sp, #24
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	70fb      	strb	r3, [r7, #3]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->temperature);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	edd3 7a00 	vldr	s15, [r3]
 8004b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b5e:	f7ff f801 	bl	8003b64 <canardConvertNativeFloatToFloat16>
 8004b62:	4603      	mov	r3, r0
 8004b64:	823b      	strh	r3, [r7, #16]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	f107 0310 	add.w	r3, r7, #16
 8004b6e:	2210      	movs	r2, #16
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f7fe ff50 	bl	8003a16 <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f103 0210 	add.w	r2, r3, #16
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->voltage);
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	6819      	ldr	r1, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	3304      	adds	r3, #4
 8004b8a:	2210      	movs	r2, #16
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f7fe ff42 	bl	8003a16 <canardEncodeScalar>

    *bit_ofs += 16;
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f103 0210 	add.w	r2, r3, #16
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->current);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	6819      	ldr	r1, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3306      	adds	r3, #6
 8004ba6:	2210      	movs	r2, #16
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f7fe ff34 	bl	8003a16 <canardEncodeScalar>

    *bit_ofs += 16;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f103 0210 	add.w	r2, r3, #16
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->time_to_full);
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	6819      	ldr	r1, [r3, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	2210      	movs	r2, #16
 8004bc4:	68f8      	ldr	r0, [r7, #12]
 8004bc6:	f7fe ff26 	bl	8003a16 <canardEncodeScalar>

    *bit_ofs += 16;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f103 0210 	add.w	r2, r3, #16
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->time_to_empty);
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6819      	ldr	r1, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	330a      	adds	r3, #10
 8004bde:	2210      	movs	r2, #16
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f7fe ff18 	bl	8003a16 <canardEncodeScalar>

    *bit_ofs += 16;
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f103 0210 	add.w	r2, r3, #16
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->button);
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	6819      	ldr	r1, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	330c      	adds	r3, #12
 8004bfa:	2208      	movs	r2, #8
 8004bfc:	68f8      	ldr	r0, [r7, #12]
 8004bfe:	f7fe ff0a 	bl	8003a16 <canardEncodeScalar>

    *bit_ofs += 8;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f103 0208 	add.w	r2, r3, #8
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->is_charging);
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	6819      	ldr	r1, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	330d      	adds	r3, #13
 8004c16:	2208      	movs	r2, #8
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f7fe fefc 	bl	8003a16 <canardEncodeScalar>

    *bit_ofs += 8;
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f103 0208 	add.w	r2, r3, #8
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->adapter_power);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6819      	ldr	r1, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	330e      	adds	r3, #14
 8004c32:	2208      	movs	r2, #8
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f7fe feee 	bl	8003a16 <canardEncodeScalar>

    *bit_ofs += 8;
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f103 0208 	add.w	r2, r3, #8
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	601a      	str	r2, [r3, #0]



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const uint8_t name_len = msg->name.len > 50 ? 50 : msg->name.len;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	7bdb      	ldrb	r3, [r3, #15]
 8004c4a:	2b32      	cmp	r3, #50	@ 0x32
 8004c4c:	bf28      	it	cs
 8004c4e:	2332      	movcs	r3, #50	@ 0x32
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	74fb      	strb	r3, [r7, #19]
#pragma GCC diagnostic pop

    canardEncodeScalar(buffer, *bit_ofs, 6, &name_len);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6819      	ldr	r1, [r3, #0]
 8004c58:	f107 0313 	add.w	r3, r7, #19
 8004c5c:	2206      	movs	r2, #6
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f7fe fed9 	bl	8003a16 <canardEncodeScalar>
    *bit_ofs += 6;
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	1d9a      	adds	r2, r3, #6
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	601a      	str	r2, [r3, #0]

    for (size_t i=0; i < name_len; i++) {
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e013      	b.n	8004c9c <_hyp_msg_BatteryStatus_Hyp_encode+0x156>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->name.data[i]);
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	6819      	ldr	r1, [r3, #0]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	4413      	add	r3, r2
 8004c80:	3308      	adds	r3, #8
 8004c82:	2208      	movs	r2, #8
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f7fe fec6 	bl	8003a16 <canardEncodeScalar>

        *bit_ofs += 8;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f103 0208 	add.w	r2, r3, #8
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < name_len; i++) {
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	3301      	adds	r3, #1
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	7cfb      	ldrb	r3, [r7, #19]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d3e6      	bcc.n	8004c74 <_hyp_msg_BatteryStatus_Hyp_encode+0x12e>





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->state_of_charge_percent);
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	6819      	ldr	r1, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	3342      	adds	r3, #66	@ 0x42
 8004cae:	2208      	movs	r2, #8
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f7fe feb0 	bl	8003a16 <canardEncodeScalar>

    *bit_ofs += 8;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f103 0208 	add.w	r2, r3, #8
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->full_charge_flag);
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	6819      	ldr	r1, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	3343      	adds	r3, #67	@ 0x43
 8004cca:	2208      	movs	r2, #8
 8004ccc:	68f8      	ldr	r0, [r7, #12]
 8004cce:	f7fe fea2 	bl	8003a16 <canardEncodeScalar>

    *bit_ofs += 8;
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f103 0208 	add.w	r2, r3, #8
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	601a      	str	r2, [r3, #0]





}
 8004cde:	bf00      	nop
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <_hyp_msg_BatteryStatus_Hyp_decode>:

/*
 decode hyp_msg_BatteryStatus_Hyp, return true on failure, false on success
*/
bool _hyp_msg_BatteryStatus_Hyp_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct hyp_msg_BatteryStatus_Hyp* msg, bool tao) {
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b088      	sub	sp, #32
 8004cea:	af02      	add	r7, sp, #8
 8004cec:	60f8      	str	r0, [r7, #12]
 8004cee:	60b9      	str	r1, [r7, #8]
 8004cf0:	607a      	str	r2, [r7, #4]
 8004cf2:	70fb      	strb	r3, [r7, #3]



    {
        uint16_t float16_val;
        canardDecodeScalar(transfer, *bit_ofs, 16, true, &float16_val);
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	6819      	ldr	r1, [r3, #0]
 8004cf8:	f107 0312 	add.w	r3, r7, #18
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	2301      	movs	r3, #1
 8004d00:	2210      	movs	r2, #16
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f7fe fcfe 	bl	8003704 <canardDecodeScalar>
        msg->temperature = canardConvertFloat16ToNativeFloat(float16_val);
 8004d08:	8a7b      	ldrh	r3, [r7, #18]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fe ff80 	bl	8003c10 <canardConvertFloat16ToNativeFloat>
 8004d10:	eef0 7a40 	vmov.f32	s15, s0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	edc3 7a00 	vstr	s15, [r3]
    }

    *bit_ofs += 16;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f103 0210 	add.w	r2, r3, #16
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->voltage);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	6819      	ldr	r1, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	9300      	str	r3, [sp, #0]
 8004d30:	2300      	movs	r3, #0
 8004d32:	2210      	movs	r2, #16
 8004d34:	68f8      	ldr	r0, [r7, #12]
 8004d36:	f7fe fce5 	bl	8003704 <canardDecodeScalar>

    *bit_ofs += 16;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f103 0210 	add.w	r2, r3, #16
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, true, &msg->current);
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	6819      	ldr	r1, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3306      	adds	r3, #6
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	2301      	movs	r3, #1
 8004d52:	2210      	movs	r2, #16
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f7fe fcd5 	bl	8003704 <canardDecodeScalar>

    *bit_ofs += 16;
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f103 0210 	add.w	r2, r3, #16
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->time_to_full);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	6819      	ldr	r1, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	9300      	str	r3, [sp, #0]
 8004d70:	2300      	movs	r3, #0
 8004d72:	2210      	movs	r2, #16
 8004d74:	68f8      	ldr	r0, [r7, #12]
 8004d76:	f7fe fcc5 	bl	8003704 <canardDecodeScalar>

    *bit_ofs += 16;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f103 0210 	add.w	r2, r3, #16
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->time_to_empty);
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	6819      	ldr	r1, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	330a      	adds	r3, #10
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	2300      	movs	r3, #0
 8004d92:	2210      	movs	r2, #16
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7fe fcb5 	bl	8003704 <canardDecodeScalar>

    *bit_ofs += 16;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f103 0210 	add.w	r2, r3, #16
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->button);
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	6819      	ldr	r1, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	330c      	adds	r3, #12
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	2300      	movs	r3, #0
 8004db2:	2208      	movs	r2, #8
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f7fe fca5 	bl	8003704 <canardDecodeScalar>

    *bit_ofs += 8;
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f103 0208 	add.w	r2, r3, #8
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->is_charging);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	330d      	adds	r3, #13
 8004dce:	9300      	str	r3, [sp, #0]
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	f7fe fc95 	bl	8003704 <canardDecodeScalar>

    *bit_ofs += 8;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f103 0208 	add.w	r2, r3, #8
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->adapter_power);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6819      	ldr	r1, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	330e      	adds	r3, #14
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	2300      	movs	r3, #0
 8004df2:	2208      	movs	r2, #8
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7fe fc85 	bl	8003704 <canardDecodeScalar>

    *bit_ofs += 8;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f103 0208 	add.w	r2, r3, #8
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 6, false, &msg->name.len);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	330f      	adds	r3, #15
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2300      	movs	r3, #0
 8004e12:	2206      	movs	r2, #6
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7fe fc75 	bl	8003704 <canardDecodeScalar>
    *bit_ofs += 6;
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	1d9a      	adds	r2, r3, #6
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	601a      	str	r2, [r3, #0]


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->name.len > 50) {
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	7bdb      	ldrb	r3, [r3, #15]
 8004e28:	2b32      	cmp	r3, #50	@ 0x32
 8004e2a:	d901      	bls.n	8004e30 <_hyp_msg_BatteryStatus_Hyp_decode+0x14a>
        return true; /* invalid value */
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e03f      	b.n	8004eb0 <_hyp_msg_BatteryStatus_Hyp_decode+0x1ca>
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->name.len; i++) {
 8004e30:	2300      	movs	r3, #0
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	e015      	b.n	8004e62 <_hyp_msg_BatteryStatus_Hyp_decode+0x17c>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->name.data[i]);
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	6819      	ldr	r1, [r3, #0]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	3308      	adds	r3, #8
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	4413      	add	r3, r2
 8004e42:	3308      	adds	r3, #8
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	2300      	movs	r3, #0
 8004e48:	2208      	movs	r2, #8
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f7fe fc5a 	bl	8003704 <canardDecodeScalar>

        *bit_ofs += 8;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f103 0208 	add.w	r2, r3, #8
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->name.len; i++) {
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	7bdb      	ldrb	r3, [r3, #15]
 8004e66:	461a      	mov	r2, r3
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d3e3      	bcc.n	8004e36 <_hyp_msg_BatteryStatus_Hyp_decode+0x150>





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->state_of_charge_percent);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	6819      	ldr	r1, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3342      	adds	r3, #66	@ 0x42
 8004e76:	9300      	str	r3, [sp, #0]
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f7fe fc41 	bl	8003704 <canardDecodeScalar>

    *bit_ofs += 8;
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f103 0208 	add.w	r2, r3, #8
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->full_charge_flag);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	6819      	ldr	r1, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3343      	adds	r3, #67	@ 0x43
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	2300      	movs	r3, #0
 8004e9a:	2208      	movs	r2, #8
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f7fe fc31 	bl	8003704 <canardDecodeScalar>

    *bit_ofs += 8;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f103 0208 	add.w	r2, r3, #8
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8004eae:	2300      	movs	r3, #0

}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <hyp_msg_BatteryStatus_Hyp_encode>:

uint32_t hyp_msg_BatteryStatus_Hyp_encode(struct hyp_msg_BatteryStatus_Hyp* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, HYP_MSG_BATTERYSTATUS_HYP_MAX_SIZE);
 8004ec6:	2242      	movs	r2, #66	@ 0x42
 8004ec8:	2100      	movs	r1, #0
 8004eca:	6838      	ldr	r0, [r7, #0]
 8004ecc:	f000 f832 	bl	8004f34 <memset>
    _hyp_msg_BatteryStatus_Hyp_encode(buffer, &bit_ofs, msg, 
 8004ed0:	f107 010c 	add.w	r1, r7, #12
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6838      	ldr	r0, [r7, #0]
 8004eda:	f7ff fe34 	bl	8004b46 <_hyp_msg_BatteryStatus_Hyp_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	3307      	adds	r3, #7
 8004ee2:	08db      	lsrs	r3, r3, #3
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <hyp_msg_BatteryStatus_Hyp_decode>:

/*
  return true if the decode is invalid
 */
bool hyp_msg_BatteryStatus_Hyp_decode(const CanardRxTransfer* transfer, struct hyp_msg_BatteryStatus_Hyp* msg) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > HYP_MSG_BATTERYSTATUS_HYP_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60bb      	str	r3, [r7, #8]
    if (_hyp_msg_BatteryStatus_Hyp_decode(transfer, &bit_ofs, msg,
 8004efa:	f107 0108 	add.w	r1, r7, #8
 8004efe:	2301      	movs	r3, #1
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f7ff feef 	bl	8004ce6 <_hyp_msg_BatteryStatus_Hyp_decode>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <hyp_msg_BatteryStatus_Hyp_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e00c      	b.n	8004f2c <hyp_msg_BatteryStatus_Hyp_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	3307      	adds	r3, #7
 8004f16:	08db      	lsrs	r3, r3, #3
 8004f18:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	8a9b      	ldrh	r3, [r3, #20]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4293      	cmp	r3, r2
 8004f24:	bf14      	ite	ne
 8004f26:	2301      	movne	r3, #1
 8004f28:	2300      	moveq	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3710      	adds	r7, #16
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}

08004f34 <memset>:
 8004f34:	4402      	add	r2, r0
 8004f36:	4603      	mov	r3, r0
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d100      	bne.n	8004f3e <memset+0xa>
 8004f3c:	4770      	bx	lr
 8004f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f42:	e7f9      	b.n	8004f38 <memset+0x4>

08004f44 <strncmp>:
 8004f44:	b510      	push	{r4, lr}
 8004f46:	b16a      	cbz	r2, 8004f64 <strncmp+0x20>
 8004f48:	3901      	subs	r1, #1
 8004f4a:	1884      	adds	r4, r0, r2
 8004f4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f50:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d103      	bne.n	8004f60 <strncmp+0x1c>
 8004f58:	42a0      	cmp	r0, r4
 8004f5a:	d001      	beq.n	8004f60 <strncmp+0x1c>
 8004f5c:	2a00      	cmp	r2, #0
 8004f5e:	d1f5      	bne.n	8004f4c <strncmp+0x8>
 8004f60:	1ad0      	subs	r0, r2, r3
 8004f62:	bd10      	pop	{r4, pc}
 8004f64:	4610      	mov	r0, r2
 8004f66:	e7fc      	b.n	8004f62 <strncmp+0x1e>

08004f68 <__libc_init_array>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	4d0d      	ldr	r5, [pc, #52]	@ (8004fa0 <__libc_init_array+0x38>)
 8004f6c:	4c0d      	ldr	r4, [pc, #52]	@ (8004fa4 <__libc_init_array+0x3c>)
 8004f6e:	1b64      	subs	r4, r4, r5
 8004f70:	10a4      	asrs	r4, r4, #2
 8004f72:	2600      	movs	r6, #0
 8004f74:	42a6      	cmp	r6, r4
 8004f76:	d109      	bne.n	8004f8c <__libc_init_array+0x24>
 8004f78:	4d0b      	ldr	r5, [pc, #44]	@ (8004fa8 <__libc_init_array+0x40>)
 8004f7a:	4c0c      	ldr	r4, [pc, #48]	@ (8004fac <__libc_init_array+0x44>)
 8004f7c:	f000 f826 	bl	8004fcc <_init>
 8004f80:	1b64      	subs	r4, r4, r5
 8004f82:	10a4      	asrs	r4, r4, #2
 8004f84:	2600      	movs	r6, #0
 8004f86:	42a6      	cmp	r6, r4
 8004f88:	d105      	bne.n	8004f96 <__libc_init_array+0x2e>
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f90:	4798      	blx	r3
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7ee      	b.n	8004f74 <__libc_init_array+0xc>
 8004f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9a:	4798      	blx	r3
 8004f9c:	3601      	adds	r6, #1
 8004f9e:	e7f2      	b.n	8004f86 <__libc_init_array+0x1e>
 8004fa0:	08005020 	.word	0x08005020
 8004fa4:	08005020 	.word	0x08005020
 8004fa8:	08005020 	.word	0x08005020
 8004fac:	08005024 	.word	0x08005024

08004fb0 <memcpy>:
 8004fb0:	440a      	add	r2, r1
 8004fb2:	4291      	cmp	r1, r2
 8004fb4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004fb8:	d100      	bne.n	8004fbc <memcpy+0xc>
 8004fba:	4770      	bx	lr
 8004fbc:	b510      	push	{r4, lr}
 8004fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004fc6:	4291      	cmp	r1, r2
 8004fc8:	d1f9      	bne.n	8004fbe <memcpy+0xe>
 8004fca:	bd10      	pop	{r4, pc}

08004fcc <_init>:
 8004fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fce:	bf00      	nop
 8004fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd2:	bc08      	pop	{r3}
 8004fd4:	469e      	mov	lr, r3
 8004fd6:	4770      	bx	lr

08004fd8 <_fini>:
 8004fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fda:	bf00      	nop
 8004fdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fde:	bc08      	pop	{r3}
 8004fe0:	469e      	mov	lr, r3
 8004fe2:	4770      	bx	lr
