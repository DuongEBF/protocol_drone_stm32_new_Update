
mixer_normal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08007688  08007688  00008688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac4  08007ac4  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007ac4  08007ac4  00008ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007acc  08007acc  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007acc  08007acc  00008acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007ad0  08007ad0  00008ad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007ad4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000002ac  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000480  20000480  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dff3  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c5  00000000  00000000  000171f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d68  00000000  00000000  000194c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a65  00000000  00000000  0001a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022523  00000000  00000000  0001ac8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f74b  00000000  00000000  0003d1b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd20a  00000000  00000000  0004c8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119b05  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004af4  00000000  00000000  00119b48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0011e63c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800766c 	.word	0x0800766c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800766c 	.word	0x0800766c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c20:	f000 b9be 	b.w	8000fa0 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f83c 	bl	8000ca8 <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__aeabi_d2lz>:
 8000c3c:	b538      	push	{r3, r4, r5, lr}
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2300      	movs	r3, #0
 8000c42:	4604      	mov	r4, r0
 8000c44:	460d      	mov	r5, r1
 8000c46:	f7ff ff49 	bl	8000adc <__aeabi_dcmplt>
 8000c4a:	b928      	cbnz	r0, 8000c58 <__aeabi_d2lz+0x1c>
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	4629      	mov	r1, r5
 8000c50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c54:	f000 b80a 	b.w	8000c6c <__aeabi_d2ulz>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c5e:	f000 f805 	bl	8000c6c <__aeabi_d2ulz>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	bd38      	pop	{r3, r4, r5, pc}
 8000c6a:	bf00      	nop

08000c6c <__aeabi_d2ulz>:
 8000c6c:	b5d0      	push	{r4, r6, r7, lr}
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <__aeabi_d2ulz+0x34>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	4606      	mov	r6, r0
 8000c74:	460f      	mov	r7, r1
 8000c76:	f7ff fcbf 	bl	80005f8 <__aeabi_dmul>
 8000c7a:	f7ff ff57 	bl	8000b2c <__aeabi_d2uiz>
 8000c7e:	4604      	mov	r4, r0
 8000c80:	f7ff fc40 	bl	8000504 <__aeabi_ui2d>
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <__aeabi_d2ulz+0x38>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	f7ff fcb6 	bl	80005f8 <__aeabi_dmul>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	460b      	mov	r3, r1
 8000c90:	4630      	mov	r0, r6
 8000c92:	4639      	mov	r1, r7
 8000c94:	f7ff faf8 	bl	8000288 <__aeabi_dsub>
 8000c98:	f7ff ff48 	bl	8000b2c <__aeabi_d2uiz>
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	bdd0      	pop	{r4, r6, r7, pc}
 8000ca0:	3df00000 	.word	0x3df00000
 8000ca4:	41f00000 	.word	0x41f00000

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	468e      	mov	lr, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	4688      	mov	r8, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d962      	bls.n	8000d84 <__udivmoddi4+0xdc>
 8000cbe:	fab2 f682 	clz	r6, r2
 8000cc2:	b14e      	cbz	r6, 8000cd8 <__udivmoddi4+0x30>
 8000cc4:	f1c6 0320 	rsb	r3, r6, #32
 8000cc8:	fa01 f806 	lsl.w	r8, r1, r6
 8000ccc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cd0:	40b7      	lsls	r7, r6
 8000cd2:	ea43 0808 	orr.w	r8, r3, r8
 8000cd6:	40b4      	lsls	r4, r6
 8000cd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cdc:	fa1f fc87 	uxth.w	ip, r7
 8000ce0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ce4:	0c23      	lsrs	r3, r4, #16
 8000ce6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cee:	fb01 f20c 	mul.w	r2, r1, ip
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf6:	18fb      	adds	r3, r7, r3
 8000cf8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000cfc:	f080 80ea 	bcs.w	8000ed4 <__udivmoddi4+0x22c>
 8000d00:	429a      	cmp	r2, r3
 8000d02:	f240 80e7 	bls.w	8000ed4 <__udivmoddi4+0x22c>
 8000d06:	3902      	subs	r1, #2
 8000d08:	443b      	add	r3, r7
 8000d0a:	1a9a      	subs	r2, r3, r2
 8000d0c:	b2a3      	uxth	r3, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1e:	459c      	cmp	ip, r3
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0x8e>
 8000d22:	18fb      	adds	r3, r7, r3
 8000d24:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d28:	f080 80d6 	bcs.w	8000ed8 <__udivmoddi4+0x230>
 8000d2c:	459c      	cmp	ip, r3
 8000d2e:	f240 80d3 	bls.w	8000ed8 <__udivmoddi4+0x230>
 8000d32:	443b      	add	r3, r7
 8000d34:	3802      	subs	r0, #2
 8000d36:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3a:	eba3 030c 	sub.w	r3, r3, ip
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11d      	cbz	r5, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40f3      	lsrs	r3, r6
 8000d44:	2200      	movs	r2, #0
 8000d46:	e9c5 3200 	strd	r3, r2, [r5]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d905      	bls.n	8000d5e <__udivmoddi4+0xb6>
 8000d52:	b10d      	cbz	r5, 8000d58 <__udivmoddi4+0xb0>
 8000d54:	e9c5 0100 	strd	r0, r1, [r5]
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4608      	mov	r0, r1
 8000d5c:	e7f5      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d5e:	fab3 f183 	clz	r1, r3
 8000d62:	2900      	cmp	r1, #0
 8000d64:	d146      	bne.n	8000df4 <__udivmoddi4+0x14c>
 8000d66:	4573      	cmp	r3, lr
 8000d68:	d302      	bcc.n	8000d70 <__udivmoddi4+0xc8>
 8000d6a:	4282      	cmp	r2, r0
 8000d6c:	f200 8105 	bhi.w	8000f7a <__udivmoddi4+0x2d2>
 8000d70:	1a84      	subs	r4, r0, r2
 8000d72:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d76:	2001      	movs	r0, #1
 8000d78:	4690      	mov	r8, r2
 8000d7a:	2d00      	cmp	r5, #0
 8000d7c:	d0e5      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d7e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d82:	e7e2      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	2a00      	cmp	r2, #0
 8000d86:	f000 8090 	beq.w	8000eaa <__udivmoddi4+0x202>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	f040 80a4 	bne.w	8000edc <__udivmoddi4+0x234>
 8000d94:	1a8a      	subs	r2, r1, r2
 8000d96:	0c03      	lsrs	r3, r0, #16
 8000d98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9c:	b280      	uxth	r0, r0
 8000d9e:	b2bc      	uxth	r4, r7
 8000da0:	2101      	movs	r1, #1
 8000da2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000da6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dae:	fb04 f20c 	mul.w	r2, r4, ip
 8000db2:	429a      	cmp	r2, r3
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x11e>
 8000db6:	18fb      	adds	r3, r7, r3
 8000db8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x11c>
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	f200 80e0 	bhi.w	8000f84 <__udivmoddi4+0x2dc>
 8000dc4:	46c4      	mov	ip, r8
 8000dc6:	1a9b      	subs	r3, r3, r2
 8000dc8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dcc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dd0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dd4:	fb02 f404 	mul.w	r4, r2, r4
 8000dd8:	429c      	cmp	r4, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x144>
 8000ddc:	18fb      	adds	r3, r7, r3
 8000dde:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x142>
 8000de4:	429c      	cmp	r4, r3
 8000de6:	f200 80ca 	bhi.w	8000f7e <__udivmoddi4+0x2d6>
 8000dea:	4602      	mov	r2, r0
 8000dec:	1b1b      	subs	r3, r3, r4
 8000dee:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000df2:	e7a5      	b.n	8000d40 <__udivmoddi4+0x98>
 8000df4:	f1c1 0620 	rsb	r6, r1, #32
 8000df8:	408b      	lsls	r3, r1
 8000dfa:	fa22 f706 	lsr.w	r7, r2, r6
 8000dfe:	431f      	orrs	r7, r3
 8000e00:	fa0e f401 	lsl.w	r4, lr, r1
 8000e04:	fa20 f306 	lsr.w	r3, r0, r6
 8000e08:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e0c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e10:	4323      	orrs	r3, r4
 8000e12:	fa00 f801 	lsl.w	r8, r0, r1
 8000e16:	fa1f fc87 	uxth.w	ip, r7
 8000e1a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e1e:	0c1c      	lsrs	r4, r3, #16
 8000e20:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e24:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e28:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1a0>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e3a:	f080 809c 	bcs.w	8000f76 <__udivmoddi4+0x2ce>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f240 8099 	bls.w	8000f76 <__udivmoddi4+0x2ce>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	eba4 040e 	sub.w	r4, r4, lr
 8000e4c:	fa1f fe83 	uxth.w	lr, r3
 8000e50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e54:	fb09 4413 	mls	r4, r9, r3, r4
 8000e58:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e5c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e60:	45a4      	cmp	ip, r4
 8000e62:	d908      	bls.n	8000e76 <__udivmoddi4+0x1ce>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e6a:	f080 8082 	bcs.w	8000f72 <__udivmoddi4+0x2ca>
 8000e6e:	45a4      	cmp	ip, r4
 8000e70:	d97f      	bls.n	8000f72 <__udivmoddi4+0x2ca>
 8000e72:	3b02      	subs	r3, #2
 8000e74:	443c      	add	r4, r7
 8000e76:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e7a:	eba4 040c 	sub.w	r4, r4, ip
 8000e7e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e82:	4564      	cmp	r4, ip
 8000e84:	4673      	mov	r3, lr
 8000e86:	46e1      	mov	r9, ip
 8000e88:	d362      	bcc.n	8000f50 <__udivmoddi4+0x2a8>
 8000e8a:	d05f      	beq.n	8000f4c <__udivmoddi4+0x2a4>
 8000e8c:	b15d      	cbz	r5, 8000ea6 <__udivmoddi4+0x1fe>
 8000e8e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e92:	eb64 0409 	sbc.w	r4, r4, r9
 8000e96:	fa04 f606 	lsl.w	r6, r4, r6
 8000e9a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e9e:	431e      	orrs	r6, r3
 8000ea0:	40cc      	lsrs	r4, r1
 8000ea2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	e74f      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000eaa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000eae:	0c01      	lsrs	r1, r0, #16
 8000eb0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000eb4:	b280      	uxth	r0, r0
 8000eb6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4638      	mov	r0, r7
 8000ebe:	463c      	mov	r4, r7
 8000ec0:	46b8      	mov	r8, r7
 8000ec2:	46be      	mov	lr, r7
 8000ec4:	2620      	movs	r6, #32
 8000ec6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eca:	eba2 0208 	sub.w	r2, r2, r8
 8000ece:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ed2:	e766      	b.n	8000da2 <__udivmoddi4+0xfa>
 8000ed4:	4601      	mov	r1, r0
 8000ed6:	e718      	b.n	8000d0a <__udivmoddi4+0x62>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	e72c      	b.n	8000d36 <__udivmoddi4+0x8e>
 8000edc:	f1c6 0220 	rsb	r2, r6, #32
 8000ee0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ee4:	40b7      	lsls	r7, r6
 8000ee6:	40b1      	lsls	r1, r6
 8000ee8:	fa20 f202 	lsr.w	r2, r0, r2
 8000eec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ef6:	b2bc      	uxth	r4, r7
 8000ef8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb08 f904 	mul.w	r9, r8, r4
 8000f06:	40b0      	lsls	r0, r6
 8000f08:	4589      	cmp	r9, r1
 8000f0a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f0e:	b280      	uxth	r0, r0
 8000f10:	d93e      	bls.n	8000f90 <__udivmoddi4+0x2e8>
 8000f12:	1879      	adds	r1, r7, r1
 8000f14:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f18:	d201      	bcs.n	8000f1e <__udivmoddi4+0x276>
 8000f1a:	4589      	cmp	r9, r1
 8000f1c:	d81f      	bhi.n	8000f5e <__udivmoddi4+0x2b6>
 8000f1e:	eba1 0109 	sub.w	r1, r1, r9
 8000f22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f26:	fb09 f804 	mul.w	r8, r9, r4
 8000f2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f34:	4542      	cmp	r2, r8
 8000f36:	d229      	bcs.n	8000f8c <__udivmoddi4+0x2e4>
 8000f38:	18ba      	adds	r2, r7, r2
 8000f3a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f3e:	d2c4      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f40:	4542      	cmp	r2, r8
 8000f42:	d2c2      	bcs.n	8000eca <__udivmoddi4+0x222>
 8000f44:	f1a9 0102 	sub.w	r1, r9, #2
 8000f48:	443a      	add	r2, r7
 8000f4a:	e7be      	b.n	8000eca <__udivmoddi4+0x222>
 8000f4c:	45f0      	cmp	r8, lr
 8000f4e:	d29d      	bcs.n	8000e8c <__udivmoddi4+0x1e4>
 8000f50:	ebbe 0302 	subs.w	r3, lr, r2
 8000f54:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f58:	3801      	subs	r0, #1
 8000f5a:	46e1      	mov	r9, ip
 8000f5c:	e796      	b.n	8000e8c <__udivmoddi4+0x1e4>
 8000f5e:	eba7 0909 	sub.w	r9, r7, r9
 8000f62:	4449      	add	r1, r9
 8000f64:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f68:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6c:	fb09 f804 	mul.w	r8, r9, r4
 8000f70:	e7db      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f72:	4673      	mov	r3, lr
 8000f74:	e77f      	b.n	8000e76 <__udivmoddi4+0x1ce>
 8000f76:	4650      	mov	r0, sl
 8000f78:	e766      	b.n	8000e48 <__udivmoddi4+0x1a0>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e6fd      	b.n	8000d7a <__udivmoddi4+0xd2>
 8000f7e:	443b      	add	r3, r7
 8000f80:	3a02      	subs	r2, #2
 8000f82:	e733      	b.n	8000dec <__udivmoddi4+0x144>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	443b      	add	r3, r7
 8000f8a:	e71c      	b.n	8000dc6 <__udivmoddi4+0x11e>
 8000f8c:	4649      	mov	r1, r9
 8000f8e:	e79c      	b.n	8000eca <__udivmoddi4+0x222>
 8000f90:	eba1 0109 	sub.w	r1, r1, r9
 8000f94:	46c4      	mov	ip, r8
 8000f96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9a:	fb09 f804 	mul.w	r8, r9, r4
 8000f9e:	e7c4      	b.n	8000f2a <__udivmoddi4+0x282>

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <command_excute>:
#include "command_excute.h"
#include "mixer.h"

void command_excute(char* buf)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08e      	sub	sp, #56	@ 0x38
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
	char* argv[10];
	uint8_t num_arg = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	char* token = strtok(buf," ");
 8000fb2:	4911      	ldr	r1, [pc, #68]	@ (8000ff8 <command_excute+0x54>)
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f004 fa99 	bl	80054ec <strtok>
 8000fba:	6338      	str	r0, [r7, #48]	@ 0x30
	while(token != NULL)
 8000fbc:	e00f      	b.n	8000fde <command_excute+0x3a>
	{
		argv[num_arg++] = token;
 8000fbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	f887 2037 	strb.w	r2, [r7, #55]	@ 0x37
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	3338      	adds	r3, #56	@ 0x38
 8000fcc:	443b      	add	r3, r7
 8000fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000fd0:	f843 2c30 	str.w	r2, [r3, #-48]
		token = strtok(NULL, " ");
 8000fd4:	4908      	ldr	r1, [pc, #32]	@ (8000ff8 <command_excute+0x54>)
 8000fd6:	2000      	movs	r0, #0
 8000fd8:	f004 fa88 	bl	80054ec <strtok>
 8000fdc:	6338      	str	r0, [r7, #48]	@ 0x30
	while(token != NULL)
 8000fde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1ec      	bne.n	8000fbe <command_excute+0x1a>
	}
	mixer_output(argv);
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 f831 	bl	8001050 <mixer_output>
}
 8000fee:	bf00      	nop
 8000ff0:	3738      	adds	r7, #56	@ 0x38
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	08007688 	.word	0x08007688

08000ffc <clamp>:
#include "stdlib.h"
TIM_HandleTypeDef* mixer_pwm_out;
float motor1,motor2,motor3,motor4;
uint16_t pwm1, pwm2, pwm3, pwm4;
float clamp(float v, float min, float max)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	ed87 0a03 	vstr	s0, [r7, #12]
 8001006:	edc7 0a02 	vstr	s1, [r7, #8]
 800100a:	ed87 1a01 	vstr	s2, [r7, #4]
	if(v < min) return min;
 800100e:	ed97 7a03 	vldr	s14, [r7, #12]
 8001012:	edd7 7a02 	vldr	s15, [r7, #8]
 8001016:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800101a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800101e:	d501      	bpl.n	8001024 <clamp+0x28>
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	e00b      	b.n	800103c <clamp+0x40>
	if(v > max) return max;
 8001024:	ed97 7a03 	vldr	s14, [r7, #12]
 8001028:	edd7 7a01 	vldr	s15, [r7, #4]
 800102c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	dd01      	ble.n	800103a <clamp+0x3e>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	e000      	b.n	800103c <clamp+0x40>
	return v;
 800103a:	68fb      	ldr	r3, [r7, #12]
}
 800103c:	ee07 3a90 	vmov	s15, r3
 8001040:	eeb0 0a67 	vmov.f32	s0, s15
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <mixer_output>:

void mixer_output(char** argv)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	float throttle,pitch,roll,yaw;
	throttle = atof(argv[0]);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4618      	mov	r0, r3
 800105e:	f003 faf1 	bl	8004644 <atof>
 8001062:	ec53 2b10 	vmov	r2, r3, d0
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f7ff fd7f 	bl	8000b6c <__aeabi_d2f>
 800106e:	4603      	mov	r3, r0
 8001070:	617b      	str	r3, [r7, #20]
	pitch = atof(argv[1]);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3304      	adds	r3, #4
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4618      	mov	r0, r3
 800107a:	f003 fae3 	bl	8004644 <atof>
 800107e:	ec53 2b10 	vmov	r2, r3, d0
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fd71 	bl	8000b6c <__aeabi_d2f>
 800108a:	4603      	mov	r3, r0
 800108c:	613b      	str	r3, [r7, #16]
	roll = atof(argv[2]);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3308      	adds	r3, #8
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f003 fad5 	bl	8004644 <atof>
 800109a:	ec53 2b10 	vmov	r2, r3, d0
 800109e:	4610      	mov	r0, r2
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff fd63 	bl	8000b6c <__aeabi_d2f>
 80010a6:	4603      	mov	r3, r0
 80010a8:	60fb      	str	r3, [r7, #12]
	yaw = atof(argv[3]);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	330c      	adds	r3, #12
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f003 fac7 	bl	8004644 <atof>
 80010b6:	ec53 2b10 	vmov	r2, r3, d0
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fd55 	bl	8000b6c <__aeabi_d2f>
 80010c2:	4603      	mov	r3, r0
 80010c4:	60bb      	str	r3, [r7, #8]
	motor1 = throttle + pitch + roll - yaw;
 80010c6:	ed97 7a05 	vldr	s14, [r7, #20]
 80010ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80010ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010da:	edd7 7a02 	vldr	s15, [r7, #8]
 80010de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001260 <mixer_output+0x210>)
 80010e4:	edc3 7a00 	vstr	s15, [r3]
	motor2 = throttle + pitch - roll + yaw;
 80010e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80010ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80010f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80010fc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001104:	4b57      	ldr	r3, [pc, #348]	@ (8001264 <mixer_output+0x214>)
 8001106:	edc3 7a00 	vstr	s15, [r3]
	motor3 = throttle - pitch + roll + yaw;
 800110a:	ed97 7a05 	vldr	s14, [r7, #20]
 800110e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001112:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001116:	edd7 7a03 	vldr	s15, [r7, #12]
 800111a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800111e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001126:	4b50      	ldr	r3, [pc, #320]	@ (8001268 <mixer_output+0x218>)
 8001128:	edc3 7a00 	vstr	s15, [r3]
	motor4 = throttle - pitch - roll - yaw;
 800112c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001130:	edd7 7a04 	vldr	s15, [r7, #16]
 8001134:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001138:	edd7 7a03 	vldr	s15, [r7, #12]
 800113c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001140:	edd7 7a02 	vldr	s15, [r7, #8]
 8001144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001148:	4b48      	ldr	r3, [pc, #288]	@ (800126c <mixer_output+0x21c>)
 800114a:	edc3 7a00 	vstr	s15, [r3]
	motor1 = clamp(motor1, 0.0, 1.0);
 800114e:	4b44      	ldr	r3, [pc, #272]	@ (8001260 <mixer_output+0x210>)
 8001150:	edd3 7a00 	vldr	s15, [r3]
 8001154:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001158:	eddf 0a45 	vldr	s1, [pc, #276]	@ 8001270 <mixer_output+0x220>
 800115c:	eeb0 0a67 	vmov.f32	s0, s15
 8001160:	f7ff ff4c 	bl	8000ffc <clamp>
 8001164:	eef0 7a40 	vmov.f32	s15, s0
 8001168:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <mixer_output+0x210>)
 800116a:	edc3 7a00 	vstr	s15, [r3]
	motor2 = clamp(motor2, 0.0, 1.0);
 800116e:	4b3d      	ldr	r3, [pc, #244]	@ (8001264 <mixer_output+0x214>)
 8001170:	edd3 7a00 	vldr	s15, [r3]
 8001174:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001178:	eddf 0a3d 	vldr	s1, [pc, #244]	@ 8001270 <mixer_output+0x220>
 800117c:	eeb0 0a67 	vmov.f32	s0, s15
 8001180:	f7ff ff3c 	bl	8000ffc <clamp>
 8001184:	eef0 7a40 	vmov.f32	s15, s0
 8001188:	4b36      	ldr	r3, [pc, #216]	@ (8001264 <mixer_output+0x214>)
 800118a:	edc3 7a00 	vstr	s15, [r3]
	motor3 = clamp(motor3, 0.0, 1.0);
 800118e:	4b36      	ldr	r3, [pc, #216]	@ (8001268 <mixer_output+0x218>)
 8001190:	edd3 7a00 	vldr	s15, [r3]
 8001194:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001198:	eddf 0a35 	vldr	s1, [pc, #212]	@ 8001270 <mixer_output+0x220>
 800119c:	eeb0 0a67 	vmov.f32	s0, s15
 80011a0:	f7ff ff2c 	bl	8000ffc <clamp>
 80011a4:	eef0 7a40 	vmov.f32	s15, s0
 80011a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001268 <mixer_output+0x218>)
 80011aa:	edc3 7a00 	vstr	s15, [r3]
	motor4 = clamp(motor4, 0.0, 1.0);
 80011ae:	4b2f      	ldr	r3, [pc, #188]	@ (800126c <mixer_output+0x21c>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80011b8:	eddf 0a2d 	vldr	s1, [pc, #180]	@ 8001270 <mixer_output+0x220>
 80011bc:	eeb0 0a67 	vmov.f32	s0, s15
 80011c0:	f7ff ff1c 	bl	8000ffc <clamp>
 80011c4:	eef0 7a40 	vmov.f32	s15, s0
 80011c8:	4b28      	ldr	r3, [pc, #160]	@ (800126c <mixer_output+0x21c>)
 80011ca:	edc3 7a00 	vstr	s15, [r3]

	pwm1 = PWM_MIN + (uint16_t)((PWM_MAX - PWM_MIN) * motor1);
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <mixer_output+0x210>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001274 <mixer_output+0x224>
 80011d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e0:	ee17 3a90 	vmov	r3, s15
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	4b22      	ldr	r3, [pc, #136]	@ (8001278 <mixer_output+0x228>)
 80011ee:	801a      	strh	r2, [r3, #0]
	pwm2 = PWM_MIN + (uint16_t)((PWM_MAX - PWM_MIN) * motor2);
 80011f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <mixer_output+0x214>)
 80011f2:	edd3 7a00 	vldr	s15, [r3]
 80011f6:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001274 <mixer_output+0x224>
 80011fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001202:	ee17 3a90 	vmov	r3, s15
 8001206:	b29b      	uxth	r3, r3
 8001208:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b1b      	ldr	r3, [pc, #108]	@ (800127c <mixer_output+0x22c>)
 8001210:	801a      	strh	r2, [r3, #0]
	pwm3 = PWM_MIN + (uint16_t)((PWM_MAX - PWM_MIN) * motor3);
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <mixer_output+0x218>)
 8001214:	edd3 7a00 	vldr	s15, [r3]
 8001218:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001274 <mixer_output+0x224>
 800121c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001224:	ee17 3a90 	vmov	r3, s15
 8001228:	b29b      	uxth	r3, r3
 800122a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800122e:	b29a      	uxth	r2, r3
 8001230:	4b13      	ldr	r3, [pc, #76]	@ (8001280 <mixer_output+0x230>)
 8001232:	801a      	strh	r2, [r3, #0]
	pwm4 = PWM_MIN + (uint16_t)((PWM_MAX - PWM_MIN) * motor4);
 8001234:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <mixer_output+0x21c>)
 8001236:	edd3 7a00 	vldr	s15, [r3]
 800123a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001274 <mixer_output+0x224>
 800123e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001242:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001246:	ee17 3a90 	vmov	r3, s15
 800124a:	b29b      	uxth	r3, r3
 800124c:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <mixer_output+0x234>)
 8001254:	801a      	strh	r2, [r3, #0]
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200001f4 	.word	0x200001f4
 8001264:	200001f8 	.word	0x200001f8
 8001268:	200001fc 	.word	0x200001fc
 800126c:	20000200 	.word	0x20000200
 8001270:	00000000 	.word	0x00000000
 8001274:	447a0000 	.word	0x447a0000
 8001278:	20000204 	.word	0x20000204
 800127c:	20000206 	.word	0x20000206
 8001280:	20000208 	.word	0x20000208
 8001284:	2000020a 	.word	0x2000020a

08001288 <mixer_handle>:
void mixer_handle(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(mixer_pwm_out, TIM_CHANNEL_1, pwm1);
 800128c:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <mixer_handle+0x40>)
 800128e:	881a      	ldrh	r2, [r3, #0]
 8001290:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <mixer_handle+0x44>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(mixer_pwm_out, TIM_CHANNEL_2, pwm2);
 8001298:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <mixer_handle+0x48>)
 800129a:	881a      	ldrh	r2, [r3, #0]
 800129c:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <mixer_handle+0x44>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(mixer_pwm_out, TIM_CHANNEL_3, pwm3);
 80012a4:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <mixer_handle+0x4c>)
 80012a6:	881a      	ldrh	r2, [r3, #0]
 80012a8:	4b08      	ldr	r3, [pc, #32]	@ (80012cc <mixer_handle+0x44>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(mixer_pwm_out, TIM_CHANNEL_4, pwm4);
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <mixer_handle+0x50>)
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	4b05      	ldr	r3, [pc, #20]	@ (80012cc <mixer_handle+0x44>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	20000204 	.word	0x20000204
 80012cc:	200001f0 	.word	0x200001f0
 80012d0:	20000206 	.word	0x20000206
 80012d4:	20000208 	.word	0x20000208
 80012d8:	2000020a 	.word	0x2000020a

080012dc <mixer_init>:
void mixer_init(TIM_HandleTypeDef* tim2)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	mixer_pwm_out = tim2;
 80012e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001314 <mixer_init+0x38>)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(tim2,TIM_CHANNEL_1);
 80012ea:	2100      	movs	r1, #0
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f001 fcbb 	bl	8002c68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(tim2,TIM_CHANNEL_2);
 80012f2:	2104      	movs	r1, #4
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f001 fcb7 	bl	8002c68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(tim2,TIM_CHANNEL_3);
 80012fa:	2108      	movs	r1, #8
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f001 fcb3 	bl	8002c68 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(tim2,TIM_CHANNEL_4);
 8001302:	210c      	movs	r1, #12
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f001 fcaf 	bl	8002c68 <HAL_TIM_PWM_Start>
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200001f0 	.word	0x200001f0

08001318 <HAL_UART_RxCpltCallback>:
uint8_t buff_uart[BUFFER_UART];
uint8_t index_uart = 0;
UART_HandleTypeDef* hyp_uart;
uint8_t flag_uart = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == hyp_uart->Instance)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <HAL_UART_RxCpltCallback+0x50>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d118      	bne.n	8001360 <HAL_UART_RxCpltCallback+0x48>
	{
		buff_uart[index_uart++] = data_rx;
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <HAL_UART_RxCpltCallback+0x54>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	b2d1      	uxtb	r1, r2
 8001336:	4a0d      	ldr	r2, [pc, #52]	@ (800136c <HAL_UART_RxCpltCallback+0x54>)
 8001338:	7011      	strb	r1, [r2, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <HAL_UART_RxCpltCallback+0x58>)
 800133e:	7819      	ldrb	r1, [r3, #0]
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <HAL_UART_RxCpltCallback+0x5c>)
 8001342:	5499      	strb	r1, [r3, r2]
		if(data_rx == '\n')
 8001344:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_UART_RxCpltCallback+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b0a      	cmp	r3, #10
 800134a:	d102      	bne.n	8001352 <HAL_UART_RxCpltCallback+0x3a>
		{
			flag_uart = 1;
 800134c:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <HAL_UART_RxCpltCallback+0x60>)
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(hyp_uart, &data_rx, 1);
 8001352:	4b05      	ldr	r3, [pc, #20]	@ (8001368 <HAL_UART_RxCpltCallback+0x50>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2201      	movs	r2, #1
 8001358:	4905      	ldr	r1, [pc, #20]	@ (8001370 <HAL_UART_RxCpltCallback+0x58>)
 800135a:	4618      	mov	r0, r3
 800135c:	f002 f9e1 	bl	8003722 <HAL_UART_Receive_IT>
	}
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000294 	.word	0x20000294
 800136c:	20000290 	.word	0x20000290
 8001370:	2000020c 	.word	0x2000020c
 8001374:	20000210 	.word	0x20000210
 8001378:	20000298 	.word	0x20000298

0800137c <uart_handle>:
void uart_handle(void)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
	//command_excute((char*)buff_uart, sizeof(buff_uart));
	if(flag_uart)
 8001382:	4b22      	ldr	r3, [pc, #136]	@ (800140c <uart_handle+0x90>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d03b      	beq.n	8001402 <uart_handle+0x86>
	{
	    for(int i = 0; i < index_uart; i++)
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	e01a      	b.n	80013c6 <uart_handle+0x4a>
	    {
	        char temp[10];
	        sprintf(temp, "%d ", buff_uart[i]);
 8001390:	4a1f      	ldr	r2, [pc, #124]	@ (8001410 <uart_handle+0x94>)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	463b      	mov	r3, r7
 800139c:	491d      	ldr	r1, [pc, #116]	@ (8001414 <uart_handle+0x98>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f004 f824 	bl	80053ec <siprintf>
	        HAL_UART_Transmit(hyp_uart, (uint8_t*)temp, strlen(temp), HAL_MAX_DELAY);
 80013a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <uart_handle+0x9c>)
 80013a6:	681c      	ldr	r4, [r3, #0]
 80013a8:	463b      	mov	r3, r7
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7fe ff10 	bl	80001d0 <strlen>
 80013b0:	4603      	mov	r3, r0
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4639      	mov	r1, r7
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013ba:	4620      	mov	r0, r4
 80013bc:	f002 f926 	bl	800360c <HAL_UART_Transmit>
	    for(int i = 0; i < index_uart; i++)
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3301      	adds	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b15      	ldr	r3, [pc, #84]	@ (800141c <uart_handle+0xa0>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4293      	cmp	r3, r2
 80013d0:	dbde      	blt.n	8001390 <uart_handle+0x14>
	    }
	    HAL_UART_Transmit(hyp_uart, (uint8_t*)"\r\n", 2, HAL_MAX_DELAY);
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <uart_handle+0x9c>)
 80013d4:	6818      	ldr	r0, [r3, #0]
 80013d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013da:	2202      	movs	r2, #2
 80013dc:	4910      	ldr	r1, [pc, #64]	@ (8001420 <uart_handle+0xa4>)
 80013de:	f002 f915 	bl	800360c <HAL_UART_Transmit>

	    command_excute((char*)buff_uart);
 80013e2:	480b      	ldr	r0, [pc, #44]	@ (8001410 <uart_handle+0x94>)
 80013e4:	f7ff fdde 	bl	8000fa4 <command_excute>
	    memset(buff_uart, 0, index_uart);
 80013e8:	4b0c      	ldr	r3, [pc, #48]	@ (800141c <uart_handle+0xa0>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	2100      	movs	r1, #0
 80013f0:	4807      	ldr	r0, [pc, #28]	@ (8001410 <uart_handle+0x94>)
 80013f2:	f004 f860 	bl	80054b6 <memset>
	    index_uart = 0;
 80013f6:	4b09      	ldr	r3, [pc, #36]	@ (800141c <uart_handle+0xa0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
	    flag_uart = 0;
 80013fc:	4b03      	ldr	r3, [pc, #12]	@ (800140c <uart_handle+0x90>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
	}
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bd90      	pop	{r4, r7, pc}
 800140a:	bf00      	nop
 800140c:	20000298 	.word	0x20000298
 8001410:	20000210 	.word	0x20000210
 8001414:	0800768c 	.word	0x0800768c
 8001418:	20000294 	.word	0x20000294
 800141c:	20000290 	.word	0x20000290
 8001420:	08007690 	.word	0x08007690

08001424 <uart_init>:
void uart_init(UART_HandleTypeDef *huart)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	hyp_uart = huart;
 800142c:	4a06      	ldr	r2, [pc, #24]	@ (8001448 <uart_init+0x24>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(hyp_uart, &data_rx, 1);
 8001432:	4b05      	ldr	r3, [pc, #20]	@ (8001448 <uart_init+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2201      	movs	r2, #1
 8001438:	4904      	ldr	r1, [pc, #16]	@ (800144c <uart_init+0x28>)
 800143a:	4618      	mov	r0, r3
 800143c:	f002 f971 	bl	8003722 <HAL_UART_Receive_IT>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000294 	.word	0x20000294
 800144c:	2000020c 	.word	0x2000020c

08001450 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001454:	f000 fb6e 	bl	8001b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001458:	f000 f816 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800145c:	f000 f922 	bl	80016a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001460:	f000 f87c 	bl	800155c <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001464:	f000 f8f4 	bl	8001650 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_init(&huart2);
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <main+0x30>)
 800146a:	f7ff ffdb 	bl	8001424 <uart_init>
  mixer_init(&htim2);
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <main+0x34>)
 8001470:	f7ff ff34 	bl	80012dc <mixer_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	uart_handle();
 8001474:	f7ff ff82 	bl	800137c <uart_handle>
	mixer_handle();
 8001478:	f7ff ff06 	bl	8001288 <mixer_handle>
	uart_handle();
 800147c:	bf00      	nop
 800147e:	e7f9      	b.n	8001474 <main+0x24>
 8001480:	200002e4 	.word	0x200002e4
 8001484:	2000029c 	.word	0x2000029c

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b094      	sub	sp, #80	@ 0x50
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0320 	add.w	r3, r7, #32
 8001492:	2230      	movs	r2, #48	@ 0x30
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f004 f80d 	bl	80054b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	4b28      	ldr	r3, [pc, #160]	@ (8001554 <SystemClock_Config+0xcc>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	4a27      	ldr	r2, [pc, #156]	@ (8001554 <SystemClock_Config+0xcc>)
 80014b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80014bc:	4b25      	ldr	r3, [pc, #148]	@ (8001554 <SystemClock_Config+0xcc>)
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <SystemClock_Config+0xd0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a21      	ldr	r2, [pc, #132]	@ (8001558 <SystemClock_Config+0xd0>)
 80014d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <SystemClock_Config+0xd0>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e4:	2301      	movs	r3, #1
 80014e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	2302      	movs	r3, #2
 80014f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80014f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014f8:	2304      	movs	r3, #4
 80014fa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014fc:	23a8      	movs	r3, #168	@ 0xa8
 80014fe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001500:	2302      	movs	r3, #2
 8001502:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001504:	2304      	movs	r3, #4
 8001506:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001508:	f107 0320 	add.w	r3, r7, #32
 800150c:	4618      	mov	r0, r3
 800150e:	f000 fec3 	bl	8002298 <HAL_RCC_OscConfig>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001518:	f000 f8fa 	bl	8001710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151c:	230f      	movs	r3, #15
 800151e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001520:	2302      	movs	r3, #2
 8001522:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001528:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800152c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800152e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001532:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001534:	f107 030c 	add.w	r3, r7, #12
 8001538:	2105      	movs	r1, #5
 800153a:	4618      	mov	r0, r3
 800153c:	f001 f924 	bl	8002788 <HAL_RCC_ClockConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001546:	f000 f8e3 	bl	8001710 <Error_Handler>
  }
}
 800154a:	bf00      	nop
 800154c:	3750      	adds	r7, #80	@ 0x50
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40007000 	.word	0x40007000

0800155c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	@ 0x28
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156c:	1d3b      	adds	r3, r7, #4
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800157e:	4b33      	ldr	r3, [pc, #204]	@ (800164c <MX_TIM2_Init+0xf0>)
 8001580:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001584:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001586:	4b31      	ldr	r3, [pc, #196]	@ (800164c <MX_TIM2_Init+0xf0>)
 8001588:	2253      	movs	r2, #83	@ 0x53
 800158a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b2f      	ldr	r3, [pc, #188]	@ (800164c <MX_TIM2_Init+0xf0>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001592:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <MX_TIM2_Init+0xf0>)
 8001594:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001598:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b2c      	ldr	r3, [pc, #176]	@ (800164c <MX_TIM2_Init+0xf0>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a0:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <MX_TIM2_Init+0xf0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80015a6:	4829      	ldr	r0, [pc, #164]	@ (800164c <MX_TIM2_Init+0xf0>)
 80015a8:	f001 fb0e 	bl	8002bc8 <HAL_TIM_PWM_Init>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80015b2:	f000 f8ad 	bl	8001710 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015be:	f107 0320 	add.w	r3, r7, #32
 80015c2:	4619      	mov	r1, r3
 80015c4:	4821      	ldr	r0, [pc, #132]	@ (800164c <MX_TIM2_Init+0xf0>)
 80015c6:	f001 ff55 	bl	8003474 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80015d0:	f000 f89e 	bl	8001710 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015d4:	2360      	movs	r3, #96	@ 0x60
 80015d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015dc:	2300      	movs	r3, #0
 80015de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2200      	movs	r2, #0
 80015e8:	4619      	mov	r1, r3
 80015ea:	4818      	ldr	r0, [pc, #96]	@ (800164c <MX_TIM2_Init+0xf0>)
 80015ec:	f001 fc04 	bl	8002df8 <HAL_TIM_PWM_ConfigChannel>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80015f6:	f000 f88b 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2204      	movs	r2, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4812      	ldr	r0, [pc, #72]	@ (800164c <MX_TIM2_Init+0xf0>)
 8001602:	f001 fbf9 	bl	8002df8 <HAL_TIM_PWM_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800160c:	f000 f880 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	2208      	movs	r2, #8
 8001614:	4619      	mov	r1, r3
 8001616:	480d      	ldr	r0, [pc, #52]	@ (800164c <MX_TIM2_Init+0xf0>)
 8001618:	f001 fbee 	bl	8002df8 <HAL_TIM_PWM_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM2_Init+0xca>
  {
    Error_Handler();
 8001622:	f000 f875 	bl	8001710 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	220c      	movs	r2, #12
 800162a:	4619      	mov	r1, r3
 800162c:	4807      	ldr	r0, [pc, #28]	@ (800164c <MX_TIM2_Init+0xf0>)
 800162e:	f001 fbe3 	bl	8002df8 <HAL_TIM_PWM_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001638:	f000 f86a 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800163c:	4803      	ldr	r0, [pc, #12]	@ (800164c <MX_TIM2_Init+0xf0>)
 800163e:	f000 f8b5 	bl	80017ac <HAL_TIM_MspPostInit>

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	@ 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	2000029c 	.word	0x2000029c

08001650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001654:	4b11      	ldr	r3, [pc, #68]	@ (800169c <MX_USART2_UART_Init+0x4c>)
 8001656:	4a12      	ldr	r2, [pc, #72]	@ (80016a0 <MX_USART2_UART_Init+0x50>)
 8001658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <MX_USART2_UART_Init+0x4c>)
 800165c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b0e      	ldr	r3, [pc, #56]	@ (800169c <MX_USART2_UART_Init+0x4c>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <MX_USART2_UART_Init+0x4c>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0b      	ldr	r3, [pc, #44]	@ (800169c <MX_USART2_UART_Init+0x4c>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b09      	ldr	r3, [pc, #36]	@ (800169c <MX_USART2_UART_Init+0x4c>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b08      	ldr	r3, [pc, #32]	@ (800169c <MX_USART2_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b06      	ldr	r3, [pc, #24]	@ (800169c <MX_USART2_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001686:	4805      	ldr	r0, [pc, #20]	@ (800169c <MX_USART2_UART_Init+0x4c>)
 8001688:	f001 ff70 	bl	800356c <HAL_UART_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001692:	f000 f83d 	bl	8001710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200002e4 	.word	0x200002e4
 80016a0:	40004400 	.word	0x40004400

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b17      	ldr	r3, [pc, #92]	@ (800170c <MX_GPIO_Init+0x68>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a16      	ldr	r2, [pc, #88]	@ (800170c <MX_GPIO_Init+0x68>)
 80016b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b14      	ldr	r3, [pc, #80]	@ (800170c <MX_GPIO_Init+0x68>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <MX_GPIO_Init+0x68>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a0f      	ldr	r2, [pc, #60]	@ (800170c <MX_GPIO_Init+0x68>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b0d      	ldr	r3, [pc, #52]	@ (800170c <MX_GPIO_Init+0x68>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_GPIO_Init+0x68>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a08      	ldr	r2, [pc, #32]	@ (800170c <MX_GPIO_Init+0x68>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_GPIO_Init+0x68>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <Error_Handler+0x8>

0800171c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <HAL_MspInit+0x4c>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	4a0f      	ldr	r2, [pc, #60]	@ (8001768 <HAL_MspInit+0x4c>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001730:	6453      	str	r3, [r2, #68]	@ 0x44
 8001732:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <HAL_MspInit+0x4c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	603b      	str	r3, [r7, #0]
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_MspInit+0x4c>)
 8001744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001746:	4a08      	ldr	r2, [pc, #32]	@ (8001768 <HAL_MspInit+0x4c>)
 8001748:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174c:	6413      	str	r3, [r2, #64]	@ 0x40
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_MspInit+0x4c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001752:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800

0800176c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800177c:	d10d      	bne.n	800179a <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	4a08      	ldr	r2, [pc, #32]	@ (80017a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6413      	str	r3, [r2, #64]	@ 0x40
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800179a:	bf00      	nop
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017cc:	d11d      	bne.n	800180a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <HAL_TIM_MspPostInit+0x68>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001814 <HAL_TIM_MspPostInit+0x68>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <HAL_TIM_MspPostInit+0x68>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017ea:	230f      	movs	r3, #15
 80017ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	4804      	ldr	r0, [pc, #16]	@ (8001818 <HAL_TIM_MspPostInit+0x6c>)
 8001806:	f000 fbab 	bl	8001f60 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000

0800181c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	@ 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a1d      	ldr	r2, [pc, #116]	@ (80018b0 <HAL_UART_MspInit+0x94>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d133      	bne.n	80018a6 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <HAL_UART_MspInit+0x98>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	4a1b      	ldr	r2, [pc, #108]	@ (80018b4 <HAL_UART_MspInit+0x98>)
 8001848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800184c:	6413      	str	r3, [r2, #64]	@ 0x40
 800184e:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <HAL_UART_MspInit+0x98>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_UART_MspInit+0x98>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4a14      	ldr	r2, [pc, #80]	@ (80018b4 <HAL_UART_MspInit+0x98>)
 8001864:	f043 0308 	orr.w	r3, r3, #8
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_UART_MspInit+0x98>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001876:	2360      	movs	r3, #96	@ 0x60
 8001878:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001886:	2307      	movs	r3, #7
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188a:	f107 0314 	add.w	r3, r7, #20
 800188e:	4619      	mov	r1, r3
 8001890:	4809      	ldr	r0, [pc, #36]	@ (80018b8 <HAL_UART_MspInit+0x9c>)
 8001892:	f000 fb65 	bl	8001f60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	2026      	movs	r0, #38	@ 0x26
 800189c:	f000 fa97 	bl	8001dce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018a0:	2026      	movs	r0, #38	@ 0x26
 80018a2:	f000 fab0 	bl	8001e06 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80018a6:	bf00      	nop
 80018a8:	3728      	adds	r7, #40	@ 0x28
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40004400 	.word	0x40004400
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020c00 	.word	0x40020c00

080018bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c0:	bf00      	nop
 80018c2:	e7fd      	b.n	80018c0 <NMI_Handler+0x4>

080018c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018c8:	bf00      	nop
 80018ca:	e7fd      	b.n	80018c8 <HardFault_Handler+0x4>

080018cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d0:	bf00      	nop
 80018d2:	e7fd      	b.n	80018d0 <MemManage_Handler+0x4>

080018d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018d8:	bf00      	nop
 80018da:	e7fd      	b.n	80018d8 <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018f2:	b480      	push	{r7}
 80018f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr

0800190e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800190e:	b580      	push	{r7, lr}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001912:	f000 f961 	bl	8001bd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
	...

0800191c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <USART2_IRQHandler+0x10>)
 8001922:	f001 ff23 	bl	800376c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200002e4 	.word	0x200002e4

08001930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return 1;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_kill>:

int _kill(int pid, int sig)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800194a:	f003 fe71 	bl	8005630 <__errno>
 800194e:	4603      	mov	r3, r0
 8001950:	2216      	movs	r2, #22
 8001952:	601a      	str	r2, [r3, #0]
  return -1;
 8001954:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_exit>:

void _exit (int status)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001968:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ffe7 	bl	8001940 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001972:	bf00      	nop
 8001974:	e7fd      	b.n	8001972 <_exit+0x12>

08001976 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e00a      	b.n	800199e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001988:	f3af 8000 	nop.w
 800198c:	4601      	mov	r1, r0
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	60ba      	str	r2, [r7, #8]
 8001994:	b2ca      	uxtb	r2, r1
 8001996:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	3301      	adds	r3, #1
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	dbf0      	blt.n	8001988 <_read+0x12>
  }

  return len;
 80019a6:	687b      	ldr	r3, [r7, #4]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3718      	adds	r7, #24
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	e009      	b.n	80019d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	60ba      	str	r2, [r7, #8]
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	3301      	adds	r3, #1
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	429a      	cmp	r2, r3
 80019dc:	dbf1      	blt.n	80019c2 <_write+0x12>
  }
  return len;
 80019de:	687b      	ldr	r3, [r7, #4]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_close>:

int _close(int file)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a10:	605a      	str	r2, [r3, #4]
  return 0;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <_isatty>:

int _isatty(int file)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a28:	2301      	movs	r3, #1
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a58:	4a14      	ldr	r2, [pc, #80]	@ (8001aac <_sbrk+0x5c>)
 8001a5a:	4b15      	ldr	r3, [pc, #84]	@ (8001ab0 <_sbrk+0x60>)
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a64:	4b13      	ldr	r3, [pc, #76]	@ (8001ab4 <_sbrk+0x64>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d102      	bne.n	8001a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	@ (8001ab4 <_sbrk+0x64>)
 8001a6e:	4a12      	ldr	r2, [pc, #72]	@ (8001ab8 <_sbrk+0x68>)
 8001a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <_sbrk+0x64>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4413      	add	r3, r2
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d207      	bcs.n	8001a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a80:	f003 fdd6 	bl	8005630 <__errno>
 8001a84:	4603      	mov	r3, r0
 8001a86:	220c      	movs	r2, #12
 8001a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a8a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a8e:	e009      	b.n	8001aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <_sbrk+0x64>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a96:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <_sbrk+0x64>)
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <_sbrk+0x64>)
 8001aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20020000 	.word	0x20020000
 8001ab0:	00000400 	.word	0x00000400
 8001ab4:	2000032c 	.word	0x2000032c
 8001ab8:	20000480 	.word	0x20000480

08001abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ac0:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <SystemInit+0x20>)
 8001ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ac6:	4a05      	ldr	r2, [pc, #20]	@ (8001adc <SystemInit+0x20>)
 8001ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ae0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b18 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001ae4:	f7ff ffea 	bl	8001abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ae8:	480c      	ldr	r0, [pc, #48]	@ (8001b1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aea:	490d      	ldr	r1, [pc, #52]	@ (8001b20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001aec:	4a0d      	ldr	r2, [pc, #52]	@ (8001b24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af0:	e002      	b.n	8001af8 <LoopCopyDataInit>

08001af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001af6:	3304      	adds	r3, #4

08001af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001afc:	d3f9      	bcc.n	8001af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b00:	4c0a      	ldr	r4, [pc, #40]	@ (8001b2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b04:	e001      	b.n	8001b0a <LoopFillZerobss>

08001b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b08:	3204      	adds	r2, #4

08001b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b0c:	d3fb      	bcc.n	8001b06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b0e:	f003 fd95 	bl	800563c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b12:	f7ff fc9d 	bl	8001450 <main>
  bx  lr    
 8001b16:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b20:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b24:	08007ad4 	.word	0x08007ad4
  ldr r2, =_sbss
 8001b28:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b2c:	20000480 	.word	0x20000480

08001b30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b30:	e7fe      	b.n	8001b30 <ADC_IRQHandler>
	...

08001b34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b38:	4b0e      	ldr	r3, [pc, #56]	@ (8001b74 <HAL_Init+0x40>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <HAL_Init+0x40>)
 8001b3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b44:	4b0b      	ldr	r3, [pc, #44]	@ (8001b74 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <HAL_Init+0x40>)
 8001b4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b50:	4b08      	ldr	r3, [pc, #32]	@ (8001b74 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	@ (8001b74 <HAL_Init+0x40>)
 8001b56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b5c:	2003      	movs	r0, #3
 8001b5e:	f000 f92b 	bl	8001db8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b62:	200f      	movs	r0, #15
 8001b64:	f000 f808 	bl	8001b78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b68:	f7ff fdd8 	bl	800171c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40023c00 	.word	0x40023c00

08001b78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b80:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_InitTick+0x54>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_InitTick+0x58>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	f000 f943 	bl	8001e22 <HAL_SYSTICK_Config>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e00e      	b.n	8001bc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b0f      	cmp	r3, #15
 8001baa:	d80a      	bhi.n	8001bc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bac:	2200      	movs	r2, #0
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001bb4:	f000 f90b 	bl	8001dce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bb8:	4a06      	ldr	r2, [pc, #24]	@ (8001bd4 <HAL_InitTick+0x5c>)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	e000      	b.n	8001bc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000000 	.word	0x20000000
 8001bd0:	20000008 	.word	0x20000008
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bdc:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_IncTick+0x20>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	4b06      	ldr	r3, [pc, #24]	@ (8001bfc <HAL_IncTick+0x24>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a04      	ldr	r2, [pc, #16]	@ (8001bfc <HAL_IncTick+0x24>)
 8001bea:	6013      	str	r3, [r2, #0]
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	20000008 	.word	0x20000008
 8001bfc:	20000330 	.word	0x20000330

08001c00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b03      	ldr	r3, [pc, #12]	@ (8001c14 <HAL_GetTick+0x14>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000330 	.word	0x20000330

08001c18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c28:	4b0c      	ldr	r3, [pc, #48]	@ (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c34:	4013      	ands	r3, r2
 8001c36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c4a:	4a04      	ldr	r2, [pc, #16]	@ (8001c5c <__NVIC_SetPriorityGrouping+0x44>)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	60d3      	str	r3, [r2, #12]
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	e000ed00 	.word	0xe000ed00

08001c60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b04      	ldr	r3, [pc, #16]	@ (8001c78 <__NVIC_GetPriorityGrouping+0x18>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	f003 0307 	and.w	r3, r3, #7
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	e000ed00 	.word	0xe000ed00

08001c7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	db0b      	blt.n	8001ca6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	f003 021f 	and.w	r2, r3, #31
 8001c94:	4907      	ldr	r1, [pc, #28]	@ (8001cb4 <__NVIC_EnableIRQ+0x38>)
 8001c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9a:	095b      	lsrs	r3, r3, #5
 8001c9c:	2001      	movs	r0, #1
 8001c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000e100 	.word	0xe000e100

08001cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	db0a      	blt.n	8001ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	490c      	ldr	r1, [pc, #48]	@ (8001d04 <__NVIC_SetPriority+0x4c>)
 8001cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd6:	0112      	lsls	r2, r2, #4
 8001cd8:	b2d2      	uxtb	r2, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce0:	e00a      	b.n	8001cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	4908      	ldr	r1, [pc, #32]	@ (8001d08 <__NVIC_SetPriority+0x50>)
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	f003 030f 	and.w	r3, r3, #15
 8001cee:	3b04      	subs	r3, #4
 8001cf0:	0112      	lsls	r2, r2, #4
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	761a      	strb	r2, [r3, #24]
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000e100 	.word	0xe000e100
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b089      	sub	sp, #36	@ 0x24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f1c3 0307 	rsb	r3, r3, #7
 8001d26:	2b04      	cmp	r3, #4
 8001d28:	bf28      	it	cs
 8001d2a:	2304      	movcs	r3, #4
 8001d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3304      	adds	r3, #4
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d902      	bls.n	8001d3c <NVIC_EncodePriority+0x30>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3b03      	subs	r3, #3
 8001d3a:	e000      	b.n	8001d3e <NVIC_EncodePriority+0x32>
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	401a      	ands	r2, r3
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5e:	43d9      	mvns	r1, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	4313      	orrs	r3, r2
         );
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3724      	adds	r7, #36	@ 0x24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d84:	d301      	bcc.n	8001d8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d86:	2301      	movs	r3, #1
 8001d88:	e00f      	b.n	8001daa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <SysTick_Config+0x40>)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d92:	210f      	movs	r1, #15
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d98:	f7ff ff8e 	bl	8001cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d9c:	4b05      	ldr	r3, [pc, #20]	@ (8001db4 <SysTick_Config+0x40>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001da2:	4b04      	ldr	r3, [pc, #16]	@ (8001db4 <SysTick_Config+0x40>)
 8001da4:	2207      	movs	r2, #7
 8001da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	e000e010 	.word	0xe000e010

08001db8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff ff29 	bl	8001c18 <__NVIC_SetPriorityGrouping>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	60b9      	str	r1, [r7, #8]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001de0:	f7ff ff3e 	bl	8001c60 <__NVIC_GetPriorityGrouping>
 8001de4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68b9      	ldr	r1, [r7, #8]
 8001dea:	6978      	ldr	r0, [r7, #20]
 8001dec:	f7ff ff8e 	bl	8001d0c <NVIC_EncodePriority>
 8001df0:	4602      	mov	r2, r0
 8001df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df6:	4611      	mov	r1, r2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff ff5d 	bl	8001cb8 <__NVIC_SetPriority>
}
 8001dfe:	bf00      	nop
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff ff31 	bl	8001c7c <__NVIC_EnableIRQ>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b082      	sub	sp, #8
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff ffa2 	bl	8001d74 <SysTick_Config>
 8001e30:	4603      	mov	r3, r0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e46:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff feda 	bl	8001c00 <HAL_GetTick>
 8001e4c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d008      	beq.n	8001e6c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2280      	movs	r2, #128	@ 0x80
 8001e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e052      	b.n	8001f12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f022 0216 	bic.w	r2, r2, #22
 8001e7a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e8a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d103      	bne.n	8001e9c <HAL_DMA_Abort+0x62>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f022 0208 	bic.w	r2, r2, #8
 8001eaa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0201 	bic.w	r2, r2, #1
 8001eba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ebc:	e013      	b.n	8001ee6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ebe:	f7ff fe9f 	bl	8001c00 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b05      	cmp	r3, #5
 8001eca:	d90c      	bls.n	8001ee6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2203      	movs	r2, #3
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e015      	b.n	8001f12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1e4      	bne.n	8001ebe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef8:	223f      	movs	r2, #63	@ 0x3f
 8001efa:	409a      	lsls	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d004      	beq.n	8001f38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2280      	movs	r2, #128	@ 0x80
 8001f32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e00c      	b.n	8001f52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2205      	movs	r2, #5
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f022 0201 	bic.w	r2, r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	@ 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e16b      	b.n	8002254 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	f040 815a 	bne.w	800224e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f003 0303 	and.w	r3, r3, #3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d005      	beq.n	8001fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d130      	bne.n	8002014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	2203      	movs	r2, #3
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 0201 	and.w	r2, r3, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	2b03      	cmp	r3, #3
 800201e:	d017      	beq.n	8002050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	2203      	movs	r2, #3
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4313      	orrs	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d123      	bne.n	80020a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	08da      	lsrs	r2, r3, #3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3208      	adds	r2, #8
 8002064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	220f      	movs	r2, #15
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	691a      	ldr	r2, [r3, #16]
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	08da      	lsrs	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	3208      	adds	r2, #8
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0203 	and.w	r2, r3, #3
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80b4 	beq.w	800224e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b60      	ldr	r3, [pc, #384]	@ (800226c <HAL_GPIO_Init+0x30c>)
 80020ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ee:	4a5f      	ldr	r2, [pc, #380]	@ (800226c <HAL_GPIO_Init+0x30c>)
 80020f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020f6:	4b5d      	ldr	r3, [pc, #372]	@ (800226c <HAL_GPIO_Init+0x30c>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002102:	4a5b      	ldr	r2, [pc, #364]	@ (8002270 <HAL_GPIO_Init+0x310>)
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	220f      	movs	r2, #15
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a52      	ldr	r2, [pc, #328]	@ (8002274 <HAL_GPIO_Init+0x314>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d02b      	beq.n	8002186 <HAL_GPIO_Init+0x226>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a51      	ldr	r2, [pc, #324]	@ (8002278 <HAL_GPIO_Init+0x318>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d025      	beq.n	8002182 <HAL_GPIO_Init+0x222>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a50      	ldr	r2, [pc, #320]	@ (800227c <HAL_GPIO_Init+0x31c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d01f      	beq.n	800217e <HAL_GPIO_Init+0x21e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a4f      	ldr	r2, [pc, #316]	@ (8002280 <HAL_GPIO_Init+0x320>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d019      	beq.n	800217a <HAL_GPIO_Init+0x21a>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a4e      	ldr	r2, [pc, #312]	@ (8002284 <HAL_GPIO_Init+0x324>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d013      	beq.n	8002176 <HAL_GPIO_Init+0x216>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a4d      	ldr	r2, [pc, #308]	@ (8002288 <HAL_GPIO_Init+0x328>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d00d      	beq.n	8002172 <HAL_GPIO_Init+0x212>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a4c      	ldr	r2, [pc, #304]	@ (800228c <HAL_GPIO_Init+0x32c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d007      	beq.n	800216e <HAL_GPIO_Init+0x20e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4b      	ldr	r2, [pc, #300]	@ (8002290 <HAL_GPIO_Init+0x330>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d101      	bne.n	800216a <HAL_GPIO_Init+0x20a>
 8002166:	2307      	movs	r3, #7
 8002168:	e00e      	b.n	8002188 <HAL_GPIO_Init+0x228>
 800216a:	2308      	movs	r3, #8
 800216c:	e00c      	b.n	8002188 <HAL_GPIO_Init+0x228>
 800216e:	2306      	movs	r3, #6
 8002170:	e00a      	b.n	8002188 <HAL_GPIO_Init+0x228>
 8002172:	2305      	movs	r3, #5
 8002174:	e008      	b.n	8002188 <HAL_GPIO_Init+0x228>
 8002176:	2304      	movs	r3, #4
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x228>
 800217a:	2303      	movs	r3, #3
 800217c:	e004      	b.n	8002188 <HAL_GPIO_Init+0x228>
 800217e:	2302      	movs	r3, #2
 8002180:	e002      	b.n	8002188 <HAL_GPIO_Init+0x228>
 8002182:	2301      	movs	r3, #1
 8002184:	e000      	b.n	8002188 <HAL_GPIO_Init+0x228>
 8002186:	2300      	movs	r3, #0
 8002188:	69fa      	ldr	r2, [r7, #28]
 800218a:	f002 0203 	and.w	r2, r2, #3
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	4093      	lsls	r3, r2
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	4313      	orrs	r3, r2
 8002196:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002198:	4935      	ldr	r1, [pc, #212]	@ (8002270 <HAL_GPIO_Init+0x310>)
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <HAL_GPIO_Init+0x334>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ca:	4a32      	ldr	r2, [pc, #200]	@ (8002294 <HAL_GPIO_Init+0x334>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021d0:	4b30      	ldr	r3, [pc, #192]	@ (8002294 <HAL_GPIO_Init+0x334>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021f4:	4a27      	ldr	r2, [pc, #156]	@ (8002294 <HAL_GPIO_Init+0x334>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021fa:	4b26      	ldr	r3, [pc, #152]	@ (8002294 <HAL_GPIO_Init+0x334>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800221e:	4a1d      	ldr	r2, [pc, #116]	@ (8002294 <HAL_GPIO_Init+0x334>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002224:	4b1b      	ldr	r3, [pc, #108]	@ (8002294 <HAL_GPIO_Init+0x334>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002248:	4a12      	ldr	r2, [pc, #72]	@ (8002294 <HAL_GPIO_Init+0x334>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3301      	adds	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	2b0f      	cmp	r3, #15
 8002258:	f67f ae90 	bls.w	8001f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800225c:	bf00      	nop
 800225e:	bf00      	nop
 8002260:	3724      	adds	r7, #36	@ 0x24
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	40013800 	.word	0x40013800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00
 8002284:	40021000 	.word	0x40021000
 8002288:	40021400 	.word	0x40021400
 800228c:	40021800 	.word	0x40021800
 8002290:	40021c00 	.word	0x40021c00
 8002294:	40013c00 	.word	0x40013c00

08002298 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e267      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d075      	beq.n	80023a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022b6:	4b88      	ldr	r3, [pc, #544]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 030c 	and.w	r3, r3, #12
 80022be:	2b04      	cmp	r3, #4
 80022c0:	d00c      	beq.n	80022dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c2:	4b85      	ldr	r3, [pc, #532]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80022ca:	2b08      	cmp	r3, #8
 80022cc:	d112      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022ce:	4b82      	ldr	r3, [pc, #520]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022da:	d10b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	4b7e      	ldr	r3, [pc, #504]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d05b      	beq.n	80023a0 <HAL_RCC_OscConfig+0x108>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d157      	bne.n	80023a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e242      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x74>
 80022fe:	4b76      	ldr	r3, [pc, #472]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a75      	ldr	r2, [pc, #468]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e01d      	b.n	8002348 <HAL_RCC_OscConfig+0xb0>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x98>
 8002316:	4b70      	ldr	r3, [pc, #448]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a6f      	ldr	r2, [pc, #444]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b6d      	ldr	r3, [pc, #436]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a6c      	ldr	r2, [pc, #432]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e00b      	b.n	8002348 <HAL_RCC_OscConfig+0xb0>
 8002330:	4b69      	ldr	r3, [pc, #420]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a68      	ldr	r2, [pc, #416]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002336:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800233a:	6013      	str	r3, [r2, #0]
 800233c:	4b66      	ldr	r3, [pc, #408]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a65      	ldr	r2, [pc, #404]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002342:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d013      	beq.n	8002378 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002350:	f7ff fc56 	bl	8001c00 <HAL_GetTick>
 8002354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	e008      	b.n	800236a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002358:	f7ff fc52 	bl	8001c00 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b64      	cmp	r3, #100	@ 0x64
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e207      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236a:	4b5b      	ldr	r3, [pc, #364]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0xc0>
 8002376:	e014      	b.n	80023a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff fc42 	bl	8001c00 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7ff fc3e 	bl	8001c00 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	@ 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e1f3      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002392:	4b51      	ldr	r3, [pc, #324]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0xe8>
 800239e:	e000      	b.n	80023a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d063      	beq.n	8002476 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023ae:	4b4a      	ldr	r3, [pc, #296]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 030c 	and.w	r3, r3, #12
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00b      	beq.n	80023d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ba:	4b47      	ldr	r3, [pc, #284]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d11c      	bne.n	8002400 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023c6:	4b44      	ldr	r3, [pc, #272]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d116      	bne.n	8002400 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d2:	4b41      	ldr	r3, [pc, #260]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_RCC_OscConfig+0x152>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d001      	beq.n	80023ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e1c7      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ea:	4b3b      	ldr	r3, [pc, #236]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	00db      	lsls	r3, r3, #3
 80023f8:	4937      	ldr	r1, [pc, #220]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fe:	e03a      	b.n	8002476 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002408:	4b34      	ldr	r3, [pc, #208]	@ (80024dc <HAL_RCC_OscConfig+0x244>)
 800240a:	2201      	movs	r2, #1
 800240c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240e:	f7ff fbf7 	bl	8001c00 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002414:	e008      	b.n	8002428 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002416:	f7ff fbf3 	bl	8001c00 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d901      	bls.n	8002428 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002424:	2303      	movs	r3, #3
 8002426:	e1a8      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002428:	4b2b      	ldr	r3, [pc, #172]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0f0      	beq.n	8002416 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b28      	ldr	r3, [pc, #160]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	4925      	ldr	r1, [pc, #148]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	e015      	b.n	8002476 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244a:	4b24      	ldr	r3, [pc, #144]	@ (80024dc <HAL_RCC_OscConfig+0x244>)
 800244c:	2200      	movs	r2, #0
 800244e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7ff fbd6 	bl	8001c00 <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002458:	f7ff fbd2 	bl	8001c00 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b02      	cmp	r3, #2
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e187      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246a:	4b1b      	ldr	r3, [pc, #108]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f0      	bne.n	8002458 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d036      	beq.n	80024f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d016      	beq.n	80024b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_RCC_OscConfig+0x248>)
 800248c:	2201      	movs	r2, #1
 800248e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002490:	f7ff fbb6 	bl	8001c00 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002498:	f7ff fbb2 	bl	8001c00 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e167      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024aa:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <HAL_RCC_OscConfig+0x240>)
 80024ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x200>
 80024b6:	e01b      	b.n	80024f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024b8:	4b09      	ldr	r3, [pc, #36]	@ (80024e0 <HAL_RCC_OscConfig+0x248>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024be:	f7ff fb9f 	bl	8001c00 <HAL_GetTick>
 80024c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c4:	e00e      	b.n	80024e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7ff fb9b 	bl	8001c00 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d907      	bls.n	80024e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e150      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
 80024d8:	40023800 	.word	0x40023800
 80024dc:	42470000 	.word	0x42470000
 80024e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024e4:	4b88      	ldr	r3, [pc, #544]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80024e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1ea      	bne.n	80024c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8097 	beq.w	800262c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002502:	4b81      	ldr	r3, [pc, #516]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10f      	bne.n	800252e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	4b7d      	ldr	r3, [pc, #500]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	4a7c      	ldr	r2, [pc, #496]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800251c:	6413      	str	r3, [r2, #64]	@ 0x40
 800251e:	4b7a      	ldr	r3, [pc, #488]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002522:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252e:	4b77      	ldr	r3, [pc, #476]	@ (800270c <HAL_RCC_OscConfig+0x474>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d118      	bne.n	800256c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253a:	4b74      	ldr	r3, [pc, #464]	@ (800270c <HAL_RCC_OscConfig+0x474>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a73      	ldr	r2, [pc, #460]	@ (800270c <HAL_RCC_OscConfig+0x474>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002544:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002546:	f7ff fb5b 	bl	8001c00 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254e:	f7ff fb57 	bl	8001c00 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e10c      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	4b6a      	ldr	r3, [pc, #424]	@ (800270c <HAL_RCC_OscConfig+0x474>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x2ea>
 8002574:	4b64      	ldr	r3, [pc, #400]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002578:	4a63      	ldr	r2, [pc, #396]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002580:	e01c      	b.n	80025bc <HAL_RCC_OscConfig+0x324>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b05      	cmp	r3, #5
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x30c>
 800258a:	4b5f      	ldr	r3, [pc, #380]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800258c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258e:	4a5e      	ldr	r2, [pc, #376]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	6713      	str	r3, [r2, #112]	@ 0x70
 8002596:	4b5c      	ldr	r3, [pc, #368]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800259a:	4a5b      	ldr	r2, [pc, #364]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800259c:	f043 0301 	orr.w	r3, r3, #1
 80025a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80025a2:	e00b      	b.n	80025bc <HAL_RCC_OscConfig+0x324>
 80025a4:	4b58      	ldr	r3, [pc, #352]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a8:	4a57      	ldr	r2, [pc, #348]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025aa:	f023 0301 	bic.w	r3, r3, #1
 80025ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80025b0:	4b55      	ldr	r3, [pc, #340]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025b4:	4a54      	ldr	r2, [pc, #336]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025b6:	f023 0304 	bic.w	r3, r3, #4
 80025ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c4:	f7ff fb1c 	bl	8001c00 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ca:	e00a      	b.n	80025e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025cc:	f7ff fb18 	bl	8001c00 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025da:	4293      	cmp	r3, r2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e0cb      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e2:	4b49      	ldr	r3, [pc, #292]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80025e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0ee      	beq.n	80025cc <HAL_RCC_OscConfig+0x334>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f0:	f7ff fb06 	bl	8001c00 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f6:	e00a      	b.n	800260e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f8:	f7ff fb02 	bl	8001c00 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e0b5      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800260e:	4b3e      	ldr	r3, [pc, #248]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1ee      	bne.n	80025f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800261a:	7dfb      	ldrb	r3, [r7, #23]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d105      	bne.n	800262c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002620:	4b39      	ldr	r3, [pc, #228]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	4a38      	ldr	r2, [pc, #224]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002626:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800262a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80a1 	beq.w	8002778 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002636:	4b34      	ldr	r3, [pc, #208]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 030c 	and.w	r3, r3, #12
 800263e:	2b08      	cmp	r3, #8
 8002640:	d05c      	beq.n	80026fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d141      	bne.n	80026ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264a:	4b31      	ldr	r3, [pc, #196]	@ (8002710 <HAL_RCC_OscConfig+0x478>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7ff fad6 	bl	8001c00 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002658:	f7ff fad2 	bl	8001c00 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e087      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266a:	4b27      	ldr	r3, [pc, #156]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69da      	ldr	r2, [r3, #28]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	431a      	orrs	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	019b      	lsls	r3, r3, #6
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268c:	085b      	lsrs	r3, r3, #1
 800268e:	3b01      	subs	r3, #1
 8002690:	041b      	lsls	r3, r3, #16
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002698:	061b      	lsls	r3, r3, #24
 800269a:	491b      	ldr	r1, [pc, #108]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 800269c:	4313      	orrs	r3, r2
 800269e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <HAL_RCC_OscConfig+0x478>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7ff faab 	bl	8001c00 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ae:	f7ff faa7 	bl	8001c00 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e05c      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c0:	4b11      	ldr	r3, [pc, #68]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x416>
 80026cc:	e054      	b.n	8002778 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <HAL_RCC_OscConfig+0x478>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7ff fa94 	bl	8001c00 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026dc:	f7ff fa90 	bl	8001c00 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e045      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ee:	4b06      	ldr	r3, [pc, #24]	@ (8002708 <HAL_RCC_OscConfig+0x470>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x444>
 80026fa:	e03d      	b.n	8002778 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d107      	bne.n	8002714 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e038      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
 8002708:	40023800 	.word	0x40023800
 800270c:	40007000 	.word	0x40007000
 8002710:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002714:	4b1b      	ldr	r3, [pc, #108]	@ (8002784 <HAL_RCC_OscConfig+0x4ec>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d028      	beq.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d121      	bne.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800273a:	429a      	cmp	r2, r3
 800273c:	d11a      	bne.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002744:	4013      	ands	r3, r2
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800274a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800274c:	4293      	cmp	r3, r2
 800274e:	d111      	bne.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800275a:	085b      	lsrs	r3, r3, #1
 800275c:	3b01      	subs	r3, #1
 800275e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002760:	429a      	cmp	r2, r3
 8002762:	d107      	bne.n	8002774 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800276e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d001      	beq.n	8002778 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40023800 	.word	0x40023800

08002788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d101      	bne.n	800279c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e0cc      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800279c:	4b68      	ldr	r3, [pc, #416]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d90c      	bls.n	80027c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027aa:	4b65      	ldr	r3, [pc, #404]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027b2:	4b63      	ldr	r3, [pc, #396]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	683a      	ldr	r2, [r7, #0]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d001      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0b8      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d020      	beq.n	8002812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027dc:	4b59      	ldr	r3, [pc, #356]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a58      	ldr	r2, [pc, #352]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0308 	and.w	r3, r3, #8
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d005      	beq.n	8002800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027f4:	4b53      	ldr	r3, [pc, #332]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	4a52      	ldr	r2, [pc, #328]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80027fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002800:	4b50      	ldr	r3, [pc, #320]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	494d      	ldr	r1, [pc, #308]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d044      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b47      	ldr	r3, [pc, #284]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d119      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e07f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d003      	beq.n	8002846 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002842:	2b03      	cmp	r3, #3
 8002844:	d107      	bne.n	8002856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002846:	4b3f      	ldr	r3, [pc, #252]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e06f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002856:	4b3b      	ldr	r3, [pc, #236]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e067      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002866:	4b37      	ldr	r3, [pc, #220]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f023 0203 	bic.w	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	4934      	ldr	r1, [pc, #208]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	4313      	orrs	r3, r2
 8002876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002878:	f7ff f9c2 	bl	8001c00 <HAL_GetTick>
 800287c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800287e:	e00a      	b.n	8002896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002880:	f7ff f9be 	bl	8001c00 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e04f      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002896:	4b2b      	ldr	r3, [pc, #172]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 020c 	and.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d1eb      	bne.n	8002880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028a8:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d20c      	bcs.n	80028d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b22      	ldr	r3, [pc, #136]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b20      	ldr	r3, [pc, #128]	@ (8002940 <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e032      	b.n	8002936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d008      	beq.n	80028ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028dc:	4b19      	ldr	r3, [pc, #100]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4916      	ldr	r1, [pc, #88]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0308 	and.w	r3, r3, #8
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	490e      	ldr	r1, [pc, #56]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	4313      	orrs	r3, r2
 800290c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800290e:	f000 f821 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	091b      	lsrs	r3, r3, #4
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	490a      	ldr	r1, [pc, #40]	@ (8002948 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	5ccb      	ldrb	r3, [r1, r3]
 8002922:	fa22 f303 	lsr.w	r3, r2, r3
 8002926:	4a09      	ldr	r2, [pc, #36]	@ (800294c <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800292a:	4b09      	ldr	r3, [pc, #36]	@ (8002950 <HAL_RCC_ClockConfig+0x1c8>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7ff f922 	bl	8001b78 <HAL_InitTick>

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023c00 	.word	0x40023c00
 8002944:	40023800 	.word	0x40023800
 8002948:	08007694 	.word	0x08007694
 800294c:	20000000 	.word	0x20000000
 8002950:	20000004 	.word	0x20000004

08002954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002958:	b094      	sub	sp, #80	@ 0x50
 800295a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296c:	4b79      	ldr	r3, [pc, #484]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x200>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b08      	cmp	r3, #8
 8002976:	d00d      	beq.n	8002994 <HAL_RCC_GetSysClockFreq+0x40>
 8002978:	2b08      	cmp	r3, #8
 800297a:	f200 80e1 	bhi.w	8002b40 <HAL_RCC_GetSysClockFreq+0x1ec>
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0x34>
 8002982:	2b04      	cmp	r3, #4
 8002984:	d003      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0x3a>
 8002986:	e0db      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002988:	4b73      	ldr	r3, [pc, #460]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x204>)
 800298a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800298c:	e0db      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800298e:	4b73      	ldr	r3, [pc, #460]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0x208>)
 8002990:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002992:	e0d8      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002994:	4b6f      	ldr	r3, [pc, #444]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800299c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800299e:	4b6d      	ldr	r3, [pc, #436]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d063      	beq.n	8002a72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x200>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	099b      	lsrs	r3, r3, #6
 80029b0:	2200      	movs	r2, #0
 80029b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80029b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80029be:	2300      	movs	r3, #0
 80029c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80029c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029c6:	4622      	mov	r2, r4
 80029c8:	462b      	mov	r3, r5
 80029ca:	f04f 0000 	mov.w	r0, #0
 80029ce:	f04f 0100 	mov.w	r1, #0
 80029d2:	0159      	lsls	r1, r3, #5
 80029d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029d8:	0150      	lsls	r0, r2, #5
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4621      	mov	r1, r4
 80029e0:	1a51      	subs	r1, r2, r1
 80029e2:	6139      	str	r1, [r7, #16]
 80029e4:	4629      	mov	r1, r5
 80029e6:	eb63 0301 	sbc.w	r3, r3, r1
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029f8:	4659      	mov	r1, fp
 80029fa:	018b      	lsls	r3, r1, #6
 80029fc:	4651      	mov	r1, sl
 80029fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a02:	4651      	mov	r1, sl
 8002a04:	018a      	lsls	r2, r1, #6
 8002a06:	4651      	mov	r1, sl
 8002a08:	ebb2 0801 	subs.w	r8, r2, r1
 8002a0c:	4659      	mov	r1, fp
 8002a0e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a26:	4690      	mov	r8, r2
 8002a28:	4699      	mov	r9, r3
 8002a2a:	4623      	mov	r3, r4
 8002a2c:	eb18 0303 	adds.w	r3, r8, r3
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	462b      	mov	r3, r5
 8002a34:	eb49 0303 	adc.w	r3, r9, r3
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	f04f 0300 	mov.w	r3, #0
 8002a42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a46:	4629      	mov	r1, r5
 8002a48:	024b      	lsls	r3, r1, #9
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a50:	4621      	mov	r1, r4
 8002a52:	024a      	lsls	r2, r1, #9
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a64:	f7fe f8d2 	bl	8000c0c <__aeabi_uldivmod>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a70:	e058      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a72:	4b38      	ldr	r3, [pc, #224]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	099b      	lsrs	r3, r3, #6
 8002a78:	2200      	movs	r2, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a82:	623b      	str	r3, [r7, #32]
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	464b      	mov	r3, r9
 8002a90:	f04f 0000 	mov.w	r0, #0
 8002a94:	f04f 0100 	mov.w	r1, #0
 8002a98:	0159      	lsls	r1, r3, #5
 8002a9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a9e:	0150      	lsls	r0, r2, #5
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	4641      	mov	r1, r8
 8002aa6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002aaa:	4649      	mov	r1, r9
 8002aac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	f04f 0300 	mov.w	r3, #0
 8002ab8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002abc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002ac0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ac4:	ebb2 040a 	subs.w	r4, r2, sl
 8002ac8:	eb63 050b 	sbc.w	r5, r3, fp
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	f04f 0300 	mov.w	r3, #0
 8002ad4:	00eb      	lsls	r3, r5, #3
 8002ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ada:	00e2      	lsls	r2, r4, #3
 8002adc:	4614      	mov	r4, r2
 8002ade:	461d      	mov	r5, r3
 8002ae0:	4643      	mov	r3, r8
 8002ae2:	18e3      	adds	r3, r4, r3
 8002ae4:	603b      	str	r3, [r7, #0]
 8002ae6:	464b      	mov	r3, r9
 8002ae8:	eb45 0303 	adc.w	r3, r5, r3
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002afa:	4629      	mov	r1, r5
 8002afc:	028b      	lsls	r3, r1, #10
 8002afe:	4621      	mov	r1, r4
 8002b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b04:	4621      	mov	r1, r4
 8002b06:	028a      	lsls	r2, r1, #10
 8002b08:	4610      	mov	r0, r2
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b0e:	2200      	movs	r2, #0
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	61fa      	str	r2, [r7, #28]
 8002b14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b18:	f7fe f878 	bl	8000c0c <__aeabi_uldivmod>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4613      	mov	r3, r2
 8002b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	0c1b      	lsrs	r3, r3, #16
 8002b2a:	f003 0303 	and.w	r3, r3, #3
 8002b2e:	3301      	adds	r3, #1
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b3e:	e002      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b42:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3750      	adds	r7, #80	@ 0x50
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b52:	bf00      	nop
 8002b54:	40023800 	.word	0x40023800
 8002b58:	00f42400 	.word	0x00f42400
 8002b5c:	007a1200 	.word	0x007a1200

08002b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b64:	4b03      	ldr	r3, [pc, #12]	@ (8002b74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000000 	.word	0x20000000

08002b78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b7c:	f7ff fff0 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002b80:	4602      	mov	r2, r0
 8002b82:	4b05      	ldr	r3, [pc, #20]	@ (8002b98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	0a9b      	lsrs	r3, r3, #10
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	4903      	ldr	r1, [pc, #12]	@ (8002b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b8e:	5ccb      	ldrb	r3, [r1, r3]
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	080076a4 	.word	0x080076a4

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ba4:	f7ff ffdc 	bl	8002b60 <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0b5b      	lsrs	r3, r3, #13
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4903      	ldr	r1, [pc, #12]	@ (8002bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	080076a4 	.word	0x080076a4

08002bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e041      	b.n	8002c5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d106      	bne.n	8002bf4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fe fdbc 	bl	800176c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3304      	adds	r3, #4
 8002c04:	4619      	mov	r1, r3
 8002c06:	4610      	mov	r0, r2
 8002c08:	f000 f9b8 	bl	8002f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_TIM_PWM_Start+0x24>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	e022      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x6a>
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d109      	bne.n	8002ca6 <HAL_TIM_PWM_Start+0x3e>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	bf14      	ite	ne
 8002c9e:	2301      	movne	r3, #1
 8002ca0:	2300      	moveq	r3, #0
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	e015      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x6a>
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d109      	bne.n	8002cc0 <HAL_TIM_PWM_Start+0x58>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	bf14      	ite	ne
 8002cb8:	2301      	movne	r3, #1
 8002cba:	2300      	moveq	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	e008      	b.n	8002cd2 <HAL_TIM_PWM_Start+0x6a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	bf14      	ite	ne
 8002ccc:	2301      	movne	r3, #1
 8002cce:	2300      	moveq	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e07c      	b.n	8002dd4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d104      	bne.n	8002cea <HAL_TIM_PWM_Start+0x82>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ce8:	e013      	b.n	8002d12 <HAL_TIM_PWM_Start+0xaa>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d104      	bne.n	8002cfa <HAL_TIM_PWM_Start+0x92>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cf8:	e00b      	b.n	8002d12 <HAL_TIM_PWM_Start+0xaa>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d104      	bne.n	8002d0a <HAL_TIM_PWM_Start+0xa2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d08:	e003      	b.n	8002d12 <HAL_TIM_PWM_Start+0xaa>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2201      	movs	r2, #1
 8002d18:	6839      	ldr	r1, [r7, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 fb84 	bl	8003428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2d      	ldr	r2, [pc, #180]	@ (8002ddc <HAL_TIM_PWM_Start+0x174>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d004      	beq.n	8002d34 <HAL_TIM_PWM_Start+0xcc>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8002de0 <HAL_TIM_PWM_Start+0x178>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d101      	bne.n	8002d38 <HAL_TIM_PWM_Start+0xd0>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_TIM_PWM_Start+0xd2>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d007      	beq.n	8002d4e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a22      	ldr	r2, [pc, #136]	@ (8002ddc <HAL_TIM_PWM_Start+0x174>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d022      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d60:	d01d      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1f      	ldr	r2, [pc, #124]	@ (8002de4 <HAL_TIM_PWM_Start+0x17c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d018      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a1d      	ldr	r2, [pc, #116]	@ (8002de8 <HAL_TIM_PWM_Start+0x180>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d013      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8002dec <HAL_TIM_PWM_Start+0x184>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00e      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a16      	ldr	r2, [pc, #88]	@ (8002de0 <HAL_TIM_PWM_Start+0x178>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d009      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a18      	ldr	r2, [pc, #96]	@ (8002df0 <HAL_TIM_PWM_Start+0x188>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d004      	beq.n	8002d9e <HAL_TIM_PWM_Start+0x136>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a16      	ldr	r2, [pc, #88]	@ (8002df4 <HAL_TIM_PWM_Start+0x18c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d111      	bne.n	8002dc2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2b06      	cmp	r3, #6
 8002dae:	d010      	beq.n	8002dd2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f042 0201 	orr.w	r2, r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dc0:	e007      	b.n	8002dd2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f042 0201 	orr.w	r2, r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40010000 	.word	0x40010000
 8002de0:	40010400 	.word	0x40010400
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40000c00 	.word	0x40000c00
 8002df0:	40014000 	.word	0x40014000
 8002df4:	40001800 	.word	0x40001800

08002df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e0ae      	b.n	8002f74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	f200 809f 	bhi.w	8002f64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e26:	a201      	add	r2, pc, #4	@ (adr r2, 8002e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002e61 	.word	0x08002e61
 8002e30:	08002f65 	.word	0x08002f65
 8002e34:	08002f65 	.word	0x08002f65
 8002e38:	08002f65 	.word	0x08002f65
 8002e3c:	08002ea1 	.word	0x08002ea1
 8002e40:	08002f65 	.word	0x08002f65
 8002e44:	08002f65 	.word	0x08002f65
 8002e48:	08002f65 	.word	0x08002f65
 8002e4c:	08002ee3 	.word	0x08002ee3
 8002e50:	08002f65 	.word	0x08002f65
 8002e54:	08002f65 	.word	0x08002f65
 8002e58:	08002f65 	.word	0x08002f65
 8002e5c:	08002f23 	.word	0x08002f23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68b9      	ldr	r1, [r7, #8]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f000 f92e 	bl	80030c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699a      	ldr	r2, [r3, #24]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0208 	orr.w	r2, r2, #8
 8002e7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0204 	bic.w	r2, r2, #4
 8002e8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	6999      	ldr	r1, [r3, #24]
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	619a      	str	r2, [r3, #24]
      break;
 8002e9e:	e064      	b.n	8002f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f97e 	bl	80031a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6999      	ldr	r1, [r3, #24]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	021a      	lsls	r2, r3, #8
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	619a      	str	r2, [r3, #24]
      break;
 8002ee0:	e043      	b.n	8002f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68b9      	ldr	r1, [r7, #8]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 f9d3 	bl	8003294 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	69da      	ldr	r2, [r3, #28]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f042 0208 	orr.w	r2, r2, #8
 8002efc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0204 	bic.w	r2, r2, #4
 8002f0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69d9      	ldr	r1, [r3, #28]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	61da      	str	r2, [r3, #28]
      break;
 8002f20:	e023      	b.n	8002f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 fa27 	bl	800337c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69d9      	ldr	r1, [r3, #28]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	691b      	ldr	r3, [r3, #16]
 8002f58:	021a      	lsls	r2, r3, #8
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	61da      	str	r2, [r3, #28]
      break;
 8002f62:	e002      	b.n	8002f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	75fb      	strb	r3, [r7, #23]
      break;
 8002f68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4a43      	ldr	r2, [pc, #268]	@ (800309c <TIM_Base_SetConfig+0x120>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d013      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f9a:	d00f      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a40      	ldr	r2, [pc, #256]	@ (80030a0 <TIM_Base_SetConfig+0x124>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a3f      	ldr	r2, [pc, #252]	@ (80030a4 <TIM_Base_SetConfig+0x128>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d007      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a3e      	ldr	r2, [pc, #248]	@ (80030a8 <TIM_Base_SetConfig+0x12c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_Base_SetConfig+0x40>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a3d      	ldr	r2, [pc, #244]	@ (80030ac <TIM_Base_SetConfig+0x130>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d108      	bne.n	8002fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a32      	ldr	r2, [pc, #200]	@ (800309c <TIM_Base_SetConfig+0x120>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d02b      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fdc:	d027      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a2f      	ldr	r2, [pc, #188]	@ (80030a0 <TIM_Base_SetConfig+0x124>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d023      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80030a4 <TIM_Base_SetConfig+0x128>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01f      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a2d      	ldr	r2, [pc, #180]	@ (80030a8 <TIM_Base_SetConfig+0x12c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01b      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a2c      	ldr	r2, [pc, #176]	@ (80030ac <TIM_Base_SetConfig+0x130>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d017      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a2b      	ldr	r2, [pc, #172]	@ (80030b0 <TIM_Base_SetConfig+0x134>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a2a      	ldr	r2, [pc, #168]	@ (80030b4 <TIM_Base_SetConfig+0x138>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00f      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a29      	ldr	r2, [pc, #164]	@ (80030b8 <TIM_Base_SetConfig+0x13c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d00b      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a28      	ldr	r2, [pc, #160]	@ (80030bc <TIM_Base_SetConfig+0x140>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d007      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a27      	ldr	r2, [pc, #156]	@ (80030c0 <TIM_Base_SetConfig+0x144>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d003      	beq.n	800302e <TIM_Base_SetConfig+0xb2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a26      	ldr	r2, [pc, #152]	@ (80030c4 <TIM_Base_SetConfig+0x148>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d108      	bne.n	8003040 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a0e      	ldr	r2, [pc, #56]	@ (800309c <TIM_Base_SetConfig+0x120>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d003      	beq.n	800306e <TIM_Base_SetConfig+0xf2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a10      	ldr	r2, [pc, #64]	@ (80030ac <TIM_Base_SetConfig+0x130>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d103      	bne.n	8003076 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	691a      	ldr	r2, [r3, #16]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f043 0204 	orr.w	r2, r3, #4
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68fa      	ldr	r2, [r7, #12]
 800308c:	601a      	str	r2, [r3, #0]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010000 	.word	0x40010000
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40000c00 	.word	0x40000c00
 80030ac:	40010400 	.word	0x40010400
 80030b0:	40014000 	.word	0x40014000
 80030b4:	40014400 	.word	0x40014400
 80030b8:	40014800 	.word	0x40014800
 80030bc:	40001800 	.word	0x40001800
 80030c0:	40001c00 	.word	0x40001c00
 80030c4:	40002000 	.word	0x40002000

080030c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b087      	sub	sp, #28
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f023 0201 	bic.w	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0303 	bic.w	r3, r3, #3
 80030fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f023 0302 	bic.w	r3, r3, #2
 8003110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	697a      	ldr	r2, [r7, #20]
 8003118:	4313      	orrs	r3, r2
 800311a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	4a20      	ldr	r2, [pc, #128]	@ (80031a0 <TIM_OC1_SetConfig+0xd8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d003      	beq.n	800312c <TIM_OC1_SetConfig+0x64>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a1f      	ldr	r2, [pc, #124]	@ (80031a4 <TIM_OC1_SetConfig+0xdc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d10c      	bne.n	8003146 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	f023 0308 	bic.w	r3, r3, #8
 8003132:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4313      	orrs	r3, r2
 800313c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f023 0304 	bic.w	r3, r3, #4
 8003144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a15      	ldr	r2, [pc, #84]	@ (80031a0 <TIM_OC1_SetConfig+0xd8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d003      	beq.n	8003156 <TIM_OC1_SetConfig+0x8e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a14      	ldr	r2, [pc, #80]	@ (80031a4 <TIM_OC1_SetConfig+0xdc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d111      	bne.n	800317a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800315c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	697a      	ldr	r2, [r7, #20]
 8003192:	621a      	str	r2, [r3, #32]
}
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40010400 	.word	0x40010400

080031a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b087      	sub	sp, #28
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	f023 0210 	bic.w	r2, r3, #16
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f023 0320 	bic.w	r3, r3, #32
 80031f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a22      	ldr	r2, [pc, #136]	@ (800328c <TIM_OC2_SetConfig+0xe4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d003      	beq.n	8003210 <TIM_OC2_SetConfig+0x68>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a21      	ldr	r2, [pc, #132]	@ (8003290 <TIM_OC2_SetConfig+0xe8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d10d      	bne.n	800322c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	697a      	ldr	r2, [r7, #20]
 8003220:	4313      	orrs	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800322a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a17      	ldr	r2, [pc, #92]	@ (800328c <TIM_OC2_SetConfig+0xe4>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d003      	beq.n	800323c <TIM_OC2_SetConfig+0x94>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a16      	ldr	r2, [pc, #88]	@ (8003290 <TIM_OC2_SetConfig+0xe8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d113      	bne.n	8003264 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800324a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	621a      	str	r2, [r3, #32]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	40010000 	.word	0x40010000
 8003290:	40010400 	.word	0x40010400

08003294 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6a1b      	ldr	r3, [r3, #32]
 80032a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a1b      	ldr	r3, [r3, #32]
 80032a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	021b      	lsls	r3, r3, #8
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a21      	ldr	r2, [pc, #132]	@ (8003374 <TIM_OC3_SetConfig+0xe0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d003      	beq.n	80032fa <TIM_OC3_SetConfig+0x66>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a20      	ldr	r2, [pc, #128]	@ (8003378 <TIM_OC3_SetConfig+0xe4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d10d      	bne.n	8003316 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003300:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	021b      	lsls	r3, r3, #8
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003314:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a16      	ldr	r2, [pc, #88]	@ (8003374 <TIM_OC3_SetConfig+0xe0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d003      	beq.n	8003326 <TIM_OC3_SetConfig+0x92>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a15      	ldr	r2, [pc, #84]	@ (8003378 <TIM_OC3_SetConfig+0xe4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d113      	bne.n	800334e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800332c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003334:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	699b      	ldr	r3, [r3, #24]
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	621a      	str	r2, [r3, #32]
}
 8003368:	bf00      	nop
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40010000 	.word	0x40010000
 8003378:	40010400 	.word	0x40010400

0800337c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800337c:	b480      	push	{r7}
 800337e:	b087      	sub	sp, #28
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80033aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	021b      	lsls	r3, r3, #8
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	4313      	orrs	r3, r2
 80033be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	031b      	lsls	r3, r3, #12
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a12      	ldr	r2, [pc, #72]	@ (8003420 <TIM_OC4_SetConfig+0xa4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d003      	beq.n	80033e4 <TIM_OC4_SetConfig+0x68>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a11      	ldr	r2, [pc, #68]	@ (8003424 <TIM_OC4_SetConfig+0xa8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d109      	bne.n	80033f8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033ea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	019b      	lsls	r3, r3, #6
 80033f2:	697a      	ldr	r2, [r7, #20]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	621a      	str	r2, [r3, #32]
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop
 8003420:	40010000 	.word	0x40010000
 8003424:	40010400 	.word	0x40010400

08003428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	2201      	movs	r2, #1
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a1a      	ldr	r2, [r3, #32]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	43db      	mvns	r3, r3
 800344a:	401a      	ands	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a1a      	ldr	r2, [r3, #32]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	fa01 f303 	lsl.w	r3, r1, r3
 8003460:	431a      	orrs	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	621a      	str	r2, [r3, #32]
}
 8003466:	bf00      	nop
 8003468:	371c      	adds	r7, #28
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
	...

08003474 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003488:	2302      	movs	r3, #2
 800348a:	e05a      	b.n	8003542 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a21      	ldr	r2, [pc, #132]	@ (8003550 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d022      	beq.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d8:	d01d      	beq.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1d      	ldr	r2, [pc, #116]	@ (8003554 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d018      	beq.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d013      	beq.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1a      	ldr	r2, [pc, #104]	@ (800355c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00e      	beq.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a18      	ldr	r2, [pc, #96]	@ (8003560 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a17      	ldr	r2, [pc, #92]	@ (8003564 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d004      	beq.n	8003516 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a15      	ldr	r2, [pc, #84]	@ (8003568 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10c      	bne.n	8003530 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800351c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	4313      	orrs	r3, r2
 8003526:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3714      	adds	r7, #20
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	40010000 	.word	0x40010000
 8003554:	40000400 	.word	0x40000400
 8003558:	40000800 	.word	0x40000800
 800355c:	40000c00 	.word	0x40000c00
 8003560:	40010400 	.word	0x40010400
 8003564:	40014000 	.word	0x40014000
 8003568:	40001800 	.word	0x40001800

0800356c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e042      	b.n	8003604 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fe f942 	bl	800181c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2224      	movs	r2, #36	@ 0x24
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68da      	ldr	r2, [r3, #12]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f000 fdd3 	bl	800415c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	691a      	ldr	r2, [r3, #16]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68da      	ldr	r2, [r3, #12]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	@ 0x28
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	4613      	mov	r3, r2
 800361a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b20      	cmp	r3, #32
 800362a:	d175      	bne.n	8003718 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d002      	beq.n	8003638 <HAL_UART_Transmit+0x2c>
 8003632:	88fb      	ldrh	r3, [r7, #6]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e06e      	b.n	800371a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2221      	movs	r2, #33	@ 0x21
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800364a:	f7fe fad9 	bl	8001c00 <HAL_GetTick>
 800364e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	88fa      	ldrh	r2, [r7, #6]
 8003654:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	88fa      	ldrh	r2, [r7, #6]
 800365a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003664:	d108      	bne.n	8003678 <HAL_UART_Transmit+0x6c>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d104      	bne.n	8003678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800366e:	2300      	movs	r3, #0
 8003670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	e003      	b.n	8003680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003680:	e02e      	b.n	80036e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	2200      	movs	r2, #0
 800368a:	2180      	movs	r1, #128	@ 0x80
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fb37 	bl	8003d00 <UART_WaitOnFlagUntilTimeout>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d005      	beq.n	80036a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e03a      	b.n	800371a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	3302      	adds	r3, #2
 80036be:	61bb      	str	r3, [r7, #24]
 80036c0:	e007      	b.n	80036d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	781a      	ldrb	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	3301      	adds	r3, #1
 80036d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1cb      	bne.n	8003682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	2200      	movs	r2, #0
 80036f2:	2140      	movs	r1, #64	@ 0x40
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 fb03 	bl	8003d00 <UART_WaitOnFlagUntilTimeout>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e006      	b.n	800371a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003714:	2300      	movs	r3, #0
 8003716:	e000      	b.n	800371a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003718:	2302      	movs	r3, #2
  }
}
 800371a:	4618      	mov	r0, r3
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	60f8      	str	r0, [r7, #12]
 800372a:	60b9      	str	r1, [r7, #8]
 800372c:	4613      	mov	r3, r2
 800372e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b20      	cmp	r3, #32
 800373a:	d112      	bne.n	8003762 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d002      	beq.n	8003748 <HAL_UART_Receive_IT+0x26>
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e00b      	b.n	8003764 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	461a      	mov	r2, r3
 8003756:	68b9      	ldr	r1, [r7, #8]
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 fb2a 	bl	8003db2 <UART_Start_Receive_IT>
 800375e:	4603      	mov	r3, r0
 8003760:	e000      	b.n	8003764 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003762:	2302      	movs	r3, #2
  }
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b0ba      	sub	sp, #232	@ 0xe8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80037aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10f      	bne.n	80037d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d009      	beq.n	80037d2 <HAL_UART_IRQHandler+0x66>
 80037be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fc07 	bl	8003fde <UART_Receive_IT>
      return;
 80037d0:	e273      	b.n	8003cba <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80de 	beq.w	8003998 <HAL_UART_IRQHandler+0x22c>
 80037dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d106      	bne.n	80037f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 80d1 	beq.w	8003998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_UART_IRQHandler+0xae>
 8003802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d005      	beq.n	800381a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_UART_IRQHandler+0xd2>
 8003826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	d005      	beq.n	800383e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	f043 0202 	orr.w	r2, r3, #2
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800383e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00b      	beq.n	8003862 <HAL_UART_IRQHandler+0xf6>
 800384a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d005      	beq.n	8003862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f043 0204 	orr.w	r2, r3, #4
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d011      	beq.n	8003892 <HAL_UART_IRQHandler+0x126>
 800386e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d105      	bne.n	8003886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800387a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	f043 0208 	orr.w	r2, r3, #8
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 820a 	beq.w	8003cb0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800389c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d008      	beq.n	80038ba <HAL_UART_IRQHandler+0x14e>
 80038a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038ac:	f003 0320 	and.w	r3, r3, #32
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fb92 	bl	8003fde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038c4:	2b40      	cmp	r3, #64	@ 0x40
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d103      	bne.n	80038e6 <HAL_UART_IRQHandler+0x17a>
 80038de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d04f      	beq.n	8003986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fa9d 	bl	8003e26 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f6:	2b40      	cmp	r3, #64	@ 0x40
 80038f8:	d141      	bne.n	800397e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	3314      	adds	r3, #20
 8003900:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003904:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003910:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3314      	adds	r3, #20
 8003922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003926:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800392a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003936:	e841 2300 	strex	r3, r2, [r1]
 800393a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800393e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1d9      	bne.n	80038fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394a:	2b00      	cmp	r3, #0
 800394c:	d013      	beq.n	8003976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003952:	4a8a      	ldr	r2, [pc, #552]	@ (8003b7c <HAL_UART_IRQHandler+0x410>)
 8003954:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800395a:	4618      	mov	r0, r3
 800395c:	f7fe fadd 	bl	8001f1a <HAL_DMA_Abort_IT>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d016      	beq.n	8003994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800396a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003970:	4610      	mov	r0, r2
 8003972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003974:	e00e      	b.n	8003994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f9ac 	bl	8003cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800397c:	e00a      	b.n	8003994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f9a8 	bl	8003cd4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003984:	e006      	b.n	8003994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f9a4 	bl	8003cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003992:	e18d      	b.n	8003cb0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003994:	bf00      	nop
    return;
 8003996:	e18b      	b.n	8003cb0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399c:	2b01      	cmp	r3, #1
 800399e:	f040 8167 	bne.w	8003c70 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a6:	f003 0310 	and.w	r3, r3, #16
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 8160 	beq.w	8003c70 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80039b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b4:	f003 0310 	and.w	r3, r3, #16
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8159 	beq.w	8003c70 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039be:	2300      	movs	r3, #0
 80039c0:	60bb      	str	r3, [r7, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60bb      	str	r3, [r7, #8]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039de:	2b40      	cmp	r3, #64	@ 0x40
 80039e0:	f040 80ce 	bne.w	8003b80 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80a9 	beq.w	8003b4c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a02:	429a      	cmp	r2, r3
 8003a04:	f080 80a2 	bcs.w	8003b4c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a1a:	f000 8088 	beq.w	8003b2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	330c      	adds	r3, #12
 8003a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a2c:	e853 3f00 	ldrex	r3, [r3]
 8003a30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1d9      	bne.n	8003a1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3314      	adds	r3, #20
 8003a70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a7c:	f023 0301 	bic.w	r3, r3, #1
 8003a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	3314      	adds	r3, #20
 8003a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e1      	bne.n	8003a6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ab8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003abc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	3314      	adds	r3, #20
 8003ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003aca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003acc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ace:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ad0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ad8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1e3      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	330c      	adds	r3, #12
 8003af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003af6:	e853 3f00 	ldrex	r3, [r3]
 8003afa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003afc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003afe:	f023 0310 	bic.w	r3, r3, #16
 8003b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	330c      	adds	r3, #12
 8003b0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003b10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003b12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b18:	e841 2300 	strex	r3, r2, [r1]
 8003b1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e3      	bne.n	8003aec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fe f986 	bl	8001e3a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2202      	movs	r2, #2
 8003b32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f8cf 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003b4a:	e0b3      	b.n	8003cb4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b54:	429a      	cmp	r2, r3
 8003b56:	f040 80ad 	bne.w	8003cb4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b64:	f040 80a6 	bne.w	8003cb4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f8b7 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
      return;
 8003b7a:	e09b      	b.n	8003cb4 <HAL_UART_IRQHandler+0x548>
 8003b7c:	08003eed 	.word	0x08003eed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	f000 808e 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003b9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8089 	beq.w	8003cb8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	330c      	adds	r3, #12
 8003bac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	e853 3f00 	ldrex	r3, [r3]
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bbc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	330c      	adds	r3, #12
 8003bc6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003bca:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bcc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bd0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bd2:	e841 2300 	strex	r3, r2, [r1]
 8003bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1e3      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	3314      	adds	r3, #20
 8003be4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	623b      	str	r3, [r7, #32]
   return(result);
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	f023 0301 	bic.w	r3, r3, #1
 8003bf4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3314      	adds	r3, #20
 8003bfe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003c02:	633a      	str	r2, [r7, #48]	@ 0x30
 8003c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e3      	bne.n	8003bde <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2220      	movs	r2, #32
 8003c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	330c      	adds	r3, #12
 8003c2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0310 	bic.w	r3, r3, #16
 8003c3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	330c      	adds	r3, #12
 8003c44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c48:	61fa      	str	r2, [r7, #28]
 8003c4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	69b9      	ldr	r1, [r7, #24]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	617b      	str	r3, [r7, #20]
   return(result);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e3      	bne.n	8003c24 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2202      	movs	r2, #2
 8003c60:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f83d 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c6e:	e023      	b.n	8003cb8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d009      	beq.n	8003c90 <HAL_UART_IRQHandler+0x524>
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 f940 	bl	8003f0e <UART_Transmit_IT>
    return;
 8003c8e:	e014      	b.n	8003cba <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00e      	beq.n	8003cba <HAL_UART_IRQHandler+0x54e>
 8003c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f980 	bl	8003fae <UART_EndTransmit_IT>
    return;
 8003cae:	e004      	b.n	8003cba <HAL_UART_IRQHandler+0x54e>
    return;
 8003cb0:	bf00      	nop
 8003cb2:	e002      	b.n	8003cba <HAL_UART_IRQHandler+0x54e>
      return;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <HAL_UART_IRQHandler+0x54e>
      return;
 8003cb8:	bf00      	nop
  }
}
 8003cba:	37e8      	adds	r7, #232	@ 0xe8
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cdc:	bf00      	nop
 8003cde:	370c      	adds	r7, #12
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr

08003ce8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b086      	sub	sp, #24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	603b      	str	r3, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d10:	e03b      	b.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d18:	d037      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1a:	f7fd ff71 	bl	8001c00 <HAL_GetTick>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	1ad3      	subs	r3, r2, r3
 8003d24:	6a3a      	ldr	r2, [r7, #32]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d302      	bcc.n	8003d30 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d2a:	6a3b      	ldr	r3, [r7, #32]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e03a      	b.n	8003daa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d023      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b80      	cmp	r3, #128	@ 0x80
 8003d46:	d020      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	2b40      	cmp	r3, #64	@ 0x40
 8003d4c:	d01d      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0308 	and.w	r3, r3, #8
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d116      	bne.n	8003d8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f857 	bl	8003e26 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2208      	movs	r2, #8
 8003d7c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e00f      	b.n	8003daa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	bf0c      	ite	eq
 8003d9a:	2301      	moveq	r3, #1
 8003d9c:	2300      	movne	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d0b4      	beq.n	8003d12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	68ba      	ldr	r2, [r7, #8]
 8003dc4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	88fa      	ldrh	r2, [r7, #6]
 8003dd0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2222      	movs	r2, #34	@ 0x22
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003df6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695a      	ldr	r2, [r3, #20]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f042 0201 	orr.w	r2, r2, #1
 8003e06:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0220 	orr.w	r2, r2, #32
 8003e16:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e26:	b480      	push	{r7}
 8003e28:	b095      	sub	sp, #84	@ 0x54
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	330c      	adds	r3, #12
 8003e34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e38:	e853 3f00 	ldrex	r3, [r3]
 8003e3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e4e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003e54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e56:	e841 2300 	strex	r3, r2, [r1]
 8003e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1e5      	bne.n	8003e2e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	3314      	adds	r3, #20
 8003e68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6a3b      	ldr	r3, [r7, #32]
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f023 0301 	bic.w	r3, r3, #1
 8003e78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3314      	adds	r3, #20
 8003e80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e5      	bne.n	8003e62 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d119      	bne.n	8003ed2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f023 0310 	bic.w	r3, r3, #16
 8003eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	330c      	adds	r3, #12
 8003ebc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ebe:	61ba      	str	r2, [r7, #24]
 8003ec0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec2:	6979      	ldr	r1, [r7, #20]
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	e841 2300 	strex	r3, r2, [r1]
 8003eca:	613b      	str	r3, [r7, #16]
   return(result);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1e5      	bne.n	8003e9e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ee0:	bf00      	nop
 8003ee2:	3754      	adds	r7, #84	@ 0x54
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f7ff fee7 	bl	8003cd4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b085      	sub	sp, #20
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b21      	cmp	r3, #33	@ 0x21
 8003f20:	d13e      	bne.n	8003fa0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2a:	d114      	bne.n	8003f56 <UART_Transmit_IT+0x48>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d110      	bne.n	8003f56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	1c9a      	adds	r2, r3, #2
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	621a      	str	r2, [r3, #32]
 8003f54:	e008      	b.n	8003f68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6211      	str	r1, [r2, #32]
 8003f60:	781a      	ldrb	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4619      	mov	r1, r3
 8003f76:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10f      	bne.n	8003f9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e000      	b.n	8003fa2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003fa0:	2302      	movs	r3, #2
  }
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68da      	ldr	r2, [r3, #12]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fe76 	bl	8003cc0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08c      	sub	sp, #48	@ 0x30
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003fea:	2300      	movs	r3, #0
 8003fec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b22      	cmp	r3, #34	@ 0x22
 8003ff8:	f040 80aa 	bne.w	8004150 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004004:	d115      	bne.n	8004032 <UART_Receive_IT+0x54>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d111      	bne.n	8004032 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	b29b      	uxth	r3, r3
 800401c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004020:	b29a      	uxth	r2, r3
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800402a:	1c9a      	adds	r2, r3, #2
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004030:	e024      	b.n	800407c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004040:	d007      	beq.n	8004052 <UART_Receive_IT+0x74>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <UART_Receive_IT+0x82>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	b2da      	uxtb	r2, r3
 800405a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800405c:	701a      	strb	r2, [r3, #0]
 800405e:	e008      	b.n	8004072 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800406c:	b2da      	uxtb	r2, r3
 800406e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004070:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29b      	uxth	r3, r3
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	4619      	mov	r1, r3
 800408a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800408c:	2b00      	cmp	r3, #0
 800408e:	d15d      	bne.n	800414c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f022 0220 	bic.w	r2, r2, #32
 800409e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68da      	ldr	r2, [r3, #12]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80040ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695a      	ldr	r2, [r3, #20]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 0201 	bic.w	r2, r2, #1
 80040be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d135      	bne.n	8004142 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	613b      	str	r3, [r7, #16]
   return(result);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 0310 	bic.w	r3, r3, #16
 80040f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040fc:	623a      	str	r2, [r7, #32]
 80040fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	69f9      	ldr	r1, [r7, #28]
 8004102:	6a3a      	ldr	r2, [r7, #32]
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	61bb      	str	r3, [r7, #24]
   return(result);
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b10      	cmp	r3, #16
 800411c:	d10a      	bne.n	8004134 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f7ff fdd4 	bl	8003ce8 <HAL_UARTEx_RxEventCallback>
 8004140:	e002      	b.n	8004148 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fd f8e8 	bl	8001318 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e002      	b.n	8004152 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	e000      	b.n	8004152 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004150:	2302      	movs	r3, #2
  }
}
 8004152:	4618      	mov	r0, r3
 8004154:	3730      	adds	r7, #48	@ 0x30
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800415c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004160:	b0c0      	sub	sp, #256	@ 0x100
 8004162:	af00      	add	r7, sp, #0
 8004164:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004178:	68d9      	ldr	r1, [r3, #12]
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	ea40 0301 	orr.w	r3, r0, r1
 8004184:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	431a      	orrs	r2, r3
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	431a      	orrs	r2, r3
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041b4:	f021 010c 	bic.w	r1, r1, #12
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041c2:	430b      	orrs	r3, r1
 80041c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d6:	6999      	ldr	r1, [r3, #24]
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	ea40 0301 	orr.w	r3, r0, r1
 80041e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4b8f      	ldr	r3, [pc, #572]	@ (8004428 <UART_SetConfig+0x2cc>)
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d005      	beq.n	80041fc <UART_SetConfig+0xa0>
 80041f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	4b8d      	ldr	r3, [pc, #564]	@ (800442c <UART_SetConfig+0x2d0>)
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d104      	bne.n	8004206 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041fc:	f7fe fcd0 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8004200:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004204:	e003      	b.n	800420e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004206:	f7fe fcb7 	bl	8002b78 <HAL_RCC_GetPCLK1Freq>
 800420a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800420e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004218:	f040 810c 	bne.w	8004434 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800421c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004220:	2200      	movs	r2, #0
 8004222:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004226:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800422a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800422e:	4622      	mov	r2, r4
 8004230:	462b      	mov	r3, r5
 8004232:	1891      	adds	r1, r2, r2
 8004234:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004236:	415b      	adcs	r3, r3
 8004238:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800423a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800423e:	4621      	mov	r1, r4
 8004240:	eb12 0801 	adds.w	r8, r2, r1
 8004244:	4629      	mov	r1, r5
 8004246:	eb43 0901 	adc.w	r9, r3, r1
 800424a:	f04f 0200 	mov.w	r2, #0
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004256:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800425a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800425e:	4690      	mov	r8, r2
 8004260:	4699      	mov	r9, r3
 8004262:	4623      	mov	r3, r4
 8004264:	eb18 0303 	adds.w	r3, r8, r3
 8004268:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800426c:	462b      	mov	r3, r5
 800426e:	eb49 0303 	adc.w	r3, r9, r3
 8004272:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004282:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004286:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800428a:	460b      	mov	r3, r1
 800428c:	18db      	adds	r3, r3, r3
 800428e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004290:	4613      	mov	r3, r2
 8004292:	eb42 0303 	adc.w	r3, r2, r3
 8004296:	657b      	str	r3, [r7, #84]	@ 0x54
 8004298:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800429c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042a0:	f7fc fcb4 	bl	8000c0c <__aeabi_uldivmod>
 80042a4:	4602      	mov	r2, r0
 80042a6:	460b      	mov	r3, r1
 80042a8:	4b61      	ldr	r3, [pc, #388]	@ (8004430 <UART_SetConfig+0x2d4>)
 80042aa:	fba3 2302 	umull	r2, r3, r3, r2
 80042ae:	095b      	lsrs	r3, r3, #5
 80042b0:	011c      	lsls	r4, r3, #4
 80042b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042b6:	2200      	movs	r2, #0
 80042b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042c4:	4642      	mov	r2, r8
 80042c6:	464b      	mov	r3, r9
 80042c8:	1891      	adds	r1, r2, r2
 80042ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042cc:	415b      	adcs	r3, r3
 80042ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042d4:	4641      	mov	r1, r8
 80042d6:	eb12 0a01 	adds.w	sl, r2, r1
 80042da:	4649      	mov	r1, r9
 80042dc:	eb43 0b01 	adc.w	fp, r3, r1
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042f4:	4692      	mov	sl, r2
 80042f6:	469b      	mov	fp, r3
 80042f8:	4643      	mov	r3, r8
 80042fa:	eb1a 0303 	adds.w	r3, sl, r3
 80042fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004302:	464b      	mov	r3, r9
 8004304:	eb4b 0303 	adc.w	r3, fp, r3
 8004308:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800430c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004318:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800431c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004320:	460b      	mov	r3, r1
 8004322:	18db      	adds	r3, r3, r3
 8004324:	643b      	str	r3, [r7, #64]	@ 0x40
 8004326:	4613      	mov	r3, r2
 8004328:	eb42 0303 	adc.w	r3, r2, r3
 800432c:	647b      	str	r3, [r7, #68]	@ 0x44
 800432e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004332:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004336:	f7fc fc69 	bl	8000c0c <__aeabi_uldivmod>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	4611      	mov	r1, r2
 8004340:	4b3b      	ldr	r3, [pc, #236]	@ (8004430 <UART_SetConfig+0x2d4>)
 8004342:	fba3 2301 	umull	r2, r3, r3, r1
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	2264      	movs	r2, #100	@ 0x64
 800434a:	fb02 f303 	mul.w	r3, r2, r3
 800434e:	1acb      	subs	r3, r1, r3
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004356:	4b36      	ldr	r3, [pc, #216]	@ (8004430 <UART_SetConfig+0x2d4>)
 8004358:	fba3 2302 	umull	r2, r3, r3, r2
 800435c:	095b      	lsrs	r3, r3, #5
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004364:	441c      	add	r4, r3
 8004366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800436a:	2200      	movs	r2, #0
 800436c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004370:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004374:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004378:	4642      	mov	r2, r8
 800437a:	464b      	mov	r3, r9
 800437c:	1891      	adds	r1, r2, r2
 800437e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004380:	415b      	adcs	r3, r3
 8004382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004384:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004388:	4641      	mov	r1, r8
 800438a:	1851      	adds	r1, r2, r1
 800438c:	6339      	str	r1, [r7, #48]	@ 0x30
 800438e:	4649      	mov	r1, r9
 8004390:	414b      	adcs	r3, r1
 8004392:	637b      	str	r3, [r7, #52]	@ 0x34
 8004394:	f04f 0200 	mov.w	r2, #0
 8004398:	f04f 0300 	mov.w	r3, #0
 800439c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043a0:	4659      	mov	r1, fp
 80043a2:	00cb      	lsls	r3, r1, #3
 80043a4:	4651      	mov	r1, sl
 80043a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043aa:	4651      	mov	r1, sl
 80043ac:	00ca      	lsls	r2, r1, #3
 80043ae:	4610      	mov	r0, r2
 80043b0:	4619      	mov	r1, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	4642      	mov	r2, r8
 80043b6:	189b      	adds	r3, r3, r2
 80043b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043bc:	464b      	mov	r3, r9
 80043be:	460a      	mov	r2, r1
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043dc:	460b      	mov	r3, r1
 80043de:	18db      	adds	r3, r3, r3
 80043e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043e2:	4613      	mov	r3, r2
 80043e4:	eb42 0303 	adc.w	r3, r2, r3
 80043e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043f2:	f7fc fc0b 	bl	8000c0c <__aeabi_uldivmod>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004430 <UART_SetConfig+0x2d4>)
 80043fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004400:	095b      	lsrs	r3, r3, #5
 8004402:	2164      	movs	r1, #100	@ 0x64
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	3332      	adds	r3, #50	@ 0x32
 800440e:	4a08      	ldr	r2, [pc, #32]	@ (8004430 <UART_SetConfig+0x2d4>)
 8004410:	fba2 2303 	umull	r2, r3, r2, r3
 8004414:	095b      	lsrs	r3, r3, #5
 8004416:	f003 0207 	and.w	r2, r3, #7
 800441a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4422      	add	r2, r4
 8004422:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004424:	e106      	b.n	8004634 <UART_SetConfig+0x4d8>
 8004426:	bf00      	nop
 8004428:	40011000 	.word	0x40011000
 800442c:	40011400 	.word	0x40011400
 8004430:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004434:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004438:	2200      	movs	r2, #0
 800443a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800443e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004442:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004446:	4642      	mov	r2, r8
 8004448:	464b      	mov	r3, r9
 800444a:	1891      	adds	r1, r2, r2
 800444c:	6239      	str	r1, [r7, #32]
 800444e:	415b      	adcs	r3, r3
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
 8004452:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004456:	4641      	mov	r1, r8
 8004458:	1854      	adds	r4, r2, r1
 800445a:	4649      	mov	r1, r9
 800445c:	eb43 0501 	adc.w	r5, r3, r1
 8004460:	f04f 0200 	mov.w	r2, #0
 8004464:	f04f 0300 	mov.w	r3, #0
 8004468:	00eb      	lsls	r3, r5, #3
 800446a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800446e:	00e2      	lsls	r2, r4, #3
 8004470:	4614      	mov	r4, r2
 8004472:	461d      	mov	r5, r3
 8004474:	4643      	mov	r3, r8
 8004476:	18e3      	adds	r3, r4, r3
 8004478:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800447c:	464b      	mov	r3, r9
 800447e:	eb45 0303 	adc.w	r3, r5, r3
 8004482:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004492:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044a2:	4629      	mov	r1, r5
 80044a4:	008b      	lsls	r3, r1, #2
 80044a6:	4621      	mov	r1, r4
 80044a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ac:	4621      	mov	r1, r4
 80044ae:	008a      	lsls	r2, r1, #2
 80044b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044b4:	f7fc fbaa 	bl	8000c0c <__aeabi_uldivmod>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4b60      	ldr	r3, [pc, #384]	@ (8004640 <UART_SetConfig+0x4e4>)
 80044be:	fba3 2302 	umull	r2, r3, r3, r2
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	011c      	lsls	r4, r3, #4
 80044c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044ca:	2200      	movs	r2, #0
 80044cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044d8:	4642      	mov	r2, r8
 80044da:	464b      	mov	r3, r9
 80044dc:	1891      	adds	r1, r2, r2
 80044de:	61b9      	str	r1, [r7, #24]
 80044e0:	415b      	adcs	r3, r3
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044e8:	4641      	mov	r1, r8
 80044ea:	1851      	adds	r1, r2, r1
 80044ec:	6139      	str	r1, [r7, #16]
 80044ee:	4649      	mov	r1, r9
 80044f0:	414b      	adcs	r3, r1
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004500:	4659      	mov	r1, fp
 8004502:	00cb      	lsls	r3, r1, #3
 8004504:	4651      	mov	r1, sl
 8004506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800450a:	4651      	mov	r1, sl
 800450c:	00ca      	lsls	r2, r1, #3
 800450e:	4610      	mov	r0, r2
 8004510:	4619      	mov	r1, r3
 8004512:	4603      	mov	r3, r0
 8004514:	4642      	mov	r2, r8
 8004516:	189b      	adds	r3, r3, r2
 8004518:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800451c:	464b      	mov	r3, r9
 800451e:	460a      	mov	r2, r1
 8004520:	eb42 0303 	adc.w	r3, r2, r3
 8004524:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004532:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004540:	4649      	mov	r1, r9
 8004542:	008b      	lsls	r3, r1, #2
 8004544:	4641      	mov	r1, r8
 8004546:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800454a:	4641      	mov	r1, r8
 800454c:	008a      	lsls	r2, r1, #2
 800454e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004552:	f7fc fb5b 	bl	8000c0c <__aeabi_uldivmod>
 8004556:	4602      	mov	r2, r0
 8004558:	460b      	mov	r3, r1
 800455a:	4611      	mov	r1, r2
 800455c:	4b38      	ldr	r3, [pc, #224]	@ (8004640 <UART_SetConfig+0x4e4>)
 800455e:	fba3 2301 	umull	r2, r3, r3, r1
 8004562:	095b      	lsrs	r3, r3, #5
 8004564:	2264      	movs	r2, #100	@ 0x64
 8004566:	fb02 f303 	mul.w	r3, r2, r3
 800456a:	1acb      	subs	r3, r1, r3
 800456c:	011b      	lsls	r3, r3, #4
 800456e:	3332      	adds	r3, #50	@ 0x32
 8004570:	4a33      	ldr	r2, [pc, #204]	@ (8004640 <UART_SetConfig+0x4e4>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	095b      	lsrs	r3, r3, #5
 8004578:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800457c:	441c      	add	r4, r3
 800457e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004582:	2200      	movs	r2, #0
 8004584:	673b      	str	r3, [r7, #112]	@ 0x70
 8004586:	677a      	str	r2, [r7, #116]	@ 0x74
 8004588:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800458c:	4642      	mov	r2, r8
 800458e:	464b      	mov	r3, r9
 8004590:	1891      	adds	r1, r2, r2
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	415b      	adcs	r3, r3
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800459c:	4641      	mov	r1, r8
 800459e:	1851      	adds	r1, r2, r1
 80045a0:	6039      	str	r1, [r7, #0]
 80045a2:	4649      	mov	r1, r9
 80045a4:	414b      	adcs	r3, r1
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045b4:	4659      	mov	r1, fp
 80045b6:	00cb      	lsls	r3, r1, #3
 80045b8:	4651      	mov	r1, sl
 80045ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045be:	4651      	mov	r1, sl
 80045c0:	00ca      	lsls	r2, r1, #3
 80045c2:	4610      	mov	r0, r2
 80045c4:	4619      	mov	r1, r3
 80045c6:	4603      	mov	r3, r0
 80045c8:	4642      	mov	r2, r8
 80045ca:	189b      	adds	r3, r3, r2
 80045cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ce:	464b      	mov	r3, r9
 80045d0:	460a      	mov	r2, r1
 80045d2:	eb42 0303 	adc.w	r3, r2, r3
 80045d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	663b      	str	r3, [r7, #96]	@ 0x60
 80045e2:	667a      	str	r2, [r7, #100]	@ 0x64
 80045e4:	f04f 0200 	mov.w	r2, #0
 80045e8:	f04f 0300 	mov.w	r3, #0
 80045ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045f0:	4649      	mov	r1, r9
 80045f2:	008b      	lsls	r3, r1, #2
 80045f4:	4641      	mov	r1, r8
 80045f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045fa:	4641      	mov	r1, r8
 80045fc:	008a      	lsls	r2, r1, #2
 80045fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004602:	f7fc fb03 	bl	8000c0c <__aeabi_uldivmod>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	4b0d      	ldr	r3, [pc, #52]	@ (8004640 <UART_SetConfig+0x4e4>)
 800460c:	fba3 1302 	umull	r1, r3, r3, r2
 8004610:	095b      	lsrs	r3, r3, #5
 8004612:	2164      	movs	r1, #100	@ 0x64
 8004614:	fb01 f303 	mul.w	r3, r1, r3
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	3332      	adds	r3, #50	@ 0x32
 800461e:	4a08      	ldr	r2, [pc, #32]	@ (8004640 <UART_SetConfig+0x4e4>)
 8004620:	fba2 2303 	umull	r2, r3, r2, r3
 8004624:	095b      	lsrs	r3, r3, #5
 8004626:	f003 020f 	and.w	r2, r3, #15
 800462a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4422      	add	r2, r4
 8004632:	609a      	str	r2, [r3, #8]
}
 8004634:	bf00      	nop
 8004636:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800463a:	46bd      	mov	sp, r7
 800463c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004640:	51eb851f 	.word	0x51eb851f

08004644 <atof>:
 8004644:	2100      	movs	r1, #0
 8004646:	f000 be03 	b.w	8005250 <strtod>

0800464a <sulp>:
 800464a:	b570      	push	{r4, r5, r6, lr}
 800464c:	4604      	mov	r4, r0
 800464e:	460d      	mov	r5, r1
 8004650:	ec45 4b10 	vmov	d0, r4, r5
 8004654:	4616      	mov	r6, r2
 8004656:	f002 f805 	bl	8006664 <__ulp>
 800465a:	ec51 0b10 	vmov	r0, r1, d0
 800465e:	b17e      	cbz	r6, 8004680 <sulp+0x36>
 8004660:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004664:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004668:	2b00      	cmp	r3, #0
 800466a:	dd09      	ble.n	8004680 <sulp+0x36>
 800466c:	051b      	lsls	r3, r3, #20
 800466e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004672:	2400      	movs	r4, #0
 8004674:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004678:	4622      	mov	r2, r4
 800467a:	462b      	mov	r3, r5
 800467c:	f7fb ffbc 	bl	80005f8 <__aeabi_dmul>
 8004680:	ec41 0b10 	vmov	d0, r0, r1
 8004684:	bd70      	pop	{r4, r5, r6, pc}
	...

08004688 <_strtod_l>:
 8004688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800468c:	b09f      	sub	sp, #124	@ 0x7c
 800468e:	460c      	mov	r4, r1
 8004690:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004692:	2200      	movs	r2, #0
 8004694:	921a      	str	r2, [sp, #104]	@ 0x68
 8004696:	9005      	str	r0, [sp, #20]
 8004698:	f04f 0a00 	mov.w	sl, #0
 800469c:	f04f 0b00 	mov.w	fp, #0
 80046a0:	460a      	mov	r2, r1
 80046a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80046a4:	7811      	ldrb	r1, [r2, #0]
 80046a6:	292b      	cmp	r1, #43	@ 0x2b
 80046a8:	d04a      	beq.n	8004740 <_strtod_l+0xb8>
 80046aa:	d838      	bhi.n	800471e <_strtod_l+0x96>
 80046ac:	290d      	cmp	r1, #13
 80046ae:	d832      	bhi.n	8004716 <_strtod_l+0x8e>
 80046b0:	2908      	cmp	r1, #8
 80046b2:	d832      	bhi.n	800471a <_strtod_l+0x92>
 80046b4:	2900      	cmp	r1, #0
 80046b6:	d03b      	beq.n	8004730 <_strtod_l+0xa8>
 80046b8:	2200      	movs	r2, #0
 80046ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80046bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80046be:	782a      	ldrb	r2, [r5, #0]
 80046c0:	2a30      	cmp	r2, #48	@ 0x30
 80046c2:	f040 80b2 	bne.w	800482a <_strtod_l+0x1a2>
 80046c6:	786a      	ldrb	r2, [r5, #1]
 80046c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80046cc:	2a58      	cmp	r2, #88	@ 0x58
 80046ce:	d16e      	bne.n	80047ae <_strtod_l+0x126>
 80046d0:	9302      	str	r3, [sp, #8]
 80046d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	4a8f      	ldr	r2, [pc, #572]	@ (8004918 <_strtod_l+0x290>)
 80046dc:	9805      	ldr	r0, [sp, #20]
 80046de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80046e0:	a919      	add	r1, sp, #100	@ 0x64
 80046e2:	f001 f8b9 	bl	8005858 <__gethex>
 80046e6:	f010 060f 	ands.w	r6, r0, #15
 80046ea:	4604      	mov	r4, r0
 80046ec:	d005      	beq.n	80046fa <_strtod_l+0x72>
 80046ee:	2e06      	cmp	r6, #6
 80046f0:	d128      	bne.n	8004744 <_strtod_l+0xbc>
 80046f2:	3501      	adds	r5, #1
 80046f4:	2300      	movs	r3, #0
 80046f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80046f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80046fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	f040 858e 	bne.w	800521e <_strtod_l+0xb96>
 8004702:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004704:	b1cb      	cbz	r3, 800473a <_strtod_l+0xb2>
 8004706:	4652      	mov	r2, sl
 8004708:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800470c:	ec43 2b10 	vmov	d0, r2, r3
 8004710:	b01f      	add	sp, #124	@ 0x7c
 8004712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004716:	2920      	cmp	r1, #32
 8004718:	d1ce      	bne.n	80046b8 <_strtod_l+0x30>
 800471a:	3201      	adds	r2, #1
 800471c:	e7c1      	b.n	80046a2 <_strtod_l+0x1a>
 800471e:	292d      	cmp	r1, #45	@ 0x2d
 8004720:	d1ca      	bne.n	80046b8 <_strtod_l+0x30>
 8004722:	2101      	movs	r1, #1
 8004724:	910e      	str	r1, [sp, #56]	@ 0x38
 8004726:	1c51      	adds	r1, r2, #1
 8004728:	9119      	str	r1, [sp, #100]	@ 0x64
 800472a:	7852      	ldrb	r2, [r2, #1]
 800472c:	2a00      	cmp	r2, #0
 800472e:	d1c5      	bne.n	80046bc <_strtod_l+0x34>
 8004730:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004732:	9419      	str	r4, [sp, #100]	@ 0x64
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 8570 	bne.w	800521a <_strtod_l+0xb92>
 800473a:	4652      	mov	r2, sl
 800473c:	465b      	mov	r3, fp
 800473e:	e7e5      	b.n	800470c <_strtod_l+0x84>
 8004740:	2100      	movs	r1, #0
 8004742:	e7ef      	b.n	8004724 <_strtod_l+0x9c>
 8004744:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004746:	b13a      	cbz	r2, 8004758 <_strtod_l+0xd0>
 8004748:	2135      	movs	r1, #53	@ 0x35
 800474a:	a81c      	add	r0, sp, #112	@ 0x70
 800474c:	f002 f884 	bl	8006858 <__copybits>
 8004750:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004752:	9805      	ldr	r0, [sp, #20]
 8004754:	f001 fc5a 	bl	800600c <_Bfree>
 8004758:	3e01      	subs	r6, #1
 800475a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800475c:	2e04      	cmp	r6, #4
 800475e:	d806      	bhi.n	800476e <_strtod_l+0xe6>
 8004760:	e8df f006 	tbb	[pc, r6]
 8004764:	201d0314 	.word	0x201d0314
 8004768:	14          	.byte	0x14
 8004769:	00          	.byte	0x00
 800476a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800476e:	05e1      	lsls	r1, r4, #23
 8004770:	bf48      	it	mi
 8004772:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004776:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800477a:	0d1b      	lsrs	r3, r3, #20
 800477c:	051b      	lsls	r3, r3, #20
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1bb      	bne.n	80046fa <_strtod_l+0x72>
 8004782:	f000 ff55 	bl	8005630 <__errno>
 8004786:	2322      	movs	r3, #34	@ 0x22
 8004788:	6003      	str	r3, [r0, #0]
 800478a:	e7b6      	b.n	80046fa <_strtod_l+0x72>
 800478c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004790:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004794:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004798:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800479c:	e7e7      	b.n	800476e <_strtod_l+0xe6>
 800479e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8004920 <_strtod_l+0x298>
 80047a2:	e7e4      	b.n	800476e <_strtod_l+0xe6>
 80047a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80047a8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80047ac:	e7df      	b.n	800476e <_strtod_l+0xe6>
 80047ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80047b4:	785b      	ldrb	r3, [r3, #1]
 80047b6:	2b30      	cmp	r3, #48	@ 0x30
 80047b8:	d0f9      	beq.n	80047ae <_strtod_l+0x126>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d09d      	beq.n	80046fa <_strtod_l+0x72>
 80047be:	2301      	movs	r3, #1
 80047c0:	2700      	movs	r7, #0
 80047c2:	9308      	str	r3, [sp, #32]
 80047c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80047c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80047c8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80047ca:	46b9      	mov	r9, r7
 80047cc:	220a      	movs	r2, #10
 80047ce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80047d0:	7805      	ldrb	r5, [r0, #0]
 80047d2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80047d6:	b2d9      	uxtb	r1, r3
 80047d8:	2909      	cmp	r1, #9
 80047da:	d928      	bls.n	800482e <_strtod_l+0x1a6>
 80047dc:	494f      	ldr	r1, [pc, #316]	@ (800491c <_strtod_l+0x294>)
 80047de:	2201      	movs	r2, #1
 80047e0:	f000 fe71 	bl	80054c6 <strncmp>
 80047e4:	2800      	cmp	r0, #0
 80047e6:	d032      	beq.n	800484e <_strtod_l+0x1c6>
 80047e8:	2000      	movs	r0, #0
 80047ea:	462a      	mov	r2, r5
 80047ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80047ee:	464d      	mov	r5, r9
 80047f0:	4603      	mov	r3, r0
 80047f2:	2a65      	cmp	r2, #101	@ 0x65
 80047f4:	d001      	beq.n	80047fa <_strtod_l+0x172>
 80047f6:	2a45      	cmp	r2, #69	@ 0x45
 80047f8:	d114      	bne.n	8004824 <_strtod_l+0x19c>
 80047fa:	b91d      	cbnz	r5, 8004804 <_strtod_l+0x17c>
 80047fc:	9a08      	ldr	r2, [sp, #32]
 80047fe:	4302      	orrs	r2, r0
 8004800:	d096      	beq.n	8004730 <_strtod_l+0xa8>
 8004802:	2500      	movs	r5, #0
 8004804:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004806:	1c62      	adds	r2, r4, #1
 8004808:	9219      	str	r2, [sp, #100]	@ 0x64
 800480a:	7862      	ldrb	r2, [r4, #1]
 800480c:	2a2b      	cmp	r2, #43	@ 0x2b
 800480e:	d07a      	beq.n	8004906 <_strtod_l+0x27e>
 8004810:	2a2d      	cmp	r2, #45	@ 0x2d
 8004812:	d07e      	beq.n	8004912 <_strtod_l+0x28a>
 8004814:	f04f 0c00 	mov.w	ip, #0
 8004818:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800481c:	2909      	cmp	r1, #9
 800481e:	f240 8085 	bls.w	800492c <_strtod_l+0x2a4>
 8004822:	9419      	str	r4, [sp, #100]	@ 0x64
 8004824:	f04f 0800 	mov.w	r8, #0
 8004828:	e0a5      	b.n	8004976 <_strtod_l+0x2ee>
 800482a:	2300      	movs	r3, #0
 800482c:	e7c8      	b.n	80047c0 <_strtod_l+0x138>
 800482e:	f1b9 0f08 	cmp.w	r9, #8
 8004832:	bfd8      	it	le
 8004834:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8004836:	f100 0001 	add.w	r0, r0, #1
 800483a:	bfda      	itte	le
 800483c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004840:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8004842:	fb02 3707 	mlagt	r7, r2, r7, r3
 8004846:	f109 0901 	add.w	r9, r9, #1
 800484a:	9019      	str	r0, [sp, #100]	@ 0x64
 800484c:	e7bf      	b.n	80047ce <_strtod_l+0x146>
 800484e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004850:	1c5a      	adds	r2, r3, #1
 8004852:	9219      	str	r2, [sp, #100]	@ 0x64
 8004854:	785a      	ldrb	r2, [r3, #1]
 8004856:	f1b9 0f00 	cmp.w	r9, #0
 800485a:	d03b      	beq.n	80048d4 <_strtod_l+0x24c>
 800485c:	900a      	str	r0, [sp, #40]	@ 0x28
 800485e:	464d      	mov	r5, r9
 8004860:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004864:	2b09      	cmp	r3, #9
 8004866:	d912      	bls.n	800488e <_strtod_l+0x206>
 8004868:	2301      	movs	r3, #1
 800486a:	e7c2      	b.n	80047f2 <_strtod_l+0x16a>
 800486c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800486e:	1c5a      	adds	r2, r3, #1
 8004870:	9219      	str	r2, [sp, #100]	@ 0x64
 8004872:	785a      	ldrb	r2, [r3, #1]
 8004874:	3001      	adds	r0, #1
 8004876:	2a30      	cmp	r2, #48	@ 0x30
 8004878:	d0f8      	beq.n	800486c <_strtod_l+0x1e4>
 800487a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800487e:	2b08      	cmp	r3, #8
 8004880:	f200 84d2 	bhi.w	8005228 <_strtod_l+0xba0>
 8004884:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004886:	900a      	str	r0, [sp, #40]	@ 0x28
 8004888:	2000      	movs	r0, #0
 800488a:	930c      	str	r3, [sp, #48]	@ 0x30
 800488c:	4605      	mov	r5, r0
 800488e:	3a30      	subs	r2, #48	@ 0x30
 8004890:	f100 0301 	add.w	r3, r0, #1
 8004894:	d018      	beq.n	80048c8 <_strtod_l+0x240>
 8004896:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004898:	4419      	add	r1, r3
 800489a:	910a      	str	r1, [sp, #40]	@ 0x28
 800489c:	462e      	mov	r6, r5
 800489e:	f04f 0e0a 	mov.w	lr, #10
 80048a2:	1c71      	adds	r1, r6, #1
 80048a4:	eba1 0c05 	sub.w	ip, r1, r5
 80048a8:	4563      	cmp	r3, ip
 80048aa:	dc15      	bgt.n	80048d8 <_strtod_l+0x250>
 80048ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80048b0:	182b      	adds	r3, r5, r0
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	f105 0501 	add.w	r5, r5, #1
 80048b8:	4405      	add	r5, r0
 80048ba:	dc1a      	bgt.n	80048f2 <_strtod_l+0x26a>
 80048bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80048be:	230a      	movs	r3, #10
 80048c0:	fb03 2301 	mla	r3, r3, r1, r2
 80048c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80048c6:	2300      	movs	r3, #0
 80048c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80048ca:	1c51      	adds	r1, r2, #1
 80048cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80048ce:	7852      	ldrb	r2, [r2, #1]
 80048d0:	4618      	mov	r0, r3
 80048d2:	e7c5      	b.n	8004860 <_strtod_l+0x1d8>
 80048d4:	4648      	mov	r0, r9
 80048d6:	e7ce      	b.n	8004876 <_strtod_l+0x1ee>
 80048d8:	2e08      	cmp	r6, #8
 80048da:	dc05      	bgt.n	80048e8 <_strtod_l+0x260>
 80048dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80048de:	fb0e f606 	mul.w	r6, lr, r6
 80048e2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80048e4:	460e      	mov	r6, r1
 80048e6:	e7dc      	b.n	80048a2 <_strtod_l+0x21a>
 80048e8:	2910      	cmp	r1, #16
 80048ea:	bfd8      	it	le
 80048ec:	fb0e f707 	mulle.w	r7, lr, r7
 80048f0:	e7f8      	b.n	80048e4 <_strtod_l+0x25c>
 80048f2:	2b0f      	cmp	r3, #15
 80048f4:	bfdc      	itt	le
 80048f6:	230a      	movle	r3, #10
 80048f8:	fb03 2707 	mlale	r7, r3, r7, r2
 80048fc:	e7e3      	b.n	80048c6 <_strtod_l+0x23e>
 80048fe:	2300      	movs	r3, #0
 8004900:	930a      	str	r3, [sp, #40]	@ 0x28
 8004902:	2301      	movs	r3, #1
 8004904:	e77a      	b.n	80047fc <_strtod_l+0x174>
 8004906:	f04f 0c00 	mov.w	ip, #0
 800490a:	1ca2      	adds	r2, r4, #2
 800490c:	9219      	str	r2, [sp, #100]	@ 0x64
 800490e:	78a2      	ldrb	r2, [r4, #2]
 8004910:	e782      	b.n	8004818 <_strtod_l+0x190>
 8004912:	f04f 0c01 	mov.w	ip, #1
 8004916:	e7f8      	b.n	800490a <_strtod_l+0x282>
 8004918:	08007880 	.word	0x08007880
 800491c:	080076ac 	.word	0x080076ac
 8004920:	7ff00000 	.word	0x7ff00000
 8004924:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004926:	1c51      	adds	r1, r2, #1
 8004928:	9119      	str	r1, [sp, #100]	@ 0x64
 800492a:	7852      	ldrb	r2, [r2, #1]
 800492c:	2a30      	cmp	r2, #48	@ 0x30
 800492e:	d0f9      	beq.n	8004924 <_strtod_l+0x29c>
 8004930:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004934:	2908      	cmp	r1, #8
 8004936:	f63f af75 	bhi.w	8004824 <_strtod_l+0x19c>
 800493a:	3a30      	subs	r2, #48	@ 0x30
 800493c:	9209      	str	r2, [sp, #36]	@ 0x24
 800493e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004940:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004942:	f04f 080a 	mov.w	r8, #10
 8004946:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004948:	1c56      	adds	r6, r2, #1
 800494a:	9619      	str	r6, [sp, #100]	@ 0x64
 800494c:	7852      	ldrb	r2, [r2, #1]
 800494e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004952:	f1be 0f09 	cmp.w	lr, #9
 8004956:	d939      	bls.n	80049cc <_strtod_l+0x344>
 8004958:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800495a:	1a76      	subs	r6, r6, r1
 800495c:	2e08      	cmp	r6, #8
 800495e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004962:	dc03      	bgt.n	800496c <_strtod_l+0x2e4>
 8004964:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004966:	4588      	cmp	r8, r1
 8004968:	bfa8      	it	ge
 800496a:	4688      	movge	r8, r1
 800496c:	f1bc 0f00 	cmp.w	ip, #0
 8004970:	d001      	beq.n	8004976 <_strtod_l+0x2ee>
 8004972:	f1c8 0800 	rsb	r8, r8, #0
 8004976:	2d00      	cmp	r5, #0
 8004978:	d14e      	bne.n	8004a18 <_strtod_l+0x390>
 800497a:	9908      	ldr	r1, [sp, #32]
 800497c:	4308      	orrs	r0, r1
 800497e:	f47f aebc 	bne.w	80046fa <_strtod_l+0x72>
 8004982:	2b00      	cmp	r3, #0
 8004984:	f47f aed4 	bne.w	8004730 <_strtod_l+0xa8>
 8004988:	2a69      	cmp	r2, #105	@ 0x69
 800498a:	d028      	beq.n	80049de <_strtod_l+0x356>
 800498c:	dc25      	bgt.n	80049da <_strtod_l+0x352>
 800498e:	2a49      	cmp	r2, #73	@ 0x49
 8004990:	d025      	beq.n	80049de <_strtod_l+0x356>
 8004992:	2a4e      	cmp	r2, #78	@ 0x4e
 8004994:	f47f aecc 	bne.w	8004730 <_strtod_l+0xa8>
 8004998:	499a      	ldr	r1, [pc, #616]	@ (8004c04 <_strtod_l+0x57c>)
 800499a:	a819      	add	r0, sp, #100	@ 0x64
 800499c:	f001 f97e 	bl	8005c9c <__match>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	f43f aec5 	beq.w	8004730 <_strtod_l+0xa8>
 80049a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b28      	cmp	r3, #40	@ 0x28
 80049ac:	d12e      	bne.n	8004a0c <_strtod_l+0x384>
 80049ae:	4996      	ldr	r1, [pc, #600]	@ (8004c08 <_strtod_l+0x580>)
 80049b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80049b2:	a819      	add	r0, sp, #100	@ 0x64
 80049b4:	f001 f986 	bl	8005cc4 <__hexnan>
 80049b8:	2805      	cmp	r0, #5
 80049ba:	d127      	bne.n	8004a0c <_strtod_l+0x384>
 80049bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80049be:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80049c2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80049c6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80049ca:	e696      	b.n	80046fa <_strtod_l+0x72>
 80049cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80049ce:	fb08 2101 	mla	r1, r8, r1, r2
 80049d2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80049d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80049d8:	e7b5      	b.n	8004946 <_strtod_l+0x2be>
 80049da:	2a6e      	cmp	r2, #110	@ 0x6e
 80049dc:	e7da      	b.n	8004994 <_strtod_l+0x30c>
 80049de:	498b      	ldr	r1, [pc, #556]	@ (8004c0c <_strtod_l+0x584>)
 80049e0:	a819      	add	r0, sp, #100	@ 0x64
 80049e2:	f001 f95b 	bl	8005c9c <__match>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	f43f aea2 	beq.w	8004730 <_strtod_l+0xa8>
 80049ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80049ee:	4988      	ldr	r1, [pc, #544]	@ (8004c10 <_strtod_l+0x588>)
 80049f0:	3b01      	subs	r3, #1
 80049f2:	a819      	add	r0, sp, #100	@ 0x64
 80049f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80049f6:	f001 f951 	bl	8005c9c <__match>
 80049fa:	b910      	cbnz	r0, 8004a02 <_strtod_l+0x37a>
 80049fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80049fe:	3301      	adds	r3, #1
 8004a00:	9319      	str	r3, [sp, #100]	@ 0x64
 8004a02:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8004c20 <_strtod_l+0x598>
 8004a06:	f04f 0a00 	mov.w	sl, #0
 8004a0a:	e676      	b.n	80046fa <_strtod_l+0x72>
 8004a0c:	4881      	ldr	r0, [pc, #516]	@ (8004c14 <_strtod_l+0x58c>)
 8004a0e:	f000 fe4b 	bl	80056a8 <nan>
 8004a12:	ec5b ab10 	vmov	sl, fp, d0
 8004a16:	e670      	b.n	80046fa <_strtod_l+0x72>
 8004a18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a1a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004a1c:	eba8 0303 	sub.w	r3, r8, r3
 8004a20:	f1b9 0f00 	cmp.w	r9, #0
 8004a24:	bf08      	it	eq
 8004a26:	46a9      	moveq	r9, r5
 8004a28:	2d10      	cmp	r5, #16
 8004a2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a2c:	462c      	mov	r4, r5
 8004a2e:	bfa8      	it	ge
 8004a30:	2410      	movge	r4, #16
 8004a32:	f7fb fd67 	bl	8000504 <__aeabi_ui2d>
 8004a36:	2d09      	cmp	r5, #9
 8004a38:	4682      	mov	sl, r0
 8004a3a:	468b      	mov	fp, r1
 8004a3c:	dc13      	bgt.n	8004a66 <_strtod_l+0x3de>
 8004a3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f43f ae5a 	beq.w	80046fa <_strtod_l+0x72>
 8004a46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a48:	dd78      	ble.n	8004b3c <_strtod_l+0x4b4>
 8004a4a:	2b16      	cmp	r3, #22
 8004a4c:	dc5f      	bgt.n	8004b0e <_strtod_l+0x486>
 8004a4e:	4972      	ldr	r1, [pc, #456]	@ (8004c18 <_strtod_l+0x590>)
 8004a50:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a58:	4652      	mov	r2, sl
 8004a5a:	465b      	mov	r3, fp
 8004a5c:	f7fb fdcc 	bl	80005f8 <__aeabi_dmul>
 8004a60:	4682      	mov	sl, r0
 8004a62:	468b      	mov	fp, r1
 8004a64:	e649      	b.n	80046fa <_strtod_l+0x72>
 8004a66:	4b6c      	ldr	r3, [pc, #432]	@ (8004c18 <_strtod_l+0x590>)
 8004a68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004a6c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004a70:	f7fb fdc2 	bl	80005f8 <__aeabi_dmul>
 8004a74:	4682      	mov	sl, r0
 8004a76:	4638      	mov	r0, r7
 8004a78:	468b      	mov	fp, r1
 8004a7a:	f7fb fd43 	bl	8000504 <__aeabi_ui2d>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4650      	mov	r0, sl
 8004a84:	4659      	mov	r1, fp
 8004a86:	f7fb fc01 	bl	800028c <__adddf3>
 8004a8a:	2d0f      	cmp	r5, #15
 8004a8c:	4682      	mov	sl, r0
 8004a8e:	468b      	mov	fp, r1
 8004a90:	ddd5      	ble.n	8004a3e <_strtod_l+0x3b6>
 8004a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a94:	1b2c      	subs	r4, r5, r4
 8004a96:	441c      	add	r4, r3
 8004a98:	2c00      	cmp	r4, #0
 8004a9a:	f340 8093 	ble.w	8004bc4 <_strtod_l+0x53c>
 8004a9e:	f014 030f 	ands.w	r3, r4, #15
 8004aa2:	d00a      	beq.n	8004aba <_strtod_l+0x432>
 8004aa4:	495c      	ldr	r1, [pc, #368]	@ (8004c18 <_strtod_l+0x590>)
 8004aa6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004aaa:	4652      	mov	r2, sl
 8004aac:	465b      	mov	r3, fp
 8004aae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ab2:	f7fb fda1 	bl	80005f8 <__aeabi_dmul>
 8004ab6:	4682      	mov	sl, r0
 8004ab8:	468b      	mov	fp, r1
 8004aba:	f034 040f 	bics.w	r4, r4, #15
 8004abe:	d073      	beq.n	8004ba8 <_strtod_l+0x520>
 8004ac0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004ac4:	dd49      	ble.n	8004b5a <_strtod_l+0x4d2>
 8004ac6:	2400      	movs	r4, #0
 8004ac8:	46a0      	mov	r8, r4
 8004aca:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004acc:	46a1      	mov	r9, r4
 8004ace:	9a05      	ldr	r2, [sp, #20]
 8004ad0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8004c20 <_strtod_l+0x598>
 8004ad4:	2322      	movs	r3, #34	@ 0x22
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	f04f 0a00 	mov.w	sl, #0
 8004adc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f43f ae0b 	beq.w	80046fa <_strtod_l+0x72>
 8004ae4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004ae6:	9805      	ldr	r0, [sp, #20]
 8004ae8:	f001 fa90 	bl	800600c <_Bfree>
 8004aec:	9805      	ldr	r0, [sp, #20]
 8004aee:	4649      	mov	r1, r9
 8004af0:	f001 fa8c 	bl	800600c <_Bfree>
 8004af4:	9805      	ldr	r0, [sp, #20]
 8004af6:	4641      	mov	r1, r8
 8004af8:	f001 fa88 	bl	800600c <_Bfree>
 8004afc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004afe:	9805      	ldr	r0, [sp, #20]
 8004b00:	f001 fa84 	bl	800600c <_Bfree>
 8004b04:	9805      	ldr	r0, [sp, #20]
 8004b06:	4621      	mov	r1, r4
 8004b08:	f001 fa80 	bl	800600c <_Bfree>
 8004b0c:	e5f5      	b.n	80046fa <_strtod_l+0x72>
 8004b0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b10:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004b14:	4293      	cmp	r3, r2
 8004b16:	dbbc      	blt.n	8004a92 <_strtod_l+0x40a>
 8004b18:	4c3f      	ldr	r4, [pc, #252]	@ (8004c18 <_strtod_l+0x590>)
 8004b1a:	f1c5 050f 	rsb	r5, r5, #15
 8004b1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004b22:	4652      	mov	r2, sl
 8004b24:	465b      	mov	r3, fp
 8004b26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b2a:	f7fb fd65 	bl	80005f8 <__aeabi_dmul>
 8004b2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b30:	1b5d      	subs	r5, r3, r5
 8004b32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004b36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004b3a:	e78f      	b.n	8004a5c <_strtod_l+0x3d4>
 8004b3c:	3316      	adds	r3, #22
 8004b3e:	dba8      	blt.n	8004a92 <_strtod_l+0x40a>
 8004b40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b42:	eba3 0808 	sub.w	r8, r3, r8
 8004b46:	4b34      	ldr	r3, [pc, #208]	@ (8004c18 <_strtod_l+0x590>)
 8004b48:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004b4c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004b50:	4650      	mov	r0, sl
 8004b52:	4659      	mov	r1, fp
 8004b54:	f7fb fe7a 	bl	800084c <__aeabi_ddiv>
 8004b58:	e782      	b.n	8004a60 <_strtod_l+0x3d8>
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	4f2f      	ldr	r7, [pc, #188]	@ (8004c1c <_strtod_l+0x594>)
 8004b5e:	1124      	asrs	r4, r4, #4
 8004b60:	4650      	mov	r0, sl
 8004b62:	4659      	mov	r1, fp
 8004b64:	461e      	mov	r6, r3
 8004b66:	2c01      	cmp	r4, #1
 8004b68:	dc21      	bgt.n	8004bae <_strtod_l+0x526>
 8004b6a:	b10b      	cbz	r3, 8004b70 <_strtod_l+0x4e8>
 8004b6c:	4682      	mov	sl, r0
 8004b6e:	468b      	mov	fp, r1
 8004b70:	492a      	ldr	r1, [pc, #168]	@ (8004c1c <_strtod_l+0x594>)
 8004b72:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004b76:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004b7a:	4652      	mov	r2, sl
 8004b7c:	465b      	mov	r3, fp
 8004b7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004b82:	f7fb fd39 	bl	80005f8 <__aeabi_dmul>
 8004b86:	4b26      	ldr	r3, [pc, #152]	@ (8004c20 <_strtod_l+0x598>)
 8004b88:	460a      	mov	r2, r1
 8004b8a:	400b      	ands	r3, r1
 8004b8c:	4925      	ldr	r1, [pc, #148]	@ (8004c24 <_strtod_l+0x59c>)
 8004b8e:	428b      	cmp	r3, r1
 8004b90:	4682      	mov	sl, r0
 8004b92:	d898      	bhi.n	8004ac6 <_strtod_l+0x43e>
 8004b94:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004b98:	428b      	cmp	r3, r1
 8004b9a:	bf86      	itte	hi
 8004b9c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8004c28 <_strtod_l+0x5a0>
 8004ba0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8004ba4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9308      	str	r3, [sp, #32]
 8004bac:	e076      	b.n	8004c9c <_strtod_l+0x614>
 8004bae:	07e2      	lsls	r2, r4, #31
 8004bb0:	d504      	bpl.n	8004bbc <_strtod_l+0x534>
 8004bb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bb6:	f7fb fd1f 	bl	80005f8 <__aeabi_dmul>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	3601      	adds	r6, #1
 8004bbe:	1064      	asrs	r4, r4, #1
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	e7d0      	b.n	8004b66 <_strtod_l+0x4de>
 8004bc4:	d0f0      	beq.n	8004ba8 <_strtod_l+0x520>
 8004bc6:	4264      	negs	r4, r4
 8004bc8:	f014 020f 	ands.w	r2, r4, #15
 8004bcc:	d00a      	beq.n	8004be4 <_strtod_l+0x55c>
 8004bce:	4b12      	ldr	r3, [pc, #72]	@ (8004c18 <_strtod_l+0x590>)
 8004bd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004bd4:	4650      	mov	r0, sl
 8004bd6:	4659      	mov	r1, fp
 8004bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bdc:	f7fb fe36 	bl	800084c <__aeabi_ddiv>
 8004be0:	4682      	mov	sl, r0
 8004be2:	468b      	mov	fp, r1
 8004be4:	1124      	asrs	r4, r4, #4
 8004be6:	d0df      	beq.n	8004ba8 <_strtod_l+0x520>
 8004be8:	2c1f      	cmp	r4, #31
 8004bea:	dd1f      	ble.n	8004c2c <_strtod_l+0x5a4>
 8004bec:	2400      	movs	r4, #0
 8004bee:	46a0      	mov	r8, r4
 8004bf0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004bf2:	46a1      	mov	r9, r4
 8004bf4:	9a05      	ldr	r2, [sp, #20]
 8004bf6:	2322      	movs	r3, #34	@ 0x22
 8004bf8:	f04f 0a00 	mov.w	sl, #0
 8004bfc:	f04f 0b00 	mov.w	fp, #0
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	e76b      	b.n	8004adc <_strtod_l+0x454>
 8004c04:	080076b7 	.word	0x080076b7
 8004c08:	0800786c 	.word	0x0800786c
 8004c0c:	080076ae 	.word	0x080076ae
 8004c10:	080076b1 	.word	0x080076b1
 8004c14:	0800776e 	.word	0x0800776e
 8004c18:	080078f8 	.word	0x080078f8
 8004c1c:	080078d0 	.word	0x080078d0
 8004c20:	7ff00000 	.word	0x7ff00000
 8004c24:	7ca00000 	.word	0x7ca00000
 8004c28:	7fefffff 	.word	0x7fefffff
 8004c2c:	f014 0310 	ands.w	r3, r4, #16
 8004c30:	bf18      	it	ne
 8004c32:	236a      	movne	r3, #106	@ 0x6a
 8004c34:	4ea9      	ldr	r6, [pc, #676]	@ (8004edc <_strtod_l+0x854>)
 8004c36:	9308      	str	r3, [sp, #32]
 8004c38:	4650      	mov	r0, sl
 8004c3a:	4659      	mov	r1, fp
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	07e7      	lsls	r7, r4, #31
 8004c40:	d504      	bpl.n	8004c4c <_strtod_l+0x5c4>
 8004c42:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004c46:	f7fb fcd7 	bl	80005f8 <__aeabi_dmul>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	1064      	asrs	r4, r4, #1
 8004c4e:	f106 0608 	add.w	r6, r6, #8
 8004c52:	d1f4      	bne.n	8004c3e <_strtod_l+0x5b6>
 8004c54:	b10b      	cbz	r3, 8004c5a <_strtod_l+0x5d2>
 8004c56:	4682      	mov	sl, r0
 8004c58:	468b      	mov	fp, r1
 8004c5a:	9b08      	ldr	r3, [sp, #32]
 8004c5c:	b1b3      	cbz	r3, 8004c8c <_strtod_l+0x604>
 8004c5e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004c62:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	4659      	mov	r1, fp
 8004c6a:	dd0f      	ble.n	8004c8c <_strtod_l+0x604>
 8004c6c:	2b1f      	cmp	r3, #31
 8004c6e:	dd56      	ble.n	8004d1e <_strtod_l+0x696>
 8004c70:	2b34      	cmp	r3, #52	@ 0x34
 8004c72:	bfde      	ittt	le
 8004c74:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8004c78:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004c7c:	4093      	lslle	r3, r2
 8004c7e:	f04f 0a00 	mov.w	sl, #0
 8004c82:	bfcc      	ite	gt
 8004c84:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004c88:	ea03 0b01 	andle.w	fp, r3, r1
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2300      	movs	r3, #0
 8004c90:	4650      	mov	r0, sl
 8004c92:	4659      	mov	r1, fp
 8004c94:	f7fb ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c98:	2800      	cmp	r0, #0
 8004c9a:	d1a7      	bne.n	8004bec <_strtod_l+0x564>
 8004c9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004ca2:	9805      	ldr	r0, [sp, #20]
 8004ca4:	462b      	mov	r3, r5
 8004ca6:	464a      	mov	r2, r9
 8004ca8:	f001 fa18 	bl	80060dc <__s2b>
 8004cac:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	f43f af09 	beq.w	8004ac6 <_strtod_l+0x43e>
 8004cb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004cb6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cb8:	2a00      	cmp	r2, #0
 8004cba:	eba3 0308 	sub.w	r3, r3, r8
 8004cbe:	bfa8      	it	ge
 8004cc0:	2300      	movge	r3, #0
 8004cc2:	9312      	str	r3, [sp, #72]	@ 0x48
 8004cc4:	2400      	movs	r4, #0
 8004cc6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004cca:	9316      	str	r3, [sp, #88]	@ 0x58
 8004ccc:	46a0      	mov	r8, r4
 8004cce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004cd0:	9805      	ldr	r0, [sp, #20]
 8004cd2:	6859      	ldr	r1, [r3, #4]
 8004cd4:	f001 f95a 	bl	8005f8c <_Balloc>
 8004cd8:	4681      	mov	r9, r0
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	f43f aef7 	beq.w	8004ace <_strtod_l+0x446>
 8004ce0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ce2:	691a      	ldr	r2, [r3, #16]
 8004ce4:	3202      	adds	r2, #2
 8004ce6:	f103 010c 	add.w	r1, r3, #12
 8004cea:	0092      	lsls	r2, r2, #2
 8004cec:	300c      	adds	r0, #12
 8004cee:	f000 fccc 	bl	800568a <memcpy>
 8004cf2:	ec4b ab10 	vmov	d0, sl, fp
 8004cf6:	9805      	ldr	r0, [sp, #20]
 8004cf8:	aa1c      	add	r2, sp, #112	@ 0x70
 8004cfa:	a91b      	add	r1, sp, #108	@ 0x6c
 8004cfc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8004d00:	f001 fd20 	bl	8006744 <__d2b>
 8004d04:	901a      	str	r0, [sp, #104]	@ 0x68
 8004d06:	2800      	cmp	r0, #0
 8004d08:	f43f aee1 	beq.w	8004ace <_strtod_l+0x446>
 8004d0c:	9805      	ldr	r0, [sp, #20]
 8004d0e:	2101      	movs	r1, #1
 8004d10:	f001 fa7a 	bl	8006208 <__i2b>
 8004d14:	4680      	mov	r8, r0
 8004d16:	b948      	cbnz	r0, 8004d2c <_strtod_l+0x6a4>
 8004d18:	f04f 0800 	mov.w	r8, #0
 8004d1c:	e6d7      	b.n	8004ace <_strtod_l+0x446>
 8004d1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d22:	fa02 f303 	lsl.w	r3, r2, r3
 8004d26:	ea03 0a0a 	and.w	sl, r3, sl
 8004d2a:	e7af      	b.n	8004c8c <_strtod_l+0x604>
 8004d2c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004d2e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004d30:	2d00      	cmp	r5, #0
 8004d32:	bfab      	itete	ge
 8004d34:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004d36:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004d38:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004d3a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8004d3c:	bfac      	ite	ge
 8004d3e:	18ef      	addge	r7, r5, r3
 8004d40:	1b5e      	sublt	r6, r3, r5
 8004d42:	9b08      	ldr	r3, [sp, #32]
 8004d44:	1aed      	subs	r5, r5, r3
 8004d46:	4415      	add	r5, r2
 8004d48:	4b65      	ldr	r3, [pc, #404]	@ (8004ee0 <_strtod_l+0x858>)
 8004d4a:	3d01      	subs	r5, #1
 8004d4c:	429d      	cmp	r5, r3
 8004d4e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004d52:	da50      	bge.n	8004df6 <_strtod_l+0x76e>
 8004d54:	1b5b      	subs	r3, r3, r5
 8004d56:	2b1f      	cmp	r3, #31
 8004d58:	eba2 0203 	sub.w	r2, r2, r3
 8004d5c:	f04f 0101 	mov.w	r1, #1
 8004d60:	dc3d      	bgt.n	8004dde <_strtod_l+0x756>
 8004d62:	fa01 f303 	lsl.w	r3, r1, r3
 8004d66:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004d68:	2300      	movs	r3, #0
 8004d6a:	9310      	str	r3, [sp, #64]	@ 0x40
 8004d6c:	18bd      	adds	r5, r7, r2
 8004d6e:	9b08      	ldr	r3, [sp, #32]
 8004d70:	42af      	cmp	r7, r5
 8004d72:	4416      	add	r6, r2
 8004d74:	441e      	add	r6, r3
 8004d76:	463b      	mov	r3, r7
 8004d78:	bfa8      	it	ge
 8004d7a:	462b      	movge	r3, r5
 8004d7c:	42b3      	cmp	r3, r6
 8004d7e:	bfa8      	it	ge
 8004d80:	4633      	movge	r3, r6
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	bfc2      	ittt	gt
 8004d86:	1aed      	subgt	r5, r5, r3
 8004d88:	1af6      	subgt	r6, r6, r3
 8004d8a:	1aff      	subgt	r7, r7, r3
 8004d8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	dd16      	ble.n	8004dc0 <_strtod_l+0x738>
 8004d92:	4641      	mov	r1, r8
 8004d94:	9805      	ldr	r0, [sp, #20]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f001 faee 	bl	8006378 <__pow5mult>
 8004d9c:	4680      	mov	r8, r0
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d0ba      	beq.n	8004d18 <_strtod_l+0x690>
 8004da2:	4601      	mov	r1, r0
 8004da4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004da6:	9805      	ldr	r0, [sp, #20]
 8004da8:	f001 fa44 	bl	8006234 <__multiply>
 8004dac:	900a      	str	r0, [sp, #40]	@ 0x28
 8004dae:	2800      	cmp	r0, #0
 8004db0:	f43f ae8d 	beq.w	8004ace <_strtod_l+0x446>
 8004db4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004db6:	9805      	ldr	r0, [sp, #20]
 8004db8:	f001 f928 	bl	800600c <_Bfree>
 8004dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	dc1d      	bgt.n	8004e00 <_strtod_l+0x778>
 8004dc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	dd23      	ble.n	8004e12 <_strtod_l+0x78a>
 8004dca:	4649      	mov	r1, r9
 8004dcc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004dce:	9805      	ldr	r0, [sp, #20]
 8004dd0:	f001 fad2 	bl	8006378 <__pow5mult>
 8004dd4:	4681      	mov	r9, r0
 8004dd6:	b9e0      	cbnz	r0, 8004e12 <_strtod_l+0x78a>
 8004dd8:	f04f 0900 	mov.w	r9, #0
 8004ddc:	e677      	b.n	8004ace <_strtod_l+0x446>
 8004dde:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8004de2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8004de6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8004dea:	35e2      	adds	r5, #226	@ 0xe2
 8004dec:	fa01 f305 	lsl.w	r3, r1, r5
 8004df0:	9310      	str	r3, [sp, #64]	@ 0x40
 8004df2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004df4:	e7ba      	b.n	8004d6c <_strtod_l+0x6e4>
 8004df6:	2300      	movs	r3, #0
 8004df8:	9310      	str	r3, [sp, #64]	@ 0x40
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004dfe:	e7b5      	b.n	8004d6c <_strtod_l+0x6e4>
 8004e00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004e02:	9805      	ldr	r0, [sp, #20]
 8004e04:	462a      	mov	r2, r5
 8004e06:	f001 fb11 	bl	800642c <__lshift>
 8004e0a:	901a      	str	r0, [sp, #104]	@ 0x68
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d1d9      	bne.n	8004dc4 <_strtod_l+0x73c>
 8004e10:	e65d      	b.n	8004ace <_strtod_l+0x446>
 8004e12:	2e00      	cmp	r6, #0
 8004e14:	dd07      	ble.n	8004e26 <_strtod_l+0x79e>
 8004e16:	4649      	mov	r1, r9
 8004e18:	9805      	ldr	r0, [sp, #20]
 8004e1a:	4632      	mov	r2, r6
 8004e1c:	f001 fb06 	bl	800642c <__lshift>
 8004e20:	4681      	mov	r9, r0
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d0d8      	beq.n	8004dd8 <_strtod_l+0x750>
 8004e26:	2f00      	cmp	r7, #0
 8004e28:	dd08      	ble.n	8004e3c <_strtod_l+0x7b4>
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	9805      	ldr	r0, [sp, #20]
 8004e2e:	463a      	mov	r2, r7
 8004e30:	f001 fafc 	bl	800642c <__lshift>
 8004e34:	4680      	mov	r8, r0
 8004e36:	2800      	cmp	r0, #0
 8004e38:	f43f ae49 	beq.w	8004ace <_strtod_l+0x446>
 8004e3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004e3e:	9805      	ldr	r0, [sp, #20]
 8004e40:	464a      	mov	r2, r9
 8004e42:	f001 fb7b 	bl	800653c <__mdiff>
 8004e46:	4604      	mov	r4, r0
 8004e48:	2800      	cmp	r0, #0
 8004e4a:	f43f ae40 	beq.w	8004ace <_strtod_l+0x446>
 8004e4e:	68c3      	ldr	r3, [r0, #12]
 8004e50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004e52:	2300      	movs	r3, #0
 8004e54:	60c3      	str	r3, [r0, #12]
 8004e56:	4641      	mov	r1, r8
 8004e58:	f001 fb54 	bl	8006504 <__mcmp>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	da45      	bge.n	8004eec <_strtod_l+0x864>
 8004e60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e62:	ea53 030a 	orrs.w	r3, r3, sl
 8004e66:	d16b      	bne.n	8004f40 <_strtod_l+0x8b8>
 8004e68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d167      	bne.n	8004f40 <_strtod_l+0x8b8>
 8004e70:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004e74:	0d1b      	lsrs	r3, r3, #20
 8004e76:	051b      	lsls	r3, r3, #20
 8004e78:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004e7c:	d960      	bls.n	8004f40 <_strtod_l+0x8b8>
 8004e7e:	6963      	ldr	r3, [r4, #20]
 8004e80:	b913      	cbnz	r3, 8004e88 <_strtod_l+0x800>
 8004e82:	6923      	ldr	r3, [r4, #16]
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	dd5b      	ble.n	8004f40 <_strtod_l+0x8b8>
 8004e88:	4621      	mov	r1, r4
 8004e8a:	2201      	movs	r2, #1
 8004e8c:	9805      	ldr	r0, [sp, #20]
 8004e8e:	f001 facd 	bl	800642c <__lshift>
 8004e92:	4641      	mov	r1, r8
 8004e94:	4604      	mov	r4, r0
 8004e96:	f001 fb35 	bl	8006504 <__mcmp>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	dd50      	ble.n	8004f40 <_strtod_l+0x8b8>
 8004e9e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004ea2:	9a08      	ldr	r2, [sp, #32]
 8004ea4:	0d1b      	lsrs	r3, r3, #20
 8004ea6:	051b      	lsls	r3, r3, #20
 8004ea8:	2a00      	cmp	r2, #0
 8004eaa:	d06a      	beq.n	8004f82 <_strtod_l+0x8fa>
 8004eac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004eb0:	d867      	bhi.n	8004f82 <_strtod_l+0x8fa>
 8004eb2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8004eb6:	f67f ae9d 	bls.w	8004bf4 <_strtod_l+0x56c>
 8004eba:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee4 <_strtod_l+0x85c>)
 8004ebc:	4650      	mov	r0, sl
 8004ebe:	4659      	mov	r1, fp
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f7fb fb99 	bl	80005f8 <__aeabi_dmul>
 8004ec6:	4b08      	ldr	r3, [pc, #32]	@ (8004ee8 <_strtod_l+0x860>)
 8004ec8:	400b      	ands	r3, r1
 8004eca:	4682      	mov	sl, r0
 8004ecc:	468b      	mov	fp, r1
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f47f ae08 	bne.w	8004ae4 <_strtod_l+0x45c>
 8004ed4:	9a05      	ldr	r2, [sp, #20]
 8004ed6:	2322      	movs	r3, #34	@ 0x22
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e603      	b.n	8004ae4 <_strtod_l+0x45c>
 8004edc:	08007898 	.word	0x08007898
 8004ee0:	fffffc02 	.word	0xfffffc02
 8004ee4:	39500000 	.word	0x39500000
 8004ee8:	7ff00000 	.word	0x7ff00000
 8004eec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8004ef0:	d165      	bne.n	8004fbe <_strtod_l+0x936>
 8004ef2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004ef4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ef8:	b35a      	cbz	r2, 8004f52 <_strtod_l+0x8ca>
 8004efa:	4a9f      	ldr	r2, [pc, #636]	@ (8005178 <_strtod_l+0xaf0>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d12b      	bne.n	8004f58 <_strtod_l+0x8d0>
 8004f00:	9b08      	ldr	r3, [sp, #32]
 8004f02:	4651      	mov	r1, sl
 8004f04:	b303      	cbz	r3, 8004f48 <_strtod_l+0x8c0>
 8004f06:	4b9d      	ldr	r3, [pc, #628]	@ (800517c <_strtod_l+0xaf4>)
 8004f08:	465a      	mov	r2, fp
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8004f10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f14:	d81b      	bhi.n	8004f4e <_strtod_l+0x8c6>
 8004f16:	0d1b      	lsrs	r3, r3, #20
 8004f18:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	4299      	cmp	r1, r3
 8004f22:	d119      	bne.n	8004f58 <_strtod_l+0x8d0>
 8004f24:	4b96      	ldr	r3, [pc, #600]	@ (8005180 <_strtod_l+0xaf8>)
 8004f26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d102      	bne.n	8004f32 <_strtod_l+0x8aa>
 8004f2c:	3101      	adds	r1, #1
 8004f2e:	f43f adce 	beq.w	8004ace <_strtod_l+0x446>
 8004f32:	4b92      	ldr	r3, [pc, #584]	@ (800517c <_strtod_l+0xaf4>)
 8004f34:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f36:	401a      	ands	r2, r3
 8004f38:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8004f3c:	f04f 0a00 	mov.w	sl, #0
 8004f40:	9b08      	ldr	r3, [sp, #32]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1b9      	bne.n	8004eba <_strtod_l+0x832>
 8004f46:	e5cd      	b.n	8004ae4 <_strtod_l+0x45c>
 8004f48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f4c:	e7e8      	b.n	8004f20 <_strtod_l+0x898>
 8004f4e:	4613      	mov	r3, r2
 8004f50:	e7e6      	b.n	8004f20 <_strtod_l+0x898>
 8004f52:	ea53 030a 	orrs.w	r3, r3, sl
 8004f56:	d0a2      	beq.n	8004e9e <_strtod_l+0x816>
 8004f58:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f5a:	b1db      	cbz	r3, 8004f94 <_strtod_l+0x90c>
 8004f5c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f5e:	4213      	tst	r3, r2
 8004f60:	d0ee      	beq.n	8004f40 <_strtod_l+0x8b8>
 8004f62:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f64:	9a08      	ldr	r2, [sp, #32]
 8004f66:	4650      	mov	r0, sl
 8004f68:	4659      	mov	r1, fp
 8004f6a:	b1bb      	cbz	r3, 8004f9c <_strtod_l+0x914>
 8004f6c:	f7ff fb6d 	bl	800464a <sulp>
 8004f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f74:	ec53 2b10 	vmov	r2, r3, d0
 8004f78:	f7fb f988 	bl	800028c <__adddf3>
 8004f7c:	4682      	mov	sl, r0
 8004f7e:	468b      	mov	fp, r1
 8004f80:	e7de      	b.n	8004f40 <_strtod_l+0x8b8>
 8004f82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8004f86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004f8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004f8e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8004f92:	e7d5      	b.n	8004f40 <_strtod_l+0x8b8>
 8004f94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004f96:	ea13 0f0a 	tst.w	r3, sl
 8004f9a:	e7e1      	b.n	8004f60 <_strtod_l+0x8d8>
 8004f9c:	f7ff fb55 	bl	800464a <sulp>
 8004fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004fa4:	ec53 2b10 	vmov	r2, r3, d0
 8004fa8:	f7fb f96e 	bl	8000288 <__aeabi_dsub>
 8004fac:	2200      	movs	r2, #0
 8004fae:	2300      	movs	r3, #0
 8004fb0:	4682      	mov	sl, r0
 8004fb2:	468b      	mov	fp, r1
 8004fb4:	f7fb fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 8004fb8:	2800      	cmp	r0, #0
 8004fba:	d0c1      	beq.n	8004f40 <_strtod_l+0x8b8>
 8004fbc:	e61a      	b.n	8004bf4 <_strtod_l+0x56c>
 8004fbe:	4641      	mov	r1, r8
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f001 fc17 	bl	80067f4 <__ratio>
 8004fc6:	ec57 6b10 	vmov	r6, r7, d0
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	4639      	mov	r1, r7
 8004fd4:	f7fb fd8c 	bl	8000af0 <__aeabi_dcmple>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	d06f      	beq.n	80050bc <_strtod_l+0xa34>
 8004fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d17a      	bne.n	80050d8 <_strtod_l+0xa50>
 8004fe2:	f1ba 0f00 	cmp.w	sl, #0
 8004fe6:	d158      	bne.n	800509a <_strtod_l+0xa12>
 8004fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d15a      	bne.n	80050a8 <_strtod_l+0xa20>
 8004ff2:	4b64      	ldr	r3, [pc, #400]	@ (8005184 <_strtod_l+0xafc>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	f7fb fd6f 	bl	8000adc <__aeabi_dcmplt>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	d159      	bne.n	80050b6 <_strtod_l+0xa2e>
 8005002:	4630      	mov	r0, r6
 8005004:	4639      	mov	r1, r7
 8005006:	4b60      	ldr	r3, [pc, #384]	@ (8005188 <_strtod_l+0xb00>)
 8005008:	2200      	movs	r2, #0
 800500a:	f7fb faf5 	bl	80005f8 <__aeabi_dmul>
 800500e:	4606      	mov	r6, r0
 8005010:	460f      	mov	r7, r1
 8005012:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005016:	9606      	str	r6, [sp, #24]
 8005018:	9307      	str	r3, [sp, #28]
 800501a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800501e:	4d57      	ldr	r5, [pc, #348]	@ (800517c <_strtod_l+0xaf4>)
 8005020:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005024:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005026:	401d      	ands	r5, r3
 8005028:	4b58      	ldr	r3, [pc, #352]	@ (800518c <_strtod_l+0xb04>)
 800502a:	429d      	cmp	r5, r3
 800502c:	f040 80b2 	bne.w	8005194 <_strtod_l+0xb0c>
 8005030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005032:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005036:	ec4b ab10 	vmov	d0, sl, fp
 800503a:	f001 fb13 	bl	8006664 <__ulp>
 800503e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005042:	ec51 0b10 	vmov	r0, r1, d0
 8005046:	f7fb fad7 	bl	80005f8 <__aeabi_dmul>
 800504a:	4652      	mov	r2, sl
 800504c:	465b      	mov	r3, fp
 800504e:	f7fb f91d 	bl	800028c <__adddf3>
 8005052:	460b      	mov	r3, r1
 8005054:	4949      	ldr	r1, [pc, #292]	@ (800517c <_strtod_l+0xaf4>)
 8005056:	4a4e      	ldr	r2, [pc, #312]	@ (8005190 <_strtod_l+0xb08>)
 8005058:	4019      	ands	r1, r3
 800505a:	4291      	cmp	r1, r2
 800505c:	4682      	mov	sl, r0
 800505e:	d942      	bls.n	80050e6 <_strtod_l+0xa5e>
 8005060:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005062:	4b47      	ldr	r3, [pc, #284]	@ (8005180 <_strtod_l+0xaf8>)
 8005064:	429a      	cmp	r2, r3
 8005066:	d103      	bne.n	8005070 <_strtod_l+0x9e8>
 8005068:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800506a:	3301      	adds	r3, #1
 800506c:	f43f ad2f 	beq.w	8004ace <_strtod_l+0x446>
 8005070:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005180 <_strtod_l+0xaf8>
 8005074:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005078:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800507a:	9805      	ldr	r0, [sp, #20]
 800507c:	f000 ffc6 	bl	800600c <_Bfree>
 8005080:	9805      	ldr	r0, [sp, #20]
 8005082:	4649      	mov	r1, r9
 8005084:	f000 ffc2 	bl	800600c <_Bfree>
 8005088:	9805      	ldr	r0, [sp, #20]
 800508a:	4641      	mov	r1, r8
 800508c:	f000 ffbe 	bl	800600c <_Bfree>
 8005090:	9805      	ldr	r0, [sp, #20]
 8005092:	4621      	mov	r1, r4
 8005094:	f000 ffba 	bl	800600c <_Bfree>
 8005098:	e619      	b.n	8004cce <_strtod_l+0x646>
 800509a:	f1ba 0f01 	cmp.w	sl, #1
 800509e:	d103      	bne.n	80050a8 <_strtod_l+0xa20>
 80050a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f43f ada6 	beq.w	8004bf4 <_strtod_l+0x56c>
 80050a8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005158 <_strtod_l+0xad0>
 80050ac:	4f35      	ldr	r7, [pc, #212]	@ (8005184 <_strtod_l+0xafc>)
 80050ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80050b2:	2600      	movs	r6, #0
 80050b4:	e7b1      	b.n	800501a <_strtod_l+0x992>
 80050b6:	4f34      	ldr	r7, [pc, #208]	@ (8005188 <_strtod_l+0xb00>)
 80050b8:	2600      	movs	r6, #0
 80050ba:	e7aa      	b.n	8005012 <_strtod_l+0x98a>
 80050bc:	4b32      	ldr	r3, [pc, #200]	@ (8005188 <_strtod_l+0xb00>)
 80050be:	4630      	mov	r0, r6
 80050c0:	4639      	mov	r1, r7
 80050c2:	2200      	movs	r2, #0
 80050c4:	f7fb fa98 	bl	80005f8 <__aeabi_dmul>
 80050c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050ca:	4606      	mov	r6, r0
 80050cc:	460f      	mov	r7, r1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d09f      	beq.n	8005012 <_strtod_l+0x98a>
 80050d2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80050d6:	e7a0      	b.n	800501a <_strtod_l+0x992>
 80050d8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005160 <_strtod_l+0xad8>
 80050dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80050e0:	ec57 6b17 	vmov	r6, r7, d7
 80050e4:	e799      	b.n	800501a <_strtod_l+0x992>
 80050e6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80050ea:	9b08      	ldr	r3, [sp, #32]
 80050ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1c1      	bne.n	8005078 <_strtod_l+0x9f0>
 80050f4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80050f8:	0d1b      	lsrs	r3, r3, #20
 80050fa:	051b      	lsls	r3, r3, #20
 80050fc:	429d      	cmp	r5, r3
 80050fe:	d1bb      	bne.n	8005078 <_strtod_l+0x9f0>
 8005100:	4630      	mov	r0, r6
 8005102:	4639      	mov	r1, r7
 8005104:	f7fb fd9a 	bl	8000c3c <__aeabi_d2lz>
 8005108:	f7fb fa48 	bl	800059c <__aeabi_l2d>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4630      	mov	r0, r6
 8005112:	4639      	mov	r1, r7
 8005114:	f7fb f8b8 	bl	8000288 <__aeabi_dsub>
 8005118:	460b      	mov	r3, r1
 800511a:	4602      	mov	r2, r0
 800511c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005120:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005126:	ea46 060a 	orr.w	r6, r6, sl
 800512a:	431e      	orrs	r6, r3
 800512c:	d06f      	beq.n	800520e <_strtod_l+0xb86>
 800512e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005168 <_strtod_l+0xae0>)
 8005130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005134:	f7fb fcd2 	bl	8000adc <__aeabi_dcmplt>
 8005138:	2800      	cmp	r0, #0
 800513a:	f47f acd3 	bne.w	8004ae4 <_strtod_l+0x45c>
 800513e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005170 <_strtod_l+0xae8>)
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005148:	f7fb fce6 	bl	8000b18 <__aeabi_dcmpgt>
 800514c:	2800      	cmp	r0, #0
 800514e:	d093      	beq.n	8005078 <_strtod_l+0x9f0>
 8005150:	e4c8      	b.n	8004ae4 <_strtod_l+0x45c>
 8005152:	bf00      	nop
 8005154:	f3af 8000 	nop.w
 8005158:	00000000 	.word	0x00000000
 800515c:	bff00000 	.word	0xbff00000
 8005160:	00000000 	.word	0x00000000
 8005164:	3ff00000 	.word	0x3ff00000
 8005168:	94a03595 	.word	0x94a03595
 800516c:	3fdfffff 	.word	0x3fdfffff
 8005170:	35afe535 	.word	0x35afe535
 8005174:	3fe00000 	.word	0x3fe00000
 8005178:	000fffff 	.word	0x000fffff
 800517c:	7ff00000 	.word	0x7ff00000
 8005180:	7fefffff 	.word	0x7fefffff
 8005184:	3ff00000 	.word	0x3ff00000
 8005188:	3fe00000 	.word	0x3fe00000
 800518c:	7fe00000 	.word	0x7fe00000
 8005190:	7c9fffff 	.word	0x7c9fffff
 8005194:	9b08      	ldr	r3, [sp, #32]
 8005196:	b323      	cbz	r3, 80051e2 <_strtod_l+0xb5a>
 8005198:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800519c:	d821      	bhi.n	80051e2 <_strtod_l+0xb5a>
 800519e:	a328      	add	r3, pc, #160	@ (adr r3, 8005240 <_strtod_l+0xbb8>)
 80051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a4:	4630      	mov	r0, r6
 80051a6:	4639      	mov	r1, r7
 80051a8:	f7fb fca2 	bl	8000af0 <__aeabi_dcmple>
 80051ac:	b1a0      	cbz	r0, 80051d8 <_strtod_l+0xb50>
 80051ae:	4639      	mov	r1, r7
 80051b0:	4630      	mov	r0, r6
 80051b2:	f7fb fcbb 	bl	8000b2c <__aeabi_d2uiz>
 80051b6:	2801      	cmp	r0, #1
 80051b8:	bf38      	it	cc
 80051ba:	2001      	movcc	r0, #1
 80051bc:	f7fb f9a2 	bl	8000504 <__aeabi_ui2d>
 80051c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80051c2:	4606      	mov	r6, r0
 80051c4:	460f      	mov	r7, r1
 80051c6:	b9fb      	cbnz	r3, 8005208 <_strtod_l+0xb80>
 80051c8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80051cc:	9014      	str	r0, [sp, #80]	@ 0x50
 80051ce:	9315      	str	r3, [sp, #84]	@ 0x54
 80051d0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80051d4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80051d8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80051da:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80051de:	1b5b      	subs	r3, r3, r5
 80051e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80051e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80051e6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80051ea:	f001 fa3b 	bl	8006664 <__ulp>
 80051ee:	4650      	mov	r0, sl
 80051f0:	ec53 2b10 	vmov	r2, r3, d0
 80051f4:	4659      	mov	r1, fp
 80051f6:	f7fb f9ff 	bl	80005f8 <__aeabi_dmul>
 80051fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80051fe:	f7fb f845 	bl	800028c <__adddf3>
 8005202:	4682      	mov	sl, r0
 8005204:	468b      	mov	fp, r1
 8005206:	e770      	b.n	80050ea <_strtod_l+0xa62>
 8005208:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800520c:	e7e0      	b.n	80051d0 <_strtod_l+0xb48>
 800520e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005248 <_strtod_l+0xbc0>)
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f7fb fc62 	bl	8000adc <__aeabi_dcmplt>
 8005218:	e798      	b.n	800514c <_strtod_l+0xac4>
 800521a:	2300      	movs	r3, #0
 800521c:	930e      	str	r3, [sp, #56]	@ 0x38
 800521e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005220:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	f7ff ba6d 	b.w	8004702 <_strtod_l+0x7a>
 8005228:	2a65      	cmp	r2, #101	@ 0x65
 800522a:	f43f ab68 	beq.w	80048fe <_strtod_l+0x276>
 800522e:	2a45      	cmp	r2, #69	@ 0x45
 8005230:	f43f ab65 	beq.w	80048fe <_strtod_l+0x276>
 8005234:	2301      	movs	r3, #1
 8005236:	f7ff bba0 	b.w	800497a <_strtod_l+0x2f2>
 800523a:	bf00      	nop
 800523c:	f3af 8000 	nop.w
 8005240:	ffc00000 	.word	0xffc00000
 8005244:	41dfffff 	.word	0x41dfffff
 8005248:	94a03595 	.word	0x94a03595
 800524c:	3fcfffff 	.word	0x3fcfffff

08005250 <strtod>:
 8005250:	460a      	mov	r2, r1
 8005252:	4601      	mov	r1, r0
 8005254:	4802      	ldr	r0, [pc, #8]	@ (8005260 <strtod+0x10>)
 8005256:	4b03      	ldr	r3, [pc, #12]	@ (8005264 <strtod+0x14>)
 8005258:	6800      	ldr	r0, [r0, #0]
 800525a:	f7ff ba15 	b.w	8004688 <_strtod_l>
 800525e:	bf00      	nop
 8005260:	20000184 	.word	0x20000184
 8005264:	20000018 	.word	0x20000018

08005268 <std>:
 8005268:	2300      	movs	r3, #0
 800526a:	b510      	push	{r4, lr}
 800526c:	4604      	mov	r4, r0
 800526e:	e9c0 3300 	strd	r3, r3, [r0]
 8005272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005276:	6083      	str	r3, [r0, #8]
 8005278:	8181      	strh	r1, [r0, #12]
 800527a:	6643      	str	r3, [r0, #100]	@ 0x64
 800527c:	81c2      	strh	r2, [r0, #14]
 800527e:	6183      	str	r3, [r0, #24]
 8005280:	4619      	mov	r1, r3
 8005282:	2208      	movs	r2, #8
 8005284:	305c      	adds	r0, #92	@ 0x5c
 8005286:	f000 f916 	bl	80054b6 <memset>
 800528a:	4b0d      	ldr	r3, [pc, #52]	@ (80052c0 <std+0x58>)
 800528c:	6263      	str	r3, [r4, #36]	@ 0x24
 800528e:	4b0d      	ldr	r3, [pc, #52]	@ (80052c4 <std+0x5c>)
 8005290:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005292:	4b0d      	ldr	r3, [pc, #52]	@ (80052c8 <std+0x60>)
 8005294:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005296:	4b0d      	ldr	r3, [pc, #52]	@ (80052cc <std+0x64>)
 8005298:	6323      	str	r3, [r4, #48]	@ 0x30
 800529a:	4b0d      	ldr	r3, [pc, #52]	@ (80052d0 <std+0x68>)
 800529c:	6224      	str	r4, [r4, #32]
 800529e:	429c      	cmp	r4, r3
 80052a0:	d006      	beq.n	80052b0 <std+0x48>
 80052a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80052a6:	4294      	cmp	r4, r2
 80052a8:	d002      	beq.n	80052b0 <std+0x48>
 80052aa:	33d0      	adds	r3, #208	@ 0xd0
 80052ac:	429c      	cmp	r4, r3
 80052ae:	d105      	bne.n	80052bc <std+0x54>
 80052b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052b8:	f000 b9e4 	b.w	8005684 <__retarget_lock_init_recursive>
 80052bc:	bd10      	pop	{r4, pc}
 80052be:	bf00      	nop
 80052c0:	08005431 	.word	0x08005431
 80052c4:	08005453 	.word	0x08005453
 80052c8:	0800548b 	.word	0x0800548b
 80052cc:	080054af 	.word	0x080054af
 80052d0:	20000334 	.word	0x20000334

080052d4 <stdio_exit_handler>:
 80052d4:	4a02      	ldr	r2, [pc, #8]	@ (80052e0 <stdio_exit_handler+0xc>)
 80052d6:	4903      	ldr	r1, [pc, #12]	@ (80052e4 <stdio_exit_handler+0x10>)
 80052d8:	4803      	ldr	r0, [pc, #12]	@ (80052e8 <stdio_exit_handler+0x14>)
 80052da:	f000 b869 	b.w	80053b0 <_fwalk_sglue>
 80052de:	bf00      	nop
 80052e0:	2000000c 	.word	0x2000000c
 80052e4:	08006fc9 	.word	0x08006fc9
 80052e8:	20000188 	.word	0x20000188

080052ec <cleanup_stdio>:
 80052ec:	6841      	ldr	r1, [r0, #4]
 80052ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005320 <cleanup_stdio+0x34>)
 80052f0:	4299      	cmp	r1, r3
 80052f2:	b510      	push	{r4, lr}
 80052f4:	4604      	mov	r4, r0
 80052f6:	d001      	beq.n	80052fc <cleanup_stdio+0x10>
 80052f8:	f001 fe66 	bl	8006fc8 <_fflush_r>
 80052fc:	68a1      	ldr	r1, [r4, #8]
 80052fe:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <cleanup_stdio+0x38>)
 8005300:	4299      	cmp	r1, r3
 8005302:	d002      	beq.n	800530a <cleanup_stdio+0x1e>
 8005304:	4620      	mov	r0, r4
 8005306:	f001 fe5f 	bl	8006fc8 <_fflush_r>
 800530a:	68e1      	ldr	r1, [r4, #12]
 800530c:	4b06      	ldr	r3, [pc, #24]	@ (8005328 <cleanup_stdio+0x3c>)
 800530e:	4299      	cmp	r1, r3
 8005310:	d004      	beq.n	800531c <cleanup_stdio+0x30>
 8005312:	4620      	mov	r0, r4
 8005314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005318:	f001 be56 	b.w	8006fc8 <_fflush_r>
 800531c:	bd10      	pop	{r4, pc}
 800531e:	bf00      	nop
 8005320:	20000334 	.word	0x20000334
 8005324:	2000039c 	.word	0x2000039c
 8005328:	20000404 	.word	0x20000404

0800532c <global_stdio_init.part.0>:
 800532c:	b510      	push	{r4, lr}
 800532e:	4b0b      	ldr	r3, [pc, #44]	@ (800535c <global_stdio_init.part.0+0x30>)
 8005330:	4c0b      	ldr	r4, [pc, #44]	@ (8005360 <global_stdio_init.part.0+0x34>)
 8005332:	4a0c      	ldr	r2, [pc, #48]	@ (8005364 <global_stdio_init.part.0+0x38>)
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	4620      	mov	r0, r4
 8005338:	2200      	movs	r2, #0
 800533a:	2104      	movs	r1, #4
 800533c:	f7ff ff94 	bl	8005268 <std>
 8005340:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005344:	2201      	movs	r2, #1
 8005346:	2109      	movs	r1, #9
 8005348:	f7ff ff8e 	bl	8005268 <std>
 800534c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005350:	2202      	movs	r2, #2
 8005352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005356:	2112      	movs	r1, #18
 8005358:	f7ff bf86 	b.w	8005268 <std>
 800535c:	2000046c 	.word	0x2000046c
 8005360:	20000334 	.word	0x20000334
 8005364:	080052d5 	.word	0x080052d5

08005368 <__sfp_lock_acquire>:
 8005368:	4801      	ldr	r0, [pc, #4]	@ (8005370 <__sfp_lock_acquire+0x8>)
 800536a:	f000 b98c 	b.w	8005686 <__retarget_lock_acquire_recursive>
 800536e:	bf00      	nop
 8005370:	20000475 	.word	0x20000475

08005374 <__sfp_lock_release>:
 8005374:	4801      	ldr	r0, [pc, #4]	@ (800537c <__sfp_lock_release+0x8>)
 8005376:	f000 b987 	b.w	8005688 <__retarget_lock_release_recursive>
 800537a:	bf00      	nop
 800537c:	20000475 	.word	0x20000475

08005380 <__sinit>:
 8005380:	b510      	push	{r4, lr}
 8005382:	4604      	mov	r4, r0
 8005384:	f7ff fff0 	bl	8005368 <__sfp_lock_acquire>
 8005388:	6a23      	ldr	r3, [r4, #32]
 800538a:	b11b      	cbz	r3, 8005394 <__sinit+0x14>
 800538c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005390:	f7ff bff0 	b.w	8005374 <__sfp_lock_release>
 8005394:	4b04      	ldr	r3, [pc, #16]	@ (80053a8 <__sinit+0x28>)
 8005396:	6223      	str	r3, [r4, #32]
 8005398:	4b04      	ldr	r3, [pc, #16]	@ (80053ac <__sinit+0x2c>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1f5      	bne.n	800538c <__sinit+0xc>
 80053a0:	f7ff ffc4 	bl	800532c <global_stdio_init.part.0>
 80053a4:	e7f2      	b.n	800538c <__sinit+0xc>
 80053a6:	bf00      	nop
 80053a8:	080052ed 	.word	0x080052ed
 80053ac:	2000046c 	.word	0x2000046c

080053b0 <_fwalk_sglue>:
 80053b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b4:	4607      	mov	r7, r0
 80053b6:	4688      	mov	r8, r1
 80053b8:	4614      	mov	r4, r2
 80053ba:	2600      	movs	r6, #0
 80053bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053c0:	f1b9 0901 	subs.w	r9, r9, #1
 80053c4:	d505      	bpl.n	80053d2 <_fwalk_sglue+0x22>
 80053c6:	6824      	ldr	r4, [r4, #0]
 80053c8:	2c00      	cmp	r4, #0
 80053ca:	d1f7      	bne.n	80053bc <_fwalk_sglue+0xc>
 80053cc:	4630      	mov	r0, r6
 80053ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053d2:	89ab      	ldrh	r3, [r5, #12]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d907      	bls.n	80053e8 <_fwalk_sglue+0x38>
 80053d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053dc:	3301      	adds	r3, #1
 80053de:	d003      	beq.n	80053e8 <_fwalk_sglue+0x38>
 80053e0:	4629      	mov	r1, r5
 80053e2:	4638      	mov	r0, r7
 80053e4:	47c0      	blx	r8
 80053e6:	4306      	orrs	r6, r0
 80053e8:	3568      	adds	r5, #104	@ 0x68
 80053ea:	e7e9      	b.n	80053c0 <_fwalk_sglue+0x10>

080053ec <siprintf>:
 80053ec:	b40e      	push	{r1, r2, r3}
 80053ee:	b510      	push	{r4, lr}
 80053f0:	b09d      	sub	sp, #116	@ 0x74
 80053f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80053f4:	9002      	str	r0, [sp, #8]
 80053f6:	9006      	str	r0, [sp, #24]
 80053f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053fc:	480a      	ldr	r0, [pc, #40]	@ (8005428 <siprintf+0x3c>)
 80053fe:	9107      	str	r1, [sp, #28]
 8005400:	9104      	str	r1, [sp, #16]
 8005402:	490a      	ldr	r1, [pc, #40]	@ (800542c <siprintf+0x40>)
 8005404:	f853 2b04 	ldr.w	r2, [r3], #4
 8005408:	9105      	str	r1, [sp, #20]
 800540a:	2400      	movs	r4, #0
 800540c:	a902      	add	r1, sp, #8
 800540e:	6800      	ldr	r0, [r0, #0]
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005414:	f001 facc 	bl	80069b0 <_svfiprintf_r>
 8005418:	9b02      	ldr	r3, [sp, #8]
 800541a:	701c      	strb	r4, [r3, #0]
 800541c:	b01d      	add	sp, #116	@ 0x74
 800541e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005422:	b003      	add	sp, #12
 8005424:	4770      	bx	lr
 8005426:	bf00      	nop
 8005428:	20000184 	.word	0x20000184
 800542c:	ffff0208 	.word	0xffff0208

08005430 <__sread>:
 8005430:	b510      	push	{r4, lr}
 8005432:	460c      	mov	r4, r1
 8005434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005438:	f000 f8d6 	bl	80055e8 <_read_r>
 800543c:	2800      	cmp	r0, #0
 800543e:	bfab      	itete	ge
 8005440:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005442:	89a3      	ldrhlt	r3, [r4, #12]
 8005444:	181b      	addge	r3, r3, r0
 8005446:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800544a:	bfac      	ite	ge
 800544c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800544e:	81a3      	strhlt	r3, [r4, #12]
 8005450:	bd10      	pop	{r4, pc}

08005452 <__swrite>:
 8005452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005456:	461f      	mov	r7, r3
 8005458:	898b      	ldrh	r3, [r1, #12]
 800545a:	05db      	lsls	r3, r3, #23
 800545c:	4605      	mov	r5, r0
 800545e:	460c      	mov	r4, r1
 8005460:	4616      	mov	r6, r2
 8005462:	d505      	bpl.n	8005470 <__swrite+0x1e>
 8005464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005468:	2302      	movs	r3, #2
 800546a:	2200      	movs	r2, #0
 800546c:	f000 f8aa 	bl	80055c4 <_lseek_r>
 8005470:	89a3      	ldrh	r3, [r4, #12]
 8005472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005476:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800547a:	81a3      	strh	r3, [r4, #12]
 800547c:	4632      	mov	r2, r6
 800547e:	463b      	mov	r3, r7
 8005480:	4628      	mov	r0, r5
 8005482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005486:	f000 b8c1 	b.w	800560c <_write_r>

0800548a <__sseek>:
 800548a:	b510      	push	{r4, lr}
 800548c:	460c      	mov	r4, r1
 800548e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005492:	f000 f897 	bl	80055c4 <_lseek_r>
 8005496:	1c43      	adds	r3, r0, #1
 8005498:	89a3      	ldrh	r3, [r4, #12]
 800549a:	bf15      	itete	ne
 800549c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800549e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054a6:	81a3      	strheq	r3, [r4, #12]
 80054a8:	bf18      	it	ne
 80054aa:	81a3      	strhne	r3, [r4, #12]
 80054ac:	bd10      	pop	{r4, pc}

080054ae <__sclose>:
 80054ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b2:	f000 b877 	b.w	80055a4 <_close_r>

080054b6 <memset>:
 80054b6:	4402      	add	r2, r0
 80054b8:	4603      	mov	r3, r0
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d100      	bne.n	80054c0 <memset+0xa>
 80054be:	4770      	bx	lr
 80054c0:	f803 1b01 	strb.w	r1, [r3], #1
 80054c4:	e7f9      	b.n	80054ba <memset+0x4>

080054c6 <strncmp>:
 80054c6:	b510      	push	{r4, lr}
 80054c8:	b16a      	cbz	r2, 80054e6 <strncmp+0x20>
 80054ca:	3901      	subs	r1, #1
 80054cc:	1884      	adds	r4, r0, r2
 80054ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d103      	bne.n	80054e2 <strncmp+0x1c>
 80054da:	42a0      	cmp	r0, r4
 80054dc:	d001      	beq.n	80054e2 <strncmp+0x1c>
 80054de:	2a00      	cmp	r2, #0
 80054e0:	d1f5      	bne.n	80054ce <strncmp+0x8>
 80054e2:	1ad0      	subs	r0, r2, r3
 80054e4:	bd10      	pop	{r4, pc}
 80054e6:	4610      	mov	r0, r2
 80054e8:	e7fc      	b.n	80054e4 <strncmp+0x1e>
	...

080054ec <strtok>:
 80054ec:	4b16      	ldr	r3, [pc, #88]	@ (8005548 <strtok+0x5c>)
 80054ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054f2:	681f      	ldr	r7, [r3, #0]
 80054f4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80054f6:	4605      	mov	r5, r0
 80054f8:	460e      	mov	r6, r1
 80054fa:	b9ec      	cbnz	r4, 8005538 <strtok+0x4c>
 80054fc:	2050      	movs	r0, #80	@ 0x50
 80054fe:	f000 fc7d 	bl	8005dfc <malloc>
 8005502:	4602      	mov	r2, r0
 8005504:	6478      	str	r0, [r7, #68]	@ 0x44
 8005506:	b920      	cbnz	r0, 8005512 <strtok+0x26>
 8005508:	4b10      	ldr	r3, [pc, #64]	@ (800554c <strtok+0x60>)
 800550a:	4811      	ldr	r0, [pc, #68]	@ (8005550 <strtok+0x64>)
 800550c:	215b      	movs	r1, #91	@ 0x5b
 800550e:	f000 f8d3 	bl	80056b8 <__assert_func>
 8005512:	e9c0 4400 	strd	r4, r4, [r0]
 8005516:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800551a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800551e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005522:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005526:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800552a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800552e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005532:	6184      	str	r4, [r0, #24]
 8005534:	7704      	strb	r4, [r0, #28]
 8005536:	6244      	str	r4, [r0, #36]	@ 0x24
 8005538:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800553a:	4631      	mov	r1, r6
 800553c:	4628      	mov	r0, r5
 800553e:	2301      	movs	r3, #1
 8005540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005544:	f000 b806 	b.w	8005554 <__strtok_r>
 8005548:	20000184 	.word	0x20000184
 800554c:	080076ba 	.word	0x080076ba
 8005550:	080076d1 	.word	0x080076d1

08005554 <__strtok_r>:
 8005554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005556:	4604      	mov	r4, r0
 8005558:	b908      	cbnz	r0, 800555e <__strtok_r+0xa>
 800555a:	6814      	ldr	r4, [r2, #0]
 800555c:	b144      	cbz	r4, 8005570 <__strtok_r+0x1c>
 800555e:	4620      	mov	r0, r4
 8005560:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005564:	460f      	mov	r7, r1
 8005566:	f817 6b01 	ldrb.w	r6, [r7], #1
 800556a:	b91e      	cbnz	r6, 8005574 <__strtok_r+0x20>
 800556c:	b965      	cbnz	r5, 8005588 <__strtok_r+0x34>
 800556e:	6015      	str	r5, [r2, #0]
 8005570:	2000      	movs	r0, #0
 8005572:	e005      	b.n	8005580 <__strtok_r+0x2c>
 8005574:	42b5      	cmp	r5, r6
 8005576:	d1f6      	bne.n	8005566 <__strtok_r+0x12>
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1f0      	bne.n	800555e <__strtok_r+0xa>
 800557c:	6014      	str	r4, [r2, #0]
 800557e:	7003      	strb	r3, [r0, #0]
 8005580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005582:	461c      	mov	r4, r3
 8005584:	e00c      	b.n	80055a0 <__strtok_r+0x4c>
 8005586:	b91d      	cbnz	r5, 8005590 <__strtok_r+0x3c>
 8005588:	4627      	mov	r7, r4
 800558a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800558e:	460e      	mov	r6, r1
 8005590:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005594:	42ab      	cmp	r3, r5
 8005596:	d1f6      	bne.n	8005586 <__strtok_r+0x32>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f2      	beq.n	8005582 <__strtok_r+0x2e>
 800559c:	2300      	movs	r3, #0
 800559e:	703b      	strb	r3, [r7, #0]
 80055a0:	6014      	str	r4, [r2, #0]
 80055a2:	e7ed      	b.n	8005580 <__strtok_r+0x2c>

080055a4 <_close_r>:
 80055a4:	b538      	push	{r3, r4, r5, lr}
 80055a6:	4d06      	ldr	r5, [pc, #24]	@ (80055c0 <_close_r+0x1c>)
 80055a8:	2300      	movs	r3, #0
 80055aa:	4604      	mov	r4, r0
 80055ac:	4608      	mov	r0, r1
 80055ae:	602b      	str	r3, [r5, #0]
 80055b0:	f7fc fa1a 	bl	80019e8 <_close>
 80055b4:	1c43      	adds	r3, r0, #1
 80055b6:	d102      	bne.n	80055be <_close_r+0x1a>
 80055b8:	682b      	ldr	r3, [r5, #0]
 80055ba:	b103      	cbz	r3, 80055be <_close_r+0x1a>
 80055bc:	6023      	str	r3, [r4, #0]
 80055be:	bd38      	pop	{r3, r4, r5, pc}
 80055c0:	20000470 	.word	0x20000470

080055c4 <_lseek_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4d07      	ldr	r5, [pc, #28]	@ (80055e4 <_lseek_r+0x20>)
 80055c8:	4604      	mov	r4, r0
 80055ca:	4608      	mov	r0, r1
 80055cc:	4611      	mov	r1, r2
 80055ce:	2200      	movs	r2, #0
 80055d0:	602a      	str	r2, [r5, #0]
 80055d2:	461a      	mov	r2, r3
 80055d4:	f7fc fa2f 	bl	8001a36 <_lseek>
 80055d8:	1c43      	adds	r3, r0, #1
 80055da:	d102      	bne.n	80055e2 <_lseek_r+0x1e>
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	b103      	cbz	r3, 80055e2 <_lseek_r+0x1e>
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
 80055e4:	20000470 	.word	0x20000470

080055e8 <_read_r>:
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	4d07      	ldr	r5, [pc, #28]	@ (8005608 <_read_r+0x20>)
 80055ec:	4604      	mov	r4, r0
 80055ee:	4608      	mov	r0, r1
 80055f0:	4611      	mov	r1, r2
 80055f2:	2200      	movs	r2, #0
 80055f4:	602a      	str	r2, [r5, #0]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f7fc f9bd 	bl	8001976 <_read>
 80055fc:	1c43      	adds	r3, r0, #1
 80055fe:	d102      	bne.n	8005606 <_read_r+0x1e>
 8005600:	682b      	ldr	r3, [r5, #0]
 8005602:	b103      	cbz	r3, 8005606 <_read_r+0x1e>
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	bd38      	pop	{r3, r4, r5, pc}
 8005608:	20000470 	.word	0x20000470

0800560c <_write_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	4d07      	ldr	r5, [pc, #28]	@ (800562c <_write_r+0x20>)
 8005610:	4604      	mov	r4, r0
 8005612:	4608      	mov	r0, r1
 8005614:	4611      	mov	r1, r2
 8005616:	2200      	movs	r2, #0
 8005618:	602a      	str	r2, [r5, #0]
 800561a:	461a      	mov	r2, r3
 800561c:	f7fc f9c8 	bl	80019b0 <_write>
 8005620:	1c43      	adds	r3, r0, #1
 8005622:	d102      	bne.n	800562a <_write_r+0x1e>
 8005624:	682b      	ldr	r3, [r5, #0]
 8005626:	b103      	cbz	r3, 800562a <_write_r+0x1e>
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	bd38      	pop	{r3, r4, r5, pc}
 800562c:	20000470 	.word	0x20000470

08005630 <__errno>:
 8005630:	4b01      	ldr	r3, [pc, #4]	@ (8005638 <__errno+0x8>)
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000184 	.word	0x20000184

0800563c <__libc_init_array>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	4d0d      	ldr	r5, [pc, #52]	@ (8005674 <__libc_init_array+0x38>)
 8005640:	4c0d      	ldr	r4, [pc, #52]	@ (8005678 <__libc_init_array+0x3c>)
 8005642:	1b64      	subs	r4, r4, r5
 8005644:	10a4      	asrs	r4, r4, #2
 8005646:	2600      	movs	r6, #0
 8005648:	42a6      	cmp	r6, r4
 800564a:	d109      	bne.n	8005660 <__libc_init_array+0x24>
 800564c:	4d0b      	ldr	r5, [pc, #44]	@ (800567c <__libc_init_array+0x40>)
 800564e:	4c0c      	ldr	r4, [pc, #48]	@ (8005680 <__libc_init_array+0x44>)
 8005650:	f002 f80c 	bl	800766c <_init>
 8005654:	1b64      	subs	r4, r4, r5
 8005656:	10a4      	asrs	r4, r4, #2
 8005658:	2600      	movs	r6, #0
 800565a:	42a6      	cmp	r6, r4
 800565c:	d105      	bne.n	800566a <__libc_init_array+0x2e>
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	f855 3b04 	ldr.w	r3, [r5], #4
 8005664:	4798      	blx	r3
 8005666:	3601      	adds	r6, #1
 8005668:	e7ee      	b.n	8005648 <__libc_init_array+0xc>
 800566a:	f855 3b04 	ldr.w	r3, [r5], #4
 800566e:	4798      	blx	r3
 8005670:	3601      	adds	r6, #1
 8005672:	e7f2      	b.n	800565a <__libc_init_array+0x1e>
 8005674:	08007acc 	.word	0x08007acc
 8005678:	08007acc 	.word	0x08007acc
 800567c:	08007acc 	.word	0x08007acc
 8005680:	08007ad0 	.word	0x08007ad0

08005684 <__retarget_lock_init_recursive>:
 8005684:	4770      	bx	lr

08005686 <__retarget_lock_acquire_recursive>:
 8005686:	4770      	bx	lr

08005688 <__retarget_lock_release_recursive>:
 8005688:	4770      	bx	lr

0800568a <memcpy>:
 800568a:	440a      	add	r2, r1
 800568c:	4291      	cmp	r1, r2
 800568e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005692:	d100      	bne.n	8005696 <memcpy+0xc>
 8005694:	4770      	bx	lr
 8005696:	b510      	push	{r4, lr}
 8005698:	f811 4b01 	ldrb.w	r4, [r1], #1
 800569c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056a0:	4291      	cmp	r1, r2
 80056a2:	d1f9      	bne.n	8005698 <memcpy+0xe>
 80056a4:	bd10      	pop	{r4, pc}
	...

080056a8 <nan>:
 80056a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80056b0 <nan+0x8>
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop
 80056b0:	00000000 	.word	0x00000000
 80056b4:	7ff80000 	.word	0x7ff80000

080056b8 <__assert_func>:
 80056b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80056ba:	4614      	mov	r4, r2
 80056bc:	461a      	mov	r2, r3
 80056be:	4b09      	ldr	r3, [pc, #36]	@ (80056e4 <__assert_func+0x2c>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4605      	mov	r5, r0
 80056c4:	68d8      	ldr	r0, [r3, #12]
 80056c6:	b14c      	cbz	r4, 80056dc <__assert_func+0x24>
 80056c8:	4b07      	ldr	r3, [pc, #28]	@ (80056e8 <__assert_func+0x30>)
 80056ca:	9100      	str	r1, [sp, #0]
 80056cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80056d0:	4906      	ldr	r1, [pc, #24]	@ (80056ec <__assert_func+0x34>)
 80056d2:	462b      	mov	r3, r5
 80056d4:	f001 fca0 	bl	8007018 <fiprintf>
 80056d8:	f001 fcda 	bl	8007090 <abort>
 80056dc:	4b04      	ldr	r3, [pc, #16]	@ (80056f0 <__assert_func+0x38>)
 80056de:	461c      	mov	r4, r3
 80056e0:	e7f3      	b.n	80056ca <__assert_func+0x12>
 80056e2:	bf00      	nop
 80056e4:	20000184 	.word	0x20000184
 80056e8:	08007733 	.word	0x08007733
 80056ec:	08007740 	.word	0x08007740
 80056f0:	0800776e 	.word	0x0800776e

080056f4 <_free_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4605      	mov	r5, r0
 80056f8:	2900      	cmp	r1, #0
 80056fa:	d041      	beq.n	8005780 <_free_r+0x8c>
 80056fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005700:	1f0c      	subs	r4, r1, #4
 8005702:	2b00      	cmp	r3, #0
 8005704:	bfb8      	it	lt
 8005706:	18e4      	addlt	r4, r4, r3
 8005708:	f000 fc34 	bl	8005f74 <__malloc_lock>
 800570c:	4a1d      	ldr	r2, [pc, #116]	@ (8005784 <_free_r+0x90>)
 800570e:	6813      	ldr	r3, [r2, #0]
 8005710:	b933      	cbnz	r3, 8005720 <_free_r+0x2c>
 8005712:	6063      	str	r3, [r4, #4]
 8005714:	6014      	str	r4, [r2, #0]
 8005716:	4628      	mov	r0, r5
 8005718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800571c:	f000 bc30 	b.w	8005f80 <__malloc_unlock>
 8005720:	42a3      	cmp	r3, r4
 8005722:	d908      	bls.n	8005736 <_free_r+0x42>
 8005724:	6820      	ldr	r0, [r4, #0]
 8005726:	1821      	adds	r1, r4, r0
 8005728:	428b      	cmp	r3, r1
 800572a:	bf01      	itttt	eq
 800572c:	6819      	ldreq	r1, [r3, #0]
 800572e:	685b      	ldreq	r3, [r3, #4]
 8005730:	1809      	addeq	r1, r1, r0
 8005732:	6021      	streq	r1, [r4, #0]
 8005734:	e7ed      	b.n	8005712 <_free_r+0x1e>
 8005736:	461a      	mov	r2, r3
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	b10b      	cbz	r3, 8005740 <_free_r+0x4c>
 800573c:	42a3      	cmp	r3, r4
 800573e:	d9fa      	bls.n	8005736 <_free_r+0x42>
 8005740:	6811      	ldr	r1, [r2, #0]
 8005742:	1850      	adds	r0, r2, r1
 8005744:	42a0      	cmp	r0, r4
 8005746:	d10b      	bne.n	8005760 <_free_r+0x6c>
 8005748:	6820      	ldr	r0, [r4, #0]
 800574a:	4401      	add	r1, r0
 800574c:	1850      	adds	r0, r2, r1
 800574e:	4283      	cmp	r3, r0
 8005750:	6011      	str	r1, [r2, #0]
 8005752:	d1e0      	bne.n	8005716 <_free_r+0x22>
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	6053      	str	r3, [r2, #4]
 800575a:	4408      	add	r0, r1
 800575c:	6010      	str	r0, [r2, #0]
 800575e:	e7da      	b.n	8005716 <_free_r+0x22>
 8005760:	d902      	bls.n	8005768 <_free_r+0x74>
 8005762:	230c      	movs	r3, #12
 8005764:	602b      	str	r3, [r5, #0]
 8005766:	e7d6      	b.n	8005716 <_free_r+0x22>
 8005768:	6820      	ldr	r0, [r4, #0]
 800576a:	1821      	adds	r1, r4, r0
 800576c:	428b      	cmp	r3, r1
 800576e:	bf04      	itt	eq
 8005770:	6819      	ldreq	r1, [r3, #0]
 8005772:	685b      	ldreq	r3, [r3, #4]
 8005774:	6063      	str	r3, [r4, #4]
 8005776:	bf04      	itt	eq
 8005778:	1809      	addeq	r1, r1, r0
 800577a:	6021      	streq	r1, [r4, #0]
 800577c:	6054      	str	r4, [r2, #4]
 800577e:	e7ca      	b.n	8005716 <_free_r+0x22>
 8005780:	bd38      	pop	{r3, r4, r5, pc}
 8005782:	bf00      	nop
 8005784:	2000047c 	.word	0x2000047c

08005788 <rshift>:
 8005788:	6903      	ldr	r3, [r0, #16]
 800578a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800578e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005792:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005796:	f100 0414 	add.w	r4, r0, #20
 800579a:	dd45      	ble.n	8005828 <rshift+0xa0>
 800579c:	f011 011f 	ands.w	r1, r1, #31
 80057a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80057a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80057a8:	d10c      	bne.n	80057c4 <rshift+0x3c>
 80057aa:	f100 0710 	add.w	r7, r0, #16
 80057ae:	4629      	mov	r1, r5
 80057b0:	42b1      	cmp	r1, r6
 80057b2:	d334      	bcc.n	800581e <rshift+0x96>
 80057b4:	1a9b      	subs	r3, r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	1eea      	subs	r2, r5, #3
 80057ba:	4296      	cmp	r6, r2
 80057bc:	bf38      	it	cc
 80057be:	2300      	movcc	r3, #0
 80057c0:	4423      	add	r3, r4
 80057c2:	e015      	b.n	80057f0 <rshift+0x68>
 80057c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80057c8:	f1c1 0820 	rsb	r8, r1, #32
 80057cc:	40cf      	lsrs	r7, r1
 80057ce:	f105 0e04 	add.w	lr, r5, #4
 80057d2:	46a1      	mov	r9, r4
 80057d4:	4576      	cmp	r6, lr
 80057d6:	46f4      	mov	ip, lr
 80057d8:	d815      	bhi.n	8005806 <rshift+0x7e>
 80057da:	1a9a      	subs	r2, r3, r2
 80057dc:	0092      	lsls	r2, r2, #2
 80057de:	3a04      	subs	r2, #4
 80057e0:	3501      	adds	r5, #1
 80057e2:	42ae      	cmp	r6, r5
 80057e4:	bf38      	it	cc
 80057e6:	2200      	movcc	r2, #0
 80057e8:	18a3      	adds	r3, r4, r2
 80057ea:	50a7      	str	r7, [r4, r2]
 80057ec:	b107      	cbz	r7, 80057f0 <rshift+0x68>
 80057ee:	3304      	adds	r3, #4
 80057f0:	1b1a      	subs	r2, r3, r4
 80057f2:	42a3      	cmp	r3, r4
 80057f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80057f8:	bf08      	it	eq
 80057fa:	2300      	moveq	r3, #0
 80057fc:	6102      	str	r2, [r0, #16]
 80057fe:	bf08      	it	eq
 8005800:	6143      	streq	r3, [r0, #20]
 8005802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005806:	f8dc c000 	ldr.w	ip, [ip]
 800580a:	fa0c fc08 	lsl.w	ip, ip, r8
 800580e:	ea4c 0707 	orr.w	r7, ip, r7
 8005812:	f849 7b04 	str.w	r7, [r9], #4
 8005816:	f85e 7b04 	ldr.w	r7, [lr], #4
 800581a:	40cf      	lsrs	r7, r1
 800581c:	e7da      	b.n	80057d4 <rshift+0x4c>
 800581e:	f851 cb04 	ldr.w	ip, [r1], #4
 8005822:	f847 cf04 	str.w	ip, [r7, #4]!
 8005826:	e7c3      	b.n	80057b0 <rshift+0x28>
 8005828:	4623      	mov	r3, r4
 800582a:	e7e1      	b.n	80057f0 <rshift+0x68>

0800582c <__hexdig_fun>:
 800582c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8005830:	2b09      	cmp	r3, #9
 8005832:	d802      	bhi.n	800583a <__hexdig_fun+0xe>
 8005834:	3820      	subs	r0, #32
 8005836:	b2c0      	uxtb	r0, r0
 8005838:	4770      	bx	lr
 800583a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800583e:	2b05      	cmp	r3, #5
 8005840:	d801      	bhi.n	8005846 <__hexdig_fun+0x1a>
 8005842:	3847      	subs	r0, #71	@ 0x47
 8005844:	e7f7      	b.n	8005836 <__hexdig_fun+0xa>
 8005846:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800584a:	2b05      	cmp	r3, #5
 800584c:	d801      	bhi.n	8005852 <__hexdig_fun+0x26>
 800584e:	3827      	subs	r0, #39	@ 0x27
 8005850:	e7f1      	b.n	8005836 <__hexdig_fun+0xa>
 8005852:	2000      	movs	r0, #0
 8005854:	4770      	bx	lr
	...

08005858 <__gethex>:
 8005858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585c:	b085      	sub	sp, #20
 800585e:	468a      	mov	sl, r1
 8005860:	9302      	str	r3, [sp, #8]
 8005862:	680b      	ldr	r3, [r1, #0]
 8005864:	9001      	str	r0, [sp, #4]
 8005866:	4690      	mov	r8, r2
 8005868:	1c9c      	adds	r4, r3, #2
 800586a:	46a1      	mov	r9, r4
 800586c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005870:	2830      	cmp	r0, #48	@ 0x30
 8005872:	d0fa      	beq.n	800586a <__gethex+0x12>
 8005874:	eba9 0303 	sub.w	r3, r9, r3
 8005878:	f1a3 0b02 	sub.w	fp, r3, #2
 800587c:	f7ff ffd6 	bl	800582c <__hexdig_fun>
 8005880:	4605      	mov	r5, r0
 8005882:	2800      	cmp	r0, #0
 8005884:	d168      	bne.n	8005958 <__gethex+0x100>
 8005886:	49a0      	ldr	r1, [pc, #640]	@ (8005b08 <__gethex+0x2b0>)
 8005888:	2201      	movs	r2, #1
 800588a:	4648      	mov	r0, r9
 800588c:	f7ff fe1b 	bl	80054c6 <strncmp>
 8005890:	4607      	mov	r7, r0
 8005892:	2800      	cmp	r0, #0
 8005894:	d167      	bne.n	8005966 <__gethex+0x10e>
 8005896:	f899 0001 	ldrb.w	r0, [r9, #1]
 800589a:	4626      	mov	r6, r4
 800589c:	f7ff ffc6 	bl	800582c <__hexdig_fun>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d062      	beq.n	800596a <__gethex+0x112>
 80058a4:	4623      	mov	r3, r4
 80058a6:	7818      	ldrb	r0, [r3, #0]
 80058a8:	2830      	cmp	r0, #48	@ 0x30
 80058aa:	4699      	mov	r9, r3
 80058ac:	f103 0301 	add.w	r3, r3, #1
 80058b0:	d0f9      	beq.n	80058a6 <__gethex+0x4e>
 80058b2:	f7ff ffbb 	bl	800582c <__hexdig_fun>
 80058b6:	fab0 f580 	clz	r5, r0
 80058ba:	096d      	lsrs	r5, r5, #5
 80058bc:	f04f 0b01 	mov.w	fp, #1
 80058c0:	464a      	mov	r2, r9
 80058c2:	4616      	mov	r6, r2
 80058c4:	3201      	adds	r2, #1
 80058c6:	7830      	ldrb	r0, [r6, #0]
 80058c8:	f7ff ffb0 	bl	800582c <__hexdig_fun>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d1f8      	bne.n	80058c2 <__gethex+0x6a>
 80058d0:	498d      	ldr	r1, [pc, #564]	@ (8005b08 <__gethex+0x2b0>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	4630      	mov	r0, r6
 80058d6:	f7ff fdf6 	bl	80054c6 <strncmp>
 80058da:	2800      	cmp	r0, #0
 80058dc:	d13f      	bne.n	800595e <__gethex+0x106>
 80058de:	b944      	cbnz	r4, 80058f2 <__gethex+0x9a>
 80058e0:	1c74      	adds	r4, r6, #1
 80058e2:	4622      	mov	r2, r4
 80058e4:	4616      	mov	r6, r2
 80058e6:	3201      	adds	r2, #1
 80058e8:	7830      	ldrb	r0, [r6, #0]
 80058ea:	f7ff ff9f 	bl	800582c <__hexdig_fun>
 80058ee:	2800      	cmp	r0, #0
 80058f0:	d1f8      	bne.n	80058e4 <__gethex+0x8c>
 80058f2:	1ba4      	subs	r4, r4, r6
 80058f4:	00a7      	lsls	r7, r4, #2
 80058f6:	7833      	ldrb	r3, [r6, #0]
 80058f8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80058fc:	2b50      	cmp	r3, #80	@ 0x50
 80058fe:	d13e      	bne.n	800597e <__gethex+0x126>
 8005900:	7873      	ldrb	r3, [r6, #1]
 8005902:	2b2b      	cmp	r3, #43	@ 0x2b
 8005904:	d033      	beq.n	800596e <__gethex+0x116>
 8005906:	2b2d      	cmp	r3, #45	@ 0x2d
 8005908:	d034      	beq.n	8005974 <__gethex+0x11c>
 800590a:	1c71      	adds	r1, r6, #1
 800590c:	2400      	movs	r4, #0
 800590e:	7808      	ldrb	r0, [r1, #0]
 8005910:	f7ff ff8c 	bl	800582c <__hexdig_fun>
 8005914:	1e43      	subs	r3, r0, #1
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b18      	cmp	r3, #24
 800591a:	d830      	bhi.n	800597e <__gethex+0x126>
 800591c:	f1a0 0210 	sub.w	r2, r0, #16
 8005920:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005924:	f7ff ff82 	bl	800582c <__hexdig_fun>
 8005928:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800592c:	fa5f fc8c 	uxtb.w	ip, ip
 8005930:	f1bc 0f18 	cmp.w	ip, #24
 8005934:	f04f 030a 	mov.w	r3, #10
 8005938:	d91e      	bls.n	8005978 <__gethex+0x120>
 800593a:	b104      	cbz	r4, 800593e <__gethex+0xe6>
 800593c:	4252      	negs	r2, r2
 800593e:	4417      	add	r7, r2
 8005940:	f8ca 1000 	str.w	r1, [sl]
 8005944:	b1ed      	cbz	r5, 8005982 <__gethex+0x12a>
 8005946:	f1bb 0f00 	cmp.w	fp, #0
 800594a:	bf0c      	ite	eq
 800594c:	2506      	moveq	r5, #6
 800594e:	2500      	movne	r5, #0
 8005950:	4628      	mov	r0, r5
 8005952:	b005      	add	sp, #20
 8005954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005958:	2500      	movs	r5, #0
 800595a:	462c      	mov	r4, r5
 800595c:	e7b0      	b.n	80058c0 <__gethex+0x68>
 800595e:	2c00      	cmp	r4, #0
 8005960:	d1c7      	bne.n	80058f2 <__gethex+0x9a>
 8005962:	4627      	mov	r7, r4
 8005964:	e7c7      	b.n	80058f6 <__gethex+0x9e>
 8005966:	464e      	mov	r6, r9
 8005968:	462f      	mov	r7, r5
 800596a:	2501      	movs	r5, #1
 800596c:	e7c3      	b.n	80058f6 <__gethex+0x9e>
 800596e:	2400      	movs	r4, #0
 8005970:	1cb1      	adds	r1, r6, #2
 8005972:	e7cc      	b.n	800590e <__gethex+0xb6>
 8005974:	2401      	movs	r4, #1
 8005976:	e7fb      	b.n	8005970 <__gethex+0x118>
 8005978:	fb03 0002 	mla	r0, r3, r2, r0
 800597c:	e7ce      	b.n	800591c <__gethex+0xc4>
 800597e:	4631      	mov	r1, r6
 8005980:	e7de      	b.n	8005940 <__gethex+0xe8>
 8005982:	eba6 0309 	sub.w	r3, r6, r9
 8005986:	3b01      	subs	r3, #1
 8005988:	4629      	mov	r1, r5
 800598a:	2b07      	cmp	r3, #7
 800598c:	dc0a      	bgt.n	80059a4 <__gethex+0x14c>
 800598e:	9801      	ldr	r0, [sp, #4]
 8005990:	f000 fafc 	bl	8005f8c <_Balloc>
 8005994:	4604      	mov	r4, r0
 8005996:	b940      	cbnz	r0, 80059aa <__gethex+0x152>
 8005998:	4b5c      	ldr	r3, [pc, #368]	@ (8005b0c <__gethex+0x2b4>)
 800599a:	4602      	mov	r2, r0
 800599c:	21e4      	movs	r1, #228	@ 0xe4
 800599e:	485c      	ldr	r0, [pc, #368]	@ (8005b10 <__gethex+0x2b8>)
 80059a0:	f7ff fe8a 	bl	80056b8 <__assert_func>
 80059a4:	3101      	adds	r1, #1
 80059a6:	105b      	asrs	r3, r3, #1
 80059a8:	e7ef      	b.n	800598a <__gethex+0x132>
 80059aa:	f100 0a14 	add.w	sl, r0, #20
 80059ae:	2300      	movs	r3, #0
 80059b0:	4655      	mov	r5, sl
 80059b2:	469b      	mov	fp, r3
 80059b4:	45b1      	cmp	r9, r6
 80059b6:	d337      	bcc.n	8005a28 <__gethex+0x1d0>
 80059b8:	f845 bb04 	str.w	fp, [r5], #4
 80059bc:	eba5 050a 	sub.w	r5, r5, sl
 80059c0:	10ad      	asrs	r5, r5, #2
 80059c2:	6125      	str	r5, [r4, #16]
 80059c4:	4658      	mov	r0, fp
 80059c6:	f000 fbd3 	bl	8006170 <__hi0bits>
 80059ca:	016d      	lsls	r5, r5, #5
 80059cc:	f8d8 6000 	ldr.w	r6, [r8]
 80059d0:	1a2d      	subs	r5, r5, r0
 80059d2:	42b5      	cmp	r5, r6
 80059d4:	dd54      	ble.n	8005a80 <__gethex+0x228>
 80059d6:	1bad      	subs	r5, r5, r6
 80059d8:	4629      	mov	r1, r5
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 ff5f 	bl	800689e <__any_on>
 80059e0:	4681      	mov	r9, r0
 80059e2:	b178      	cbz	r0, 8005a04 <__gethex+0x1ac>
 80059e4:	1e6b      	subs	r3, r5, #1
 80059e6:	1159      	asrs	r1, r3, #5
 80059e8:	f003 021f 	and.w	r2, r3, #31
 80059ec:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80059f0:	f04f 0901 	mov.w	r9, #1
 80059f4:	fa09 f202 	lsl.w	r2, r9, r2
 80059f8:	420a      	tst	r2, r1
 80059fa:	d003      	beq.n	8005a04 <__gethex+0x1ac>
 80059fc:	454b      	cmp	r3, r9
 80059fe:	dc36      	bgt.n	8005a6e <__gethex+0x216>
 8005a00:	f04f 0902 	mov.w	r9, #2
 8005a04:	4629      	mov	r1, r5
 8005a06:	4620      	mov	r0, r4
 8005a08:	f7ff febe 	bl	8005788 <rshift>
 8005a0c:	442f      	add	r7, r5
 8005a0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005a12:	42bb      	cmp	r3, r7
 8005a14:	da42      	bge.n	8005a9c <__gethex+0x244>
 8005a16:	9801      	ldr	r0, [sp, #4]
 8005a18:	4621      	mov	r1, r4
 8005a1a:	f000 faf7 	bl	800600c <_Bfree>
 8005a1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a20:	2300      	movs	r3, #0
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	25a3      	movs	r5, #163	@ 0xa3
 8005a26:	e793      	b.n	8005950 <__gethex+0xf8>
 8005a28:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8005a2c:	2a2e      	cmp	r2, #46	@ 0x2e
 8005a2e:	d012      	beq.n	8005a56 <__gethex+0x1fe>
 8005a30:	2b20      	cmp	r3, #32
 8005a32:	d104      	bne.n	8005a3e <__gethex+0x1e6>
 8005a34:	f845 bb04 	str.w	fp, [r5], #4
 8005a38:	f04f 0b00 	mov.w	fp, #0
 8005a3c:	465b      	mov	r3, fp
 8005a3e:	7830      	ldrb	r0, [r6, #0]
 8005a40:	9303      	str	r3, [sp, #12]
 8005a42:	f7ff fef3 	bl	800582c <__hexdig_fun>
 8005a46:	9b03      	ldr	r3, [sp, #12]
 8005a48:	f000 000f 	and.w	r0, r0, #15
 8005a4c:	4098      	lsls	r0, r3
 8005a4e:	ea4b 0b00 	orr.w	fp, fp, r0
 8005a52:	3304      	adds	r3, #4
 8005a54:	e7ae      	b.n	80059b4 <__gethex+0x15c>
 8005a56:	45b1      	cmp	r9, r6
 8005a58:	d8ea      	bhi.n	8005a30 <__gethex+0x1d8>
 8005a5a:	492b      	ldr	r1, [pc, #172]	@ (8005b08 <__gethex+0x2b0>)
 8005a5c:	9303      	str	r3, [sp, #12]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	4630      	mov	r0, r6
 8005a62:	f7ff fd30 	bl	80054c6 <strncmp>
 8005a66:	9b03      	ldr	r3, [sp, #12]
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d1e1      	bne.n	8005a30 <__gethex+0x1d8>
 8005a6c:	e7a2      	b.n	80059b4 <__gethex+0x15c>
 8005a6e:	1ea9      	subs	r1, r5, #2
 8005a70:	4620      	mov	r0, r4
 8005a72:	f000 ff14 	bl	800689e <__any_on>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d0c2      	beq.n	8005a00 <__gethex+0x1a8>
 8005a7a:	f04f 0903 	mov.w	r9, #3
 8005a7e:	e7c1      	b.n	8005a04 <__gethex+0x1ac>
 8005a80:	da09      	bge.n	8005a96 <__gethex+0x23e>
 8005a82:	1b75      	subs	r5, r6, r5
 8005a84:	4621      	mov	r1, r4
 8005a86:	9801      	ldr	r0, [sp, #4]
 8005a88:	462a      	mov	r2, r5
 8005a8a:	f000 fccf 	bl	800642c <__lshift>
 8005a8e:	1b7f      	subs	r7, r7, r5
 8005a90:	4604      	mov	r4, r0
 8005a92:	f100 0a14 	add.w	sl, r0, #20
 8005a96:	f04f 0900 	mov.w	r9, #0
 8005a9a:	e7b8      	b.n	8005a0e <__gethex+0x1b6>
 8005a9c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005aa0:	42bd      	cmp	r5, r7
 8005aa2:	dd6f      	ble.n	8005b84 <__gethex+0x32c>
 8005aa4:	1bed      	subs	r5, r5, r7
 8005aa6:	42ae      	cmp	r6, r5
 8005aa8:	dc34      	bgt.n	8005b14 <__gethex+0x2bc>
 8005aaa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d022      	beq.n	8005af8 <__gethex+0x2a0>
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d024      	beq.n	8005b00 <__gethex+0x2a8>
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d115      	bne.n	8005ae6 <__gethex+0x28e>
 8005aba:	42ae      	cmp	r6, r5
 8005abc:	d113      	bne.n	8005ae6 <__gethex+0x28e>
 8005abe:	2e01      	cmp	r6, #1
 8005ac0:	d10b      	bne.n	8005ada <__gethex+0x282>
 8005ac2:	9a02      	ldr	r2, [sp, #8]
 8005ac4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	2301      	movs	r3, #1
 8005acc:	6123      	str	r3, [r4, #16]
 8005ace:	f8ca 3000 	str.w	r3, [sl]
 8005ad2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ad4:	2562      	movs	r5, #98	@ 0x62
 8005ad6:	601c      	str	r4, [r3, #0]
 8005ad8:	e73a      	b.n	8005950 <__gethex+0xf8>
 8005ada:	1e71      	subs	r1, r6, #1
 8005adc:	4620      	mov	r0, r4
 8005ade:	f000 fede 	bl	800689e <__any_on>
 8005ae2:	2800      	cmp	r0, #0
 8005ae4:	d1ed      	bne.n	8005ac2 <__gethex+0x26a>
 8005ae6:	9801      	ldr	r0, [sp, #4]
 8005ae8:	4621      	mov	r1, r4
 8005aea:	f000 fa8f 	bl	800600c <_Bfree>
 8005aee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005af0:	2300      	movs	r3, #0
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	2550      	movs	r5, #80	@ 0x50
 8005af6:	e72b      	b.n	8005950 <__gethex+0xf8>
 8005af8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f3      	bne.n	8005ae6 <__gethex+0x28e>
 8005afe:	e7e0      	b.n	8005ac2 <__gethex+0x26a>
 8005b00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1dd      	bne.n	8005ac2 <__gethex+0x26a>
 8005b06:	e7ee      	b.n	8005ae6 <__gethex+0x28e>
 8005b08:	080076ac 	.word	0x080076ac
 8005b0c:	0800776f 	.word	0x0800776f
 8005b10:	08007780 	.word	0x08007780
 8005b14:	1e6f      	subs	r7, r5, #1
 8005b16:	f1b9 0f00 	cmp.w	r9, #0
 8005b1a:	d130      	bne.n	8005b7e <__gethex+0x326>
 8005b1c:	b127      	cbz	r7, 8005b28 <__gethex+0x2d0>
 8005b1e:	4639      	mov	r1, r7
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 febc 	bl	800689e <__any_on>
 8005b26:	4681      	mov	r9, r0
 8005b28:	117a      	asrs	r2, r7, #5
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005b30:	f007 071f 	and.w	r7, r7, #31
 8005b34:	40bb      	lsls	r3, r7
 8005b36:	4213      	tst	r3, r2
 8005b38:	4629      	mov	r1, r5
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	bf18      	it	ne
 8005b3e:	f049 0902 	orrne.w	r9, r9, #2
 8005b42:	f7ff fe21 	bl	8005788 <rshift>
 8005b46:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8005b4a:	1b76      	subs	r6, r6, r5
 8005b4c:	2502      	movs	r5, #2
 8005b4e:	f1b9 0f00 	cmp.w	r9, #0
 8005b52:	d047      	beq.n	8005be4 <__gethex+0x38c>
 8005b54:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d015      	beq.n	8005b88 <__gethex+0x330>
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	d017      	beq.n	8005b90 <__gethex+0x338>
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d109      	bne.n	8005b78 <__gethex+0x320>
 8005b64:	f019 0f02 	tst.w	r9, #2
 8005b68:	d006      	beq.n	8005b78 <__gethex+0x320>
 8005b6a:	f8da 3000 	ldr.w	r3, [sl]
 8005b6e:	ea49 0903 	orr.w	r9, r9, r3
 8005b72:	f019 0f01 	tst.w	r9, #1
 8005b76:	d10e      	bne.n	8005b96 <__gethex+0x33e>
 8005b78:	f045 0510 	orr.w	r5, r5, #16
 8005b7c:	e032      	b.n	8005be4 <__gethex+0x38c>
 8005b7e:	f04f 0901 	mov.w	r9, #1
 8005b82:	e7d1      	b.n	8005b28 <__gethex+0x2d0>
 8005b84:	2501      	movs	r5, #1
 8005b86:	e7e2      	b.n	8005b4e <__gethex+0x2f6>
 8005b88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b8a:	f1c3 0301 	rsb	r3, r3, #1
 8005b8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0f0      	beq.n	8005b78 <__gethex+0x320>
 8005b96:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005b9a:	f104 0314 	add.w	r3, r4, #20
 8005b9e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005ba2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005ba6:	f04f 0c00 	mov.w	ip, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bb0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8005bb4:	d01b      	beq.n	8005bee <__gethex+0x396>
 8005bb6:	3201      	adds	r2, #1
 8005bb8:	6002      	str	r2, [r0, #0]
 8005bba:	2d02      	cmp	r5, #2
 8005bbc:	f104 0314 	add.w	r3, r4, #20
 8005bc0:	d13c      	bne.n	8005c3c <__gethex+0x3e4>
 8005bc2:	f8d8 2000 	ldr.w	r2, [r8]
 8005bc6:	3a01      	subs	r2, #1
 8005bc8:	42b2      	cmp	r2, r6
 8005bca:	d109      	bne.n	8005be0 <__gethex+0x388>
 8005bcc:	1171      	asrs	r1, r6, #5
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005bd4:	f006 061f 	and.w	r6, r6, #31
 8005bd8:	fa02 f606 	lsl.w	r6, r2, r6
 8005bdc:	421e      	tst	r6, r3
 8005bde:	d13a      	bne.n	8005c56 <__gethex+0x3fe>
 8005be0:	f045 0520 	orr.w	r5, r5, #32
 8005be4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005be6:	601c      	str	r4, [r3, #0]
 8005be8:	9b02      	ldr	r3, [sp, #8]
 8005bea:	601f      	str	r7, [r3, #0]
 8005bec:	e6b0      	b.n	8005950 <__gethex+0xf8>
 8005bee:	4299      	cmp	r1, r3
 8005bf0:	f843 cc04 	str.w	ip, [r3, #-4]
 8005bf4:	d8d9      	bhi.n	8005baa <__gethex+0x352>
 8005bf6:	68a3      	ldr	r3, [r4, #8]
 8005bf8:	459b      	cmp	fp, r3
 8005bfa:	db17      	blt.n	8005c2c <__gethex+0x3d4>
 8005bfc:	6861      	ldr	r1, [r4, #4]
 8005bfe:	9801      	ldr	r0, [sp, #4]
 8005c00:	3101      	adds	r1, #1
 8005c02:	f000 f9c3 	bl	8005f8c <_Balloc>
 8005c06:	4681      	mov	r9, r0
 8005c08:	b918      	cbnz	r0, 8005c12 <__gethex+0x3ba>
 8005c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8005c74 <__gethex+0x41c>)
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	2184      	movs	r1, #132	@ 0x84
 8005c10:	e6c5      	b.n	800599e <__gethex+0x146>
 8005c12:	6922      	ldr	r2, [r4, #16]
 8005c14:	3202      	adds	r2, #2
 8005c16:	f104 010c 	add.w	r1, r4, #12
 8005c1a:	0092      	lsls	r2, r2, #2
 8005c1c:	300c      	adds	r0, #12
 8005c1e:	f7ff fd34 	bl	800568a <memcpy>
 8005c22:	4621      	mov	r1, r4
 8005c24:	9801      	ldr	r0, [sp, #4]
 8005c26:	f000 f9f1 	bl	800600c <_Bfree>
 8005c2a:	464c      	mov	r4, r9
 8005c2c:	6923      	ldr	r3, [r4, #16]
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c34:	6122      	str	r2, [r4, #16]
 8005c36:	2201      	movs	r2, #1
 8005c38:	615a      	str	r2, [r3, #20]
 8005c3a:	e7be      	b.n	8005bba <__gethex+0x362>
 8005c3c:	6922      	ldr	r2, [r4, #16]
 8005c3e:	455a      	cmp	r2, fp
 8005c40:	dd0b      	ble.n	8005c5a <__gethex+0x402>
 8005c42:	2101      	movs	r1, #1
 8005c44:	4620      	mov	r0, r4
 8005c46:	f7ff fd9f 	bl	8005788 <rshift>
 8005c4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c4e:	3701      	adds	r7, #1
 8005c50:	42bb      	cmp	r3, r7
 8005c52:	f6ff aee0 	blt.w	8005a16 <__gethex+0x1be>
 8005c56:	2501      	movs	r5, #1
 8005c58:	e7c2      	b.n	8005be0 <__gethex+0x388>
 8005c5a:	f016 061f 	ands.w	r6, r6, #31
 8005c5e:	d0fa      	beq.n	8005c56 <__gethex+0x3fe>
 8005c60:	4453      	add	r3, sl
 8005c62:	f1c6 0620 	rsb	r6, r6, #32
 8005c66:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005c6a:	f000 fa81 	bl	8006170 <__hi0bits>
 8005c6e:	42b0      	cmp	r0, r6
 8005c70:	dbe7      	blt.n	8005c42 <__gethex+0x3ea>
 8005c72:	e7f0      	b.n	8005c56 <__gethex+0x3fe>
 8005c74:	0800776f 	.word	0x0800776f

08005c78 <L_shift>:
 8005c78:	f1c2 0208 	rsb	r2, r2, #8
 8005c7c:	0092      	lsls	r2, r2, #2
 8005c7e:	b570      	push	{r4, r5, r6, lr}
 8005c80:	f1c2 0620 	rsb	r6, r2, #32
 8005c84:	6843      	ldr	r3, [r0, #4]
 8005c86:	6804      	ldr	r4, [r0, #0]
 8005c88:	fa03 f506 	lsl.w	r5, r3, r6
 8005c8c:	432c      	orrs	r4, r5
 8005c8e:	40d3      	lsrs	r3, r2
 8005c90:	6004      	str	r4, [r0, #0]
 8005c92:	f840 3f04 	str.w	r3, [r0, #4]!
 8005c96:	4288      	cmp	r0, r1
 8005c98:	d3f4      	bcc.n	8005c84 <L_shift+0xc>
 8005c9a:	bd70      	pop	{r4, r5, r6, pc}

08005c9c <__match>:
 8005c9c:	b530      	push	{r4, r5, lr}
 8005c9e:	6803      	ldr	r3, [r0, #0]
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ca6:	b914      	cbnz	r4, 8005cae <__match+0x12>
 8005ca8:	6003      	str	r3, [r0, #0]
 8005caa:	2001      	movs	r0, #1
 8005cac:	bd30      	pop	{r4, r5, pc}
 8005cae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cb2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8005cb6:	2d19      	cmp	r5, #25
 8005cb8:	bf98      	it	ls
 8005cba:	3220      	addls	r2, #32
 8005cbc:	42a2      	cmp	r2, r4
 8005cbe:	d0f0      	beq.n	8005ca2 <__match+0x6>
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	e7f3      	b.n	8005cac <__match+0x10>

08005cc4 <__hexnan>:
 8005cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc8:	680b      	ldr	r3, [r1, #0]
 8005cca:	6801      	ldr	r1, [r0, #0]
 8005ccc:	115e      	asrs	r6, r3, #5
 8005cce:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005cd2:	f013 031f 	ands.w	r3, r3, #31
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	bf18      	it	ne
 8005cda:	3604      	addne	r6, #4
 8005cdc:	2500      	movs	r5, #0
 8005cde:	1f37      	subs	r7, r6, #4
 8005ce0:	4682      	mov	sl, r0
 8005ce2:	4690      	mov	r8, r2
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	f846 5c04 	str.w	r5, [r6, #-4]
 8005cea:	46b9      	mov	r9, r7
 8005cec:	463c      	mov	r4, r7
 8005cee:	9502      	str	r5, [sp, #8]
 8005cf0:	46ab      	mov	fp, r5
 8005cf2:	784a      	ldrb	r2, [r1, #1]
 8005cf4:	1c4b      	adds	r3, r1, #1
 8005cf6:	9303      	str	r3, [sp, #12]
 8005cf8:	b342      	cbz	r2, 8005d4c <__hexnan+0x88>
 8005cfa:	4610      	mov	r0, r2
 8005cfc:	9105      	str	r1, [sp, #20]
 8005cfe:	9204      	str	r2, [sp, #16]
 8005d00:	f7ff fd94 	bl	800582c <__hexdig_fun>
 8005d04:	2800      	cmp	r0, #0
 8005d06:	d151      	bne.n	8005dac <__hexnan+0xe8>
 8005d08:	9a04      	ldr	r2, [sp, #16]
 8005d0a:	9905      	ldr	r1, [sp, #20]
 8005d0c:	2a20      	cmp	r2, #32
 8005d0e:	d818      	bhi.n	8005d42 <__hexnan+0x7e>
 8005d10:	9b02      	ldr	r3, [sp, #8]
 8005d12:	459b      	cmp	fp, r3
 8005d14:	dd13      	ble.n	8005d3e <__hexnan+0x7a>
 8005d16:	454c      	cmp	r4, r9
 8005d18:	d206      	bcs.n	8005d28 <__hexnan+0x64>
 8005d1a:	2d07      	cmp	r5, #7
 8005d1c:	dc04      	bgt.n	8005d28 <__hexnan+0x64>
 8005d1e:	462a      	mov	r2, r5
 8005d20:	4649      	mov	r1, r9
 8005d22:	4620      	mov	r0, r4
 8005d24:	f7ff ffa8 	bl	8005c78 <L_shift>
 8005d28:	4544      	cmp	r4, r8
 8005d2a:	d952      	bls.n	8005dd2 <__hexnan+0x10e>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f1a4 0904 	sub.w	r9, r4, #4
 8005d32:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d36:	f8cd b008 	str.w	fp, [sp, #8]
 8005d3a:	464c      	mov	r4, r9
 8005d3c:	461d      	mov	r5, r3
 8005d3e:	9903      	ldr	r1, [sp, #12]
 8005d40:	e7d7      	b.n	8005cf2 <__hexnan+0x2e>
 8005d42:	2a29      	cmp	r2, #41	@ 0x29
 8005d44:	d157      	bne.n	8005df6 <__hexnan+0x132>
 8005d46:	3102      	adds	r1, #2
 8005d48:	f8ca 1000 	str.w	r1, [sl]
 8005d4c:	f1bb 0f00 	cmp.w	fp, #0
 8005d50:	d051      	beq.n	8005df6 <__hexnan+0x132>
 8005d52:	454c      	cmp	r4, r9
 8005d54:	d206      	bcs.n	8005d64 <__hexnan+0xa0>
 8005d56:	2d07      	cmp	r5, #7
 8005d58:	dc04      	bgt.n	8005d64 <__hexnan+0xa0>
 8005d5a:	462a      	mov	r2, r5
 8005d5c:	4649      	mov	r1, r9
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f7ff ff8a 	bl	8005c78 <L_shift>
 8005d64:	4544      	cmp	r4, r8
 8005d66:	d936      	bls.n	8005dd6 <__hexnan+0x112>
 8005d68:	f1a8 0204 	sub.w	r2, r8, #4
 8005d6c:	4623      	mov	r3, r4
 8005d6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8005d72:	f842 1f04 	str.w	r1, [r2, #4]!
 8005d76:	429f      	cmp	r7, r3
 8005d78:	d2f9      	bcs.n	8005d6e <__hexnan+0xaa>
 8005d7a:	1b3b      	subs	r3, r7, r4
 8005d7c:	f023 0303 	bic.w	r3, r3, #3
 8005d80:	3304      	adds	r3, #4
 8005d82:	3401      	adds	r4, #1
 8005d84:	3e03      	subs	r6, #3
 8005d86:	42b4      	cmp	r4, r6
 8005d88:	bf88      	it	hi
 8005d8a:	2304      	movhi	r3, #4
 8005d8c:	4443      	add	r3, r8
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f843 2b04 	str.w	r2, [r3], #4
 8005d94:	429f      	cmp	r7, r3
 8005d96:	d2fb      	bcs.n	8005d90 <__hexnan+0xcc>
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	b91b      	cbnz	r3, 8005da4 <__hexnan+0xe0>
 8005d9c:	4547      	cmp	r7, r8
 8005d9e:	d128      	bne.n	8005df2 <__hexnan+0x12e>
 8005da0:	2301      	movs	r3, #1
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	2005      	movs	r0, #5
 8005da6:	b007      	add	sp, #28
 8005da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dac:	3501      	adds	r5, #1
 8005dae:	2d08      	cmp	r5, #8
 8005db0:	f10b 0b01 	add.w	fp, fp, #1
 8005db4:	dd06      	ble.n	8005dc4 <__hexnan+0x100>
 8005db6:	4544      	cmp	r4, r8
 8005db8:	d9c1      	bls.n	8005d3e <__hexnan+0x7a>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f844 3c04 	str.w	r3, [r4, #-4]
 8005dc0:	2501      	movs	r5, #1
 8005dc2:	3c04      	subs	r4, #4
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	f000 000f 	and.w	r0, r0, #15
 8005dca:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005dce:	6020      	str	r0, [r4, #0]
 8005dd0:	e7b5      	b.n	8005d3e <__hexnan+0x7a>
 8005dd2:	2508      	movs	r5, #8
 8005dd4:	e7b3      	b.n	8005d3e <__hexnan+0x7a>
 8005dd6:	9b01      	ldr	r3, [sp, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0dd      	beq.n	8005d98 <__hexnan+0xd4>
 8005ddc:	f1c3 0320 	rsb	r3, r3, #32
 8005de0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005de4:	40da      	lsrs	r2, r3
 8005de6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005dea:	4013      	ands	r3, r2
 8005dec:	f846 3c04 	str.w	r3, [r6, #-4]
 8005df0:	e7d2      	b.n	8005d98 <__hexnan+0xd4>
 8005df2:	3f04      	subs	r7, #4
 8005df4:	e7d0      	b.n	8005d98 <__hexnan+0xd4>
 8005df6:	2004      	movs	r0, #4
 8005df8:	e7d5      	b.n	8005da6 <__hexnan+0xe2>
	...

08005dfc <malloc>:
 8005dfc:	4b02      	ldr	r3, [pc, #8]	@ (8005e08 <malloc+0xc>)
 8005dfe:	4601      	mov	r1, r0
 8005e00:	6818      	ldr	r0, [r3, #0]
 8005e02:	f000 b825 	b.w	8005e50 <_malloc_r>
 8005e06:	bf00      	nop
 8005e08:	20000184 	.word	0x20000184

08005e0c <sbrk_aligned>:
 8005e0c:	b570      	push	{r4, r5, r6, lr}
 8005e0e:	4e0f      	ldr	r6, [pc, #60]	@ (8005e4c <sbrk_aligned+0x40>)
 8005e10:	460c      	mov	r4, r1
 8005e12:	6831      	ldr	r1, [r6, #0]
 8005e14:	4605      	mov	r5, r0
 8005e16:	b911      	cbnz	r1, 8005e1e <sbrk_aligned+0x12>
 8005e18:	f001 f92a 	bl	8007070 <_sbrk_r>
 8005e1c:	6030      	str	r0, [r6, #0]
 8005e1e:	4621      	mov	r1, r4
 8005e20:	4628      	mov	r0, r5
 8005e22:	f001 f925 	bl	8007070 <_sbrk_r>
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	d103      	bne.n	8005e32 <sbrk_aligned+0x26>
 8005e2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005e2e:	4620      	mov	r0, r4
 8005e30:	bd70      	pop	{r4, r5, r6, pc}
 8005e32:	1cc4      	adds	r4, r0, #3
 8005e34:	f024 0403 	bic.w	r4, r4, #3
 8005e38:	42a0      	cmp	r0, r4
 8005e3a:	d0f8      	beq.n	8005e2e <sbrk_aligned+0x22>
 8005e3c:	1a21      	subs	r1, r4, r0
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f001 f916 	bl	8007070 <_sbrk_r>
 8005e44:	3001      	adds	r0, #1
 8005e46:	d1f2      	bne.n	8005e2e <sbrk_aligned+0x22>
 8005e48:	e7ef      	b.n	8005e2a <sbrk_aligned+0x1e>
 8005e4a:	bf00      	nop
 8005e4c:	20000478 	.word	0x20000478

08005e50 <_malloc_r>:
 8005e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e54:	1ccd      	adds	r5, r1, #3
 8005e56:	f025 0503 	bic.w	r5, r5, #3
 8005e5a:	3508      	adds	r5, #8
 8005e5c:	2d0c      	cmp	r5, #12
 8005e5e:	bf38      	it	cc
 8005e60:	250c      	movcc	r5, #12
 8005e62:	2d00      	cmp	r5, #0
 8005e64:	4606      	mov	r6, r0
 8005e66:	db01      	blt.n	8005e6c <_malloc_r+0x1c>
 8005e68:	42a9      	cmp	r1, r5
 8005e6a:	d904      	bls.n	8005e76 <_malloc_r+0x26>
 8005e6c:	230c      	movs	r3, #12
 8005e6e:	6033      	str	r3, [r6, #0]
 8005e70:	2000      	movs	r0, #0
 8005e72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005f4c <_malloc_r+0xfc>
 8005e7a:	f000 f87b 	bl	8005f74 <__malloc_lock>
 8005e7e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e82:	461c      	mov	r4, r3
 8005e84:	bb44      	cbnz	r4, 8005ed8 <_malloc_r+0x88>
 8005e86:	4629      	mov	r1, r5
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f7ff ffbf 	bl	8005e0c <sbrk_aligned>
 8005e8e:	1c43      	adds	r3, r0, #1
 8005e90:	4604      	mov	r4, r0
 8005e92:	d158      	bne.n	8005f46 <_malloc_r+0xf6>
 8005e94:	f8d8 4000 	ldr.w	r4, [r8]
 8005e98:	4627      	mov	r7, r4
 8005e9a:	2f00      	cmp	r7, #0
 8005e9c:	d143      	bne.n	8005f26 <_malloc_r+0xd6>
 8005e9e:	2c00      	cmp	r4, #0
 8005ea0:	d04b      	beq.n	8005f3a <_malloc_r+0xea>
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	4639      	mov	r1, r7
 8005ea6:	4630      	mov	r0, r6
 8005ea8:	eb04 0903 	add.w	r9, r4, r3
 8005eac:	f001 f8e0 	bl	8007070 <_sbrk_r>
 8005eb0:	4581      	cmp	r9, r0
 8005eb2:	d142      	bne.n	8005f3a <_malloc_r+0xea>
 8005eb4:	6821      	ldr	r1, [r4, #0]
 8005eb6:	1a6d      	subs	r5, r5, r1
 8005eb8:	4629      	mov	r1, r5
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f7ff ffa6 	bl	8005e0c <sbrk_aligned>
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d03a      	beq.n	8005f3a <_malloc_r+0xea>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	442b      	add	r3, r5
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	f8d8 3000 	ldr.w	r3, [r8]
 8005ece:	685a      	ldr	r2, [r3, #4]
 8005ed0:	bb62      	cbnz	r2, 8005f2c <_malloc_r+0xdc>
 8005ed2:	f8c8 7000 	str.w	r7, [r8]
 8005ed6:	e00f      	b.n	8005ef8 <_malloc_r+0xa8>
 8005ed8:	6822      	ldr	r2, [r4, #0]
 8005eda:	1b52      	subs	r2, r2, r5
 8005edc:	d420      	bmi.n	8005f20 <_malloc_r+0xd0>
 8005ede:	2a0b      	cmp	r2, #11
 8005ee0:	d917      	bls.n	8005f12 <_malloc_r+0xc2>
 8005ee2:	1961      	adds	r1, r4, r5
 8005ee4:	42a3      	cmp	r3, r4
 8005ee6:	6025      	str	r5, [r4, #0]
 8005ee8:	bf18      	it	ne
 8005eea:	6059      	strne	r1, [r3, #4]
 8005eec:	6863      	ldr	r3, [r4, #4]
 8005eee:	bf08      	it	eq
 8005ef0:	f8c8 1000 	streq.w	r1, [r8]
 8005ef4:	5162      	str	r2, [r4, r5]
 8005ef6:	604b      	str	r3, [r1, #4]
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f000 f841 	bl	8005f80 <__malloc_unlock>
 8005efe:	f104 000b 	add.w	r0, r4, #11
 8005f02:	1d23      	adds	r3, r4, #4
 8005f04:	f020 0007 	bic.w	r0, r0, #7
 8005f08:	1ac2      	subs	r2, r0, r3
 8005f0a:	bf1c      	itt	ne
 8005f0c:	1a1b      	subne	r3, r3, r0
 8005f0e:	50a3      	strne	r3, [r4, r2]
 8005f10:	e7af      	b.n	8005e72 <_malloc_r+0x22>
 8005f12:	6862      	ldr	r2, [r4, #4]
 8005f14:	42a3      	cmp	r3, r4
 8005f16:	bf0c      	ite	eq
 8005f18:	f8c8 2000 	streq.w	r2, [r8]
 8005f1c:	605a      	strne	r2, [r3, #4]
 8005f1e:	e7eb      	b.n	8005ef8 <_malloc_r+0xa8>
 8005f20:	4623      	mov	r3, r4
 8005f22:	6864      	ldr	r4, [r4, #4]
 8005f24:	e7ae      	b.n	8005e84 <_malloc_r+0x34>
 8005f26:	463c      	mov	r4, r7
 8005f28:	687f      	ldr	r7, [r7, #4]
 8005f2a:	e7b6      	b.n	8005e9a <_malloc_r+0x4a>
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	42a3      	cmp	r3, r4
 8005f32:	d1fb      	bne.n	8005f2c <_malloc_r+0xdc>
 8005f34:	2300      	movs	r3, #0
 8005f36:	6053      	str	r3, [r2, #4]
 8005f38:	e7de      	b.n	8005ef8 <_malloc_r+0xa8>
 8005f3a:	230c      	movs	r3, #12
 8005f3c:	6033      	str	r3, [r6, #0]
 8005f3e:	4630      	mov	r0, r6
 8005f40:	f000 f81e 	bl	8005f80 <__malloc_unlock>
 8005f44:	e794      	b.n	8005e70 <_malloc_r+0x20>
 8005f46:	6005      	str	r5, [r0, #0]
 8005f48:	e7d6      	b.n	8005ef8 <_malloc_r+0xa8>
 8005f4a:	bf00      	nop
 8005f4c:	2000047c 	.word	0x2000047c

08005f50 <__ascii_mbtowc>:
 8005f50:	b082      	sub	sp, #8
 8005f52:	b901      	cbnz	r1, 8005f56 <__ascii_mbtowc+0x6>
 8005f54:	a901      	add	r1, sp, #4
 8005f56:	b142      	cbz	r2, 8005f6a <__ascii_mbtowc+0x1a>
 8005f58:	b14b      	cbz	r3, 8005f6e <__ascii_mbtowc+0x1e>
 8005f5a:	7813      	ldrb	r3, [r2, #0]
 8005f5c:	600b      	str	r3, [r1, #0]
 8005f5e:	7812      	ldrb	r2, [r2, #0]
 8005f60:	1e10      	subs	r0, r2, #0
 8005f62:	bf18      	it	ne
 8005f64:	2001      	movne	r0, #1
 8005f66:	b002      	add	sp, #8
 8005f68:	4770      	bx	lr
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	e7fb      	b.n	8005f66 <__ascii_mbtowc+0x16>
 8005f6e:	f06f 0001 	mvn.w	r0, #1
 8005f72:	e7f8      	b.n	8005f66 <__ascii_mbtowc+0x16>

08005f74 <__malloc_lock>:
 8005f74:	4801      	ldr	r0, [pc, #4]	@ (8005f7c <__malloc_lock+0x8>)
 8005f76:	f7ff bb86 	b.w	8005686 <__retarget_lock_acquire_recursive>
 8005f7a:	bf00      	nop
 8005f7c:	20000474 	.word	0x20000474

08005f80 <__malloc_unlock>:
 8005f80:	4801      	ldr	r0, [pc, #4]	@ (8005f88 <__malloc_unlock+0x8>)
 8005f82:	f7ff bb81 	b.w	8005688 <__retarget_lock_release_recursive>
 8005f86:	bf00      	nop
 8005f88:	20000474 	.word	0x20000474

08005f8c <_Balloc>:
 8005f8c:	b570      	push	{r4, r5, r6, lr}
 8005f8e:	69c6      	ldr	r6, [r0, #28]
 8005f90:	4604      	mov	r4, r0
 8005f92:	460d      	mov	r5, r1
 8005f94:	b976      	cbnz	r6, 8005fb4 <_Balloc+0x28>
 8005f96:	2010      	movs	r0, #16
 8005f98:	f7ff ff30 	bl	8005dfc <malloc>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	61e0      	str	r0, [r4, #28]
 8005fa0:	b920      	cbnz	r0, 8005fac <_Balloc+0x20>
 8005fa2:	4b18      	ldr	r3, [pc, #96]	@ (8006004 <_Balloc+0x78>)
 8005fa4:	4818      	ldr	r0, [pc, #96]	@ (8006008 <_Balloc+0x7c>)
 8005fa6:	216b      	movs	r1, #107	@ 0x6b
 8005fa8:	f7ff fb86 	bl	80056b8 <__assert_func>
 8005fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005fb0:	6006      	str	r6, [r0, #0]
 8005fb2:	60c6      	str	r6, [r0, #12]
 8005fb4:	69e6      	ldr	r6, [r4, #28]
 8005fb6:	68f3      	ldr	r3, [r6, #12]
 8005fb8:	b183      	cbz	r3, 8005fdc <_Balloc+0x50>
 8005fba:	69e3      	ldr	r3, [r4, #28]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005fc2:	b9b8      	cbnz	r0, 8005ff4 <_Balloc+0x68>
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	fa01 f605 	lsl.w	r6, r1, r5
 8005fca:	1d72      	adds	r2, r6, #5
 8005fcc:	0092      	lsls	r2, r2, #2
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f001 f865 	bl	800709e <_calloc_r>
 8005fd4:	b160      	cbz	r0, 8005ff0 <_Balloc+0x64>
 8005fd6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005fda:	e00e      	b.n	8005ffa <_Balloc+0x6e>
 8005fdc:	2221      	movs	r2, #33	@ 0x21
 8005fde:	2104      	movs	r1, #4
 8005fe0:	4620      	mov	r0, r4
 8005fe2:	f001 f85c 	bl	800709e <_calloc_r>
 8005fe6:	69e3      	ldr	r3, [r4, #28]
 8005fe8:	60f0      	str	r0, [r6, #12]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e4      	bne.n	8005fba <_Balloc+0x2e>
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	bd70      	pop	{r4, r5, r6, pc}
 8005ff4:	6802      	ldr	r2, [r0, #0]
 8005ff6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006000:	e7f7      	b.n	8005ff2 <_Balloc+0x66>
 8006002:	bf00      	nop
 8006004:	080076ba 	.word	0x080076ba
 8006008:	080077e0 	.word	0x080077e0

0800600c <_Bfree>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	69c6      	ldr	r6, [r0, #28]
 8006010:	4605      	mov	r5, r0
 8006012:	460c      	mov	r4, r1
 8006014:	b976      	cbnz	r6, 8006034 <_Bfree+0x28>
 8006016:	2010      	movs	r0, #16
 8006018:	f7ff fef0 	bl	8005dfc <malloc>
 800601c:	4602      	mov	r2, r0
 800601e:	61e8      	str	r0, [r5, #28]
 8006020:	b920      	cbnz	r0, 800602c <_Bfree+0x20>
 8006022:	4b09      	ldr	r3, [pc, #36]	@ (8006048 <_Bfree+0x3c>)
 8006024:	4809      	ldr	r0, [pc, #36]	@ (800604c <_Bfree+0x40>)
 8006026:	218f      	movs	r1, #143	@ 0x8f
 8006028:	f7ff fb46 	bl	80056b8 <__assert_func>
 800602c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006030:	6006      	str	r6, [r0, #0]
 8006032:	60c6      	str	r6, [r0, #12]
 8006034:	b13c      	cbz	r4, 8006046 <_Bfree+0x3a>
 8006036:	69eb      	ldr	r3, [r5, #28]
 8006038:	6862      	ldr	r2, [r4, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006040:	6021      	str	r1, [r4, #0]
 8006042:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006046:	bd70      	pop	{r4, r5, r6, pc}
 8006048:	080076ba 	.word	0x080076ba
 800604c:	080077e0 	.word	0x080077e0

08006050 <__multadd>:
 8006050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006054:	690d      	ldr	r5, [r1, #16]
 8006056:	4607      	mov	r7, r0
 8006058:	460c      	mov	r4, r1
 800605a:	461e      	mov	r6, r3
 800605c:	f101 0c14 	add.w	ip, r1, #20
 8006060:	2000      	movs	r0, #0
 8006062:	f8dc 3000 	ldr.w	r3, [ip]
 8006066:	b299      	uxth	r1, r3
 8006068:	fb02 6101 	mla	r1, r2, r1, r6
 800606c:	0c1e      	lsrs	r6, r3, #16
 800606e:	0c0b      	lsrs	r3, r1, #16
 8006070:	fb02 3306 	mla	r3, r2, r6, r3
 8006074:	b289      	uxth	r1, r1
 8006076:	3001      	adds	r0, #1
 8006078:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800607c:	4285      	cmp	r5, r0
 800607e:	f84c 1b04 	str.w	r1, [ip], #4
 8006082:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006086:	dcec      	bgt.n	8006062 <__multadd+0x12>
 8006088:	b30e      	cbz	r6, 80060ce <__multadd+0x7e>
 800608a:	68a3      	ldr	r3, [r4, #8]
 800608c:	42ab      	cmp	r3, r5
 800608e:	dc19      	bgt.n	80060c4 <__multadd+0x74>
 8006090:	6861      	ldr	r1, [r4, #4]
 8006092:	4638      	mov	r0, r7
 8006094:	3101      	adds	r1, #1
 8006096:	f7ff ff79 	bl	8005f8c <_Balloc>
 800609a:	4680      	mov	r8, r0
 800609c:	b928      	cbnz	r0, 80060aa <__multadd+0x5a>
 800609e:	4602      	mov	r2, r0
 80060a0:	4b0c      	ldr	r3, [pc, #48]	@ (80060d4 <__multadd+0x84>)
 80060a2:	480d      	ldr	r0, [pc, #52]	@ (80060d8 <__multadd+0x88>)
 80060a4:	21ba      	movs	r1, #186	@ 0xba
 80060a6:	f7ff fb07 	bl	80056b8 <__assert_func>
 80060aa:	6922      	ldr	r2, [r4, #16]
 80060ac:	3202      	adds	r2, #2
 80060ae:	f104 010c 	add.w	r1, r4, #12
 80060b2:	0092      	lsls	r2, r2, #2
 80060b4:	300c      	adds	r0, #12
 80060b6:	f7ff fae8 	bl	800568a <memcpy>
 80060ba:	4621      	mov	r1, r4
 80060bc:	4638      	mov	r0, r7
 80060be:	f7ff ffa5 	bl	800600c <_Bfree>
 80060c2:	4644      	mov	r4, r8
 80060c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80060c8:	3501      	adds	r5, #1
 80060ca:	615e      	str	r6, [r3, #20]
 80060cc:	6125      	str	r5, [r4, #16]
 80060ce:	4620      	mov	r0, r4
 80060d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060d4:	0800776f 	.word	0x0800776f
 80060d8:	080077e0 	.word	0x080077e0

080060dc <__s2b>:
 80060dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e0:	460c      	mov	r4, r1
 80060e2:	4615      	mov	r5, r2
 80060e4:	461f      	mov	r7, r3
 80060e6:	2209      	movs	r2, #9
 80060e8:	3308      	adds	r3, #8
 80060ea:	4606      	mov	r6, r0
 80060ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80060f0:	2100      	movs	r1, #0
 80060f2:	2201      	movs	r2, #1
 80060f4:	429a      	cmp	r2, r3
 80060f6:	db09      	blt.n	800610c <__s2b+0x30>
 80060f8:	4630      	mov	r0, r6
 80060fa:	f7ff ff47 	bl	8005f8c <_Balloc>
 80060fe:	b940      	cbnz	r0, 8006112 <__s2b+0x36>
 8006100:	4602      	mov	r2, r0
 8006102:	4b19      	ldr	r3, [pc, #100]	@ (8006168 <__s2b+0x8c>)
 8006104:	4819      	ldr	r0, [pc, #100]	@ (800616c <__s2b+0x90>)
 8006106:	21d3      	movs	r1, #211	@ 0xd3
 8006108:	f7ff fad6 	bl	80056b8 <__assert_func>
 800610c:	0052      	lsls	r2, r2, #1
 800610e:	3101      	adds	r1, #1
 8006110:	e7f0      	b.n	80060f4 <__s2b+0x18>
 8006112:	9b08      	ldr	r3, [sp, #32]
 8006114:	6143      	str	r3, [r0, #20]
 8006116:	2d09      	cmp	r5, #9
 8006118:	f04f 0301 	mov.w	r3, #1
 800611c:	6103      	str	r3, [r0, #16]
 800611e:	dd16      	ble.n	800614e <__s2b+0x72>
 8006120:	f104 0909 	add.w	r9, r4, #9
 8006124:	46c8      	mov	r8, r9
 8006126:	442c      	add	r4, r5
 8006128:	f818 3b01 	ldrb.w	r3, [r8], #1
 800612c:	4601      	mov	r1, r0
 800612e:	3b30      	subs	r3, #48	@ 0x30
 8006130:	220a      	movs	r2, #10
 8006132:	4630      	mov	r0, r6
 8006134:	f7ff ff8c 	bl	8006050 <__multadd>
 8006138:	45a0      	cmp	r8, r4
 800613a:	d1f5      	bne.n	8006128 <__s2b+0x4c>
 800613c:	f1a5 0408 	sub.w	r4, r5, #8
 8006140:	444c      	add	r4, r9
 8006142:	1b2d      	subs	r5, r5, r4
 8006144:	1963      	adds	r3, r4, r5
 8006146:	42bb      	cmp	r3, r7
 8006148:	db04      	blt.n	8006154 <__s2b+0x78>
 800614a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800614e:	340a      	adds	r4, #10
 8006150:	2509      	movs	r5, #9
 8006152:	e7f6      	b.n	8006142 <__s2b+0x66>
 8006154:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006158:	4601      	mov	r1, r0
 800615a:	3b30      	subs	r3, #48	@ 0x30
 800615c:	220a      	movs	r2, #10
 800615e:	4630      	mov	r0, r6
 8006160:	f7ff ff76 	bl	8006050 <__multadd>
 8006164:	e7ee      	b.n	8006144 <__s2b+0x68>
 8006166:	bf00      	nop
 8006168:	0800776f 	.word	0x0800776f
 800616c:	080077e0 	.word	0x080077e0

08006170 <__hi0bits>:
 8006170:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006174:	4603      	mov	r3, r0
 8006176:	bf36      	itet	cc
 8006178:	0403      	lslcc	r3, r0, #16
 800617a:	2000      	movcs	r0, #0
 800617c:	2010      	movcc	r0, #16
 800617e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006182:	bf3c      	itt	cc
 8006184:	021b      	lslcc	r3, r3, #8
 8006186:	3008      	addcc	r0, #8
 8006188:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800618c:	bf3c      	itt	cc
 800618e:	011b      	lslcc	r3, r3, #4
 8006190:	3004      	addcc	r0, #4
 8006192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006196:	bf3c      	itt	cc
 8006198:	009b      	lslcc	r3, r3, #2
 800619a:	3002      	addcc	r0, #2
 800619c:	2b00      	cmp	r3, #0
 800619e:	db05      	blt.n	80061ac <__hi0bits+0x3c>
 80061a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80061a4:	f100 0001 	add.w	r0, r0, #1
 80061a8:	bf08      	it	eq
 80061aa:	2020      	moveq	r0, #32
 80061ac:	4770      	bx	lr

080061ae <__lo0bits>:
 80061ae:	6803      	ldr	r3, [r0, #0]
 80061b0:	4602      	mov	r2, r0
 80061b2:	f013 0007 	ands.w	r0, r3, #7
 80061b6:	d00b      	beq.n	80061d0 <__lo0bits+0x22>
 80061b8:	07d9      	lsls	r1, r3, #31
 80061ba:	d421      	bmi.n	8006200 <__lo0bits+0x52>
 80061bc:	0798      	lsls	r0, r3, #30
 80061be:	bf49      	itett	mi
 80061c0:	085b      	lsrmi	r3, r3, #1
 80061c2:	089b      	lsrpl	r3, r3, #2
 80061c4:	2001      	movmi	r0, #1
 80061c6:	6013      	strmi	r3, [r2, #0]
 80061c8:	bf5c      	itt	pl
 80061ca:	6013      	strpl	r3, [r2, #0]
 80061cc:	2002      	movpl	r0, #2
 80061ce:	4770      	bx	lr
 80061d0:	b299      	uxth	r1, r3
 80061d2:	b909      	cbnz	r1, 80061d8 <__lo0bits+0x2a>
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	2010      	movs	r0, #16
 80061d8:	b2d9      	uxtb	r1, r3
 80061da:	b909      	cbnz	r1, 80061e0 <__lo0bits+0x32>
 80061dc:	3008      	adds	r0, #8
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	0719      	lsls	r1, r3, #28
 80061e2:	bf04      	itt	eq
 80061e4:	091b      	lsreq	r3, r3, #4
 80061e6:	3004      	addeq	r0, #4
 80061e8:	0799      	lsls	r1, r3, #30
 80061ea:	bf04      	itt	eq
 80061ec:	089b      	lsreq	r3, r3, #2
 80061ee:	3002      	addeq	r0, #2
 80061f0:	07d9      	lsls	r1, r3, #31
 80061f2:	d403      	bmi.n	80061fc <__lo0bits+0x4e>
 80061f4:	085b      	lsrs	r3, r3, #1
 80061f6:	f100 0001 	add.w	r0, r0, #1
 80061fa:	d003      	beq.n	8006204 <__lo0bits+0x56>
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	4770      	bx	lr
 8006200:	2000      	movs	r0, #0
 8006202:	4770      	bx	lr
 8006204:	2020      	movs	r0, #32
 8006206:	4770      	bx	lr

08006208 <__i2b>:
 8006208:	b510      	push	{r4, lr}
 800620a:	460c      	mov	r4, r1
 800620c:	2101      	movs	r1, #1
 800620e:	f7ff febd 	bl	8005f8c <_Balloc>
 8006212:	4602      	mov	r2, r0
 8006214:	b928      	cbnz	r0, 8006222 <__i2b+0x1a>
 8006216:	4b05      	ldr	r3, [pc, #20]	@ (800622c <__i2b+0x24>)
 8006218:	4805      	ldr	r0, [pc, #20]	@ (8006230 <__i2b+0x28>)
 800621a:	f240 1145 	movw	r1, #325	@ 0x145
 800621e:	f7ff fa4b 	bl	80056b8 <__assert_func>
 8006222:	2301      	movs	r3, #1
 8006224:	6144      	str	r4, [r0, #20]
 8006226:	6103      	str	r3, [r0, #16]
 8006228:	bd10      	pop	{r4, pc}
 800622a:	bf00      	nop
 800622c:	0800776f 	.word	0x0800776f
 8006230:	080077e0 	.word	0x080077e0

08006234 <__multiply>:
 8006234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006238:	4617      	mov	r7, r2
 800623a:	690a      	ldr	r2, [r1, #16]
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	429a      	cmp	r2, r3
 8006240:	bfa8      	it	ge
 8006242:	463b      	movge	r3, r7
 8006244:	4689      	mov	r9, r1
 8006246:	bfa4      	itt	ge
 8006248:	460f      	movge	r7, r1
 800624a:	4699      	movge	r9, r3
 800624c:	693d      	ldr	r5, [r7, #16]
 800624e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	6879      	ldr	r1, [r7, #4]
 8006256:	eb05 060a 	add.w	r6, r5, sl
 800625a:	42b3      	cmp	r3, r6
 800625c:	b085      	sub	sp, #20
 800625e:	bfb8      	it	lt
 8006260:	3101      	addlt	r1, #1
 8006262:	f7ff fe93 	bl	8005f8c <_Balloc>
 8006266:	b930      	cbnz	r0, 8006276 <__multiply+0x42>
 8006268:	4602      	mov	r2, r0
 800626a:	4b41      	ldr	r3, [pc, #260]	@ (8006370 <__multiply+0x13c>)
 800626c:	4841      	ldr	r0, [pc, #260]	@ (8006374 <__multiply+0x140>)
 800626e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006272:	f7ff fa21 	bl	80056b8 <__assert_func>
 8006276:	f100 0414 	add.w	r4, r0, #20
 800627a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800627e:	4623      	mov	r3, r4
 8006280:	2200      	movs	r2, #0
 8006282:	4573      	cmp	r3, lr
 8006284:	d320      	bcc.n	80062c8 <__multiply+0x94>
 8006286:	f107 0814 	add.w	r8, r7, #20
 800628a:	f109 0114 	add.w	r1, r9, #20
 800628e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006292:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006296:	9302      	str	r3, [sp, #8]
 8006298:	1beb      	subs	r3, r5, r7
 800629a:	3b15      	subs	r3, #21
 800629c:	f023 0303 	bic.w	r3, r3, #3
 80062a0:	3304      	adds	r3, #4
 80062a2:	3715      	adds	r7, #21
 80062a4:	42bd      	cmp	r5, r7
 80062a6:	bf38      	it	cc
 80062a8:	2304      	movcc	r3, #4
 80062aa:	9301      	str	r3, [sp, #4]
 80062ac:	9b02      	ldr	r3, [sp, #8]
 80062ae:	9103      	str	r1, [sp, #12]
 80062b0:	428b      	cmp	r3, r1
 80062b2:	d80c      	bhi.n	80062ce <__multiply+0x9a>
 80062b4:	2e00      	cmp	r6, #0
 80062b6:	dd03      	ble.n	80062c0 <__multiply+0x8c>
 80062b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d055      	beq.n	800636c <__multiply+0x138>
 80062c0:	6106      	str	r6, [r0, #16]
 80062c2:	b005      	add	sp, #20
 80062c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c8:	f843 2b04 	str.w	r2, [r3], #4
 80062cc:	e7d9      	b.n	8006282 <__multiply+0x4e>
 80062ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80062d2:	f1ba 0f00 	cmp.w	sl, #0
 80062d6:	d01f      	beq.n	8006318 <__multiply+0xe4>
 80062d8:	46c4      	mov	ip, r8
 80062da:	46a1      	mov	r9, r4
 80062dc:	2700      	movs	r7, #0
 80062de:	f85c 2b04 	ldr.w	r2, [ip], #4
 80062e2:	f8d9 3000 	ldr.w	r3, [r9]
 80062e6:	fa1f fb82 	uxth.w	fp, r2
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80062f0:	443b      	add	r3, r7
 80062f2:	f8d9 7000 	ldr.w	r7, [r9]
 80062f6:	0c12      	lsrs	r2, r2, #16
 80062f8:	0c3f      	lsrs	r7, r7, #16
 80062fa:	fb0a 7202 	mla	r2, sl, r2, r7
 80062fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006302:	b29b      	uxth	r3, r3
 8006304:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006308:	4565      	cmp	r5, ip
 800630a:	f849 3b04 	str.w	r3, [r9], #4
 800630e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006312:	d8e4      	bhi.n	80062de <__multiply+0xaa>
 8006314:	9b01      	ldr	r3, [sp, #4]
 8006316:	50e7      	str	r7, [r4, r3]
 8006318:	9b03      	ldr	r3, [sp, #12]
 800631a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800631e:	3104      	adds	r1, #4
 8006320:	f1b9 0f00 	cmp.w	r9, #0
 8006324:	d020      	beq.n	8006368 <__multiply+0x134>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	4647      	mov	r7, r8
 800632a:	46a4      	mov	ip, r4
 800632c:	f04f 0a00 	mov.w	sl, #0
 8006330:	f8b7 b000 	ldrh.w	fp, [r7]
 8006334:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006338:	fb09 220b 	mla	r2, r9, fp, r2
 800633c:	4452      	add	r2, sl
 800633e:	b29b      	uxth	r3, r3
 8006340:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006344:	f84c 3b04 	str.w	r3, [ip], #4
 8006348:	f857 3b04 	ldr.w	r3, [r7], #4
 800634c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006350:	f8bc 3000 	ldrh.w	r3, [ip]
 8006354:	fb09 330a 	mla	r3, r9, sl, r3
 8006358:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800635c:	42bd      	cmp	r5, r7
 800635e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006362:	d8e5      	bhi.n	8006330 <__multiply+0xfc>
 8006364:	9a01      	ldr	r2, [sp, #4]
 8006366:	50a3      	str	r3, [r4, r2]
 8006368:	3404      	adds	r4, #4
 800636a:	e79f      	b.n	80062ac <__multiply+0x78>
 800636c:	3e01      	subs	r6, #1
 800636e:	e7a1      	b.n	80062b4 <__multiply+0x80>
 8006370:	0800776f 	.word	0x0800776f
 8006374:	080077e0 	.word	0x080077e0

08006378 <__pow5mult>:
 8006378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800637c:	4615      	mov	r5, r2
 800637e:	f012 0203 	ands.w	r2, r2, #3
 8006382:	4607      	mov	r7, r0
 8006384:	460e      	mov	r6, r1
 8006386:	d007      	beq.n	8006398 <__pow5mult+0x20>
 8006388:	4c25      	ldr	r4, [pc, #148]	@ (8006420 <__pow5mult+0xa8>)
 800638a:	3a01      	subs	r2, #1
 800638c:	2300      	movs	r3, #0
 800638e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006392:	f7ff fe5d 	bl	8006050 <__multadd>
 8006396:	4606      	mov	r6, r0
 8006398:	10ad      	asrs	r5, r5, #2
 800639a:	d03d      	beq.n	8006418 <__pow5mult+0xa0>
 800639c:	69fc      	ldr	r4, [r7, #28]
 800639e:	b97c      	cbnz	r4, 80063c0 <__pow5mult+0x48>
 80063a0:	2010      	movs	r0, #16
 80063a2:	f7ff fd2b 	bl	8005dfc <malloc>
 80063a6:	4602      	mov	r2, r0
 80063a8:	61f8      	str	r0, [r7, #28]
 80063aa:	b928      	cbnz	r0, 80063b8 <__pow5mult+0x40>
 80063ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006424 <__pow5mult+0xac>)
 80063ae:	481e      	ldr	r0, [pc, #120]	@ (8006428 <__pow5mult+0xb0>)
 80063b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80063b4:	f7ff f980 	bl	80056b8 <__assert_func>
 80063b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063bc:	6004      	str	r4, [r0, #0]
 80063be:	60c4      	str	r4, [r0, #12]
 80063c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80063c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063c8:	b94c      	cbnz	r4, 80063de <__pow5mult+0x66>
 80063ca:	f240 2171 	movw	r1, #625	@ 0x271
 80063ce:	4638      	mov	r0, r7
 80063d0:	f7ff ff1a 	bl	8006208 <__i2b>
 80063d4:	2300      	movs	r3, #0
 80063d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80063da:	4604      	mov	r4, r0
 80063dc:	6003      	str	r3, [r0, #0]
 80063de:	f04f 0900 	mov.w	r9, #0
 80063e2:	07eb      	lsls	r3, r5, #31
 80063e4:	d50a      	bpl.n	80063fc <__pow5mult+0x84>
 80063e6:	4631      	mov	r1, r6
 80063e8:	4622      	mov	r2, r4
 80063ea:	4638      	mov	r0, r7
 80063ec:	f7ff ff22 	bl	8006234 <__multiply>
 80063f0:	4631      	mov	r1, r6
 80063f2:	4680      	mov	r8, r0
 80063f4:	4638      	mov	r0, r7
 80063f6:	f7ff fe09 	bl	800600c <_Bfree>
 80063fa:	4646      	mov	r6, r8
 80063fc:	106d      	asrs	r5, r5, #1
 80063fe:	d00b      	beq.n	8006418 <__pow5mult+0xa0>
 8006400:	6820      	ldr	r0, [r4, #0]
 8006402:	b938      	cbnz	r0, 8006414 <__pow5mult+0x9c>
 8006404:	4622      	mov	r2, r4
 8006406:	4621      	mov	r1, r4
 8006408:	4638      	mov	r0, r7
 800640a:	f7ff ff13 	bl	8006234 <__multiply>
 800640e:	6020      	str	r0, [r4, #0]
 8006410:	f8c0 9000 	str.w	r9, [r0]
 8006414:	4604      	mov	r4, r0
 8006416:	e7e4      	b.n	80063e2 <__pow5mult+0x6a>
 8006418:	4630      	mov	r0, r6
 800641a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800641e:	bf00      	nop
 8006420:	080078c0 	.word	0x080078c0
 8006424:	080076ba 	.word	0x080076ba
 8006428:	080077e0 	.word	0x080077e0

0800642c <__lshift>:
 800642c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006430:	460c      	mov	r4, r1
 8006432:	6849      	ldr	r1, [r1, #4]
 8006434:	6923      	ldr	r3, [r4, #16]
 8006436:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800643a:	68a3      	ldr	r3, [r4, #8]
 800643c:	4607      	mov	r7, r0
 800643e:	4691      	mov	r9, r2
 8006440:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006444:	f108 0601 	add.w	r6, r8, #1
 8006448:	42b3      	cmp	r3, r6
 800644a:	db0b      	blt.n	8006464 <__lshift+0x38>
 800644c:	4638      	mov	r0, r7
 800644e:	f7ff fd9d 	bl	8005f8c <_Balloc>
 8006452:	4605      	mov	r5, r0
 8006454:	b948      	cbnz	r0, 800646a <__lshift+0x3e>
 8006456:	4602      	mov	r2, r0
 8006458:	4b28      	ldr	r3, [pc, #160]	@ (80064fc <__lshift+0xd0>)
 800645a:	4829      	ldr	r0, [pc, #164]	@ (8006500 <__lshift+0xd4>)
 800645c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006460:	f7ff f92a 	bl	80056b8 <__assert_func>
 8006464:	3101      	adds	r1, #1
 8006466:	005b      	lsls	r3, r3, #1
 8006468:	e7ee      	b.n	8006448 <__lshift+0x1c>
 800646a:	2300      	movs	r3, #0
 800646c:	f100 0114 	add.w	r1, r0, #20
 8006470:	f100 0210 	add.w	r2, r0, #16
 8006474:	4618      	mov	r0, r3
 8006476:	4553      	cmp	r3, sl
 8006478:	db33      	blt.n	80064e2 <__lshift+0xb6>
 800647a:	6920      	ldr	r0, [r4, #16]
 800647c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006480:	f104 0314 	add.w	r3, r4, #20
 8006484:	f019 091f 	ands.w	r9, r9, #31
 8006488:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800648c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006490:	d02b      	beq.n	80064ea <__lshift+0xbe>
 8006492:	f1c9 0e20 	rsb	lr, r9, #32
 8006496:	468a      	mov	sl, r1
 8006498:	2200      	movs	r2, #0
 800649a:	6818      	ldr	r0, [r3, #0]
 800649c:	fa00 f009 	lsl.w	r0, r0, r9
 80064a0:	4310      	orrs	r0, r2
 80064a2:	f84a 0b04 	str.w	r0, [sl], #4
 80064a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80064aa:	459c      	cmp	ip, r3
 80064ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80064b0:	d8f3      	bhi.n	800649a <__lshift+0x6e>
 80064b2:	ebac 0304 	sub.w	r3, ip, r4
 80064b6:	3b15      	subs	r3, #21
 80064b8:	f023 0303 	bic.w	r3, r3, #3
 80064bc:	3304      	adds	r3, #4
 80064be:	f104 0015 	add.w	r0, r4, #21
 80064c2:	4560      	cmp	r0, ip
 80064c4:	bf88      	it	hi
 80064c6:	2304      	movhi	r3, #4
 80064c8:	50ca      	str	r2, [r1, r3]
 80064ca:	b10a      	cbz	r2, 80064d0 <__lshift+0xa4>
 80064cc:	f108 0602 	add.w	r6, r8, #2
 80064d0:	3e01      	subs	r6, #1
 80064d2:	4638      	mov	r0, r7
 80064d4:	612e      	str	r6, [r5, #16]
 80064d6:	4621      	mov	r1, r4
 80064d8:	f7ff fd98 	bl	800600c <_Bfree>
 80064dc:	4628      	mov	r0, r5
 80064de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80064e6:	3301      	adds	r3, #1
 80064e8:	e7c5      	b.n	8006476 <__lshift+0x4a>
 80064ea:	3904      	subs	r1, #4
 80064ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80064f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80064f4:	459c      	cmp	ip, r3
 80064f6:	d8f9      	bhi.n	80064ec <__lshift+0xc0>
 80064f8:	e7ea      	b.n	80064d0 <__lshift+0xa4>
 80064fa:	bf00      	nop
 80064fc:	0800776f 	.word	0x0800776f
 8006500:	080077e0 	.word	0x080077e0

08006504 <__mcmp>:
 8006504:	690a      	ldr	r2, [r1, #16]
 8006506:	4603      	mov	r3, r0
 8006508:	6900      	ldr	r0, [r0, #16]
 800650a:	1a80      	subs	r0, r0, r2
 800650c:	b530      	push	{r4, r5, lr}
 800650e:	d10e      	bne.n	800652e <__mcmp+0x2a>
 8006510:	3314      	adds	r3, #20
 8006512:	3114      	adds	r1, #20
 8006514:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006518:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800651c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006520:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006524:	4295      	cmp	r5, r2
 8006526:	d003      	beq.n	8006530 <__mcmp+0x2c>
 8006528:	d205      	bcs.n	8006536 <__mcmp+0x32>
 800652a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800652e:	bd30      	pop	{r4, r5, pc}
 8006530:	42a3      	cmp	r3, r4
 8006532:	d3f3      	bcc.n	800651c <__mcmp+0x18>
 8006534:	e7fb      	b.n	800652e <__mcmp+0x2a>
 8006536:	2001      	movs	r0, #1
 8006538:	e7f9      	b.n	800652e <__mcmp+0x2a>
	...

0800653c <__mdiff>:
 800653c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006540:	4689      	mov	r9, r1
 8006542:	4606      	mov	r6, r0
 8006544:	4611      	mov	r1, r2
 8006546:	4648      	mov	r0, r9
 8006548:	4614      	mov	r4, r2
 800654a:	f7ff ffdb 	bl	8006504 <__mcmp>
 800654e:	1e05      	subs	r5, r0, #0
 8006550:	d112      	bne.n	8006578 <__mdiff+0x3c>
 8006552:	4629      	mov	r1, r5
 8006554:	4630      	mov	r0, r6
 8006556:	f7ff fd19 	bl	8005f8c <_Balloc>
 800655a:	4602      	mov	r2, r0
 800655c:	b928      	cbnz	r0, 800656a <__mdiff+0x2e>
 800655e:	4b3f      	ldr	r3, [pc, #252]	@ (800665c <__mdiff+0x120>)
 8006560:	f240 2137 	movw	r1, #567	@ 0x237
 8006564:	483e      	ldr	r0, [pc, #248]	@ (8006660 <__mdiff+0x124>)
 8006566:	f7ff f8a7 	bl	80056b8 <__assert_func>
 800656a:	2301      	movs	r3, #1
 800656c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006570:	4610      	mov	r0, r2
 8006572:	b003      	add	sp, #12
 8006574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006578:	bfbc      	itt	lt
 800657a:	464b      	movlt	r3, r9
 800657c:	46a1      	movlt	r9, r4
 800657e:	4630      	mov	r0, r6
 8006580:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006584:	bfba      	itte	lt
 8006586:	461c      	movlt	r4, r3
 8006588:	2501      	movlt	r5, #1
 800658a:	2500      	movge	r5, #0
 800658c:	f7ff fcfe 	bl	8005f8c <_Balloc>
 8006590:	4602      	mov	r2, r0
 8006592:	b918      	cbnz	r0, 800659c <__mdiff+0x60>
 8006594:	4b31      	ldr	r3, [pc, #196]	@ (800665c <__mdiff+0x120>)
 8006596:	f240 2145 	movw	r1, #581	@ 0x245
 800659a:	e7e3      	b.n	8006564 <__mdiff+0x28>
 800659c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80065a0:	6926      	ldr	r6, [r4, #16]
 80065a2:	60c5      	str	r5, [r0, #12]
 80065a4:	f109 0310 	add.w	r3, r9, #16
 80065a8:	f109 0514 	add.w	r5, r9, #20
 80065ac:	f104 0e14 	add.w	lr, r4, #20
 80065b0:	f100 0b14 	add.w	fp, r0, #20
 80065b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80065b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80065bc:	9301      	str	r3, [sp, #4]
 80065be:	46d9      	mov	r9, fp
 80065c0:	f04f 0c00 	mov.w	ip, #0
 80065c4:	9b01      	ldr	r3, [sp, #4]
 80065c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80065ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80065ce:	9301      	str	r3, [sp, #4]
 80065d0:	fa1f f38a 	uxth.w	r3, sl
 80065d4:	4619      	mov	r1, r3
 80065d6:	b283      	uxth	r3, r0
 80065d8:	1acb      	subs	r3, r1, r3
 80065da:	0c00      	lsrs	r0, r0, #16
 80065dc:	4463      	add	r3, ip
 80065de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80065e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80065ec:	4576      	cmp	r6, lr
 80065ee:	f849 3b04 	str.w	r3, [r9], #4
 80065f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80065f6:	d8e5      	bhi.n	80065c4 <__mdiff+0x88>
 80065f8:	1b33      	subs	r3, r6, r4
 80065fa:	3b15      	subs	r3, #21
 80065fc:	f023 0303 	bic.w	r3, r3, #3
 8006600:	3415      	adds	r4, #21
 8006602:	3304      	adds	r3, #4
 8006604:	42a6      	cmp	r6, r4
 8006606:	bf38      	it	cc
 8006608:	2304      	movcc	r3, #4
 800660a:	441d      	add	r5, r3
 800660c:	445b      	add	r3, fp
 800660e:	461e      	mov	r6, r3
 8006610:	462c      	mov	r4, r5
 8006612:	4544      	cmp	r4, r8
 8006614:	d30e      	bcc.n	8006634 <__mdiff+0xf8>
 8006616:	f108 0103 	add.w	r1, r8, #3
 800661a:	1b49      	subs	r1, r1, r5
 800661c:	f021 0103 	bic.w	r1, r1, #3
 8006620:	3d03      	subs	r5, #3
 8006622:	45a8      	cmp	r8, r5
 8006624:	bf38      	it	cc
 8006626:	2100      	movcc	r1, #0
 8006628:	440b      	add	r3, r1
 800662a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800662e:	b191      	cbz	r1, 8006656 <__mdiff+0x11a>
 8006630:	6117      	str	r7, [r2, #16]
 8006632:	e79d      	b.n	8006570 <__mdiff+0x34>
 8006634:	f854 1b04 	ldr.w	r1, [r4], #4
 8006638:	46e6      	mov	lr, ip
 800663a:	0c08      	lsrs	r0, r1, #16
 800663c:	fa1c fc81 	uxtah	ip, ip, r1
 8006640:	4471      	add	r1, lr
 8006642:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006646:	b289      	uxth	r1, r1
 8006648:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800664c:	f846 1b04 	str.w	r1, [r6], #4
 8006650:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006654:	e7dd      	b.n	8006612 <__mdiff+0xd6>
 8006656:	3f01      	subs	r7, #1
 8006658:	e7e7      	b.n	800662a <__mdiff+0xee>
 800665a:	bf00      	nop
 800665c:	0800776f 	.word	0x0800776f
 8006660:	080077e0 	.word	0x080077e0

08006664 <__ulp>:
 8006664:	b082      	sub	sp, #8
 8006666:	ed8d 0b00 	vstr	d0, [sp]
 800666a:	9a01      	ldr	r2, [sp, #4]
 800666c:	4b0f      	ldr	r3, [pc, #60]	@ (80066ac <__ulp+0x48>)
 800666e:	4013      	ands	r3, r2
 8006670:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006674:	2b00      	cmp	r3, #0
 8006676:	dc08      	bgt.n	800668a <__ulp+0x26>
 8006678:	425b      	negs	r3, r3
 800667a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800667e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006682:	da04      	bge.n	800668e <__ulp+0x2a>
 8006684:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006688:	4113      	asrs	r3, r2
 800668a:	2200      	movs	r2, #0
 800668c:	e008      	b.n	80066a0 <__ulp+0x3c>
 800668e:	f1a2 0314 	sub.w	r3, r2, #20
 8006692:	2b1e      	cmp	r3, #30
 8006694:	bfda      	itte	le
 8006696:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800669a:	40da      	lsrle	r2, r3
 800669c:	2201      	movgt	r2, #1
 800669e:	2300      	movs	r3, #0
 80066a0:	4619      	mov	r1, r3
 80066a2:	4610      	mov	r0, r2
 80066a4:	ec41 0b10 	vmov	d0, r0, r1
 80066a8:	b002      	add	sp, #8
 80066aa:	4770      	bx	lr
 80066ac:	7ff00000 	.word	0x7ff00000

080066b0 <__b2d>:
 80066b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b4:	6906      	ldr	r6, [r0, #16]
 80066b6:	f100 0814 	add.w	r8, r0, #20
 80066ba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80066be:	1f37      	subs	r7, r6, #4
 80066c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80066c4:	4610      	mov	r0, r2
 80066c6:	f7ff fd53 	bl	8006170 <__hi0bits>
 80066ca:	f1c0 0320 	rsb	r3, r0, #32
 80066ce:	280a      	cmp	r0, #10
 80066d0:	600b      	str	r3, [r1, #0]
 80066d2:	491b      	ldr	r1, [pc, #108]	@ (8006740 <__b2d+0x90>)
 80066d4:	dc15      	bgt.n	8006702 <__b2d+0x52>
 80066d6:	f1c0 0c0b 	rsb	ip, r0, #11
 80066da:	fa22 f30c 	lsr.w	r3, r2, ip
 80066de:	45b8      	cmp	r8, r7
 80066e0:	ea43 0501 	orr.w	r5, r3, r1
 80066e4:	bf34      	ite	cc
 80066e6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80066ea:	2300      	movcs	r3, #0
 80066ec:	3015      	adds	r0, #21
 80066ee:	fa02 f000 	lsl.w	r0, r2, r0
 80066f2:	fa23 f30c 	lsr.w	r3, r3, ip
 80066f6:	4303      	orrs	r3, r0
 80066f8:	461c      	mov	r4, r3
 80066fa:	ec45 4b10 	vmov	d0, r4, r5
 80066fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006702:	45b8      	cmp	r8, r7
 8006704:	bf3a      	itte	cc
 8006706:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800670a:	f1a6 0708 	subcc.w	r7, r6, #8
 800670e:	2300      	movcs	r3, #0
 8006710:	380b      	subs	r0, #11
 8006712:	d012      	beq.n	800673a <__b2d+0x8a>
 8006714:	f1c0 0120 	rsb	r1, r0, #32
 8006718:	fa23 f401 	lsr.w	r4, r3, r1
 800671c:	4082      	lsls	r2, r0
 800671e:	4322      	orrs	r2, r4
 8006720:	4547      	cmp	r7, r8
 8006722:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006726:	bf8c      	ite	hi
 8006728:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800672c:	2200      	movls	r2, #0
 800672e:	4083      	lsls	r3, r0
 8006730:	40ca      	lsrs	r2, r1
 8006732:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006736:	4313      	orrs	r3, r2
 8006738:	e7de      	b.n	80066f8 <__b2d+0x48>
 800673a:	ea42 0501 	orr.w	r5, r2, r1
 800673e:	e7db      	b.n	80066f8 <__b2d+0x48>
 8006740:	3ff00000 	.word	0x3ff00000

08006744 <__d2b>:
 8006744:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006748:	460f      	mov	r7, r1
 800674a:	2101      	movs	r1, #1
 800674c:	ec59 8b10 	vmov	r8, r9, d0
 8006750:	4616      	mov	r6, r2
 8006752:	f7ff fc1b 	bl	8005f8c <_Balloc>
 8006756:	4604      	mov	r4, r0
 8006758:	b930      	cbnz	r0, 8006768 <__d2b+0x24>
 800675a:	4602      	mov	r2, r0
 800675c:	4b23      	ldr	r3, [pc, #140]	@ (80067ec <__d2b+0xa8>)
 800675e:	4824      	ldr	r0, [pc, #144]	@ (80067f0 <__d2b+0xac>)
 8006760:	f240 310f 	movw	r1, #783	@ 0x30f
 8006764:	f7fe ffa8 	bl	80056b8 <__assert_func>
 8006768:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800676c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006770:	b10d      	cbz	r5, 8006776 <__d2b+0x32>
 8006772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	f1b8 0300 	subs.w	r3, r8, #0
 800677c:	d023      	beq.n	80067c6 <__d2b+0x82>
 800677e:	4668      	mov	r0, sp
 8006780:	9300      	str	r3, [sp, #0]
 8006782:	f7ff fd14 	bl	80061ae <__lo0bits>
 8006786:	e9dd 1200 	ldrd	r1, r2, [sp]
 800678a:	b1d0      	cbz	r0, 80067c2 <__d2b+0x7e>
 800678c:	f1c0 0320 	rsb	r3, r0, #32
 8006790:	fa02 f303 	lsl.w	r3, r2, r3
 8006794:	430b      	orrs	r3, r1
 8006796:	40c2      	lsrs	r2, r0
 8006798:	6163      	str	r3, [r4, #20]
 800679a:	9201      	str	r2, [sp, #4]
 800679c:	9b01      	ldr	r3, [sp, #4]
 800679e:	61a3      	str	r3, [r4, #24]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	bf0c      	ite	eq
 80067a4:	2201      	moveq	r2, #1
 80067a6:	2202      	movne	r2, #2
 80067a8:	6122      	str	r2, [r4, #16]
 80067aa:	b1a5      	cbz	r5, 80067d6 <__d2b+0x92>
 80067ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80067b0:	4405      	add	r5, r0
 80067b2:	603d      	str	r5, [r7, #0]
 80067b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80067b8:	6030      	str	r0, [r6, #0]
 80067ba:	4620      	mov	r0, r4
 80067bc:	b003      	add	sp, #12
 80067be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80067c2:	6161      	str	r1, [r4, #20]
 80067c4:	e7ea      	b.n	800679c <__d2b+0x58>
 80067c6:	a801      	add	r0, sp, #4
 80067c8:	f7ff fcf1 	bl	80061ae <__lo0bits>
 80067cc:	9b01      	ldr	r3, [sp, #4]
 80067ce:	6163      	str	r3, [r4, #20]
 80067d0:	3020      	adds	r0, #32
 80067d2:	2201      	movs	r2, #1
 80067d4:	e7e8      	b.n	80067a8 <__d2b+0x64>
 80067d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80067de:	6038      	str	r0, [r7, #0]
 80067e0:	6918      	ldr	r0, [r3, #16]
 80067e2:	f7ff fcc5 	bl	8006170 <__hi0bits>
 80067e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80067ea:	e7e5      	b.n	80067b8 <__d2b+0x74>
 80067ec:	0800776f 	.word	0x0800776f
 80067f0:	080077e0 	.word	0x080077e0

080067f4 <__ratio>:
 80067f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f8:	b085      	sub	sp, #20
 80067fa:	e9cd 1000 	strd	r1, r0, [sp]
 80067fe:	a902      	add	r1, sp, #8
 8006800:	f7ff ff56 	bl	80066b0 <__b2d>
 8006804:	9800      	ldr	r0, [sp, #0]
 8006806:	a903      	add	r1, sp, #12
 8006808:	ec55 4b10 	vmov	r4, r5, d0
 800680c:	f7ff ff50 	bl	80066b0 <__b2d>
 8006810:	9b01      	ldr	r3, [sp, #4]
 8006812:	6919      	ldr	r1, [r3, #16]
 8006814:	9b00      	ldr	r3, [sp, #0]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	1ac9      	subs	r1, r1, r3
 800681a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800681e:	1a9b      	subs	r3, r3, r2
 8006820:	ec5b ab10 	vmov	sl, fp, d0
 8006824:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006828:	2b00      	cmp	r3, #0
 800682a:	bfce      	itee	gt
 800682c:	462a      	movgt	r2, r5
 800682e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006832:	465a      	movle	r2, fp
 8006834:	462f      	mov	r7, r5
 8006836:	46d9      	mov	r9, fp
 8006838:	bfcc      	ite	gt
 800683a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800683e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006842:	464b      	mov	r3, r9
 8006844:	4652      	mov	r2, sl
 8006846:	4620      	mov	r0, r4
 8006848:	4639      	mov	r1, r7
 800684a:	f7f9 ffff 	bl	800084c <__aeabi_ddiv>
 800684e:	ec41 0b10 	vmov	d0, r0, r1
 8006852:	b005      	add	sp, #20
 8006854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006858 <__copybits>:
 8006858:	3901      	subs	r1, #1
 800685a:	b570      	push	{r4, r5, r6, lr}
 800685c:	1149      	asrs	r1, r1, #5
 800685e:	6914      	ldr	r4, [r2, #16]
 8006860:	3101      	adds	r1, #1
 8006862:	f102 0314 	add.w	r3, r2, #20
 8006866:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800686a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800686e:	1f05      	subs	r5, r0, #4
 8006870:	42a3      	cmp	r3, r4
 8006872:	d30c      	bcc.n	800688e <__copybits+0x36>
 8006874:	1aa3      	subs	r3, r4, r2
 8006876:	3b11      	subs	r3, #17
 8006878:	f023 0303 	bic.w	r3, r3, #3
 800687c:	3211      	adds	r2, #17
 800687e:	42a2      	cmp	r2, r4
 8006880:	bf88      	it	hi
 8006882:	2300      	movhi	r3, #0
 8006884:	4418      	add	r0, r3
 8006886:	2300      	movs	r3, #0
 8006888:	4288      	cmp	r0, r1
 800688a:	d305      	bcc.n	8006898 <__copybits+0x40>
 800688c:	bd70      	pop	{r4, r5, r6, pc}
 800688e:	f853 6b04 	ldr.w	r6, [r3], #4
 8006892:	f845 6f04 	str.w	r6, [r5, #4]!
 8006896:	e7eb      	b.n	8006870 <__copybits+0x18>
 8006898:	f840 3b04 	str.w	r3, [r0], #4
 800689c:	e7f4      	b.n	8006888 <__copybits+0x30>

0800689e <__any_on>:
 800689e:	f100 0214 	add.w	r2, r0, #20
 80068a2:	6900      	ldr	r0, [r0, #16]
 80068a4:	114b      	asrs	r3, r1, #5
 80068a6:	4298      	cmp	r0, r3
 80068a8:	b510      	push	{r4, lr}
 80068aa:	db11      	blt.n	80068d0 <__any_on+0x32>
 80068ac:	dd0a      	ble.n	80068c4 <__any_on+0x26>
 80068ae:	f011 011f 	ands.w	r1, r1, #31
 80068b2:	d007      	beq.n	80068c4 <__any_on+0x26>
 80068b4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80068b8:	fa24 f001 	lsr.w	r0, r4, r1
 80068bc:	fa00 f101 	lsl.w	r1, r0, r1
 80068c0:	428c      	cmp	r4, r1
 80068c2:	d10b      	bne.n	80068dc <__any_on+0x3e>
 80068c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d803      	bhi.n	80068d4 <__any_on+0x36>
 80068cc:	2000      	movs	r0, #0
 80068ce:	bd10      	pop	{r4, pc}
 80068d0:	4603      	mov	r3, r0
 80068d2:	e7f7      	b.n	80068c4 <__any_on+0x26>
 80068d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80068d8:	2900      	cmp	r1, #0
 80068da:	d0f5      	beq.n	80068c8 <__any_on+0x2a>
 80068dc:	2001      	movs	r0, #1
 80068de:	e7f6      	b.n	80068ce <__any_on+0x30>

080068e0 <__ascii_wctomb>:
 80068e0:	4603      	mov	r3, r0
 80068e2:	4608      	mov	r0, r1
 80068e4:	b141      	cbz	r1, 80068f8 <__ascii_wctomb+0x18>
 80068e6:	2aff      	cmp	r2, #255	@ 0xff
 80068e8:	d904      	bls.n	80068f4 <__ascii_wctomb+0x14>
 80068ea:	228a      	movs	r2, #138	@ 0x8a
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80068f2:	4770      	bx	lr
 80068f4:	700a      	strb	r2, [r1, #0]
 80068f6:	2001      	movs	r0, #1
 80068f8:	4770      	bx	lr

080068fa <__ssputs_r>:
 80068fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068fe:	688e      	ldr	r6, [r1, #8]
 8006900:	461f      	mov	r7, r3
 8006902:	42be      	cmp	r6, r7
 8006904:	680b      	ldr	r3, [r1, #0]
 8006906:	4682      	mov	sl, r0
 8006908:	460c      	mov	r4, r1
 800690a:	4690      	mov	r8, r2
 800690c:	d82d      	bhi.n	800696a <__ssputs_r+0x70>
 800690e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006912:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006916:	d026      	beq.n	8006966 <__ssputs_r+0x6c>
 8006918:	6965      	ldr	r5, [r4, #20]
 800691a:	6909      	ldr	r1, [r1, #16]
 800691c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006920:	eba3 0901 	sub.w	r9, r3, r1
 8006924:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006928:	1c7b      	adds	r3, r7, #1
 800692a:	444b      	add	r3, r9
 800692c:	106d      	asrs	r5, r5, #1
 800692e:	429d      	cmp	r5, r3
 8006930:	bf38      	it	cc
 8006932:	461d      	movcc	r5, r3
 8006934:	0553      	lsls	r3, r2, #21
 8006936:	d527      	bpl.n	8006988 <__ssputs_r+0x8e>
 8006938:	4629      	mov	r1, r5
 800693a:	f7ff fa89 	bl	8005e50 <_malloc_r>
 800693e:	4606      	mov	r6, r0
 8006940:	b360      	cbz	r0, 800699c <__ssputs_r+0xa2>
 8006942:	6921      	ldr	r1, [r4, #16]
 8006944:	464a      	mov	r2, r9
 8006946:	f7fe fea0 	bl	800568a <memcpy>
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006954:	81a3      	strh	r3, [r4, #12]
 8006956:	6126      	str	r6, [r4, #16]
 8006958:	6165      	str	r5, [r4, #20]
 800695a:	444e      	add	r6, r9
 800695c:	eba5 0509 	sub.w	r5, r5, r9
 8006960:	6026      	str	r6, [r4, #0]
 8006962:	60a5      	str	r5, [r4, #8]
 8006964:	463e      	mov	r6, r7
 8006966:	42be      	cmp	r6, r7
 8006968:	d900      	bls.n	800696c <__ssputs_r+0x72>
 800696a:	463e      	mov	r6, r7
 800696c:	6820      	ldr	r0, [r4, #0]
 800696e:	4632      	mov	r2, r6
 8006970:	4641      	mov	r1, r8
 8006972:	f000 fb63 	bl	800703c <memmove>
 8006976:	68a3      	ldr	r3, [r4, #8]
 8006978:	1b9b      	subs	r3, r3, r6
 800697a:	60a3      	str	r3, [r4, #8]
 800697c:	6823      	ldr	r3, [r4, #0]
 800697e:	4433      	add	r3, r6
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	2000      	movs	r0, #0
 8006984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006988:	462a      	mov	r2, r5
 800698a:	f000 fb9c 	bl	80070c6 <_realloc_r>
 800698e:	4606      	mov	r6, r0
 8006990:	2800      	cmp	r0, #0
 8006992:	d1e0      	bne.n	8006956 <__ssputs_r+0x5c>
 8006994:	6921      	ldr	r1, [r4, #16]
 8006996:	4650      	mov	r0, sl
 8006998:	f7fe feac 	bl	80056f4 <_free_r>
 800699c:	230c      	movs	r3, #12
 800699e:	f8ca 3000 	str.w	r3, [sl]
 80069a2:	89a3      	ldrh	r3, [r4, #12]
 80069a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069a8:	81a3      	strh	r3, [r4, #12]
 80069aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069ae:	e7e9      	b.n	8006984 <__ssputs_r+0x8a>

080069b0 <_svfiprintf_r>:
 80069b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069b4:	4698      	mov	r8, r3
 80069b6:	898b      	ldrh	r3, [r1, #12]
 80069b8:	061b      	lsls	r3, r3, #24
 80069ba:	b09d      	sub	sp, #116	@ 0x74
 80069bc:	4607      	mov	r7, r0
 80069be:	460d      	mov	r5, r1
 80069c0:	4614      	mov	r4, r2
 80069c2:	d510      	bpl.n	80069e6 <_svfiprintf_r+0x36>
 80069c4:	690b      	ldr	r3, [r1, #16]
 80069c6:	b973      	cbnz	r3, 80069e6 <_svfiprintf_r+0x36>
 80069c8:	2140      	movs	r1, #64	@ 0x40
 80069ca:	f7ff fa41 	bl	8005e50 <_malloc_r>
 80069ce:	6028      	str	r0, [r5, #0]
 80069d0:	6128      	str	r0, [r5, #16]
 80069d2:	b930      	cbnz	r0, 80069e2 <_svfiprintf_r+0x32>
 80069d4:	230c      	movs	r3, #12
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069dc:	b01d      	add	sp, #116	@ 0x74
 80069de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069e2:	2340      	movs	r3, #64	@ 0x40
 80069e4:	616b      	str	r3, [r5, #20]
 80069e6:	2300      	movs	r3, #0
 80069e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ea:	2320      	movs	r3, #32
 80069ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80069f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80069f4:	2330      	movs	r3, #48	@ 0x30
 80069f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006b94 <_svfiprintf_r+0x1e4>
 80069fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80069fe:	f04f 0901 	mov.w	r9, #1
 8006a02:	4623      	mov	r3, r4
 8006a04:	469a      	mov	sl, r3
 8006a06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a0a:	b10a      	cbz	r2, 8006a10 <_svfiprintf_r+0x60>
 8006a0c:	2a25      	cmp	r2, #37	@ 0x25
 8006a0e:	d1f9      	bne.n	8006a04 <_svfiprintf_r+0x54>
 8006a10:	ebba 0b04 	subs.w	fp, sl, r4
 8006a14:	d00b      	beq.n	8006a2e <_svfiprintf_r+0x7e>
 8006a16:	465b      	mov	r3, fp
 8006a18:	4622      	mov	r2, r4
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	4638      	mov	r0, r7
 8006a1e:	f7ff ff6c 	bl	80068fa <__ssputs_r>
 8006a22:	3001      	adds	r0, #1
 8006a24:	f000 80a7 	beq.w	8006b76 <_svfiprintf_r+0x1c6>
 8006a28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a2a:	445a      	add	r2, fp
 8006a2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 809f 	beq.w	8006b76 <_svfiprintf_r+0x1c6>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a42:	f10a 0a01 	add.w	sl, sl, #1
 8006a46:	9304      	str	r3, [sp, #16]
 8006a48:	9307      	str	r3, [sp, #28]
 8006a4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a50:	4654      	mov	r4, sl
 8006a52:	2205      	movs	r2, #5
 8006a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a58:	484e      	ldr	r0, [pc, #312]	@ (8006b94 <_svfiprintf_r+0x1e4>)
 8006a5a:	f7f9 fbc1 	bl	80001e0 <memchr>
 8006a5e:	9a04      	ldr	r2, [sp, #16]
 8006a60:	b9d8      	cbnz	r0, 8006a9a <_svfiprintf_r+0xea>
 8006a62:	06d0      	lsls	r0, r2, #27
 8006a64:	bf44      	itt	mi
 8006a66:	2320      	movmi	r3, #32
 8006a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a6c:	0711      	lsls	r1, r2, #28
 8006a6e:	bf44      	itt	mi
 8006a70:	232b      	movmi	r3, #43	@ 0x2b
 8006a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a76:	f89a 3000 	ldrb.w	r3, [sl]
 8006a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a7c:	d015      	beq.n	8006aaa <_svfiprintf_r+0xfa>
 8006a7e:	9a07      	ldr	r2, [sp, #28]
 8006a80:	4654      	mov	r4, sl
 8006a82:	2000      	movs	r0, #0
 8006a84:	f04f 0c0a 	mov.w	ip, #10
 8006a88:	4621      	mov	r1, r4
 8006a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a8e:	3b30      	subs	r3, #48	@ 0x30
 8006a90:	2b09      	cmp	r3, #9
 8006a92:	d94b      	bls.n	8006b2c <_svfiprintf_r+0x17c>
 8006a94:	b1b0      	cbz	r0, 8006ac4 <_svfiprintf_r+0x114>
 8006a96:	9207      	str	r2, [sp, #28]
 8006a98:	e014      	b.n	8006ac4 <_svfiprintf_r+0x114>
 8006a9a:	eba0 0308 	sub.w	r3, r0, r8
 8006a9e:	fa09 f303 	lsl.w	r3, r9, r3
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	9304      	str	r3, [sp, #16]
 8006aa6:	46a2      	mov	sl, r4
 8006aa8:	e7d2      	b.n	8006a50 <_svfiprintf_r+0xa0>
 8006aaa:	9b03      	ldr	r3, [sp, #12]
 8006aac:	1d19      	adds	r1, r3, #4
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	9103      	str	r1, [sp, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	bfbb      	ittet	lt
 8006ab6:	425b      	neglt	r3, r3
 8006ab8:	f042 0202 	orrlt.w	r2, r2, #2
 8006abc:	9307      	strge	r3, [sp, #28]
 8006abe:	9307      	strlt	r3, [sp, #28]
 8006ac0:	bfb8      	it	lt
 8006ac2:	9204      	strlt	r2, [sp, #16]
 8006ac4:	7823      	ldrb	r3, [r4, #0]
 8006ac6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ac8:	d10a      	bne.n	8006ae0 <_svfiprintf_r+0x130>
 8006aca:	7863      	ldrb	r3, [r4, #1]
 8006acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ace:	d132      	bne.n	8006b36 <_svfiprintf_r+0x186>
 8006ad0:	9b03      	ldr	r3, [sp, #12]
 8006ad2:	1d1a      	adds	r2, r3, #4
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	9203      	str	r2, [sp, #12]
 8006ad8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006adc:	3402      	adds	r4, #2
 8006ade:	9305      	str	r3, [sp, #20]
 8006ae0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006ba4 <_svfiprintf_r+0x1f4>
 8006ae4:	7821      	ldrb	r1, [r4, #0]
 8006ae6:	2203      	movs	r2, #3
 8006ae8:	4650      	mov	r0, sl
 8006aea:	f7f9 fb79 	bl	80001e0 <memchr>
 8006aee:	b138      	cbz	r0, 8006b00 <_svfiprintf_r+0x150>
 8006af0:	9b04      	ldr	r3, [sp, #16]
 8006af2:	eba0 000a 	sub.w	r0, r0, sl
 8006af6:	2240      	movs	r2, #64	@ 0x40
 8006af8:	4082      	lsls	r2, r0
 8006afa:	4313      	orrs	r3, r2
 8006afc:	3401      	adds	r4, #1
 8006afe:	9304      	str	r3, [sp, #16]
 8006b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b04:	4824      	ldr	r0, [pc, #144]	@ (8006b98 <_svfiprintf_r+0x1e8>)
 8006b06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b0a:	2206      	movs	r2, #6
 8006b0c:	f7f9 fb68 	bl	80001e0 <memchr>
 8006b10:	2800      	cmp	r0, #0
 8006b12:	d036      	beq.n	8006b82 <_svfiprintf_r+0x1d2>
 8006b14:	4b21      	ldr	r3, [pc, #132]	@ (8006b9c <_svfiprintf_r+0x1ec>)
 8006b16:	bb1b      	cbnz	r3, 8006b60 <_svfiprintf_r+0x1b0>
 8006b18:	9b03      	ldr	r3, [sp, #12]
 8006b1a:	3307      	adds	r3, #7
 8006b1c:	f023 0307 	bic.w	r3, r3, #7
 8006b20:	3308      	adds	r3, #8
 8006b22:	9303      	str	r3, [sp, #12]
 8006b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b26:	4433      	add	r3, r6
 8006b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b2a:	e76a      	b.n	8006a02 <_svfiprintf_r+0x52>
 8006b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b30:	460c      	mov	r4, r1
 8006b32:	2001      	movs	r0, #1
 8006b34:	e7a8      	b.n	8006a88 <_svfiprintf_r+0xd8>
 8006b36:	2300      	movs	r3, #0
 8006b38:	3401      	adds	r4, #1
 8006b3a:	9305      	str	r3, [sp, #20]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	f04f 0c0a 	mov.w	ip, #10
 8006b42:	4620      	mov	r0, r4
 8006b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b48:	3a30      	subs	r2, #48	@ 0x30
 8006b4a:	2a09      	cmp	r2, #9
 8006b4c:	d903      	bls.n	8006b56 <_svfiprintf_r+0x1a6>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d0c6      	beq.n	8006ae0 <_svfiprintf_r+0x130>
 8006b52:	9105      	str	r1, [sp, #20]
 8006b54:	e7c4      	b.n	8006ae0 <_svfiprintf_r+0x130>
 8006b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e7f0      	b.n	8006b42 <_svfiprintf_r+0x192>
 8006b60:	ab03      	add	r3, sp, #12
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	462a      	mov	r2, r5
 8006b66:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba0 <_svfiprintf_r+0x1f0>)
 8006b68:	a904      	add	r1, sp, #16
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	f3af 8000 	nop.w
 8006b70:	1c42      	adds	r2, r0, #1
 8006b72:	4606      	mov	r6, r0
 8006b74:	d1d6      	bne.n	8006b24 <_svfiprintf_r+0x174>
 8006b76:	89ab      	ldrh	r3, [r5, #12]
 8006b78:	065b      	lsls	r3, r3, #25
 8006b7a:	f53f af2d 	bmi.w	80069d8 <_svfiprintf_r+0x28>
 8006b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b80:	e72c      	b.n	80069dc <_svfiprintf_r+0x2c>
 8006b82:	ab03      	add	r3, sp, #12
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	462a      	mov	r2, r5
 8006b88:	4b05      	ldr	r3, [pc, #20]	@ (8006ba0 <_svfiprintf_r+0x1f0>)
 8006b8a:	a904      	add	r1, sp, #16
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	f000 f879 	bl	8006c84 <_printf_i>
 8006b92:	e7ed      	b.n	8006b70 <_svfiprintf_r+0x1c0>
 8006b94:	08007839 	.word	0x08007839
 8006b98:	08007843 	.word	0x08007843
 8006b9c:	00000000 	.word	0x00000000
 8006ba0:	080068fb 	.word	0x080068fb
 8006ba4:	0800783f 	.word	0x0800783f

08006ba8 <_printf_common>:
 8006ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	4616      	mov	r6, r2
 8006bae:	4698      	mov	r8, r3
 8006bb0:	688a      	ldr	r2, [r1, #8]
 8006bb2:	690b      	ldr	r3, [r1, #16]
 8006bb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	bfb8      	it	lt
 8006bbc:	4613      	movlt	r3, r2
 8006bbe:	6033      	str	r3, [r6, #0]
 8006bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bc4:	4607      	mov	r7, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	b10a      	cbz	r2, 8006bce <_printf_common+0x26>
 8006bca:	3301      	adds	r3, #1
 8006bcc:	6033      	str	r3, [r6, #0]
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	0699      	lsls	r1, r3, #26
 8006bd2:	bf42      	ittt	mi
 8006bd4:	6833      	ldrmi	r3, [r6, #0]
 8006bd6:	3302      	addmi	r3, #2
 8006bd8:	6033      	strmi	r3, [r6, #0]
 8006bda:	6825      	ldr	r5, [r4, #0]
 8006bdc:	f015 0506 	ands.w	r5, r5, #6
 8006be0:	d106      	bne.n	8006bf0 <_printf_common+0x48>
 8006be2:	f104 0a19 	add.w	sl, r4, #25
 8006be6:	68e3      	ldr	r3, [r4, #12]
 8006be8:	6832      	ldr	r2, [r6, #0]
 8006bea:	1a9b      	subs	r3, r3, r2
 8006bec:	42ab      	cmp	r3, r5
 8006bee:	dc26      	bgt.n	8006c3e <_printf_common+0x96>
 8006bf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bf4:	6822      	ldr	r2, [r4, #0]
 8006bf6:	3b00      	subs	r3, #0
 8006bf8:	bf18      	it	ne
 8006bfa:	2301      	movne	r3, #1
 8006bfc:	0692      	lsls	r2, r2, #26
 8006bfe:	d42b      	bmi.n	8006c58 <_printf_common+0xb0>
 8006c00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c04:	4641      	mov	r1, r8
 8006c06:	4638      	mov	r0, r7
 8006c08:	47c8      	blx	r9
 8006c0a:	3001      	adds	r0, #1
 8006c0c:	d01e      	beq.n	8006c4c <_printf_common+0xa4>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	6922      	ldr	r2, [r4, #16]
 8006c12:	f003 0306 	and.w	r3, r3, #6
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	bf02      	ittt	eq
 8006c1a:	68e5      	ldreq	r5, [r4, #12]
 8006c1c:	6833      	ldreq	r3, [r6, #0]
 8006c1e:	1aed      	subeq	r5, r5, r3
 8006c20:	68a3      	ldr	r3, [r4, #8]
 8006c22:	bf0c      	ite	eq
 8006c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c28:	2500      	movne	r5, #0
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	bfc4      	itt	gt
 8006c2e:	1a9b      	subgt	r3, r3, r2
 8006c30:	18ed      	addgt	r5, r5, r3
 8006c32:	2600      	movs	r6, #0
 8006c34:	341a      	adds	r4, #26
 8006c36:	42b5      	cmp	r5, r6
 8006c38:	d11a      	bne.n	8006c70 <_printf_common+0xc8>
 8006c3a:	2000      	movs	r0, #0
 8006c3c:	e008      	b.n	8006c50 <_printf_common+0xa8>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4652      	mov	r2, sl
 8006c42:	4641      	mov	r1, r8
 8006c44:	4638      	mov	r0, r7
 8006c46:	47c8      	blx	r9
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d103      	bne.n	8006c54 <_printf_common+0xac>
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c54:	3501      	adds	r5, #1
 8006c56:	e7c6      	b.n	8006be6 <_printf_common+0x3e>
 8006c58:	18e1      	adds	r1, r4, r3
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	2030      	movs	r0, #48	@ 0x30
 8006c5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c62:	4422      	add	r2, r4
 8006c64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c6c:	3302      	adds	r3, #2
 8006c6e:	e7c7      	b.n	8006c00 <_printf_common+0x58>
 8006c70:	2301      	movs	r3, #1
 8006c72:	4622      	mov	r2, r4
 8006c74:	4641      	mov	r1, r8
 8006c76:	4638      	mov	r0, r7
 8006c78:	47c8      	blx	r9
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	d0e6      	beq.n	8006c4c <_printf_common+0xa4>
 8006c7e:	3601      	adds	r6, #1
 8006c80:	e7d9      	b.n	8006c36 <_printf_common+0x8e>
	...

08006c84 <_printf_i>:
 8006c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c88:	7e0f      	ldrb	r7, [r1, #24]
 8006c8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c8c:	2f78      	cmp	r7, #120	@ 0x78
 8006c8e:	4691      	mov	r9, r2
 8006c90:	4680      	mov	r8, r0
 8006c92:	460c      	mov	r4, r1
 8006c94:	469a      	mov	sl, r3
 8006c96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c9a:	d807      	bhi.n	8006cac <_printf_i+0x28>
 8006c9c:	2f62      	cmp	r7, #98	@ 0x62
 8006c9e:	d80a      	bhi.n	8006cb6 <_printf_i+0x32>
 8006ca0:	2f00      	cmp	r7, #0
 8006ca2:	f000 80d1 	beq.w	8006e48 <_printf_i+0x1c4>
 8006ca6:	2f58      	cmp	r7, #88	@ 0x58
 8006ca8:	f000 80b8 	beq.w	8006e1c <_printf_i+0x198>
 8006cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006cb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cb4:	e03a      	b.n	8006d2c <_printf_i+0xa8>
 8006cb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cba:	2b15      	cmp	r3, #21
 8006cbc:	d8f6      	bhi.n	8006cac <_printf_i+0x28>
 8006cbe:	a101      	add	r1, pc, #4	@ (adr r1, 8006cc4 <_printf_i+0x40>)
 8006cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cc4:	08006d1d 	.word	0x08006d1d
 8006cc8:	08006d31 	.word	0x08006d31
 8006ccc:	08006cad 	.word	0x08006cad
 8006cd0:	08006cad 	.word	0x08006cad
 8006cd4:	08006cad 	.word	0x08006cad
 8006cd8:	08006cad 	.word	0x08006cad
 8006cdc:	08006d31 	.word	0x08006d31
 8006ce0:	08006cad 	.word	0x08006cad
 8006ce4:	08006cad 	.word	0x08006cad
 8006ce8:	08006cad 	.word	0x08006cad
 8006cec:	08006cad 	.word	0x08006cad
 8006cf0:	08006e2f 	.word	0x08006e2f
 8006cf4:	08006d5b 	.word	0x08006d5b
 8006cf8:	08006de9 	.word	0x08006de9
 8006cfc:	08006cad 	.word	0x08006cad
 8006d00:	08006cad 	.word	0x08006cad
 8006d04:	08006e51 	.word	0x08006e51
 8006d08:	08006cad 	.word	0x08006cad
 8006d0c:	08006d5b 	.word	0x08006d5b
 8006d10:	08006cad 	.word	0x08006cad
 8006d14:	08006cad 	.word	0x08006cad
 8006d18:	08006df1 	.word	0x08006df1
 8006d1c:	6833      	ldr	r3, [r6, #0]
 8006d1e:	1d1a      	adds	r2, r3, #4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6032      	str	r2, [r6, #0]
 8006d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e09c      	b.n	8006e6a <_printf_i+0x1e6>
 8006d30:	6833      	ldr	r3, [r6, #0]
 8006d32:	6820      	ldr	r0, [r4, #0]
 8006d34:	1d19      	adds	r1, r3, #4
 8006d36:	6031      	str	r1, [r6, #0]
 8006d38:	0606      	lsls	r6, r0, #24
 8006d3a:	d501      	bpl.n	8006d40 <_printf_i+0xbc>
 8006d3c:	681d      	ldr	r5, [r3, #0]
 8006d3e:	e003      	b.n	8006d48 <_printf_i+0xc4>
 8006d40:	0645      	lsls	r5, r0, #25
 8006d42:	d5fb      	bpl.n	8006d3c <_printf_i+0xb8>
 8006d44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d48:	2d00      	cmp	r5, #0
 8006d4a:	da03      	bge.n	8006d54 <_printf_i+0xd0>
 8006d4c:	232d      	movs	r3, #45	@ 0x2d
 8006d4e:	426d      	negs	r5, r5
 8006d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d54:	4858      	ldr	r0, [pc, #352]	@ (8006eb8 <_printf_i+0x234>)
 8006d56:	230a      	movs	r3, #10
 8006d58:	e011      	b.n	8006d7e <_printf_i+0xfa>
 8006d5a:	6821      	ldr	r1, [r4, #0]
 8006d5c:	6833      	ldr	r3, [r6, #0]
 8006d5e:	0608      	lsls	r0, r1, #24
 8006d60:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d64:	d402      	bmi.n	8006d6c <_printf_i+0xe8>
 8006d66:	0649      	lsls	r1, r1, #25
 8006d68:	bf48      	it	mi
 8006d6a:	b2ad      	uxthmi	r5, r5
 8006d6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d6e:	4852      	ldr	r0, [pc, #328]	@ (8006eb8 <_printf_i+0x234>)
 8006d70:	6033      	str	r3, [r6, #0]
 8006d72:	bf14      	ite	ne
 8006d74:	230a      	movne	r3, #10
 8006d76:	2308      	moveq	r3, #8
 8006d78:	2100      	movs	r1, #0
 8006d7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d7e:	6866      	ldr	r6, [r4, #4]
 8006d80:	60a6      	str	r6, [r4, #8]
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	db05      	blt.n	8006d92 <_printf_i+0x10e>
 8006d86:	6821      	ldr	r1, [r4, #0]
 8006d88:	432e      	orrs	r6, r5
 8006d8a:	f021 0104 	bic.w	r1, r1, #4
 8006d8e:	6021      	str	r1, [r4, #0]
 8006d90:	d04b      	beq.n	8006e2a <_printf_i+0x1a6>
 8006d92:	4616      	mov	r6, r2
 8006d94:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d98:	fb03 5711 	mls	r7, r3, r1, r5
 8006d9c:	5dc7      	ldrb	r7, [r0, r7]
 8006d9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006da2:	462f      	mov	r7, r5
 8006da4:	42bb      	cmp	r3, r7
 8006da6:	460d      	mov	r5, r1
 8006da8:	d9f4      	bls.n	8006d94 <_printf_i+0x110>
 8006daa:	2b08      	cmp	r3, #8
 8006dac:	d10b      	bne.n	8006dc6 <_printf_i+0x142>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	07df      	lsls	r7, r3, #31
 8006db2:	d508      	bpl.n	8006dc6 <_printf_i+0x142>
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	6861      	ldr	r1, [r4, #4]
 8006db8:	4299      	cmp	r1, r3
 8006dba:	bfde      	ittt	le
 8006dbc:	2330      	movle	r3, #48	@ 0x30
 8006dbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dc2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006dc6:	1b92      	subs	r2, r2, r6
 8006dc8:	6122      	str	r2, [r4, #16]
 8006dca:	f8cd a000 	str.w	sl, [sp]
 8006dce:	464b      	mov	r3, r9
 8006dd0:	aa03      	add	r2, sp, #12
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	4640      	mov	r0, r8
 8006dd6:	f7ff fee7 	bl	8006ba8 <_printf_common>
 8006dda:	3001      	adds	r0, #1
 8006ddc:	d14a      	bne.n	8006e74 <_printf_i+0x1f0>
 8006dde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006de2:	b004      	add	sp, #16
 8006de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de8:	6823      	ldr	r3, [r4, #0]
 8006dea:	f043 0320 	orr.w	r3, r3, #32
 8006dee:	6023      	str	r3, [r4, #0]
 8006df0:	4832      	ldr	r0, [pc, #200]	@ (8006ebc <_printf_i+0x238>)
 8006df2:	2778      	movs	r7, #120	@ 0x78
 8006df4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	6831      	ldr	r1, [r6, #0]
 8006dfc:	061f      	lsls	r7, r3, #24
 8006dfe:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e02:	d402      	bmi.n	8006e0a <_printf_i+0x186>
 8006e04:	065f      	lsls	r7, r3, #25
 8006e06:	bf48      	it	mi
 8006e08:	b2ad      	uxthmi	r5, r5
 8006e0a:	6031      	str	r1, [r6, #0]
 8006e0c:	07d9      	lsls	r1, r3, #31
 8006e0e:	bf44      	itt	mi
 8006e10:	f043 0320 	orrmi.w	r3, r3, #32
 8006e14:	6023      	strmi	r3, [r4, #0]
 8006e16:	b11d      	cbz	r5, 8006e20 <_printf_i+0x19c>
 8006e18:	2310      	movs	r3, #16
 8006e1a:	e7ad      	b.n	8006d78 <_printf_i+0xf4>
 8006e1c:	4826      	ldr	r0, [pc, #152]	@ (8006eb8 <_printf_i+0x234>)
 8006e1e:	e7e9      	b.n	8006df4 <_printf_i+0x170>
 8006e20:	6823      	ldr	r3, [r4, #0]
 8006e22:	f023 0320 	bic.w	r3, r3, #32
 8006e26:	6023      	str	r3, [r4, #0]
 8006e28:	e7f6      	b.n	8006e18 <_printf_i+0x194>
 8006e2a:	4616      	mov	r6, r2
 8006e2c:	e7bd      	b.n	8006daa <_printf_i+0x126>
 8006e2e:	6833      	ldr	r3, [r6, #0]
 8006e30:	6825      	ldr	r5, [r4, #0]
 8006e32:	6961      	ldr	r1, [r4, #20]
 8006e34:	1d18      	adds	r0, r3, #4
 8006e36:	6030      	str	r0, [r6, #0]
 8006e38:	062e      	lsls	r6, r5, #24
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	d501      	bpl.n	8006e42 <_printf_i+0x1be>
 8006e3e:	6019      	str	r1, [r3, #0]
 8006e40:	e002      	b.n	8006e48 <_printf_i+0x1c4>
 8006e42:	0668      	lsls	r0, r5, #25
 8006e44:	d5fb      	bpl.n	8006e3e <_printf_i+0x1ba>
 8006e46:	8019      	strh	r1, [r3, #0]
 8006e48:	2300      	movs	r3, #0
 8006e4a:	6123      	str	r3, [r4, #16]
 8006e4c:	4616      	mov	r6, r2
 8006e4e:	e7bc      	b.n	8006dca <_printf_i+0x146>
 8006e50:	6833      	ldr	r3, [r6, #0]
 8006e52:	1d1a      	adds	r2, r3, #4
 8006e54:	6032      	str	r2, [r6, #0]
 8006e56:	681e      	ldr	r6, [r3, #0]
 8006e58:	6862      	ldr	r2, [r4, #4]
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f7f9 f9bf 	bl	80001e0 <memchr>
 8006e62:	b108      	cbz	r0, 8006e68 <_printf_i+0x1e4>
 8006e64:	1b80      	subs	r0, r0, r6
 8006e66:	6060      	str	r0, [r4, #4]
 8006e68:	6863      	ldr	r3, [r4, #4]
 8006e6a:	6123      	str	r3, [r4, #16]
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e72:	e7aa      	b.n	8006dca <_printf_i+0x146>
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	4632      	mov	r2, r6
 8006e78:	4649      	mov	r1, r9
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	47d0      	blx	sl
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d0ad      	beq.n	8006dde <_printf_i+0x15a>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	079b      	lsls	r3, r3, #30
 8006e86:	d413      	bmi.n	8006eb0 <_printf_i+0x22c>
 8006e88:	68e0      	ldr	r0, [r4, #12]
 8006e8a:	9b03      	ldr	r3, [sp, #12]
 8006e8c:	4298      	cmp	r0, r3
 8006e8e:	bfb8      	it	lt
 8006e90:	4618      	movlt	r0, r3
 8006e92:	e7a6      	b.n	8006de2 <_printf_i+0x15e>
 8006e94:	2301      	movs	r3, #1
 8006e96:	4632      	mov	r2, r6
 8006e98:	4649      	mov	r1, r9
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	47d0      	blx	sl
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	d09d      	beq.n	8006dde <_printf_i+0x15a>
 8006ea2:	3501      	adds	r5, #1
 8006ea4:	68e3      	ldr	r3, [r4, #12]
 8006ea6:	9903      	ldr	r1, [sp, #12]
 8006ea8:	1a5b      	subs	r3, r3, r1
 8006eaa:	42ab      	cmp	r3, r5
 8006eac:	dcf2      	bgt.n	8006e94 <_printf_i+0x210>
 8006eae:	e7eb      	b.n	8006e88 <_printf_i+0x204>
 8006eb0:	2500      	movs	r5, #0
 8006eb2:	f104 0619 	add.w	r6, r4, #25
 8006eb6:	e7f5      	b.n	8006ea4 <_printf_i+0x220>
 8006eb8:	0800784a 	.word	0x0800784a
 8006ebc:	0800785b 	.word	0x0800785b

08006ec0 <__sflush_r>:
 8006ec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ec8:	0716      	lsls	r6, r2, #28
 8006eca:	4605      	mov	r5, r0
 8006ecc:	460c      	mov	r4, r1
 8006ece:	d454      	bmi.n	8006f7a <__sflush_r+0xba>
 8006ed0:	684b      	ldr	r3, [r1, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	dc02      	bgt.n	8006edc <__sflush_r+0x1c>
 8006ed6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	dd48      	ble.n	8006f6e <__sflush_r+0xae>
 8006edc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ede:	2e00      	cmp	r6, #0
 8006ee0:	d045      	beq.n	8006f6e <__sflush_r+0xae>
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ee8:	682f      	ldr	r7, [r5, #0]
 8006eea:	6a21      	ldr	r1, [r4, #32]
 8006eec:	602b      	str	r3, [r5, #0]
 8006eee:	d030      	beq.n	8006f52 <__sflush_r+0x92>
 8006ef0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	0759      	lsls	r1, r3, #29
 8006ef6:	d505      	bpl.n	8006f04 <__sflush_r+0x44>
 8006ef8:	6863      	ldr	r3, [r4, #4]
 8006efa:	1ad2      	subs	r2, r2, r3
 8006efc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006efe:	b10b      	cbz	r3, 8006f04 <__sflush_r+0x44>
 8006f00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f02:	1ad2      	subs	r2, r2, r3
 8006f04:	2300      	movs	r3, #0
 8006f06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f08:	6a21      	ldr	r1, [r4, #32]
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	47b0      	blx	r6
 8006f0e:	1c43      	adds	r3, r0, #1
 8006f10:	89a3      	ldrh	r3, [r4, #12]
 8006f12:	d106      	bne.n	8006f22 <__sflush_r+0x62>
 8006f14:	6829      	ldr	r1, [r5, #0]
 8006f16:	291d      	cmp	r1, #29
 8006f18:	d82b      	bhi.n	8006f72 <__sflush_r+0xb2>
 8006f1a:	4a2a      	ldr	r2, [pc, #168]	@ (8006fc4 <__sflush_r+0x104>)
 8006f1c:	40ca      	lsrs	r2, r1
 8006f1e:	07d6      	lsls	r6, r2, #31
 8006f20:	d527      	bpl.n	8006f72 <__sflush_r+0xb2>
 8006f22:	2200      	movs	r2, #0
 8006f24:	6062      	str	r2, [r4, #4]
 8006f26:	04d9      	lsls	r1, r3, #19
 8006f28:	6922      	ldr	r2, [r4, #16]
 8006f2a:	6022      	str	r2, [r4, #0]
 8006f2c:	d504      	bpl.n	8006f38 <__sflush_r+0x78>
 8006f2e:	1c42      	adds	r2, r0, #1
 8006f30:	d101      	bne.n	8006f36 <__sflush_r+0x76>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	b903      	cbnz	r3, 8006f38 <__sflush_r+0x78>
 8006f36:	6560      	str	r0, [r4, #84]	@ 0x54
 8006f38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f3a:	602f      	str	r7, [r5, #0]
 8006f3c:	b1b9      	cbz	r1, 8006f6e <__sflush_r+0xae>
 8006f3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f42:	4299      	cmp	r1, r3
 8006f44:	d002      	beq.n	8006f4c <__sflush_r+0x8c>
 8006f46:	4628      	mov	r0, r5
 8006f48:	f7fe fbd4 	bl	80056f4 <_free_r>
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f50:	e00d      	b.n	8006f6e <__sflush_r+0xae>
 8006f52:	2301      	movs	r3, #1
 8006f54:	4628      	mov	r0, r5
 8006f56:	47b0      	blx	r6
 8006f58:	4602      	mov	r2, r0
 8006f5a:	1c50      	adds	r0, r2, #1
 8006f5c:	d1c9      	bne.n	8006ef2 <__sflush_r+0x32>
 8006f5e:	682b      	ldr	r3, [r5, #0]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d0c6      	beq.n	8006ef2 <__sflush_r+0x32>
 8006f64:	2b1d      	cmp	r3, #29
 8006f66:	d001      	beq.n	8006f6c <__sflush_r+0xac>
 8006f68:	2b16      	cmp	r3, #22
 8006f6a:	d11e      	bne.n	8006faa <__sflush_r+0xea>
 8006f6c:	602f      	str	r7, [r5, #0]
 8006f6e:	2000      	movs	r0, #0
 8006f70:	e022      	b.n	8006fb8 <__sflush_r+0xf8>
 8006f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f76:	b21b      	sxth	r3, r3
 8006f78:	e01b      	b.n	8006fb2 <__sflush_r+0xf2>
 8006f7a:	690f      	ldr	r7, [r1, #16]
 8006f7c:	2f00      	cmp	r7, #0
 8006f7e:	d0f6      	beq.n	8006f6e <__sflush_r+0xae>
 8006f80:	0793      	lsls	r3, r2, #30
 8006f82:	680e      	ldr	r6, [r1, #0]
 8006f84:	bf08      	it	eq
 8006f86:	694b      	ldreq	r3, [r1, #20]
 8006f88:	600f      	str	r7, [r1, #0]
 8006f8a:	bf18      	it	ne
 8006f8c:	2300      	movne	r3, #0
 8006f8e:	eba6 0807 	sub.w	r8, r6, r7
 8006f92:	608b      	str	r3, [r1, #8]
 8006f94:	f1b8 0f00 	cmp.w	r8, #0
 8006f98:	dde9      	ble.n	8006f6e <__sflush_r+0xae>
 8006f9a:	6a21      	ldr	r1, [r4, #32]
 8006f9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006f9e:	4643      	mov	r3, r8
 8006fa0:	463a      	mov	r2, r7
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	47b0      	blx	r6
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	dc08      	bgt.n	8006fbc <__sflush_r+0xfc>
 8006faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fb2:	81a3      	strh	r3, [r4, #12]
 8006fb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fbc:	4407      	add	r7, r0
 8006fbe:	eba8 0800 	sub.w	r8, r8, r0
 8006fc2:	e7e7      	b.n	8006f94 <__sflush_r+0xd4>
 8006fc4:	20400001 	.word	0x20400001

08006fc8 <_fflush_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	690b      	ldr	r3, [r1, #16]
 8006fcc:	4605      	mov	r5, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	b913      	cbnz	r3, 8006fd8 <_fflush_r+0x10>
 8006fd2:	2500      	movs	r5, #0
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	b118      	cbz	r0, 8006fe2 <_fflush_r+0x1a>
 8006fda:	6a03      	ldr	r3, [r0, #32]
 8006fdc:	b90b      	cbnz	r3, 8006fe2 <_fflush_r+0x1a>
 8006fde:	f7fe f9cf 	bl	8005380 <__sinit>
 8006fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0f3      	beq.n	8006fd2 <_fflush_r+0xa>
 8006fea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006fec:	07d0      	lsls	r0, r2, #31
 8006fee:	d404      	bmi.n	8006ffa <_fflush_r+0x32>
 8006ff0:	0599      	lsls	r1, r3, #22
 8006ff2:	d402      	bmi.n	8006ffa <_fflush_r+0x32>
 8006ff4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ff6:	f7fe fb46 	bl	8005686 <__retarget_lock_acquire_recursive>
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	f7ff ff5f 	bl	8006ec0 <__sflush_r>
 8007002:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007004:	07da      	lsls	r2, r3, #31
 8007006:	4605      	mov	r5, r0
 8007008:	d4e4      	bmi.n	8006fd4 <_fflush_r+0xc>
 800700a:	89a3      	ldrh	r3, [r4, #12]
 800700c:	059b      	lsls	r3, r3, #22
 800700e:	d4e1      	bmi.n	8006fd4 <_fflush_r+0xc>
 8007010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007012:	f7fe fb39 	bl	8005688 <__retarget_lock_release_recursive>
 8007016:	e7dd      	b.n	8006fd4 <_fflush_r+0xc>

08007018 <fiprintf>:
 8007018:	b40e      	push	{r1, r2, r3}
 800701a:	b503      	push	{r0, r1, lr}
 800701c:	4601      	mov	r1, r0
 800701e:	ab03      	add	r3, sp, #12
 8007020:	4805      	ldr	r0, [pc, #20]	@ (8007038 <fiprintf+0x20>)
 8007022:	f853 2b04 	ldr.w	r2, [r3], #4
 8007026:	6800      	ldr	r0, [r0, #0]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	f000 f8a3 	bl	8007174 <_vfiprintf_r>
 800702e:	b002      	add	sp, #8
 8007030:	f85d eb04 	ldr.w	lr, [sp], #4
 8007034:	b003      	add	sp, #12
 8007036:	4770      	bx	lr
 8007038:	20000184 	.word	0x20000184

0800703c <memmove>:
 800703c:	4288      	cmp	r0, r1
 800703e:	b510      	push	{r4, lr}
 8007040:	eb01 0402 	add.w	r4, r1, r2
 8007044:	d902      	bls.n	800704c <memmove+0x10>
 8007046:	4284      	cmp	r4, r0
 8007048:	4623      	mov	r3, r4
 800704a:	d807      	bhi.n	800705c <memmove+0x20>
 800704c:	1e43      	subs	r3, r0, #1
 800704e:	42a1      	cmp	r1, r4
 8007050:	d008      	beq.n	8007064 <memmove+0x28>
 8007052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800705a:	e7f8      	b.n	800704e <memmove+0x12>
 800705c:	4402      	add	r2, r0
 800705e:	4601      	mov	r1, r0
 8007060:	428a      	cmp	r2, r1
 8007062:	d100      	bne.n	8007066 <memmove+0x2a>
 8007064:	bd10      	pop	{r4, pc}
 8007066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800706a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800706e:	e7f7      	b.n	8007060 <memmove+0x24>

08007070 <_sbrk_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4d06      	ldr	r5, [pc, #24]	@ (800708c <_sbrk_r+0x1c>)
 8007074:	2300      	movs	r3, #0
 8007076:	4604      	mov	r4, r0
 8007078:	4608      	mov	r0, r1
 800707a:	602b      	str	r3, [r5, #0]
 800707c:	f7fa fce8 	bl	8001a50 <_sbrk>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_sbrk_r+0x1a>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	b103      	cbz	r3, 800708a <_sbrk_r+0x1a>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	20000470 	.word	0x20000470

08007090 <abort>:
 8007090:	b508      	push	{r3, lr}
 8007092:	2006      	movs	r0, #6
 8007094:	f000 fa42 	bl	800751c <raise>
 8007098:	2001      	movs	r0, #1
 800709a:	f7fa fc61 	bl	8001960 <_exit>

0800709e <_calloc_r>:
 800709e:	b570      	push	{r4, r5, r6, lr}
 80070a0:	fba1 5402 	umull	r5, r4, r1, r2
 80070a4:	b934      	cbnz	r4, 80070b4 <_calloc_r+0x16>
 80070a6:	4629      	mov	r1, r5
 80070a8:	f7fe fed2 	bl	8005e50 <_malloc_r>
 80070ac:	4606      	mov	r6, r0
 80070ae:	b928      	cbnz	r0, 80070bc <_calloc_r+0x1e>
 80070b0:	4630      	mov	r0, r6
 80070b2:	bd70      	pop	{r4, r5, r6, pc}
 80070b4:	220c      	movs	r2, #12
 80070b6:	6002      	str	r2, [r0, #0]
 80070b8:	2600      	movs	r6, #0
 80070ba:	e7f9      	b.n	80070b0 <_calloc_r+0x12>
 80070bc:	462a      	mov	r2, r5
 80070be:	4621      	mov	r1, r4
 80070c0:	f7fe f9f9 	bl	80054b6 <memset>
 80070c4:	e7f4      	b.n	80070b0 <_calloc_r+0x12>

080070c6 <_realloc_r>:
 80070c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ca:	4607      	mov	r7, r0
 80070cc:	4614      	mov	r4, r2
 80070ce:	460d      	mov	r5, r1
 80070d0:	b921      	cbnz	r1, 80070dc <_realloc_r+0x16>
 80070d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070d6:	4611      	mov	r1, r2
 80070d8:	f7fe beba 	b.w	8005e50 <_malloc_r>
 80070dc:	b92a      	cbnz	r2, 80070ea <_realloc_r+0x24>
 80070de:	f7fe fb09 	bl	80056f4 <_free_r>
 80070e2:	4625      	mov	r5, r4
 80070e4:	4628      	mov	r0, r5
 80070e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ea:	f000 fa33 	bl	8007554 <_malloc_usable_size_r>
 80070ee:	4284      	cmp	r4, r0
 80070f0:	4606      	mov	r6, r0
 80070f2:	d802      	bhi.n	80070fa <_realloc_r+0x34>
 80070f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070f8:	d8f4      	bhi.n	80070e4 <_realloc_r+0x1e>
 80070fa:	4621      	mov	r1, r4
 80070fc:	4638      	mov	r0, r7
 80070fe:	f7fe fea7 	bl	8005e50 <_malloc_r>
 8007102:	4680      	mov	r8, r0
 8007104:	b908      	cbnz	r0, 800710a <_realloc_r+0x44>
 8007106:	4645      	mov	r5, r8
 8007108:	e7ec      	b.n	80070e4 <_realloc_r+0x1e>
 800710a:	42b4      	cmp	r4, r6
 800710c:	4622      	mov	r2, r4
 800710e:	4629      	mov	r1, r5
 8007110:	bf28      	it	cs
 8007112:	4632      	movcs	r2, r6
 8007114:	f7fe fab9 	bl	800568a <memcpy>
 8007118:	4629      	mov	r1, r5
 800711a:	4638      	mov	r0, r7
 800711c:	f7fe faea 	bl	80056f4 <_free_r>
 8007120:	e7f1      	b.n	8007106 <_realloc_r+0x40>

08007122 <__sfputc_r>:
 8007122:	6893      	ldr	r3, [r2, #8]
 8007124:	3b01      	subs	r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	b410      	push	{r4}
 800712a:	6093      	str	r3, [r2, #8]
 800712c:	da08      	bge.n	8007140 <__sfputc_r+0x1e>
 800712e:	6994      	ldr	r4, [r2, #24]
 8007130:	42a3      	cmp	r3, r4
 8007132:	db01      	blt.n	8007138 <__sfputc_r+0x16>
 8007134:	290a      	cmp	r1, #10
 8007136:	d103      	bne.n	8007140 <__sfputc_r+0x1e>
 8007138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800713c:	f000 b932 	b.w	80073a4 <__swbuf_r>
 8007140:	6813      	ldr	r3, [r2, #0]
 8007142:	1c58      	adds	r0, r3, #1
 8007144:	6010      	str	r0, [r2, #0]
 8007146:	7019      	strb	r1, [r3, #0]
 8007148:	4608      	mov	r0, r1
 800714a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800714e:	4770      	bx	lr

08007150 <__sfputs_r>:
 8007150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007152:	4606      	mov	r6, r0
 8007154:	460f      	mov	r7, r1
 8007156:	4614      	mov	r4, r2
 8007158:	18d5      	adds	r5, r2, r3
 800715a:	42ac      	cmp	r4, r5
 800715c:	d101      	bne.n	8007162 <__sfputs_r+0x12>
 800715e:	2000      	movs	r0, #0
 8007160:	e007      	b.n	8007172 <__sfputs_r+0x22>
 8007162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007166:	463a      	mov	r2, r7
 8007168:	4630      	mov	r0, r6
 800716a:	f7ff ffda 	bl	8007122 <__sfputc_r>
 800716e:	1c43      	adds	r3, r0, #1
 8007170:	d1f3      	bne.n	800715a <__sfputs_r+0xa>
 8007172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007174 <_vfiprintf_r>:
 8007174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	460d      	mov	r5, r1
 800717a:	b09d      	sub	sp, #116	@ 0x74
 800717c:	4614      	mov	r4, r2
 800717e:	4698      	mov	r8, r3
 8007180:	4606      	mov	r6, r0
 8007182:	b118      	cbz	r0, 800718c <_vfiprintf_r+0x18>
 8007184:	6a03      	ldr	r3, [r0, #32]
 8007186:	b90b      	cbnz	r3, 800718c <_vfiprintf_r+0x18>
 8007188:	f7fe f8fa 	bl	8005380 <__sinit>
 800718c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800718e:	07d9      	lsls	r1, r3, #31
 8007190:	d405      	bmi.n	800719e <_vfiprintf_r+0x2a>
 8007192:	89ab      	ldrh	r3, [r5, #12]
 8007194:	059a      	lsls	r2, r3, #22
 8007196:	d402      	bmi.n	800719e <_vfiprintf_r+0x2a>
 8007198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800719a:	f7fe fa74 	bl	8005686 <__retarget_lock_acquire_recursive>
 800719e:	89ab      	ldrh	r3, [r5, #12]
 80071a0:	071b      	lsls	r3, r3, #28
 80071a2:	d501      	bpl.n	80071a8 <_vfiprintf_r+0x34>
 80071a4:	692b      	ldr	r3, [r5, #16]
 80071a6:	b99b      	cbnz	r3, 80071d0 <_vfiprintf_r+0x5c>
 80071a8:	4629      	mov	r1, r5
 80071aa:	4630      	mov	r0, r6
 80071ac:	f000 f938 	bl	8007420 <__swsetup_r>
 80071b0:	b170      	cbz	r0, 80071d0 <_vfiprintf_r+0x5c>
 80071b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071b4:	07dc      	lsls	r4, r3, #31
 80071b6:	d504      	bpl.n	80071c2 <_vfiprintf_r+0x4e>
 80071b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071bc:	b01d      	add	sp, #116	@ 0x74
 80071be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c2:	89ab      	ldrh	r3, [r5, #12]
 80071c4:	0598      	lsls	r0, r3, #22
 80071c6:	d4f7      	bmi.n	80071b8 <_vfiprintf_r+0x44>
 80071c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071ca:	f7fe fa5d 	bl	8005688 <__retarget_lock_release_recursive>
 80071ce:	e7f3      	b.n	80071b8 <_vfiprintf_r+0x44>
 80071d0:	2300      	movs	r3, #0
 80071d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80071d4:	2320      	movs	r3, #32
 80071d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071da:	f8cd 800c 	str.w	r8, [sp, #12]
 80071de:	2330      	movs	r3, #48	@ 0x30
 80071e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007390 <_vfiprintf_r+0x21c>
 80071e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071e8:	f04f 0901 	mov.w	r9, #1
 80071ec:	4623      	mov	r3, r4
 80071ee:	469a      	mov	sl, r3
 80071f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071f4:	b10a      	cbz	r2, 80071fa <_vfiprintf_r+0x86>
 80071f6:	2a25      	cmp	r2, #37	@ 0x25
 80071f8:	d1f9      	bne.n	80071ee <_vfiprintf_r+0x7a>
 80071fa:	ebba 0b04 	subs.w	fp, sl, r4
 80071fe:	d00b      	beq.n	8007218 <_vfiprintf_r+0xa4>
 8007200:	465b      	mov	r3, fp
 8007202:	4622      	mov	r2, r4
 8007204:	4629      	mov	r1, r5
 8007206:	4630      	mov	r0, r6
 8007208:	f7ff ffa2 	bl	8007150 <__sfputs_r>
 800720c:	3001      	adds	r0, #1
 800720e:	f000 80a7 	beq.w	8007360 <_vfiprintf_r+0x1ec>
 8007212:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007214:	445a      	add	r2, fp
 8007216:	9209      	str	r2, [sp, #36]	@ 0x24
 8007218:	f89a 3000 	ldrb.w	r3, [sl]
 800721c:	2b00      	cmp	r3, #0
 800721e:	f000 809f 	beq.w	8007360 <_vfiprintf_r+0x1ec>
 8007222:	2300      	movs	r3, #0
 8007224:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007228:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800722c:	f10a 0a01 	add.w	sl, sl, #1
 8007230:	9304      	str	r3, [sp, #16]
 8007232:	9307      	str	r3, [sp, #28]
 8007234:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007238:	931a      	str	r3, [sp, #104]	@ 0x68
 800723a:	4654      	mov	r4, sl
 800723c:	2205      	movs	r2, #5
 800723e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007242:	4853      	ldr	r0, [pc, #332]	@ (8007390 <_vfiprintf_r+0x21c>)
 8007244:	f7f8 ffcc 	bl	80001e0 <memchr>
 8007248:	9a04      	ldr	r2, [sp, #16]
 800724a:	b9d8      	cbnz	r0, 8007284 <_vfiprintf_r+0x110>
 800724c:	06d1      	lsls	r1, r2, #27
 800724e:	bf44      	itt	mi
 8007250:	2320      	movmi	r3, #32
 8007252:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007256:	0713      	lsls	r3, r2, #28
 8007258:	bf44      	itt	mi
 800725a:	232b      	movmi	r3, #43	@ 0x2b
 800725c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007260:	f89a 3000 	ldrb.w	r3, [sl]
 8007264:	2b2a      	cmp	r3, #42	@ 0x2a
 8007266:	d015      	beq.n	8007294 <_vfiprintf_r+0x120>
 8007268:	9a07      	ldr	r2, [sp, #28]
 800726a:	4654      	mov	r4, sl
 800726c:	2000      	movs	r0, #0
 800726e:	f04f 0c0a 	mov.w	ip, #10
 8007272:	4621      	mov	r1, r4
 8007274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007278:	3b30      	subs	r3, #48	@ 0x30
 800727a:	2b09      	cmp	r3, #9
 800727c:	d94b      	bls.n	8007316 <_vfiprintf_r+0x1a2>
 800727e:	b1b0      	cbz	r0, 80072ae <_vfiprintf_r+0x13a>
 8007280:	9207      	str	r2, [sp, #28]
 8007282:	e014      	b.n	80072ae <_vfiprintf_r+0x13a>
 8007284:	eba0 0308 	sub.w	r3, r0, r8
 8007288:	fa09 f303 	lsl.w	r3, r9, r3
 800728c:	4313      	orrs	r3, r2
 800728e:	9304      	str	r3, [sp, #16]
 8007290:	46a2      	mov	sl, r4
 8007292:	e7d2      	b.n	800723a <_vfiprintf_r+0xc6>
 8007294:	9b03      	ldr	r3, [sp, #12]
 8007296:	1d19      	adds	r1, r3, #4
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	9103      	str	r1, [sp, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	bfbb      	ittet	lt
 80072a0:	425b      	neglt	r3, r3
 80072a2:	f042 0202 	orrlt.w	r2, r2, #2
 80072a6:	9307      	strge	r3, [sp, #28]
 80072a8:	9307      	strlt	r3, [sp, #28]
 80072aa:	bfb8      	it	lt
 80072ac:	9204      	strlt	r2, [sp, #16]
 80072ae:	7823      	ldrb	r3, [r4, #0]
 80072b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80072b2:	d10a      	bne.n	80072ca <_vfiprintf_r+0x156>
 80072b4:	7863      	ldrb	r3, [r4, #1]
 80072b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80072b8:	d132      	bne.n	8007320 <_vfiprintf_r+0x1ac>
 80072ba:	9b03      	ldr	r3, [sp, #12]
 80072bc:	1d1a      	adds	r2, r3, #4
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	9203      	str	r2, [sp, #12]
 80072c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072c6:	3402      	adds	r4, #2
 80072c8:	9305      	str	r3, [sp, #20]
 80072ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80073a0 <_vfiprintf_r+0x22c>
 80072ce:	7821      	ldrb	r1, [r4, #0]
 80072d0:	2203      	movs	r2, #3
 80072d2:	4650      	mov	r0, sl
 80072d4:	f7f8 ff84 	bl	80001e0 <memchr>
 80072d8:	b138      	cbz	r0, 80072ea <_vfiprintf_r+0x176>
 80072da:	9b04      	ldr	r3, [sp, #16]
 80072dc:	eba0 000a 	sub.w	r0, r0, sl
 80072e0:	2240      	movs	r2, #64	@ 0x40
 80072e2:	4082      	lsls	r2, r0
 80072e4:	4313      	orrs	r3, r2
 80072e6:	3401      	adds	r4, #1
 80072e8:	9304      	str	r3, [sp, #16]
 80072ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ee:	4829      	ldr	r0, [pc, #164]	@ (8007394 <_vfiprintf_r+0x220>)
 80072f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072f4:	2206      	movs	r2, #6
 80072f6:	f7f8 ff73 	bl	80001e0 <memchr>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d03f      	beq.n	800737e <_vfiprintf_r+0x20a>
 80072fe:	4b26      	ldr	r3, [pc, #152]	@ (8007398 <_vfiprintf_r+0x224>)
 8007300:	bb1b      	cbnz	r3, 800734a <_vfiprintf_r+0x1d6>
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	3307      	adds	r3, #7
 8007306:	f023 0307 	bic.w	r3, r3, #7
 800730a:	3308      	adds	r3, #8
 800730c:	9303      	str	r3, [sp, #12]
 800730e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007310:	443b      	add	r3, r7
 8007312:	9309      	str	r3, [sp, #36]	@ 0x24
 8007314:	e76a      	b.n	80071ec <_vfiprintf_r+0x78>
 8007316:	fb0c 3202 	mla	r2, ip, r2, r3
 800731a:	460c      	mov	r4, r1
 800731c:	2001      	movs	r0, #1
 800731e:	e7a8      	b.n	8007272 <_vfiprintf_r+0xfe>
 8007320:	2300      	movs	r3, #0
 8007322:	3401      	adds	r4, #1
 8007324:	9305      	str	r3, [sp, #20]
 8007326:	4619      	mov	r1, r3
 8007328:	f04f 0c0a 	mov.w	ip, #10
 800732c:	4620      	mov	r0, r4
 800732e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007332:	3a30      	subs	r2, #48	@ 0x30
 8007334:	2a09      	cmp	r2, #9
 8007336:	d903      	bls.n	8007340 <_vfiprintf_r+0x1cc>
 8007338:	2b00      	cmp	r3, #0
 800733a:	d0c6      	beq.n	80072ca <_vfiprintf_r+0x156>
 800733c:	9105      	str	r1, [sp, #20]
 800733e:	e7c4      	b.n	80072ca <_vfiprintf_r+0x156>
 8007340:	fb0c 2101 	mla	r1, ip, r1, r2
 8007344:	4604      	mov	r4, r0
 8007346:	2301      	movs	r3, #1
 8007348:	e7f0      	b.n	800732c <_vfiprintf_r+0x1b8>
 800734a:	ab03      	add	r3, sp, #12
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	462a      	mov	r2, r5
 8007350:	4b12      	ldr	r3, [pc, #72]	@ (800739c <_vfiprintf_r+0x228>)
 8007352:	a904      	add	r1, sp, #16
 8007354:	4630      	mov	r0, r6
 8007356:	f3af 8000 	nop.w
 800735a:	4607      	mov	r7, r0
 800735c:	1c78      	adds	r0, r7, #1
 800735e:	d1d6      	bne.n	800730e <_vfiprintf_r+0x19a>
 8007360:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007362:	07d9      	lsls	r1, r3, #31
 8007364:	d405      	bmi.n	8007372 <_vfiprintf_r+0x1fe>
 8007366:	89ab      	ldrh	r3, [r5, #12]
 8007368:	059a      	lsls	r2, r3, #22
 800736a:	d402      	bmi.n	8007372 <_vfiprintf_r+0x1fe>
 800736c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800736e:	f7fe f98b 	bl	8005688 <__retarget_lock_release_recursive>
 8007372:	89ab      	ldrh	r3, [r5, #12]
 8007374:	065b      	lsls	r3, r3, #25
 8007376:	f53f af1f 	bmi.w	80071b8 <_vfiprintf_r+0x44>
 800737a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800737c:	e71e      	b.n	80071bc <_vfiprintf_r+0x48>
 800737e:	ab03      	add	r3, sp, #12
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	462a      	mov	r2, r5
 8007384:	4b05      	ldr	r3, [pc, #20]	@ (800739c <_vfiprintf_r+0x228>)
 8007386:	a904      	add	r1, sp, #16
 8007388:	4630      	mov	r0, r6
 800738a:	f7ff fc7b 	bl	8006c84 <_printf_i>
 800738e:	e7e4      	b.n	800735a <_vfiprintf_r+0x1e6>
 8007390:	08007839 	.word	0x08007839
 8007394:	08007843 	.word	0x08007843
 8007398:	00000000 	.word	0x00000000
 800739c:	08007151 	.word	0x08007151
 80073a0:	0800783f 	.word	0x0800783f

080073a4 <__swbuf_r>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	460e      	mov	r6, r1
 80073a8:	4614      	mov	r4, r2
 80073aa:	4605      	mov	r5, r0
 80073ac:	b118      	cbz	r0, 80073b6 <__swbuf_r+0x12>
 80073ae:	6a03      	ldr	r3, [r0, #32]
 80073b0:	b90b      	cbnz	r3, 80073b6 <__swbuf_r+0x12>
 80073b2:	f7fd ffe5 	bl	8005380 <__sinit>
 80073b6:	69a3      	ldr	r3, [r4, #24]
 80073b8:	60a3      	str	r3, [r4, #8]
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	071a      	lsls	r2, r3, #28
 80073be:	d501      	bpl.n	80073c4 <__swbuf_r+0x20>
 80073c0:	6923      	ldr	r3, [r4, #16]
 80073c2:	b943      	cbnz	r3, 80073d6 <__swbuf_r+0x32>
 80073c4:	4621      	mov	r1, r4
 80073c6:	4628      	mov	r0, r5
 80073c8:	f000 f82a 	bl	8007420 <__swsetup_r>
 80073cc:	b118      	cbz	r0, 80073d6 <__swbuf_r+0x32>
 80073ce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80073d2:	4638      	mov	r0, r7
 80073d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d6:	6823      	ldr	r3, [r4, #0]
 80073d8:	6922      	ldr	r2, [r4, #16]
 80073da:	1a98      	subs	r0, r3, r2
 80073dc:	6963      	ldr	r3, [r4, #20]
 80073de:	b2f6      	uxtb	r6, r6
 80073e0:	4283      	cmp	r3, r0
 80073e2:	4637      	mov	r7, r6
 80073e4:	dc05      	bgt.n	80073f2 <__swbuf_r+0x4e>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4628      	mov	r0, r5
 80073ea:	f7ff fded 	bl	8006fc8 <_fflush_r>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d1ed      	bne.n	80073ce <__swbuf_r+0x2a>
 80073f2:	68a3      	ldr	r3, [r4, #8]
 80073f4:	3b01      	subs	r3, #1
 80073f6:	60a3      	str	r3, [r4, #8]
 80073f8:	6823      	ldr	r3, [r4, #0]
 80073fa:	1c5a      	adds	r2, r3, #1
 80073fc:	6022      	str	r2, [r4, #0]
 80073fe:	701e      	strb	r6, [r3, #0]
 8007400:	6962      	ldr	r2, [r4, #20]
 8007402:	1c43      	adds	r3, r0, #1
 8007404:	429a      	cmp	r2, r3
 8007406:	d004      	beq.n	8007412 <__swbuf_r+0x6e>
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	07db      	lsls	r3, r3, #31
 800740c:	d5e1      	bpl.n	80073d2 <__swbuf_r+0x2e>
 800740e:	2e0a      	cmp	r6, #10
 8007410:	d1df      	bne.n	80073d2 <__swbuf_r+0x2e>
 8007412:	4621      	mov	r1, r4
 8007414:	4628      	mov	r0, r5
 8007416:	f7ff fdd7 	bl	8006fc8 <_fflush_r>
 800741a:	2800      	cmp	r0, #0
 800741c:	d0d9      	beq.n	80073d2 <__swbuf_r+0x2e>
 800741e:	e7d6      	b.n	80073ce <__swbuf_r+0x2a>

08007420 <__swsetup_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	4b29      	ldr	r3, [pc, #164]	@ (80074c8 <__swsetup_r+0xa8>)
 8007424:	4605      	mov	r5, r0
 8007426:	6818      	ldr	r0, [r3, #0]
 8007428:	460c      	mov	r4, r1
 800742a:	b118      	cbz	r0, 8007434 <__swsetup_r+0x14>
 800742c:	6a03      	ldr	r3, [r0, #32]
 800742e:	b90b      	cbnz	r3, 8007434 <__swsetup_r+0x14>
 8007430:	f7fd ffa6 	bl	8005380 <__sinit>
 8007434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007438:	0719      	lsls	r1, r3, #28
 800743a:	d422      	bmi.n	8007482 <__swsetup_r+0x62>
 800743c:	06da      	lsls	r2, r3, #27
 800743e:	d407      	bmi.n	8007450 <__swsetup_r+0x30>
 8007440:	2209      	movs	r2, #9
 8007442:	602a      	str	r2, [r5, #0]
 8007444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007448:	81a3      	strh	r3, [r4, #12]
 800744a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800744e:	e033      	b.n	80074b8 <__swsetup_r+0x98>
 8007450:	0758      	lsls	r0, r3, #29
 8007452:	d512      	bpl.n	800747a <__swsetup_r+0x5a>
 8007454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007456:	b141      	cbz	r1, 800746a <__swsetup_r+0x4a>
 8007458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800745c:	4299      	cmp	r1, r3
 800745e:	d002      	beq.n	8007466 <__swsetup_r+0x46>
 8007460:	4628      	mov	r0, r5
 8007462:	f7fe f947 	bl	80056f4 <_free_r>
 8007466:	2300      	movs	r3, #0
 8007468:	6363      	str	r3, [r4, #52]	@ 0x34
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	2300      	movs	r3, #0
 8007474:	6063      	str	r3, [r4, #4]
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	f043 0308 	orr.w	r3, r3, #8
 8007480:	81a3      	strh	r3, [r4, #12]
 8007482:	6923      	ldr	r3, [r4, #16]
 8007484:	b94b      	cbnz	r3, 800749a <__swsetup_r+0x7a>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800748c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007490:	d003      	beq.n	800749a <__swsetup_r+0x7a>
 8007492:	4621      	mov	r1, r4
 8007494:	4628      	mov	r0, r5
 8007496:	f000 f88b 	bl	80075b0 <__smakebuf_r>
 800749a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800749e:	f013 0201 	ands.w	r2, r3, #1
 80074a2:	d00a      	beq.n	80074ba <__swsetup_r+0x9a>
 80074a4:	2200      	movs	r2, #0
 80074a6:	60a2      	str	r2, [r4, #8]
 80074a8:	6962      	ldr	r2, [r4, #20]
 80074aa:	4252      	negs	r2, r2
 80074ac:	61a2      	str	r2, [r4, #24]
 80074ae:	6922      	ldr	r2, [r4, #16]
 80074b0:	b942      	cbnz	r2, 80074c4 <__swsetup_r+0xa4>
 80074b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074b6:	d1c5      	bne.n	8007444 <__swsetup_r+0x24>
 80074b8:	bd38      	pop	{r3, r4, r5, pc}
 80074ba:	0799      	lsls	r1, r3, #30
 80074bc:	bf58      	it	pl
 80074be:	6962      	ldrpl	r2, [r4, #20]
 80074c0:	60a2      	str	r2, [r4, #8]
 80074c2:	e7f4      	b.n	80074ae <__swsetup_r+0x8e>
 80074c4:	2000      	movs	r0, #0
 80074c6:	e7f7      	b.n	80074b8 <__swsetup_r+0x98>
 80074c8:	20000184 	.word	0x20000184

080074cc <_raise_r>:
 80074cc:	291f      	cmp	r1, #31
 80074ce:	b538      	push	{r3, r4, r5, lr}
 80074d0:	4605      	mov	r5, r0
 80074d2:	460c      	mov	r4, r1
 80074d4:	d904      	bls.n	80074e0 <_raise_r+0x14>
 80074d6:	2316      	movs	r3, #22
 80074d8:	6003      	str	r3, [r0, #0]
 80074da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074e2:	b112      	cbz	r2, 80074ea <_raise_r+0x1e>
 80074e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074e8:	b94b      	cbnz	r3, 80074fe <_raise_r+0x32>
 80074ea:	4628      	mov	r0, r5
 80074ec:	f000 f830 	bl	8007550 <_getpid_r>
 80074f0:	4622      	mov	r2, r4
 80074f2:	4601      	mov	r1, r0
 80074f4:	4628      	mov	r0, r5
 80074f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074fa:	f000 b817 	b.w	800752c <_kill_r>
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d00a      	beq.n	8007518 <_raise_r+0x4c>
 8007502:	1c59      	adds	r1, r3, #1
 8007504:	d103      	bne.n	800750e <_raise_r+0x42>
 8007506:	2316      	movs	r3, #22
 8007508:	6003      	str	r3, [r0, #0]
 800750a:	2001      	movs	r0, #1
 800750c:	e7e7      	b.n	80074de <_raise_r+0x12>
 800750e:	2100      	movs	r1, #0
 8007510:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007514:	4620      	mov	r0, r4
 8007516:	4798      	blx	r3
 8007518:	2000      	movs	r0, #0
 800751a:	e7e0      	b.n	80074de <_raise_r+0x12>

0800751c <raise>:
 800751c:	4b02      	ldr	r3, [pc, #8]	@ (8007528 <raise+0xc>)
 800751e:	4601      	mov	r1, r0
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	f7ff bfd3 	b.w	80074cc <_raise_r>
 8007526:	bf00      	nop
 8007528:	20000184 	.word	0x20000184

0800752c <_kill_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4d07      	ldr	r5, [pc, #28]	@ (800754c <_kill_r+0x20>)
 8007530:	2300      	movs	r3, #0
 8007532:	4604      	mov	r4, r0
 8007534:	4608      	mov	r0, r1
 8007536:	4611      	mov	r1, r2
 8007538:	602b      	str	r3, [r5, #0]
 800753a:	f7fa fa01 	bl	8001940 <_kill>
 800753e:	1c43      	adds	r3, r0, #1
 8007540:	d102      	bne.n	8007548 <_kill_r+0x1c>
 8007542:	682b      	ldr	r3, [r5, #0]
 8007544:	b103      	cbz	r3, 8007548 <_kill_r+0x1c>
 8007546:	6023      	str	r3, [r4, #0]
 8007548:	bd38      	pop	{r3, r4, r5, pc}
 800754a:	bf00      	nop
 800754c:	20000470 	.word	0x20000470

08007550 <_getpid_r>:
 8007550:	f7fa b9ee 	b.w	8001930 <_getpid>

08007554 <_malloc_usable_size_r>:
 8007554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007558:	1f18      	subs	r0, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	bfbc      	itt	lt
 800755e:	580b      	ldrlt	r3, [r1, r0]
 8007560:	18c0      	addlt	r0, r0, r3
 8007562:	4770      	bx	lr

08007564 <__swhatbuf_r>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	460c      	mov	r4, r1
 8007568:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800756c:	2900      	cmp	r1, #0
 800756e:	b096      	sub	sp, #88	@ 0x58
 8007570:	4615      	mov	r5, r2
 8007572:	461e      	mov	r6, r3
 8007574:	da0d      	bge.n	8007592 <__swhatbuf_r+0x2e>
 8007576:	89a3      	ldrh	r3, [r4, #12]
 8007578:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800757c:	f04f 0100 	mov.w	r1, #0
 8007580:	bf14      	ite	ne
 8007582:	2340      	movne	r3, #64	@ 0x40
 8007584:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007588:	2000      	movs	r0, #0
 800758a:	6031      	str	r1, [r6, #0]
 800758c:	602b      	str	r3, [r5, #0]
 800758e:	b016      	add	sp, #88	@ 0x58
 8007590:	bd70      	pop	{r4, r5, r6, pc}
 8007592:	466a      	mov	r2, sp
 8007594:	f000 f848 	bl	8007628 <_fstat_r>
 8007598:	2800      	cmp	r0, #0
 800759a:	dbec      	blt.n	8007576 <__swhatbuf_r+0x12>
 800759c:	9901      	ldr	r1, [sp, #4]
 800759e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80075a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80075a6:	4259      	negs	r1, r3
 80075a8:	4159      	adcs	r1, r3
 80075aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075ae:	e7eb      	b.n	8007588 <__swhatbuf_r+0x24>

080075b0 <__smakebuf_r>:
 80075b0:	898b      	ldrh	r3, [r1, #12]
 80075b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075b4:	079d      	lsls	r5, r3, #30
 80075b6:	4606      	mov	r6, r0
 80075b8:	460c      	mov	r4, r1
 80075ba:	d507      	bpl.n	80075cc <__smakebuf_r+0x1c>
 80075bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80075c0:	6023      	str	r3, [r4, #0]
 80075c2:	6123      	str	r3, [r4, #16]
 80075c4:	2301      	movs	r3, #1
 80075c6:	6163      	str	r3, [r4, #20]
 80075c8:	b003      	add	sp, #12
 80075ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075cc:	ab01      	add	r3, sp, #4
 80075ce:	466a      	mov	r2, sp
 80075d0:	f7ff ffc8 	bl	8007564 <__swhatbuf_r>
 80075d4:	9f00      	ldr	r7, [sp, #0]
 80075d6:	4605      	mov	r5, r0
 80075d8:	4639      	mov	r1, r7
 80075da:	4630      	mov	r0, r6
 80075dc:	f7fe fc38 	bl	8005e50 <_malloc_r>
 80075e0:	b948      	cbnz	r0, 80075f6 <__smakebuf_r+0x46>
 80075e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e6:	059a      	lsls	r2, r3, #22
 80075e8:	d4ee      	bmi.n	80075c8 <__smakebuf_r+0x18>
 80075ea:	f023 0303 	bic.w	r3, r3, #3
 80075ee:	f043 0302 	orr.w	r3, r3, #2
 80075f2:	81a3      	strh	r3, [r4, #12]
 80075f4:	e7e2      	b.n	80075bc <__smakebuf_r+0xc>
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	6020      	str	r0, [r4, #0]
 80075fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075fe:	81a3      	strh	r3, [r4, #12]
 8007600:	9b01      	ldr	r3, [sp, #4]
 8007602:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007606:	b15b      	cbz	r3, 8007620 <__smakebuf_r+0x70>
 8007608:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800760c:	4630      	mov	r0, r6
 800760e:	f000 f81d 	bl	800764c <_isatty_r>
 8007612:	b128      	cbz	r0, 8007620 <__smakebuf_r+0x70>
 8007614:	89a3      	ldrh	r3, [r4, #12]
 8007616:	f023 0303 	bic.w	r3, r3, #3
 800761a:	f043 0301 	orr.w	r3, r3, #1
 800761e:	81a3      	strh	r3, [r4, #12]
 8007620:	89a3      	ldrh	r3, [r4, #12]
 8007622:	431d      	orrs	r5, r3
 8007624:	81a5      	strh	r5, [r4, #12]
 8007626:	e7cf      	b.n	80075c8 <__smakebuf_r+0x18>

08007628 <_fstat_r>:
 8007628:	b538      	push	{r3, r4, r5, lr}
 800762a:	4d07      	ldr	r5, [pc, #28]	@ (8007648 <_fstat_r+0x20>)
 800762c:	2300      	movs	r3, #0
 800762e:	4604      	mov	r4, r0
 8007630:	4608      	mov	r0, r1
 8007632:	4611      	mov	r1, r2
 8007634:	602b      	str	r3, [r5, #0]
 8007636:	f7fa f9e3 	bl	8001a00 <_fstat>
 800763a:	1c43      	adds	r3, r0, #1
 800763c:	d102      	bne.n	8007644 <_fstat_r+0x1c>
 800763e:	682b      	ldr	r3, [r5, #0]
 8007640:	b103      	cbz	r3, 8007644 <_fstat_r+0x1c>
 8007642:	6023      	str	r3, [r4, #0]
 8007644:	bd38      	pop	{r3, r4, r5, pc}
 8007646:	bf00      	nop
 8007648:	20000470 	.word	0x20000470

0800764c <_isatty_r>:
 800764c:	b538      	push	{r3, r4, r5, lr}
 800764e:	4d06      	ldr	r5, [pc, #24]	@ (8007668 <_isatty_r+0x1c>)
 8007650:	2300      	movs	r3, #0
 8007652:	4604      	mov	r4, r0
 8007654:	4608      	mov	r0, r1
 8007656:	602b      	str	r3, [r5, #0]
 8007658:	f7fa f9e2 	bl	8001a20 <_isatty>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_isatty_r+0x1a>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_isatty_r+0x1a>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	20000470 	.word	0x20000470

0800766c <_init>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	bf00      	nop
 8007670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007672:	bc08      	pop	{r3}
 8007674:	469e      	mov	lr, r3
 8007676:	4770      	bx	lr

08007678 <_fini>:
 8007678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767a:	bf00      	nop
 800767c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767e:	bc08      	pop	{r3}
 8007680:	469e      	mov	lr, r3
 8007682:	4770      	bx	lr
