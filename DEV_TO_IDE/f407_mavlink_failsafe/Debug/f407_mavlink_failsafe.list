
f407_mavlink_failsafe.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004768  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd4  080048f0  080048f0  000058f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054c4  080054c4  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080054c4  080054c4  000064c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054cc  080054cc  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054cc  080054cc  000064cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054d0  080054d0  000064d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080054d4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00000bd0  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000be0  20000be0  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a691  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b52  00000000  00000000  000116d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000830  00000000  00000000  00013228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000064e  00000000  00000000  00013a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025275  00000000  00000000  000140a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000de34  00000000  00000000  0003931b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ebb9  00000000  00000000  0004714f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00155d08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002110  00000000  00000000  00155d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  00157e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080048d8 	.word	0x080048d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080048d8 	.word	0x080048d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 f9fc 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f80c 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f8a0 	bl	8000644 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 f874 	bl	80005f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ui_init(GPIOB);
 8000508:	4802      	ldr	r0, [pc, #8]	@ (8000514 <main+0x20>)
 800050a:	f004 f967 	bl	80047dc <ui_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  ui_handle();
 800050e:	f004 f949 	bl	80047a4 <ui_handle>
 8000512:	e7fc      	b.n	800050e <main+0x1a>
 8000514:	40020400 	.word	0x40020400

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	@ 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	@ 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f004 f99c 	bl	8004864 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b29      	ldr	r3, [pc, #164]	@ (80005e8 <SystemClock_Config+0xd0>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000544:	4a28      	ldr	r2, [pc, #160]	@ (80005e8 <SystemClock_Config+0xd0>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	@ 0x40
 800054c:	4b26      	ldr	r3, [pc, #152]	@ (80005e8 <SystemClock_Config+0xd0>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b23      	ldr	r3, [pc, #140]	@ (80005ec <SystemClock_Config+0xd4>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a22      	ldr	r2, [pc, #136]	@ (80005ec <SystemClock_Config+0xd4>)
 8000562:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b20      	ldr	r3, [pc, #128]	@ (80005ec <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000578:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800057c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000588:	2304      	movs	r3, #4
 800058a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800058c:	23a8      	movs	r3, #168	@ 0xa8
 800058e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000590:	2302      	movs	r3, #2
 8000592:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000594:	2304      	movs	r3, #4
 8000596:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fd75 	bl	800108c <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005a8:	f000 f89e 	bl	80006e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005b0:	2302      	movs	r3, #2
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2105      	movs	r1, #5
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 ffd6 	bl	800157c <HAL_RCC_ClockConfig>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005d6:	f000 f887 	bl	80006e8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80005da:	f001 f8b5 	bl	8001748 <HAL_RCC_EnableCSS>
}
 80005de:	bf00      	nop
 80005e0:	3750      	adds	r7, #80	@ 0x50
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40007000 	.word	0x40007000

080005f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 80005f6:	4a12      	ldr	r2, [pc, #72]	@ (8000640 <MX_USART2_UART_Init+0x50>)
 80005f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005fa:	4b10      	ldr	r3, [pc, #64]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 80005fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000602:	4b0e      	ldr	r3, [pc, #56]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000608:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800060e:	4b0b      	ldr	r3, [pc, #44]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000614:	4b09      	ldr	r3, [pc, #36]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 8000616:	220c      	movs	r2, #12
 8000618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061a:	4b08      	ldr	r3, [pc, #32]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_USART2_UART_Init+0x4c>)
 8000628:	f001 f9ef 	bl	8001a0a <HAL_UART_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000632:	f000 f859 	bl	80006e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	2000002c 	.word	0x2000002c
 8000640:	40004400 	.word	0x40004400

08000644 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
 8000652:	605a      	str	r2, [r3, #4]
 8000654:	609a      	str	r2, [r3, #8]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	4b20      	ldr	r3, [pc, #128]	@ (80006e0 <MX_GPIO_Init+0x9c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000662:	4a1f      	ldr	r2, [pc, #124]	@ (80006e0 <MX_GPIO_Init+0x9c>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000668:	6313      	str	r3, [r2, #48]	@ 0x30
 800066a:	4b1d      	ldr	r3, [pc, #116]	@ (80006e0 <MX_GPIO_Init+0x9c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	4b19      	ldr	r3, [pc, #100]	@ (80006e0 <MX_GPIO_Init+0x9c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a18      	ldr	r2, [pc, #96]	@ (80006e0 <MX_GPIO_Init+0x9c>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_GPIO_Init+0x9c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	607b      	str	r3, [r7, #4]
 8000690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	603b      	str	r3, [r7, #0]
 8000696:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <MX_GPIO_Init+0x9c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069a:	4a11      	ldr	r2, [pc, #68]	@ (80006e0 <MX_GPIO_Init+0x9c>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a2:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_GPIO_Init+0x9c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_REAR_GEAR_RED_Pin|LED_REAR_GEAR_GREEN_Pin|LED_FRONT_GEAR_RED_Pin|LED_FRONT_GEAR_GREEN_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	f641 4104 	movw	r1, #7172	@ 0x1c04
 80006b4:	480b      	ldr	r0, [pc, #44]	@ (80006e4 <MX_GPIO_Init+0xa0>)
 80006b6:	f000 fccf 	bl	8001058 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_REAR_GEAR_RED_Pin LED_REAR_GEAR_GREEN_Pin LED_FRONT_GEAR_RED_Pin LED_FRONT_GEAR_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_REAR_GEAR_RED_Pin|LED_REAR_GEAR_GREEN_Pin|LED_FRONT_GEAR_RED_Pin|LED_FRONT_GEAR_GREEN_Pin;
 80006ba:	f641 4304 	movw	r3, #7172	@ 0x1c04
 80006be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	4619      	mov	r1, r3
 80006d2:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <MX_GPIO_Init+0xa0>)
 80006d4:	f000 fb24 	bl	8000d20 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020400 	.word	0x40020400

080006e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ec:	b672      	cpsid	i
}
 80006ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f0:	bf00      	nop
 80006f2:	e7fd      	b.n	80006f0 <Error_Handler+0x8>

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <HAL_MspInit+0x4c>)
 8000700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000702:	4a0f      	ldr	r2, [pc, #60]	@ (8000740 <HAL_MspInit+0x4c>)
 8000704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000708:	6453      	str	r3, [r2, #68]	@ 0x44
 800070a:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <HAL_MspInit+0x4c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b09      	ldr	r3, [pc, #36]	@ (8000740 <HAL_MspInit+0x4c>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	4a08      	ldr	r2, [pc, #32]	@ (8000740 <HAL_MspInit+0x4c>)
 8000720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000724:	6413      	str	r3, [r2, #64]	@ 0x40
 8000726:	4b06      	ldr	r3, [pc, #24]	@ (8000740 <HAL_MspInit+0x4c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000732:	bf00      	nop
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08a      	sub	sp, #40	@ 0x28
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074c:	f107 0314 	add.w	r3, r7, #20
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a25      	ldr	r2, [pc, #148]	@ (80007f8 <HAL_UART_MspInit+0xb4>)
 8000762:	4293      	cmp	r3, r2
 8000764:	d143      	bne.n	80007ee <HAL_UART_MspInit+0xaa>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
 800076a:	4b24      	ldr	r3, [pc, #144]	@ (80007fc <HAL_UART_MspInit+0xb8>)
 800076c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076e:	4a23      	ldr	r2, [pc, #140]	@ (80007fc <HAL_UART_MspInit+0xb8>)
 8000770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000774:	6413      	str	r3, [r2, #64]	@ 0x40
 8000776:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <HAL_UART_MspInit+0xb8>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800077e:	613b      	str	r3, [r7, #16]
 8000780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <HAL_UART_MspInit+0xb8>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	4a1c      	ldr	r2, [pc, #112]	@ (80007fc <HAL_UART_MspInit+0xb8>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6313      	str	r3, [r2, #48]	@ 0x30
 8000792:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <HAL_UART_MspInit+0xb8>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800079e:	2304      	movs	r3, #4
 80007a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ae:	2307      	movs	r3, #7
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	4811      	ldr	r0, [pc, #68]	@ (8000800 <HAL_UART_MspInit+0xbc>)
 80007ba:	f000 fab1 	bl	8000d20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80007be:	2308      	movs	r3, #8
 80007c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ce:	2307      	movs	r3, #7
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4809      	ldr	r0, [pc, #36]	@ (8000800 <HAL_UART_MspInit+0xbc>)
 80007da:	f000 faa1 	bl	8000d20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2026      	movs	r0, #38	@ 0x26
 80007e4:	f000 f9d3 	bl	8000b8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007e8:	2026      	movs	r0, #38	@ 0x26
 80007ea:	f000 f9ec 	bl	8000bc6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80007ee:	bf00      	nop
 80007f0:	3728      	adds	r7, #40	@ 0x28
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40004400 	.word	0x40004400
 80007fc:	40023800 	.word	0x40023800
 8000800:	40020000 	.word	0x40020000

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000808:	f001 f8e4 	bl	80019d4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <NMI_Handler+0x8>

08000810 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <HardFault_Handler+0x4>

08000818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <MemManage_Handler+0x4>

08000820 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <UsageFault_Handler+0x4>

08000830 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000850:	bf00      	nop
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085e:	f000 f89b 	bl	8000998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
	...

08000868 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800086c:	4802      	ldr	r0, [pc, #8]	@ (8000878 <USART2_IRQHandler+0x10>)
 800086e:	f001 f977 	bl	8001b60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000002c 	.word	0x2000002c

0800087c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	@ (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	@ (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008d8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008a4:	f7ff ffea 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	@ (80008dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	@ (80008e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	@ (80008e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	@ (80008ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ce:	f003 ffd1 	bl	8004874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d2:	f7ff fe0f 	bl	80004f4 <main>
  bx  lr    
 80008d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80008e4:	080054d4 	.word	0x080054d4
  ldr r2, =_sbss
 80008e8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80008ec:	20000be0 	.word	0x20000be0

080008f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC_IRQHandler>
	...

080008f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <HAL_Init+0x40>)
 80008fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000904:	4b0b      	ldr	r3, [pc, #44]	@ (8000934 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <HAL_Init+0x40>)
 800090a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800090e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000910:	4b08      	ldr	r3, [pc, #32]	@ (8000934 <HAL_Init+0x40>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a07      	ldr	r2, [pc, #28]	@ (8000934 <HAL_Init+0x40>)
 8000916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800091a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f92b 	bl	8000b78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000922:	200f      	movs	r0, #15
 8000924:	f000 f808 	bl	8000938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000928:	f7ff fee4 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023c00 	.word	0x40023c00

08000938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <HAL_InitTick+0x54>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <HAL_InitTick+0x58>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000952:	fbb2 f3f3 	udiv	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f943 	bl	8000be2 <HAL_SYSTICK_Config>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e00e      	b.n	8000984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d80a      	bhi.n	8000982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800096c:	2200      	movs	r2, #0
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000974:	f000 f90b 	bl	8000b8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000978:	4a06      	ldr	r2, [pc, #24]	@ (8000994 <HAL_InitTick+0x5c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	e000      	b.n	8000984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000000 	.word	0x20000000
 8000990:	20000008 	.word	0x20000008
 8000994:	20000004 	.word	0x20000004

08000998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_IncTick+0x20>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <HAL_IncTick+0x24>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a04      	ldr	r2, [pc, #16]	@ (80009bc <HAL_IncTick+0x24>)
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000074 	.word	0x20000074

080009c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <HAL_GetTick+0x14>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000074 	.word	0x20000074

080009d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d8:	b480      	push	{r7}
 80009da:	b085      	sub	sp, #20
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 80009ea:	68db      	ldr	r3, [r3, #12]
 80009ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ee:	68ba      	ldr	r2, [r7, #8]
 80009f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009f4:	4013      	ands	r3, r2
 80009f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0a:	4a04      	ldr	r2, [pc, #16]	@ (8000a1c <__NVIC_SetPriorityGrouping+0x44>)
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	60d3      	str	r3, [r2, #12]
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a24:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <__NVIC_GetPriorityGrouping+0x18>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	0a1b      	lsrs	r3, r3, #8
 8000a2a:	f003 0307 	and.w	r3, r3, #7
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	db0b      	blt.n	8000a66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f003 021f 	and.w	r2, r3, #31
 8000a54:	4907      	ldr	r1, [pc, #28]	@ (8000a74 <__NVIC_EnableIRQ+0x38>)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	095b      	lsrs	r3, r3, #5
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000e100 	.word	0xe000e100

08000a78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	db0a      	blt.n	8000aa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	490c      	ldr	r1, [pc, #48]	@ (8000ac4 <__NVIC_SetPriority+0x4c>)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	0112      	lsls	r2, r2, #4
 8000a98:	b2d2      	uxtb	r2, r2
 8000a9a:	440b      	add	r3, r1
 8000a9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa0:	e00a      	b.n	8000ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	4908      	ldr	r1, [pc, #32]	@ (8000ac8 <__NVIC_SetPriority+0x50>)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	3b04      	subs	r3, #4
 8000ab0:	0112      	lsls	r2, r2, #4
 8000ab2:	b2d2      	uxtb	r2, r2
 8000ab4:	440b      	add	r3, r1
 8000ab6:	761a      	strb	r2, [r3, #24]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000e100 	.word	0xe000e100
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b089      	sub	sp, #36	@ 0x24
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f003 0307 	and.w	r3, r3, #7
 8000ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	f1c3 0307 	rsb	r3, r3, #7
 8000ae6:	2b04      	cmp	r3, #4
 8000ae8:	bf28      	it	cs
 8000aea:	2304      	movcs	r3, #4
 8000aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3304      	adds	r3, #4
 8000af2:	2b06      	cmp	r3, #6
 8000af4:	d902      	bls.n	8000afc <NVIC_EncodePriority+0x30>
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	3b03      	subs	r3, #3
 8000afa:	e000      	b.n	8000afe <NVIC_EncodePriority+0x32>
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b04:	69bb      	ldr	r3, [r7, #24]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	401a      	ands	r2, r3
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1e:	43d9      	mvns	r1, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b24:	4313      	orrs	r3, r2
         );
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3724      	adds	r7, #36	@ 0x24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
	...

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b44:	d301      	bcc.n	8000b4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00f      	b.n	8000b6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <SysTick_Config+0x40>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b52:	210f      	movs	r1, #15
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b58:	f7ff ff8e 	bl	8000a78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b5c:	4b05      	ldr	r3, [pc, #20]	@ (8000b74 <SysTick_Config+0x40>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b62:	4b04      	ldr	r3, [pc, #16]	@ (8000b74 <SysTick_Config+0x40>)
 8000b64:	2207      	movs	r2, #7
 8000b66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	e000e010 	.word	0xe000e010

08000b78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f7ff ff29 	bl	80009d8 <__NVIC_SetPriorityGrouping>
}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	4603      	mov	r3, r0
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
 8000b9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff3e 	bl	8000a20 <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff8e 	bl	8000acc <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5d 	bl	8000a78 <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff31 	bl	8000a3c <__NVIC_EnableIRQ>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bea:	6878      	ldr	r0, [r7, #4]
 8000bec:	f7ff ffa2 	bl	8000b34 <SysTick_Config>
 8000bf0:	4603      	mov	r3, r0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b084      	sub	sp, #16
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c06:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff feda 	bl	80009c0 <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b02      	cmp	r3, #2
 8000c18:	d008      	beq.n	8000c2c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2280      	movs	r2, #128	@ 0x80
 8000c1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	e052      	b.n	8000cd2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 0216 	bic.w	r2, r2, #22
 8000c3a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	695a      	ldr	r2, [r3, #20]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c4a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d103      	bne.n	8000c5c <HAL_DMA_Abort+0x62>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d007      	beq.n	8000c6c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0208 	bic.w	r2, r2, #8
 8000c6a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f022 0201 	bic.w	r2, r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000c7c:	e013      	b.n	8000ca6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000c7e:	f7ff fe9f 	bl	80009c0 <HAL_GetTick>
 8000c82:	4602      	mov	r2, r0
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	2b05      	cmp	r3, #5
 8000c8a:	d90c      	bls.n	8000ca6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2220      	movs	r2, #32
 8000c90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2203      	movs	r2, #3
 8000c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	e015      	b.n	8000cd2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1e4      	bne.n	8000c7e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000cb8:	223f      	movs	r2, #63	@ 0x3f
 8000cba:	409a      	lsls	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d004      	beq.n	8000cf8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2280      	movs	r2, #128	@ 0x80
 8000cf2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e00c      	b.n	8000d12 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2205      	movs	r2, #5
 8000cfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 0201 	bic.w	r2, r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000d10:	2300      	movs	r3, #0
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	@ 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
 8000d28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
 8000d3a:	e16b      	b.n	8001014 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	697a      	ldr	r2, [r7, #20]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	f040 815a 	bne.w	800100e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f003 0303 	and.w	r3, r3, #3
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d005      	beq.n	8000d72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d130      	bne.n	8000dd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	689b      	ldr	r3, [r3, #8]
 8000d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	4013      	ands	r3, r2
 8000d88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	69ba      	ldr	r2, [r7, #24]
 8000da0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	091b      	lsrs	r3, r3, #4
 8000dbe:	f003 0201 	and.w	r2, r3, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0303 	and.w	r3, r3, #3
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d017      	beq.n	8000e10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	2203      	movs	r2, #3
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4013      	ands	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	689a      	ldr	r2, [r3, #8]
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b02      	cmp	r3, #2
 8000e1a:	d123      	bne.n	8000e64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	08da      	lsrs	r2, r3, #3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3208      	adds	r2, #8
 8000e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	f003 0307 	and.w	r3, r3, #7
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	220f      	movs	r2, #15
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	08da      	lsrs	r2, r3, #3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3208      	adds	r2, #8
 8000e5e:	69b9      	ldr	r1, [r7, #24]
 8000e60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0203 	and.w	r2, r3, #3
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	f000 80b4 	beq.w	800100e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b60      	ldr	r3, [pc, #384]	@ (800102c <HAL_GPIO_Init+0x30c>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	4a5f      	ldr	r2, [pc, #380]	@ (800102c <HAL_GPIO_Init+0x30c>)
 8000eb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800102c <HAL_GPIO_Init+0x30c>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ec2:	4a5b      	ldr	r2, [pc, #364]	@ (8001030 <HAL_GPIO_Init+0x310>)
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	089b      	lsrs	r3, r3, #2
 8000ec8:	3302      	adds	r3, #2
 8000eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0303 	and.w	r3, r3, #3
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	220f      	movs	r2, #15
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a52      	ldr	r2, [pc, #328]	@ (8001034 <HAL_GPIO_Init+0x314>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d02b      	beq.n	8000f46 <HAL_GPIO_Init+0x226>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a51      	ldr	r2, [pc, #324]	@ (8001038 <HAL_GPIO_Init+0x318>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d025      	beq.n	8000f42 <HAL_GPIO_Init+0x222>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a50      	ldr	r2, [pc, #320]	@ (800103c <HAL_GPIO_Init+0x31c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d01f      	beq.n	8000f3e <HAL_GPIO_Init+0x21e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4f      	ldr	r2, [pc, #316]	@ (8001040 <HAL_GPIO_Init+0x320>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d019      	beq.n	8000f3a <HAL_GPIO_Init+0x21a>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4e      	ldr	r2, [pc, #312]	@ (8001044 <HAL_GPIO_Init+0x324>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d013      	beq.n	8000f36 <HAL_GPIO_Init+0x216>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4d      	ldr	r2, [pc, #308]	@ (8001048 <HAL_GPIO_Init+0x328>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00d      	beq.n	8000f32 <HAL_GPIO_Init+0x212>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4c      	ldr	r2, [pc, #304]	@ (800104c <HAL_GPIO_Init+0x32c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d007      	beq.n	8000f2e <HAL_GPIO_Init+0x20e>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4b      	ldr	r2, [pc, #300]	@ (8001050 <HAL_GPIO_Init+0x330>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <HAL_GPIO_Init+0x20a>
 8000f26:	2307      	movs	r3, #7
 8000f28:	e00e      	b.n	8000f48 <HAL_GPIO_Init+0x228>
 8000f2a:	2308      	movs	r3, #8
 8000f2c:	e00c      	b.n	8000f48 <HAL_GPIO_Init+0x228>
 8000f2e:	2306      	movs	r3, #6
 8000f30:	e00a      	b.n	8000f48 <HAL_GPIO_Init+0x228>
 8000f32:	2305      	movs	r3, #5
 8000f34:	e008      	b.n	8000f48 <HAL_GPIO_Init+0x228>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e006      	b.n	8000f48 <HAL_GPIO_Init+0x228>
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	e004      	b.n	8000f48 <HAL_GPIO_Init+0x228>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e002      	b.n	8000f48 <HAL_GPIO_Init+0x228>
 8000f42:	2301      	movs	r3, #1
 8000f44:	e000      	b.n	8000f48 <HAL_GPIO_Init+0x228>
 8000f46:	2300      	movs	r3, #0
 8000f48:	69fa      	ldr	r2, [r7, #28]
 8000f4a:	f002 0203 	and.w	r2, r2, #3
 8000f4e:	0092      	lsls	r2, r2, #2
 8000f50:	4093      	lsls	r3, r2
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f58:	4935      	ldr	r1, [pc, #212]	@ (8001030 <HAL_GPIO_Init+0x310>)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	089b      	lsrs	r3, r3, #2
 8000f5e:	3302      	adds	r3, #2
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f66:	4b3b      	ldr	r3, [pc, #236]	@ (8001054 <HAL_GPIO_Init+0x334>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	43db      	mvns	r3, r3
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	4013      	ands	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8a:	4a32      	ldr	r2, [pc, #200]	@ (8001054 <HAL_GPIO_Init+0x334>)
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f90:	4b30      	ldr	r3, [pc, #192]	@ (8001054 <HAL_GPIO_Init+0x334>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb4:	4a27      	ldr	r2, [pc, #156]	@ (8001054 <HAL_GPIO_Init+0x334>)
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fba:	4b26      	ldr	r3, [pc, #152]	@ (8001054 <HAL_GPIO_Init+0x334>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fde:	4a1d      	ldr	r2, [pc, #116]	@ (8001054 <HAL_GPIO_Init+0x334>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	@ (8001054 <HAL_GPIO_Init+0x334>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001008:	4a12      	ldr	r2, [pc, #72]	@ (8001054 <HAL_GPIO_Init+0x334>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3301      	adds	r3, #1
 8001012:	61fb      	str	r3, [r7, #28]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	2b0f      	cmp	r3, #15
 8001018:	f67f ae90 	bls.w	8000d3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3724      	adds	r7, #36	@ 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40013800 	.word	0x40013800
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40021000 	.word	0x40021000
 8001048:	40021400 	.word	0x40021400
 800104c:	40021800 	.word	0x40021800
 8001050:	40021c00 	.word	0x40021c00
 8001054:	40013c00 	.word	0x40013c00

08001058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
 8001064:	4613      	mov	r3, r2
 8001066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001074:	e003      	b.n	800107e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001076:	887b      	ldrh	r3, [r7, #2]
 8001078:	041a      	lsls	r2, r3, #16
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	619a      	str	r2, [r3, #24]
}
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d101      	bne.n	800109e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e267      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d075      	beq.n	8001196 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010aa:	4b88      	ldr	r3, [pc, #544]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	d00c      	beq.n	80010d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010b6:	4b85      	ldr	r3, [pc, #532]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010be:	2b08      	cmp	r3, #8
 80010c0:	d112      	bne.n	80010e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010c2:	4b82      	ldr	r3, [pc, #520]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010ce:	d10b      	bne.n	80010e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010d0:	4b7e      	ldr	r3, [pc, #504]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d05b      	beq.n	8001194 <HAL_RCC_OscConfig+0x108>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d157      	bne.n	8001194 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e242      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010f0:	d106      	bne.n	8001100 <HAL_RCC_OscConfig+0x74>
 80010f2:	4b76      	ldr	r3, [pc, #472]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a75      	ldr	r2, [pc, #468]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80010f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	e01d      	b.n	800113c <HAL_RCC_OscConfig+0xb0>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001108:	d10c      	bne.n	8001124 <HAL_RCC_OscConfig+0x98>
 800110a:	4b70      	ldr	r3, [pc, #448]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a6f      	ldr	r2, [pc, #444]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001110:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001114:	6013      	str	r3, [r2, #0]
 8001116:	4b6d      	ldr	r3, [pc, #436]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a6c      	ldr	r2, [pc, #432]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 800111c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	e00b      	b.n	800113c <HAL_RCC_OscConfig+0xb0>
 8001124:	4b69      	ldr	r3, [pc, #420]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a68      	ldr	r2, [pc, #416]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 800112a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800112e:	6013      	str	r3, [r2, #0]
 8001130:	4b66      	ldr	r3, [pc, #408]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a65      	ldr	r2, [pc, #404]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001136:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800113a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d013      	beq.n	800116c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001144:	f7ff fc3c 	bl	80009c0 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff fc38 	bl	80009c0 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b64      	cmp	r3, #100	@ 0x64
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e207      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	4b5b      	ldr	r3, [pc, #364]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d0f0      	beq.n	800114c <HAL_RCC_OscConfig+0xc0>
 800116a:	e014      	b.n	8001196 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800116c:	f7ff fc28 	bl	80009c0 <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001172:	e008      	b.n	8001186 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001174:	f7ff fc24 	bl	80009c0 <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	2b64      	cmp	r3, #100	@ 0x64
 8001180:	d901      	bls.n	8001186 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001182:	2303      	movs	r3, #3
 8001184:	e1f3      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001186:	4b51      	ldr	r3, [pc, #324]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1f0      	bne.n	8001174 <HAL_RCC_OscConfig+0xe8>
 8001192:	e000      	b.n	8001196 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d063      	beq.n	800126a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011a2:	4b4a      	ldr	r3, [pc, #296]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d00b      	beq.n	80011c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ae:	4b47      	ldr	r3, [pc, #284]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d11c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011ba:	4b44      	ldr	r3, [pc, #272]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d116      	bne.n	80011f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c6:	4b41      	ldr	r3, [pc, #260]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <HAL_RCC_OscConfig+0x152>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	68db      	ldr	r3, [r3, #12]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d001      	beq.n	80011de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e1c7      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011de:	4b3b      	ldr	r3, [pc, #236]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	691b      	ldr	r3, [r3, #16]
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4937      	ldr	r1, [pc, #220]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80011ee:	4313      	orrs	r3, r2
 80011f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011f2:	e03a      	b.n	800126a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d020      	beq.n	800123e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011fc:	4b34      	ldr	r3, [pc, #208]	@ (80012d0 <HAL_RCC_OscConfig+0x244>)
 80011fe:	2201      	movs	r2, #1
 8001200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001202:	f7ff fbdd 	bl	80009c0 <HAL_GetTick>
 8001206:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120a:	f7ff fbd9 	bl	80009c0 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e1a8      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800121c:	4b2b      	ldr	r3, [pc, #172]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001228:	4b28      	ldr	r3, [pc, #160]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691b      	ldr	r3, [r3, #16]
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4925      	ldr	r1, [pc, #148]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001238:	4313      	orrs	r3, r2
 800123a:	600b      	str	r3, [r1, #0]
 800123c:	e015      	b.n	800126a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <HAL_RCC_OscConfig+0x244>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff fbbc 	bl	80009c0 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124c:	f7ff fbb8 	bl	80009c0 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e187      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f0      	bne.n	800124c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d036      	beq.n	80012e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d016      	beq.n	80012ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800127e:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_RCC_OscConfig+0x248>)
 8001280:	2201      	movs	r2, #1
 8001282:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001284:	f7ff fb9c 	bl	80009c0 <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800128c:	f7ff fb98 	bl	80009c0 <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e167      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800129e:	4b0b      	ldr	r3, [pc, #44]	@ (80012cc <HAL_RCC_OscConfig+0x240>)
 80012a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d0f0      	beq.n	800128c <HAL_RCC_OscConfig+0x200>
 80012aa:	e01b      	b.n	80012e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ac:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <HAL_RCC_OscConfig+0x248>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff fb85 	bl	80009c0 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	e00e      	b.n	80012d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ba:	f7ff fb81 	bl	80009c0 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b02      	cmp	r3, #2
 80012c6:	d907      	bls.n	80012d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012c8:	2303      	movs	r3, #3
 80012ca:	e150      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
 80012cc:	40023800 	.word	0x40023800
 80012d0:	42470000 	.word	0x42470000
 80012d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d8:	4b88      	ldr	r3, [pc, #544]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80012da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012dc:	f003 0302 	and.w	r3, r3, #2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d1ea      	bne.n	80012ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0304 	and.w	r3, r3, #4
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 8097 	beq.w	8001420 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012f6:	4b81      	ldr	r3, [pc, #516]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10f      	bne.n	8001322 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b7d      	ldr	r3, [pc, #500]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	4a7c      	ldr	r2, [pc, #496]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800130c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001310:	6413      	str	r3, [r2, #64]	@ 0x40
 8001312:	4b7a      	ldr	r3, [pc, #488]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131e:	2301      	movs	r3, #1
 8001320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001322:	4b77      	ldr	r3, [pc, #476]	@ (8001500 <HAL_RCC_OscConfig+0x474>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800132a:	2b00      	cmp	r3, #0
 800132c:	d118      	bne.n	8001360 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800132e:	4b74      	ldr	r3, [pc, #464]	@ (8001500 <HAL_RCC_OscConfig+0x474>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a73      	ldr	r2, [pc, #460]	@ (8001500 <HAL_RCC_OscConfig+0x474>)
 8001334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800133a:	f7ff fb41 	bl	80009c0 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001342:	f7ff fb3d 	bl	80009c0 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e10c      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001354:	4b6a      	ldr	r3, [pc, #424]	@ (8001500 <HAL_RCC_OscConfig+0x474>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0x2ea>
 8001368:	4b64      	ldr	r3, [pc, #400]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800136a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800136c:	4a63      	ldr	r2, [pc, #396]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6713      	str	r3, [r2, #112]	@ 0x70
 8001374:	e01c      	b.n	80013b0 <HAL_RCC_OscConfig+0x324>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2b05      	cmp	r3, #5
 800137c:	d10c      	bne.n	8001398 <HAL_RCC_OscConfig+0x30c>
 800137e:	4b5f      	ldr	r3, [pc, #380]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001380:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001382:	4a5e      	ldr	r2, [pc, #376]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6713      	str	r3, [r2, #112]	@ 0x70
 800138a:	4b5c      	ldr	r3, [pc, #368]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800138c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800138e:	4a5b      	ldr	r2, [pc, #364]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6713      	str	r3, [r2, #112]	@ 0x70
 8001396:	e00b      	b.n	80013b0 <HAL_RCC_OscConfig+0x324>
 8001398:	4b58      	ldr	r3, [pc, #352]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800139a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800139c:	4a57      	ldr	r2, [pc, #348]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80013a4:	4b55      	ldr	r3, [pc, #340]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80013a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a8:	4a54      	ldr	r2, [pc, #336]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80013aa:	f023 0304 	bic.w	r3, r3, #4
 80013ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d015      	beq.n	80013e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff fb02 	bl	80009c0 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fafe 	bl	80009c0 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e0cb      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013d6:	4b49      	ldr	r3, [pc, #292]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0ee      	beq.n	80013c0 <HAL_RCC_OscConfig+0x334>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e4:	f7ff faec 	bl	80009c0 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ea:	e00a      	b.n	8001402 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ec:	f7ff fae8 	bl	80009c0 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e0b5      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001402:	4b3e      	ldr	r3, [pc, #248]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1ee      	bne.n	80013ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800140e:	7dfb      	ldrb	r3, [r7, #23]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d105      	bne.n	8001420 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001414:	4b39      	ldr	r3, [pc, #228]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	4a38      	ldr	r2, [pc, #224]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800141a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800141e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80a1 	beq.w	800156c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800142a:	4b34      	ldr	r3, [pc, #208]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b08      	cmp	r3, #8
 8001434:	d05c      	beq.n	80014f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b02      	cmp	r3, #2
 800143c:	d141      	bne.n	80014c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800143e:	4b31      	ldr	r3, [pc, #196]	@ (8001504 <HAL_RCC_OscConfig+0x478>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001444:	f7ff fabc 	bl	80009c0 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff fab8 	bl	80009c0 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e087      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69da      	ldr	r2, [r3, #28]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a1b      	ldr	r3, [r3, #32]
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001478:	019b      	lsls	r3, r3, #6
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001480:	085b      	lsrs	r3, r3, #1
 8001482:	3b01      	subs	r3, #1
 8001484:	041b      	lsls	r3, r3, #16
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800148c:	061b      	lsls	r3, r3, #24
 800148e:	491b      	ldr	r1, [pc, #108]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 8001490:	4313      	orrs	r3, r2
 8001492:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001494:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <HAL_RCC_OscConfig+0x478>)
 8001496:	2201      	movs	r2, #1
 8001498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149a:	f7ff fa91 	bl	80009c0 <HAL_GetTick>
 800149e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff fa8d 	bl	80009c0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e05c      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014b4:	4b11      	ldr	r3, [pc, #68]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x416>
 80014c0:	e054      	b.n	800156c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c2:	4b10      	ldr	r3, [pc, #64]	@ (8001504 <HAL_RCC_OscConfig+0x478>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fa7a 	bl	80009c0 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014d0:	f7ff fa76 	bl	80009c0 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e045      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_RCC_OscConfig+0x470>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x444>
 80014ee:	e03d      	b.n	800156c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d107      	bne.n	8001508 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e038      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
 80014fc:	40023800 	.word	0x40023800
 8001500:	40007000 	.word	0x40007000
 8001504:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <HAL_RCC_OscConfig+0x4ec>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d028      	beq.n	8001568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001520:	429a      	cmp	r2, r3
 8001522:	d121      	bne.n	8001568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d11a      	bne.n	8001568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001538:	4013      	ands	r3, r2
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800153e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001540:	4293      	cmp	r3, r2
 8001542:	d111      	bne.n	8001568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154e:	085b      	lsrs	r3, r3, #1
 8001550:	3b01      	subs	r3, #1
 8001552:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001554:	429a      	cmp	r2, r3
 8001556:	d107      	bne.n	8001568 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001562:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001564:	429a      	cmp	r2, r3
 8001566:	d001      	beq.n	800156c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001568:	2301      	movs	r3, #1
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3718      	adds	r7, #24
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d101      	bne.n	8001590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0cc      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001590:	4b68      	ldr	r3, [pc, #416]	@ (8001734 <HAL_RCC_ClockConfig+0x1b8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	429a      	cmp	r2, r3
 800159c:	d90c      	bls.n	80015b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159e:	4b65      	ldr	r3, [pc, #404]	@ (8001734 <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a6:	4b63      	ldr	r3, [pc, #396]	@ (8001734 <HAL_RCC_ClockConfig+0x1b8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d001      	beq.n	80015b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0b8      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d020      	beq.n	8001606 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0304 	and.w	r3, r3, #4
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015d0:	4b59      	ldr	r3, [pc, #356]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	4a58      	ldr	r2, [pc, #352]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0308 	and.w	r3, r3, #8
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d005      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e8:	4b53      	ldr	r3, [pc, #332]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	4a52      	ldr	r2, [pc, #328]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f4:	4b50      	ldr	r3, [pc, #320]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	494d      	ldr	r1, [pc, #308]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d044      	beq.n	800169c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800161a:	4b47      	ldr	r3, [pc, #284]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d119      	bne.n	800165a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e07f      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d003      	beq.n	800163a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001636:	2b03      	cmp	r3, #3
 8001638:	d107      	bne.n	800164a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163a:	4b3f      	ldr	r3, [pc, #252]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d109      	bne.n	800165a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e06f      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800164a:	4b3b      	ldr	r3, [pc, #236]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d101      	bne.n	800165a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e067      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800165a:	4b37      	ldr	r3, [pc, #220]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f023 0203 	bic.w	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4934      	ldr	r1, [pc, #208]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 8001668:	4313      	orrs	r3, r2
 800166a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800166c:	f7ff f9a8 	bl	80009c0 <HAL_GetTick>
 8001670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001672:	e00a      	b.n	800168a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001674:	f7ff f9a4 	bl	80009c0 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e04f      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800168a:	4b2b      	ldr	r3, [pc, #172]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 020c 	and.w	r2, r3, #12
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	429a      	cmp	r2, r3
 800169a:	d1eb      	bne.n	8001674 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800169c:	4b25      	ldr	r3, [pc, #148]	@ (8001734 <HAL_RCC_ClockConfig+0x1b8>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0307 	and.w	r3, r3, #7
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d20c      	bcs.n	80016c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016aa:	4b22      	ldr	r3, [pc, #136]	@ (8001734 <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <HAL_RCC_ClockConfig+0x1b8>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	683a      	ldr	r2, [r7, #0]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e032      	b.n	800172a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d008      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	4916      	ldr	r1, [pc, #88]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ee:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	490e      	ldr	r1, [pc, #56]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001702:	f000 f82d 	bl	8001760 <HAL_RCC_GetSysClockFreq>
 8001706:	4602      	mov	r2, r0
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <HAL_RCC_ClockConfig+0x1bc>)
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	091b      	lsrs	r3, r3, #4
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	490a      	ldr	r1, [pc, #40]	@ (800173c <HAL_RCC_ClockConfig+0x1c0>)
 8001714:	5ccb      	ldrb	r3, [r1, r3]
 8001716:	fa22 f303 	lsr.w	r3, r2, r3
 800171a:	4a09      	ldr	r2, [pc, #36]	@ (8001740 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <HAL_RCC_ClockConfig+0x1c8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff f908 	bl	8000938 <HAL_InitTick>

  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40023c00 	.word	0x40023c00
 8001738:	40023800 	.word	0x40023800
 800173c:	080048f0 	.word	0x080048f0
 8001740:	20000000 	.word	0x20000000
 8001744:	20000004 	.word	0x20000004

08001748 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <HAL_RCC_EnableCSS+0x14>)
 800174e:	2201      	movs	r2, #1
 8001750:	601a      	str	r2, [r3, #0]
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	4247004c 	.word	0x4247004c

08001760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001764:	b094      	sub	sp, #80	@ 0x50
 8001766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001768:	2300      	movs	r3, #0
 800176a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001770:	2300      	movs	r3, #0
 8001772:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001778:	4b79      	ldr	r3, [pc, #484]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f003 030c 	and.w	r3, r3, #12
 8001780:	2b08      	cmp	r3, #8
 8001782:	d00d      	beq.n	80017a0 <HAL_RCC_GetSysClockFreq+0x40>
 8001784:	2b08      	cmp	r3, #8
 8001786:	f200 80e1 	bhi.w	800194c <HAL_RCC_GetSysClockFreq+0x1ec>
 800178a:	2b00      	cmp	r3, #0
 800178c:	d002      	beq.n	8001794 <HAL_RCC_GetSysClockFreq+0x34>
 800178e:	2b04      	cmp	r3, #4
 8001790:	d003      	beq.n	800179a <HAL_RCC_GetSysClockFreq+0x3a>
 8001792:	e0db      	b.n	800194c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001794:	4b73      	ldr	r3, [pc, #460]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x204>)
 8001796:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001798:	e0db      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800179a:	4b73      	ldr	r3, [pc, #460]	@ (8001968 <HAL_RCC_GetSysClockFreq+0x208>)
 800179c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800179e:	e0d8      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017aa:	4b6d      	ldr	r3, [pc, #436]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d063      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	099b      	lsrs	r3, r3, #6
 80017bc:	2200      	movs	r2, #0
 80017be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80017ca:	2300      	movs	r3, #0
 80017cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017d2:	4622      	mov	r2, r4
 80017d4:	462b      	mov	r3, r5
 80017d6:	f04f 0000 	mov.w	r0, #0
 80017da:	f04f 0100 	mov.w	r1, #0
 80017de:	0159      	lsls	r1, r3, #5
 80017e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017e4:	0150      	lsls	r0, r2, #5
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4621      	mov	r1, r4
 80017ec:	1a51      	subs	r1, r2, r1
 80017ee:	6139      	str	r1, [r7, #16]
 80017f0:	4629      	mov	r1, r5
 80017f2:	eb63 0301 	sbc.w	r3, r3, r1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	f04f 0200 	mov.w	r2, #0
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001804:	4659      	mov	r1, fp
 8001806:	018b      	lsls	r3, r1, #6
 8001808:	4651      	mov	r1, sl
 800180a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800180e:	4651      	mov	r1, sl
 8001810:	018a      	lsls	r2, r1, #6
 8001812:	4651      	mov	r1, sl
 8001814:	ebb2 0801 	subs.w	r8, r2, r1
 8001818:	4659      	mov	r1, fp
 800181a:	eb63 0901 	sbc.w	r9, r3, r1
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800182a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800182e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001832:	4690      	mov	r8, r2
 8001834:	4699      	mov	r9, r3
 8001836:	4623      	mov	r3, r4
 8001838:	eb18 0303 	adds.w	r3, r8, r3
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	462b      	mov	r3, r5
 8001840:	eb49 0303 	adc.w	r3, r9, r3
 8001844:	60fb      	str	r3, [r7, #12]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001852:	4629      	mov	r1, r5
 8001854:	024b      	lsls	r3, r1, #9
 8001856:	4621      	mov	r1, r4
 8001858:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800185c:	4621      	mov	r1, r4
 800185e:	024a      	lsls	r2, r1, #9
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001866:	2200      	movs	r2, #0
 8001868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800186a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800186c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001870:	f7fe fcaa 	bl	80001c8 <__aeabi_uldivmod>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	4613      	mov	r3, r2
 800187a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800187c:	e058      	b.n	8001930 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800187e:	4b38      	ldr	r3, [pc, #224]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	099b      	lsrs	r3, r3, #6
 8001884:	2200      	movs	r2, #0
 8001886:	4618      	mov	r0, r3
 8001888:	4611      	mov	r1, r2
 800188a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
 8001894:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001898:	4642      	mov	r2, r8
 800189a:	464b      	mov	r3, r9
 800189c:	f04f 0000 	mov.w	r0, #0
 80018a0:	f04f 0100 	mov.w	r1, #0
 80018a4:	0159      	lsls	r1, r3, #5
 80018a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018aa:	0150      	lsls	r0, r2, #5
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4641      	mov	r1, r8
 80018b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80018b6:	4649      	mov	r1, r9
 80018b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018d0:	ebb2 040a 	subs.w	r4, r2, sl
 80018d4:	eb63 050b 	sbc.w	r5, r3, fp
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	00eb      	lsls	r3, r5, #3
 80018e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018e6:	00e2      	lsls	r2, r4, #3
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	4643      	mov	r3, r8
 80018ee:	18e3      	adds	r3, r4, r3
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	464b      	mov	r3, r9
 80018f4:	eb45 0303 	adc.w	r3, r5, r3
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	f04f 0300 	mov.w	r3, #0
 8001902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001906:	4629      	mov	r1, r5
 8001908:	028b      	lsls	r3, r1, #10
 800190a:	4621      	mov	r1, r4
 800190c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001910:	4621      	mov	r1, r4
 8001912:	028a      	lsls	r2, r1, #10
 8001914:	4610      	mov	r0, r2
 8001916:	4619      	mov	r1, r3
 8001918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800191a:	2200      	movs	r2, #0
 800191c:	61bb      	str	r3, [r7, #24]
 800191e:	61fa      	str	r2, [r7, #28]
 8001920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001924:	f7fe fc50 	bl	80001c8 <__aeabi_uldivmod>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	4613      	mov	r3, r2
 800192e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_RCC_GetSysClockFreq+0x200>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	3301      	adds	r3, #1
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001940:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001944:	fbb2 f3f3 	udiv	r3, r2, r3
 8001948:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800194a:	e002      	b.n	8001952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800194c:	4b05      	ldr	r3, [pc, #20]	@ (8001964 <HAL_RCC_GetSysClockFreq+0x204>)
 800194e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001954:	4618      	mov	r0, r3
 8001956:	3750      	adds	r7, #80	@ 0x50
 8001958:	46bd      	mov	sp, r7
 800195a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800
 8001964:	00f42400 	.word	0x00f42400
 8001968:	007a1200 	.word	0x007a1200

0800196c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <HAL_RCC_GetHCLKFreq+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000000 	.word	0x20000000

08001984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001988:	f7ff fff0 	bl	800196c <HAL_RCC_GetHCLKFreq>
 800198c:	4602      	mov	r2, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0a9b      	lsrs	r3, r3, #10
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4903      	ldr	r1, [pc, #12]	@ (80019a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800199a:	5ccb      	ldrb	r3, [r1, r3]
 800199c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	08004900 	.word	0x08004900

080019ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019b0:	f7ff ffdc 	bl	800196c <HAL_RCC_GetHCLKFreq>
 80019b4:	4602      	mov	r2, r0
 80019b6:	4b05      	ldr	r3, [pc, #20]	@ (80019cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	0b5b      	lsrs	r3, r3, #13
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	4903      	ldr	r1, [pc, #12]	@ (80019d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c2:	5ccb      	ldrb	r3, [r1, r3]
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40023800 	.word	0x40023800
 80019d0:	08004900 	.word	0x08004900

080019d4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80019d8:	4b06      	ldr	r3, [pc, #24]	@ (80019f4 <HAL_RCC_NMI_IRQHandler+0x20>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e0:	2b80      	cmp	r3, #128	@ 0x80
 80019e2:	d104      	bne.n	80019ee <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80019e4:	f000 f80a 	bl	80019fc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <HAL_RCC_NMI_IRQHandler+0x24>)
 80019ea:	2280      	movs	r2, #128	@ 0x80
 80019ec:	701a      	strb	r2, [r3, #0]
  }
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	4002380e 	.word	0x4002380e

080019fc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e042      	b.n	8001aa2 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d106      	bne.n	8001a36 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7fe fe87 	bl	8000744 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2224      	movs	r2, #36	@ 0x24
 8001a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a4c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fd1a 	bl	8002488 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	691a      	ldr	r2, [r3, #16]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a62:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a72:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68da      	ldr	r2, [r3, #12]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a82:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	2b20      	cmp	r3, #32
 8001ac2:	d121      	bne.n	8001b08 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d002      	beq.n	8001ad0 <HAL_UART_Transmit_IT+0x26>
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e01a      	b.n	8001b0a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	88fa      	ldrh	r2, [r7, #6]
 8001ade:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	88fa      	ldrh	r2, [r7, #6]
 8001ae4:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2221      	movs	r2, #33	@ 0x21
 8001af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68da      	ldr	r2, [r3, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b02:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	e000      	b.n	8001b0a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001b08:	2302      	movs	r3, #2
  }
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3714      	adds	r7, #20
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b084      	sub	sp, #16
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	4613      	mov	r3, r2
 8001b22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	2b20      	cmp	r3, #32
 8001b2e:	d112      	bne.n	8001b56 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_UART_Receive_IT+0x26>
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e00b      	b.n	8001b58 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	68b9      	ldr	r1, [r7, #8]
 8001b4c:	68f8      	ldr	r0, [r7, #12]
 8001b4e:	f000 fac7 	bl	80020e0 <UART_Start_Receive_IT>
 8001b52:	4603      	mov	r3, r0
 8001b54:	e000      	b.n	8001b58 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001b56:	2302      	movs	r3, #2
  }
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0ba      	sub	sp, #232	@ 0xe8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001b9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001baa:	f003 0320 	and.w	r3, r3, #32
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d009      	beq.n	8001bc6 <HAL_UART_IRQHandler+0x66>
 8001bb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001bb6:	f003 0320 	and.w	r3, r3, #32
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 fba4 	bl	800230c <UART_Receive_IT>
      return;
 8001bc4:	e273      	b.n	80020ae <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001bc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 80de 	beq.w	8001d8c <HAL_UART_IRQHandler+0x22c>
 8001bd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d106      	bne.n	8001bea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001be0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80d1 	beq.w	8001d8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00b      	beq.n	8001c0e <HAL_UART_IRQHandler+0xae>
 8001bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d005      	beq.n	8001c0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	f043 0201 	orr.w	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <HAL_UART_IRQHandler+0xd2>
 8001c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	f043 0202 	orr.w	r2, r3, #2
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_UART_IRQHandler+0xf6>
 8001c3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f043 0204 	orr.w	r2, r3, #4
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d011      	beq.n	8001c86 <HAL_UART_IRQHandler+0x126>
 8001c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d105      	bne.n	8001c7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7e:	f043 0208 	orr.w	r2, r3, #8
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 820a 	beq.w	80020a4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c94:	f003 0320 	and.w	r3, r3, #32
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <HAL_UART_IRQHandler+0x14e>
 8001c9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ca0:	f003 0320 	and.w	r3, r3, #32
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d002      	beq.n	8001cae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 fb2f 	bl	800230c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	695b      	ldr	r3, [r3, #20]
 8001cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cb8:	2b40      	cmp	r3, #64	@ 0x40
 8001cba:	bf0c      	ite	eq
 8001cbc:	2301      	moveq	r3, #1
 8001cbe:	2300      	movne	r3, #0
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d103      	bne.n	8001cda <HAL_UART_IRQHandler+0x17a>
 8001cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d04f      	beq.n	8001d7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 fa3a 	bl	8002154 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cea:	2b40      	cmp	r3, #64	@ 0x40
 8001cec:	d141      	bne.n	8001d72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	3314      	adds	r3, #20
 8001cf4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001cfc:	e853 3f00 	ldrex	r3, [r3]
 8001d00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001d04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	3314      	adds	r3, #20
 8001d16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001d1a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001d26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001d2a:	e841 2300 	strex	r3, r2, [r1]
 8001d2e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1d9      	bne.n	8001cee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d013      	beq.n	8001d6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d46:	4a8a      	ldr	r2, [pc, #552]	@ (8001f70 <HAL_UART_IRQHandler+0x410>)
 8001d48:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe ffc3 	bl	8000cda <HAL_DMA_Abort_IT>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d016      	beq.n	8001d88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d64:	4610      	mov	r0, r2
 8001d66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d68:	e00e      	b.n	8001d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f9a2 	bl	80020b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d70:	e00a      	b.n	8001d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f99e 	bl	80020b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d78:	e006      	b.n	8001d88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f99a 	bl	80020b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001d86:	e18d      	b.n	80020a4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d88:	bf00      	nop
    return;
 8001d8a:	e18b      	b.n	80020a4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	f040 8167 	bne.w	8002064 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8160 	beq.w	8002064 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8001da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001da8:	f003 0310 	and.w	r3, r3, #16
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 8159 	beq.w	8002064 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dd2:	2b40      	cmp	r3, #64	@ 0x40
 8001dd4:	f040 80ce 	bne.w	8001f74 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001de4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 80a9 	beq.w	8001f40 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001df6:	429a      	cmp	r2, r3
 8001df8:	f080 80a2 	bcs.w	8001f40 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e02:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e08:	69db      	ldr	r3, [r3, #28]
 8001e0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e0e:	f000 8088 	beq.w	8001f22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	330c      	adds	r3, #12
 8001e18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e20:	e853 3f00 	ldrex	r3, [r3]
 8001e24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001e3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001e42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e46:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001e4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001e4e:	e841 2300 	strex	r3, r2, [r1]
 8001e52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001e56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1d9      	bne.n	8001e12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	3314      	adds	r3, #20
 8001e64:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001e68:	e853 3f00 	ldrex	r3, [r3]
 8001e6c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001e6e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	3314      	adds	r3, #20
 8001e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001e82:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001e86:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e88:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001e8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001e8e:	e841 2300 	strex	r3, r2, [r1]
 8001e92:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001e94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1e1      	bne.n	8001e5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	3314      	adds	r3, #20
 8001ea0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ea2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001ea4:	e853 3f00 	ldrex	r3, [r3]
 8001ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001eaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	3314      	adds	r3, #20
 8001eba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001ebe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001ec0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ec2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001ec4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001ec6:	e841 2300 	strex	r3, r2, [r1]
 8001eca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001ecc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1e3      	bne.n	8001e9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	330c      	adds	r3, #12
 8001ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001eea:	e853 3f00 	ldrex	r3, [r3]
 8001eee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ef2:	f023 0310 	bic.w	r3, r3, #16
 8001ef6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	330c      	adds	r3, #12
 8001f00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001f04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001f0c:	e841 2300 	strex	r3, r2, [r1]
 8001f10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1e3      	bne.n	8001ee0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fe6c 	bl	8000bfa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2202      	movs	r2, #2
 8001f26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4619      	mov	r1, r3
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f8c5 	bl	80020c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8001f3e:	e0b3      	b.n	80020a8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f44:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f040 80ad 	bne.w	80020a8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f58:	f040 80a6 	bne.w	80020a8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8ad 	bl	80020c8 <HAL_UARTEx_RxEventCallback>
      return;
 8001f6e:	e09b      	b.n	80020a8 <HAL_UART_IRQHandler+0x548>
 8001f70:	0800221b 	.word	0x0800221b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 808e 	beq.w	80020ac <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8001f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 8089 	beq.w	80020ac <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	330c      	adds	r3, #12
 8001fa0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa4:	e853 3f00 	ldrex	r3, [r3]
 8001fa8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001fb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	330c      	adds	r3, #12
 8001fba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001fbe:	647a      	str	r2, [r7, #68]	@ 0x44
 8001fc0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001fc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001fc4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001fc6:	e841 2300 	strex	r3, r2, [r1]
 8001fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1e3      	bne.n	8001f9a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	3314      	adds	r3, #20
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	e853 3f00 	ldrex	r3, [r3]
 8001fe0:	623b      	str	r3, [r7, #32]
   return(result);
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	f023 0301 	bic.w	r3, r3, #1
 8001fe8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	3314      	adds	r3, #20
 8001ff2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001ff6:	633a      	str	r2, [r7, #48]	@ 0x30
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ffe:	e841 2300 	strex	r3, r2, [r1]
 8002002:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1e3      	bne.n	8001fd2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2220      	movs	r2, #32
 800200e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	330c      	adds	r3, #12
 800201e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	e853 3f00 	ldrex	r3, [r3]
 8002026:	60fb      	str	r3, [r7, #12]
   return(result);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f023 0310 	bic.w	r3, r3, #16
 800202e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	330c      	adds	r3, #12
 8002038:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800203c:	61fa      	str	r2, [r7, #28]
 800203e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002040:	69b9      	ldr	r1, [r7, #24]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	e841 2300 	strex	r3, r2, [r1]
 8002048:	617b      	str	r3, [r7, #20]
   return(result);
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e3      	bne.n	8002018 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002056:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800205a:	4619      	mov	r1, r3
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f833 	bl	80020c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002062:	e023      	b.n	80020ac <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	d009      	beq.n	8002084 <HAL_UART_IRQHandler+0x524>
 8002070:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f8dd 	bl	800223c <UART_Transmit_IT>
    return;
 8002082:	e014      	b.n	80020ae <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208c:	2b00      	cmp	r3, #0
 800208e:	d00e      	beq.n	80020ae <HAL_UART_IRQHandler+0x54e>
 8002090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002094:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d008      	beq.n	80020ae <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f91d 	bl	80022dc <UART_EndTransmit_IT>
    return;
 80020a2:	e004      	b.n	80020ae <HAL_UART_IRQHandler+0x54e>
    return;
 80020a4:	bf00      	nop
 80020a6:	e002      	b.n	80020ae <HAL_UART_IRQHandler+0x54e>
      return;
 80020a8:	bf00      	nop
 80020aa:	e000      	b.n	80020ae <HAL_UART_IRQHandler+0x54e>
      return;
 80020ac:	bf00      	nop
  }
}
 80020ae:	37e8      	adds	r7, #232	@ 0xe8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	88fa      	ldrh	r2, [r7, #6]
 80020f8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	88fa      	ldrh	r2, [r7, #6]
 80020fe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2222      	movs	r2, #34	@ 0x22
 800210a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d007      	beq.n	8002126 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002124:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695a      	ldr	r2, [r3, #20]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0201 	orr.w	r2, r2, #1
 8002134:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0220 	orr.w	r2, r2, #32
 8002144:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002154:	b480      	push	{r7}
 8002156:	b095      	sub	sp, #84	@ 0x54
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	330c      	adds	r3, #12
 8002162:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002166:	e853 3f00 	ldrex	r3, [r3]
 800216a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800216c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002172:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	330c      	adds	r3, #12
 800217a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800217c:	643a      	str	r2, [r7, #64]	@ 0x40
 800217e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002180:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002182:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002184:	e841 2300 	strex	r3, r2, [r1]
 8002188:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800218a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1e5      	bne.n	800215c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3314      	adds	r3, #20
 8002196:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002198:	6a3b      	ldr	r3, [r7, #32]
 800219a:	e853 3f00 	ldrex	r3, [r3]
 800219e:	61fb      	str	r3, [r7, #28]
   return(result);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3314      	adds	r3, #20
 80021ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80021b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021b8:	e841 2300 	strex	r3, r2, [r1]
 80021bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e5      	bne.n	8002190 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d119      	bne.n	8002200 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	330c      	adds	r3, #12
 80021d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	e853 3f00 	ldrex	r3, [r3]
 80021da:	60bb      	str	r3, [r7, #8]
   return(result);
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f023 0310 	bic.w	r3, r3, #16
 80021e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	330c      	adds	r3, #12
 80021ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80021ec:	61ba      	str	r2, [r7, #24]
 80021ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f0:	6979      	ldr	r1, [r7, #20]
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	e841 2300 	strex	r3, r2, [r1]
 80021f8:	613b      	str	r3, [r7, #16]
   return(result);
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d1e5      	bne.n	80021cc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800220e:	bf00      	nop
 8002210:	3754      	adds	r7, #84	@ 0x54
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b084      	sub	sp, #16
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002226:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f7ff ff40 	bl	80020b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002234:	bf00      	nop
 8002236:	3710      	adds	r7, #16
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b21      	cmp	r3, #33	@ 0x21
 800224e:	d13e      	bne.n	80022ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002258:	d114      	bne.n	8002284 <UART_Transmit_IT+0x48>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d110      	bne.n	8002284 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002276:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	1c9a      	adds	r2, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	621a      	str	r2, [r3, #32]
 8002282:	e008      	b.n	8002296 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	1c59      	adds	r1, r3, #1
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6211      	str	r1, [r2, #32]
 800228e:	781a      	ldrb	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29b      	uxth	r3, r3
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	4619      	mov	r1, r3
 80022a4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10f      	bne.n	80022ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68da      	ldr	r2, [r3, #12]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	e000      	b.n	80022d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80022ce:	2302      	movs	r3, #2
  }
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68da      	ldr	r2, [r3, #12]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80022f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f002 f873 	bl	80043e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b08c      	sub	sp, #48	@ 0x30
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8002314:	2300      	movs	r3, #0
 8002316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8002318:	2300      	movs	r3, #0
 800231a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b22      	cmp	r3, #34	@ 0x22
 8002326:	f040 80aa 	bne.w	800247e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002332:	d115      	bne.n	8002360 <UART_Receive_IT+0x54>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d111      	bne.n	8002360 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002340:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	b29b      	uxth	r3, r3
 800234a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234e:	b29a      	uxth	r2, r3
 8002350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002352:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002358:	1c9a      	adds	r2, r3, #2
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	629a      	str	r2, [r3, #40]	@ 0x28
 800235e:	e024      	b.n	80023aa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800236e:	d007      	beq.n	8002380 <UART_Receive_IT+0x74>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <UART_Receive_IT+0x82>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d106      	bne.n	800238e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238a:	701a      	strb	r2, [r3, #0]
 800238c:	e008      	b.n	80023a0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800239a:	b2da      	uxtb	r2, r3
 800239c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4619      	mov	r1, r3
 80023b8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d15d      	bne.n	800247a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0220 	bic.w	r2, r2, #32
 80023cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002400:	2b01      	cmp	r3, #1
 8002402:	d135      	bne.n	8002470 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	330c      	adds	r3, #12
 8002410:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	e853 3f00 	ldrex	r3, [r3]
 8002418:	613b      	str	r3, [r7, #16]
   return(result);
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	f023 0310 	bic.w	r3, r3, #16
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	330c      	adds	r3, #12
 8002428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800242a:	623a      	str	r2, [r7, #32]
 800242c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800242e:	69f9      	ldr	r1, [r7, #28]
 8002430:	6a3a      	ldr	r2, [r7, #32]
 8002432:	e841 2300 	strex	r3, r2, [r1]
 8002436:	61bb      	str	r3, [r7, #24]
   return(result);
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1e5      	bne.n	800240a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b10      	cmp	r3, #16
 800244a:	d10a      	bne.n	8002462 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002466:	4619      	mov	r1, r3
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7ff fe2d 	bl	80020c8 <HAL_UARTEx_RxEventCallback>
 800246e:	e002      	b.n	8002476 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f001 ff6d 	bl	8004350 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e002      	b.n	8002480 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800247e:	2302      	movs	r3, #2
  }
}
 8002480:	4618      	mov	r0, r3
 8002482:	3730      	adds	r7, #48	@ 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800248c:	b0c0      	sub	sp, #256	@ 0x100
 800248e:	af00      	add	r7, sp, #0
 8002490:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80024a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a4:	68d9      	ldr	r1, [r3, #12]
 80024a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	ea40 0301 	orr.w	r3, r0, r1
 80024b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	431a      	orrs	r2, r3
 80024c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	431a      	orrs	r2, r3
 80024c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80024d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80024e0:	f021 010c 	bic.w	r1, r1, #12
 80024e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80024ee:	430b      	orrs	r3, r1
 80024f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80024f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80024fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002502:	6999      	ldr	r1, [r3, #24]
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	ea40 0301 	orr.w	r3, r0, r1
 800250e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b8f      	ldr	r3, [pc, #572]	@ (8002754 <UART_SetConfig+0x2cc>)
 8002518:	429a      	cmp	r2, r3
 800251a:	d005      	beq.n	8002528 <UART_SetConfig+0xa0>
 800251c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4b8d      	ldr	r3, [pc, #564]	@ (8002758 <UART_SetConfig+0x2d0>)
 8002524:	429a      	cmp	r2, r3
 8002526:	d104      	bne.n	8002532 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002528:	f7ff fa40 	bl	80019ac <HAL_RCC_GetPCLK2Freq>
 800252c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002530:	e003      	b.n	800253a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002532:	f7ff fa27 	bl	8001984 <HAL_RCC_GetPCLK1Freq>
 8002536:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800253a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002544:	f040 810c 	bne.w	8002760 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002548:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800254c:	2200      	movs	r2, #0
 800254e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002552:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002556:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800255a:	4622      	mov	r2, r4
 800255c:	462b      	mov	r3, r5
 800255e:	1891      	adds	r1, r2, r2
 8002560:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002562:	415b      	adcs	r3, r3
 8002564:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002566:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800256a:	4621      	mov	r1, r4
 800256c:	eb12 0801 	adds.w	r8, r2, r1
 8002570:	4629      	mov	r1, r5
 8002572:	eb43 0901 	adc.w	r9, r3, r1
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002582:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002586:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800258a:	4690      	mov	r8, r2
 800258c:	4699      	mov	r9, r3
 800258e:	4623      	mov	r3, r4
 8002590:	eb18 0303 	adds.w	r3, r8, r3
 8002594:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002598:	462b      	mov	r3, r5
 800259a:	eb49 0303 	adc.w	r3, r9, r3
 800259e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80025a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025ae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025b6:	460b      	mov	r3, r1
 80025b8:	18db      	adds	r3, r3, r3
 80025ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80025bc:	4613      	mov	r3, r2
 80025be:	eb42 0303 	adc.w	r3, r2, r3
 80025c2:	657b      	str	r3, [r7, #84]	@ 0x54
 80025c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025cc:	f7fd fdfc 	bl	80001c8 <__aeabi_uldivmod>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4b61      	ldr	r3, [pc, #388]	@ (800275c <UART_SetConfig+0x2d4>)
 80025d6:	fba3 2302 	umull	r2, r3, r3, r2
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	011c      	lsls	r4, r3, #4
 80025de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025e2:	2200      	movs	r2, #0
 80025e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80025e8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80025ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80025f0:	4642      	mov	r2, r8
 80025f2:	464b      	mov	r3, r9
 80025f4:	1891      	adds	r1, r2, r2
 80025f6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80025f8:	415b      	adcs	r3, r3
 80025fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002600:	4641      	mov	r1, r8
 8002602:	eb12 0a01 	adds.w	sl, r2, r1
 8002606:	4649      	mov	r1, r9
 8002608:	eb43 0b01 	adc.w	fp, r3, r1
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002618:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800261c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002620:	4692      	mov	sl, r2
 8002622:	469b      	mov	fp, r3
 8002624:	4643      	mov	r3, r8
 8002626:	eb1a 0303 	adds.w	r3, sl, r3
 800262a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800262e:	464b      	mov	r3, r9
 8002630:	eb4b 0303 	adc.w	r3, fp, r3
 8002634:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002644:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002648:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800264c:	460b      	mov	r3, r1
 800264e:	18db      	adds	r3, r3, r3
 8002650:	643b      	str	r3, [r7, #64]	@ 0x40
 8002652:	4613      	mov	r3, r2
 8002654:	eb42 0303 	adc.w	r3, r2, r3
 8002658:	647b      	str	r3, [r7, #68]	@ 0x44
 800265a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800265e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002662:	f7fd fdb1 	bl	80001c8 <__aeabi_uldivmod>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4611      	mov	r1, r2
 800266c:	4b3b      	ldr	r3, [pc, #236]	@ (800275c <UART_SetConfig+0x2d4>)
 800266e:	fba3 2301 	umull	r2, r3, r3, r1
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2264      	movs	r2, #100	@ 0x64
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	1acb      	subs	r3, r1, r3
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002682:	4b36      	ldr	r3, [pc, #216]	@ (800275c <UART_SetConfig+0x2d4>)
 8002684:	fba3 2302 	umull	r2, r3, r3, r2
 8002688:	095b      	lsrs	r3, r3, #5
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002690:	441c      	add	r4, r3
 8002692:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002696:	2200      	movs	r2, #0
 8002698:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800269c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80026a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80026a4:	4642      	mov	r2, r8
 80026a6:	464b      	mov	r3, r9
 80026a8:	1891      	adds	r1, r2, r2
 80026aa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026ac:	415b      	adcs	r3, r3
 80026ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026b4:	4641      	mov	r1, r8
 80026b6:	1851      	adds	r1, r2, r1
 80026b8:	6339      	str	r1, [r7, #48]	@ 0x30
 80026ba:	4649      	mov	r1, r9
 80026bc:	414b      	adcs	r3, r1
 80026be:	637b      	str	r3, [r7, #52]	@ 0x34
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026cc:	4659      	mov	r1, fp
 80026ce:	00cb      	lsls	r3, r1, #3
 80026d0:	4651      	mov	r1, sl
 80026d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026d6:	4651      	mov	r1, sl
 80026d8:	00ca      	lsls	r2, r1, #3
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	4603      	mov	r3, r0
 80026e0:	4642      	mov	r2, r8
 80026e2:	189b      	adds	r3, r3, r2
 80026e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026e8:	464b      	mov	r3, r9
 80026ea:	460a      	mov	r2, r1
 80026ec:	eb42 0303 	adc.w	r3, r2, r3
 80026f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002700:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002704:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002708:	460b      	mov	r3, r1
 800270a:	18db      	adds	r3, r3, r3
 800270c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800270e:	4613      	mov	r3, r2
 8002710:	eb42 0303 	adc.w	r3, r2, r3
 8002714:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002716:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800271a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800271e:	f7fd fd53 	bl	80001c8 <__aeabi_uldivmod>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4b0d      	ldr	r3, [pc, #52]	@ (800275c <UART_SetConfig+0x2d4>)
 8002728:	fba3 1302 	umull	r1, r3, r3, r2
 800272c:	095b      	lsrs	r3, r3, #5
 800272e:	2164      	movs	r1, #100	@ 0x64
 8002730:	fb01 f303 	mul.w	r3, r1, r3
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	3332      	adds	r3, #50	@ 0x32
 800273a:	4a08      	ldr	r2, [pc, #32]	@ (800275c <UART_SetConfig+0x2d4>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	095b      	lsrs	r3, r3, #5
 8002742:	f003 0207 	and.w	r2, r3, #7
 8002746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4422      	add	r2, r4
 800274e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002750:	e106      	b.n	8002960 <UART_SetConfig+0x4d8>
 8002752:	bf00      	nop
 8002754:	40011000 	.word	0x40011000
 8002758:	40011400 	.word	0x40011400
 800275c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002764:	2200      	movs	r2, #0
 8002766:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800276a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800276e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002772:	4642      	mov	r2, r8
 8002774:	464b      	mov	r3, r9
 8002776:	1891      	adds	r1, r2, r2
 8002778:	6239      	str	r1, [r7, #32]
 800277a:	415b      	adcs	r3, r3
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
 800277e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002782:	4641      	mov	r1, r8
 8002784:	1854      	adds	r4, r2, r1
 8002786:	4649      	mov	r1, r9
 8002788:	eb43 0501 	adc.w	r5, r3, r1
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	00eb      	lsls	r3, r5, #3
 8002796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800279a:	00e2      	lsls	r2, r4, #3
 800279c:	4614      	mov	r4, r2
 800279e:	461d      	mov	r5, r3
 80027a0:	4643      	mov	r3, r8
 80027a2:	18e3      	adds	r3, r4, r3
 80027a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027a8:	464b      	mov	r3, r9
 80027aa:	eb45 0303 	adc.w	r3, r5, r3
 80027ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027ce:	4629      	mov	r1, r5
 80027d0:	008b      	lsls	r3, r1, #2
 80027d2:	4621      	mov	r1, r4
 80027d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027d8:	4621      	mov	r1, r4
 80027da:	008a      	lsls	r2, r1, #2
 80027dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80027e0:	f7fd fcf2 	bl	80001c8 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4b60      	ldr	r3, [pc, #384]	@ (800296c <UART_SetConfig+0x4e4>)
 80027ea:	fba3 2302 	umull	r2, r3, r3, r2
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	011c      	lsls	r4, r3, #4
 80027f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002800:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002804:	4642      	mov	r2, r8
 8002806:	464b      	mov	r3, r9
 8002808:	1891      	adds	r1, r2, r2
 800280a:	61b9      	str	r1, [r7, #24]
 800280c:	415b      	adcs	r3, r3
 800280e:	61fb      	str	r3, [r7, #28]
 8002810:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002814:	4641      	mov	r1, r8
 8002816:	1851      	adds	r1, r2, r1
 8002818:	6139      	str	r1, [r7, #16]
 800281a:	4649      	mov	r1, r9
 800281c:	414b      	adcs	r3, r1
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800282c:	4659      	mov	r1, fp
 800282e:	00cb      	lsls	r3, r1, #3
 8002830:	4651      	mov	r1, sl
 8002832:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002836:	4651      	mov	r1, sl
 8002838:	00ca      	lsls	r2, r1, #3
 800283a:	4610      	mov	r0, r2
 800283c:	4619      	mov	r1, r3
 800283e:	4603      	mov	r3, r0
 8002840:	4642      	mov	r2, r8
 8002842:	189b      	adds	r3, r3, r2
 8002844:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002848:	464b      	mov	r3, r9
 800284a:	460a      	mov	r2, r1
 800284c:	eb42 0303 	adc.w	r3, r2, r3
 8002850:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800285e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800286c:	4649      	mov	r1, r9
 800286e:	008b      	lsls	r3, r1, #2
 8002870:	4641      	mov	r1, r8
 8002872:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002876:	4641      	mov	r1, r8
 8002878:	008a      	lsls	r2, r1, #2
 800287a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800287e:	f7fd fca3 	bl	80001c8 <__aeabi_uldivmod>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4611      	mov	r1, r2
 8002888:	4b38      	ldr	r3, [pc, #224]	@ (800296c <UART_SetConfig+0x4e4>)
 800288a:	fba3 2301 	umull	r2, r3, r3, r1
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2264      	movs	r2, #100	@ 0x64
 8002892:	fb02 f303 	mul.w	r3, r2, r3
 8002896:	1acb      	subs	r3, r1, r3
 8002898:	011b      	lsls	r3, r3, #4
 800289a:	3332      	adds	r3, #50	@ 0x32
 800289c:	4a33      	ldr	r2, [pc, #204]	@ (800296c <UART_SetConfig+0x4e4>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028a8:	441c      	add	r4, r3
 80028aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028ae:	2200      	movs	r2, #0
 80028b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80028b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80028b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028b8:	4642      	mov	r2, r8
 80028ba:	464b      	mov	r3, r9
 80028bc:	1891      	adds	r1, r2, r2
 80028be:	60b9      	str	r1, [r7, #8]
 80028c0:	415b      	adcs	r3, r3
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028c8:	4641      	mov	r1, r8
 80028ca:	1851      	adds	r1, r2, r1
 80028cc:	6039      	str	r1, [r7, #0]
 80028ce:	4649      	mov	r1, r9
 80028d0:	414b      	adcs	r3, r1
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80028e0:	4659      	mov	r1, fp
 80028e2:	00cb      	lsls	r3, r1, #3
 80028e4:	4651      	mov	r1, sl
 80028e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028ea:	4651      	mov	r1, sl
 80028ec:	00ca      	lsls	r2, r1, #3
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	4642      	mov	r2, r8
 80028f6:	189b      	adds	r3, r3, r2
 80028f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80028fa:	464b      	mov	r3, r9
 80028fc:	460a      	mov	r2, r1
 80028fe:	eb42 0303 	adc.w	r3, r2, r3
 8002902:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	663b      	str	r3, [r7, #96]	@ 0x60
 800290e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800291c:	4649      	mov	r1, r9
 800291e:	008b      	lsls	r3, r1, #2
 8002920:	4641      	mov	r1, r8
 8002922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002926:	4641      	mov	r1, r8
 8002928:	008a      	lsls	r2, r1, #2
 800292a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800292e:	f7fd fc4b 	bl	80001c8 <__aeabi_uldivmod>
 8002932:	4602      	mov	r2, r0
 8002934:	460b      	mov	r3, r1
 8002936:	4b0d      	ldr	r3, [pc, #52]	@ (800296c <UART_SetConfig+0x4e4>)
 8002938:	fba3 1302 	umull	r1, r3, r3, r2
 800293c:	095b      	lsrs	r3, r3, #5
 800293e:	2164      	movs	r1, #100	@ 0x64
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	3332      	adds	r3, #50	@ 0x32
 800294a:	4a08      	ldr	r2, [pc, #32]	@ (800296c <UART_SetConfig+0x4e4>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	f003 020f 	and.w	r2, r3, #15
 8002956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4422      	add	r2, r4
 800295e:	609a      	str	r2, [r3, #8]
}
 8002960:	bf00      	nop
 8002962:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002966:	46bd      	mov	sp, r7
 8002968:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800296c:	51eb851f 	.word	0x51eb851f

08002970 <RINGBUF_Init>:
#include "ring.h"


ring_stt_e RINGBUF_Init(RINGBUF* ring, uint8_t* buf, uint32_t max_size){
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
    if(!buf || max_size == 0)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <RINGBUF_Init+0x18>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d102      	bne.n	800298e <RINGBUF_Init+0x1e>
        return RING_FAIL;
 8002988:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800298c:	e00c      	b.n	80029a8 <RINGBUF_Init+0x38>
    ring->write = 0;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
    ring->read = 0;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	605a      	str	r2, [r3, #4]
    ring->buf = buf;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	60da      	str	r2, [r3, #12]
    ring->size = max_size;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	609a      	str	r2, [r3, #8]
    return RING_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <RINGBUF_Put>:


ring_stt_e RINGBUF_Put(RINGBUF* ring, uint8_t data){
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	70fb      	strb	r3, [r7, #3]
    uint16_t temp = ring->write;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	81fb      	strh	r3, [r7, #14]
    temp++;
 80029c6:	89fb      	ldrh	r3, [r7, #14]
 80029c8:	3301      	adds	r3, #1
 80029ca:	81fb      	strh	r3, [r7, #14]
    if(temp >= ring->size){ 
 80029cc:	89fa      	ldrh	r2, [r7, #14]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d301      	bcc.n	80029da <RINGBUF_Put+0x26>
        temp = 0;
 80029d6:	2300      	movs	r3, #0
 80029d8:	81fb      	strh	r3, [r7, #14]
    }
    if(temp == ring->read){ //full
 80029da:	89fa      	ldrh	r2, [r7, #14]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d102      	bne.n	80029ea <RINGBUF_Put+0x36>
        return RING_FAIL;
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029e8:	e00a      	b.n	8002a00 <RINGBUF_Put+0x4c>
    }
    ring->buf[ring->write] = data;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	701a      	strb	r2, [r3, #0]
    ring->write = temp;
 80029f8:	89fa      	ldrh	r2, [r7, #14]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	601a      	str	r2, [r3, #0]
    return RING_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3714      	adds	r7, #20
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <RINGBUF_Get>:

ring_stt_e RINGBUF_Get(RINGBUF* ring, uint8_t* data){
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
    if(ring->write == ring->read){ //empty
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d102      	bne.n	8002a28 <RINGBUF_Get+0x1c>
        return RING_FAIL;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a26:	e016      	b.n	8002a56 <RINGBUF_Get+0x4a>
    }
    *data = ring->buf[ring->read];
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	701a      	strb	r2, [r3, #0]
    ring->read++;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	605a      	str	r2, [r3, #4]
    if(ring->read >= ring->size){
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d302      	bcc.n	8002a54 <RINGBUF_Get+0x48>
        ring->read = 0;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	605a      	str	r2, [r3, #4]
    }
    return RING_OK;
 8002a54:	2300      	movs	r3, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b085      	sub	sp, #20
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	4603      	mov	r3, r0
 8002a6a:	6039      	str	r1, [r7, #0]
 8002a6c:	71fb      	strb	r3, [r7, #7]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	881b      	ldrh	r3, [r3, #0]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	79fb      	ldrb	r3, [r7, #7]
 8002a76:	4053      	eors	r3, r2
 8002a78:	73fb      	strb	r3, [r7, #15]
        tmp ^= (tmp<<4);
 8002a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	b25a      	sxtb	r2, r3
 8002a82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a86:	4053      	eors	r3, r2
 8002a88:	b25b      	sxtb	r3, r3
 8002a8a:	73fb      	strb	r3, [r7, #15]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	b21a      	sxth	r2, r3
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	b21b      	sxth	r3, r3
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	b21b      	sxth	r3, r3
 8002a9e:	4053      	eors	r3, r2
 8002aa0:	b21a      	sxth	r2, r3
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	b21b      	sxth	r3, r3
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	b21b      	sxth	r3, r3
 8002aaa:	4053      	eors	r3, r2
 8002aac:	b21a      	sxth	r2, r3
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	091b      	lsrs	r3, r3, #4
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	b21b      	sxth	r3, r3
 8002ab6:	4053      	eors	r3, r2
 8002ab8:	b21b      	sxth	r3, r3
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	801a      	strh	r2, [r3, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ada:	801a      	strh	r2, [r3, #0]
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
        uint16_t crcTmp;
        crc_init(&crcTmp);
 8002af4:	f107 030e 	add.w	r3, r7, #14
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ffe7 	bl	8002acc <crc_init>
	while (length--) {
 8002afe:	e009      	b.n	8002b14 <crc_calculate+0x2c>
                crc_accumulate(*pBuffer++, &crcTmp);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	1c5a      	adds	r2, r3, #1
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	f107 020e 	add.w	r2, r7, #14
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ffa7 	bl	8002a62 <crc_accumulate>
	while (length--) {
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	1e5a      	subs	r2, r3, #1
 8002b18:	807a      	strh	r2, [r7, #2]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1f0      	bne.n	8002b00 <crc_calculate+0x18>
        }
        return crcTmp;
 8002b1e:	89fb      	ldrh	r3, [r7, #14]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint16_t length)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	4613      	mov	r3, r2
 8002b34:	80fb      	strh	r3, [r7, #6]
	const uint8_t *p = (const uint8_t *)pBuffer;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	617b      	str	r3, [r7, #20]
	while (length--) {
 8002b3a:	e007      	b.n	8002b4c <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	617a      	str	r2, [r7, #20]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	68f9      	ldr	r1, [r7, #12]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff ff8b 	bl	8002a62 <crc_accumulate>
	while (length--) {
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	1e5a      	subs	r2, r3, #1
 8002b50:	80fa      	strh	r2, [r7, #6]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1f2      	bne.n	8002b3c <crc_accumulate_buffer+0x14>
        }
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a0e      	ldr	r2, [pc, #56]	@ (8002bb0 <mavlink_sha256_init+0x50>)
 8002b78:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb4 <mavlink_sha256_init+0x54>)
 8002b7e:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb8 <mavlink_sha256_init+0x58>)
 8002b84:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a0c      	ldr	r2, [pc, #48]	@ (8002bbc <mavlink_sha256_init+0x5c>)
 8002b8a:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002bc0 <mavlink_sha256_init+0x60>)
 8002b90:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc4 <mavlink_sha256_init+0x64>)
 8002b96:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	@ (8002bc8 <mavlink_sha256_init+0x68>)
 8002b9c:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8002bcc <mavlink_sha256_init+0x6c>)
 8002ba2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002ba4:	bf00      	nop
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr
 8002bb0:	6a09e667 	.word	0x6a09e667
 8002bb4:	bb67ae85 	.word	0xbb67ae85
 8002bb8:	3c6ef372 	.word	0x3c6ef372
 8002bbc:	a54ff53a 	.word	0xa54ff53a
 8002bc0:	510e527f 	.word	0x510e527f
 8002bc4:	9b05688c 	.word	0x9b05688c
 8002bc8:	1f83d9ab 	.word	0x1f83d9ab
 8002bcc:	5be0cd19 	.word	0x5be0cd19

08002bd0 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b0cf      	sub	sp, #316	@ 0x13c
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002bda:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002bde:	6018      	str	r0, [r3, #0]
 8002be0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002be4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002be8:	6019      	str	r1, [r3, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8002bea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002bee:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    BB = m->counter[1];
 8002bfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002bfe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    CC = m->counter[2];
 8002c0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c0e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
    DD = m->counter[3];
 8002c1a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c1e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    EE = m->counter[4];
 8002c2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c2e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
    FF = m->counter[5];
 8002c3a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c3e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
    GG = m->counter[6];
 8002c4a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c4e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6a1b      	ldr	r3, [r3, #32]
 8002c56:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
    HH = m->counter[7];
 8002c5a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c5e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c66:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118

    for (i = 0; i < 16; ++i)
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002c70:	e016      	b.n	8002ca0 <mavlink_sha256_calc+0xd0>
	data[i] = in[i];
 8002c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8002c7c:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	4413      	add	r3, r2
 8002c84:	6819      	ldr	r1, [r3, #0]
 8002c86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002c8a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c8e:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < 16; ++i)
 8002c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c9a:	3301      	adds	r3, #1
 8002c9c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca4:	2b0f      	cmp	r3, #15
 8002ca6:	dde4      	ble.n	8002c72 <mavlink_sha256_calc+0xa2>
    for (i = 16; i < 64; ++i)
 8002ca8:	2310      	movs	r3, #16
 8002caa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002cae:	e069      	b.n	8002d84 <mavlink_sha256_calc+0x1b4>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cb4:	1e9a      	subs	r2, r3, #2
 8002cb6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002cba:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc2:	ea4f 4273 	mov.w	r2, r3, ror #17
 8002cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cca:	1e99      	subs	r1, r3, #2
 8002ccc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002cd0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002cd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cd8:	ea4f 43f3 	mov.w	r3, r3, ror #19
 8002cdc:	405a      	eors	r2, r3
 8002cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ce2:	1e99      	subs	r1, r3, #2
 8002ce4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002ce8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002cec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cf0:	0a9b      	lsrs	r3, r3, #10
 8002cf2:	405a      	eors	r2, r3
 8002cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf8:	1fd9      	subs	r1, r3, #7
 8002cfa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002cfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d06:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0c:	f1a3 010f 	sub.w	r1, r3, #15
 8002d10:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002d14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d1c:	ea4f 11f3 	mov.w	r1, r3, ror #7
 8002d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d24:	f1a3 000f 	sub.w	r0, r3, #15
 8002d28:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002d2c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d30:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002d34:	ea4f 43b3 	mov.w	r3, r3, ror #18
 8002d38:	4059      	eors	r1, r3
 8002d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d3e:	f1a3 000f 	sub.w	r0, r3, #15
 8002d42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002d46:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d4a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002d4e:	08db      	lsrs	r3, r3, #3
 8002d50:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002d52:	441a      	add	r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8002d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d58:	f1a3 0110 	sub.w	r1, r3, #16
 8002d5c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002d60:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d68:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8002d6a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002d6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002d72:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 16; i < 64; ++i)
 8002d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d88:	2b3f      	cmp	r3, #63	@ 0x3f
 8002d8a:	dd91      	ble.n	8002cb0 <mavlink_sha256_calc+0xe0>

    for (i = 0; i < 64; i++) {
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002d92:	e078      	b.n	8002e86 <mavlink_sha256_calc+0x2b6>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8002d94:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002d98:	ea4f 12b3 	mov.w	r2, r3, ror #6
 8002d9c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002da0:	ea4f 23f3 	mov.w	r3, r3, ror #11
 8002da4:	405a      	eors	r2, r3
 8002da6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002daa:	ea4f 6373 	mov.w	r3, r3, ror #25
 8002dae:	405a      	eors	r2, r3
 8002db0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002db4:	441a      	add	r2, r3
 8002db6:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 8002dba:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002dbe:	4019      	ands	r1, r3
 8002dc0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002dc4:	43d8      	mvns	r0, r3
 8002dc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dca:	4003      	ands	r3, r0
 8002dcc:	404b      	eors	r3, r1
 8002dce:	441a      	add	r2, r3
 8002dd0:	496e      	ldr	r1, [pc, #440]	@ (8002f8c <mavlink_sha256_calc+0x3bc>)
 8002dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002dda:	441a      	add	r2, r3
 8002ddc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002de0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002de4:	f8d7 1114 	ldr.w	r1, [r7, #276]	@ 0x114
 8002de8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002dec:	4413      	add	r3, r2
 8002dee:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8002df2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002df6:	ea4f 02b3 	mov.w	r2, r3, ror #2
 8002dfa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002dfe:	ea4f 3373 	mov.w	r3, r3, ror #13
 8002e02:	405a      	eors	r2, r3
 8002e04:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002e08:	ea4f 53b3 	mov.w	r3, r3, ror #22
 8002e0c:	405a      	eors	r2, r3
 8002e0e:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8002e12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e16:	4059      	eors	r1, r3
 8002e18:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002e1c:	4019      	ands	r1, r3
 8002e1e:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8002e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e26:	4003      	ands	r3, r0
 8002e28:	404b      	eors	r3, r1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			     
	HH = GG;
 8002e30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e34:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	GG = FF;
 8002e38:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e3c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
	FF = EE;
 8002e40:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002e44:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
	EE = DD + T1;
 8002e48:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8002e4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002e50:	4413      	add	r3, r2
 8002e52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
	DD = CC;
 8002e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002e5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
	CC = BB;
 8002e5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002e62:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
	BB = AA;
 8002e66:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002e6a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
	AA = T1 + T2;
 8002e6e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002e72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e76:	4413      	add	r3, r2
 8002e78:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    for (i = 0; i < 64; i++) {
 8002e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e80:	3301      	adds	r3, #1
 8002e82:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8002e8c:	dd82      	ble.n	8002d94 <mavlink_sha256_calc+0x1c4>
    }

    m->counter[0] += AA;
 8002e8e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002e92:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002e9e:	441a      	add	r2, r3
 8002ea0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002ea4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8002eac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002eb0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002ebc:	441a      	add	r2, r3
 8002ebe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002ec2:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8002eca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002ece:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002eda:	441a      	add	r2, r3
 8002edc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002ee0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8002ee8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002eec:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002ef8:	441a      	add	r2, r3
 8002efa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002efe:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8002f06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002f0a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002f16:	441a      	add	r2, r3
 8002f18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002f1c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8002f24:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002f28:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002f34:	441a      	add	r2, r3
 8002f36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002f3a:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8002f42:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002f46:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6a1a      	ldr	r2, [r3, #32]
 8002f4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f52:	441a      	add	r2, r3
 8002f54:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002f58:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8002f60:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002f64:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002f70:	441a      	add	r2, r3
 8002f72:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002f76:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002f7e:	bf00      	nop
 8002f80:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	08004908 	.word	0x08004908

08002f90 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b09c      	sub	sp, #112	@ 0x70
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t old_sz = m->sz[0];
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	441a      	add	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d904      	bls.n	8002fc8 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8002fc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fca:	08db      	lsrs	r3, r3, #3
 8002fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002fd0:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8002fd2:	e057      	b.n	8003084 <mavlink_sha256_update+0xf4>
	uint32_t l = 64 - offset;
 8002fd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002fd6:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002fda:	667b      	str	r3, [r7, #100]	@ 0x64
        if (len < l) {
 8002fdc:	687a      	ldr	r2, [r7, #4]
 8002fde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d201      	bcs.n	8002fe8 <mavlink_sha256_update+0x58>
            l = len;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	667b      	str	r3, [r7, #100]	@ 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8002fee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ff0:	4413      	add	r3, r2
 8002ff2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002ff4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 fc60 	bl	80048bc <memcpy>
	offset += l;
 8002ffc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002ffe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003000:	4413      	add	r3, r2
 8003002:	66bb      	str	r3, [r7, #104]	@ 0x68
	p += l;
 8003004:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003006:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003008:	4413      	add	r3, r2
 800300a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	len -= l;
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8003014:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003016:	2b40      	cmp	r3, #64	@ 0x40
 8003018:	d134      	bne.n	8003084 <mavlink_sha256_update+0xf4>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	3328      	adds	r3, #40	@ 0x28
 800301e:	65bb      	str	r3, [r7, #88]	@ 0x58
	    for (i = 0; i < 16; i++){
 8003020:	2300      	movs	r3, #0
 8003022:	663b      	str	r3, [r7, #96]	@ 0x60
 8003024:	e023      	b.n	800306e <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8003026:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800302c:	4413      	add	r3, r2
 800302e:	657b      	str	r3, [r7, #84]	@ 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8003030:	f107 0210 	add.w	r2, r7, #16
 8003034:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	653b      	str	r3, [r7, #80]	@ 0x50
                p2[0] = p1[3];
 800303c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800303e:	3303      	adds	r3, #3
 8003040:	781a      	ldrb	r2, [r3, #0]
 8003042:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003044:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8003046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003048:	1c9a      	adds	r2, r3, #2
 800304a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800304c:	3301      	adds	r3, #1
 800304e:	7812      	ldrb	r2, [r2, #0]
 8003050:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8003052:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003054:	1c5a      	adds	r2, r3, #1
 8003056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003058:	3302      	adds	r3, #2
 800305a:	7812      	ldrb	r2, [r2, #0]
 800305c:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 800305e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003060:	3303      	adds	r3, #3
 8003062:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003064:	7812      	ldrb	r2, [r2, #0]
 8003066:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8003068:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800306a:	3301      	adds	r3, #1
 800306c:	663b      	str	r3, [r7, #96]	@ 0x60
 800306e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003070:	2b0f      	cmp	r3, #15
 8003072:	ddd8      	ble.n	8003026 <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8003074:	f107 0310 	add.w	r3, r7, #16
 8003078:	4619      	mov	r1, r3
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f7ff fda8 	bl	8002bd0 <mavlink_sha256_calc>
	    offset = 0;
 8003080:	2300      	movs	r3, #0
 8003082:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1a4      	bne.n	8002fd4 <mavlink_sha256_update+0x44>
	}
    }
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	3770      	adds	r7, #112	@ 0x70
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b098      	sub	sp, #96	@ 0x60
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	08db      	lsrs	r3, r3, #3
 80030a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80030aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ac:	f1c3 0377 	rsb	r3, r3, #119	@ 0x77
 80030b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030b4:	3301      	adds	r3, #1
 80030b6:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	3308      	adds	r3, #8
 80030bc:	657b      	str	r3, [r7, #84]	@ 0x54
    
    *zeros = 0x80;
 80030be:	2380      	movs	r3, #128	@ 0x80
 80030c0:	733b      	strb	r3, [r7, #12]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80030c2:	f107 030c 	add.w	r3, r7, #12
 80030c6:	3301      	adds	r3, #1
 80030c8:	2247      	movs	r2, #71	@ 0x47
 80030ca:	2100      	movs	r1, #0
 80030cc:	4618      	mov	r0, r3
 80030ce:	f001 fbc9 	bl	8004864 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030d8:	3307      	adds	r3, #7
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	3360      	adds	r3, #96	@ 0x60
 80030de:	443b      	add	r3, r7
 80030e0:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0a1a      	lsrs	r2, r3, #8
 80030ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80030ec:	3306      	adds	r3, #6
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	3360      	adds	r3, #96	@ 0x60
 80030f2:	443b      	add	r3, r7
 80030f4:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0c1a      	lsrs	r2, r3, #16
 80030fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003100:	3305      	adds	r3, #5
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	3360      	adds	r3, #96	@ 0x60
 8003106:	443b      	add	r3, r7
 8003108:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	0e1a      	lsrs	r2, r3, #24
 8003112:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003114:	3304      	adds	r3, #4
 8003116:	b2d2      	uxtb	r2, r2
 8003118:	3360      	adds	r3, #96	@ 0x60
 800311a:	443b      	add	r3, r7
 800311c:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003126:	3303      	adds	r3, #3
 8003128:	b2d2      	uxtb	r2, r2
 800312a:	3360      	adds	r3, #96	@ 0x60
 800312c:	443b      	add	r3, r7
 800312e:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	0a1a      	lsrs	r2, r3, #8
 8003138:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800313a:	3302      	adds	r3, #2
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	3360      	adds	r3, #96	@ 0x60
 8003140:	443b      	add	r3, r7
 8003142:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	0c1a      	lsrs	r2, r3, #16
 800314c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800314e:	3301      	adds	r3, #1
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	3360      	adds	r3, #96	@ 0x60
 8003154:	443b      	add	r3, r7
 8003156:	f803 2c54 	strb.w	r2, [r3, #-84]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	0e1b      	lsrs	r3, r3, #24
 8003160:	b2d9      	uxtb	r1, r3
 8003162:	f107 020c 	add.w	r2, r7, #12
 8003166:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003168:	4413      	add	r3, r2
 800316a:	460a      	mov	r2, r1
 800316c:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800316e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003170:	f103 0208 	add.w	r2, r3, #8
 8003174:	f107 030c 	add.w	r3, r7, #12
 8003178:	4619      	mov	r1, r3
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ff08 	bl	8002f90 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8003180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003182:	78da      	ldrb	r2, [r3, #3]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	3301      	adds	r3, #1
 800318c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800318e:	7892      	ldrb	r2, [r2, #2]
 8003190:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	3302      	adds	r3, #2
 8003196:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003198:	7852      	ldrb	r2, [r2, #1]
 800319a:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	3303      	adds	r3, #3
 80031a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80031a2:	7812      	ldrb	r2, [r2, #0]
 80031a4:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	3304      	adds	r3, #4
 80031aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80031ac:	79d2      	ldrb	r2, [r2, #7]
 80031ae:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	3305      	adds	r3, #5
 80031b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80031b6:	7992      	ldrb	r2, [r2, #6]
 80031b8:	701a      	strb	r2, [r3, #0]
}
 80031ba:	bf00      	nop
 80031bc:	3760      	adds	r7, #96	@ 0x60
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	4603      	mov	r3, r0
 80031cc:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 80031ce:	79fa      	ldrb	r2, [r7, #7]
 80031d0:	4613      	mov	r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	4a03      	ldr	r2, [pc, #12]	@ (80031e8 <mavlink_get_channel_status+0x24>)
 80031da:	4413      	add	r3, r2
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	200006f0 	.word	0x200006f0

080031ec <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 80031f6:	79fb      	ldrb	r3, [r7, #7]
 80031f8:	f240 1223 	movw	r2, #291	@ 0x123
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	4a03      	ldr	r2, [pc, #12]	@ (8003210 <mavlink_get_channel_buffer+0x24>)
 8003202:	4413      	add	r3, r2
}
 8003204:	4618      	mov	r0, r3
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	20000750 	.word	0x20000750

08003214 <mavlink_sign_packet>:
MAVLINK_HELPER uint8_t mavlink_sign_packet(mavlink_signing_t *signing,
					   uint8_t signature[MAVLINK_SIGNATURE_BLOCK_LEN],
					   const uint8_t *header, uint8_t header_len,
					   const uint8_t *packet, uint8_t packet_len,
					   const uint8_t crc[2])
{
 8003214:	b5b0      	push	{r4, r5, r7, lr}
 8003216:	b0a0      	sub	sp, #128	@ 0x80
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	70fb      	strb	r3, [r7, #3]
	mavlink_sha256_ctx ctx;
	union {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	if (signing == NULL || !(signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING)) {
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <mavlink_sign_packet+0x20>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <mavlink_sign_packet+0x24>
	    return 0;
 8003234:	2300      	movs	r3, #0
 8003236:	e04f      	b.n	80032d8 <mavlink_sign_packet+0xc4>
	}
	signature[0] = signing->link_id;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	785a      	ldrb	r2, [r3, #1]
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = signing->timestamp;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003246:	e9c7 2304 	strd	r2, r3, [r7, #16]
	memcpy(&signature[1], tstamp.t8, 6);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3301      	adds	r3, #1
 800324e:	f107 0110 	add.w	r1, r7, #16
 8003252:	2206      	movs	r2, #6
 8003254:	4618      	mov	r0, r3
 8003256:	f001 fb31 	bl	80048bc <memcpy>
	signing->timestamp++;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003260:	1c54      	adds	r4, r2, #1
 8003262:	f143 0500 	adc.w	r5, r3, #0
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	e9c3 4502 	strd	r4, r5, [r3, #8]
	
	mavlink_sha256_init(&ctx);
 800326c:	f107 0318 	add.w	r3, r7, #24
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fc75 	bl	8002b60 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f103 0110 	add.w	r1, r3, #16
 800327c:	f107 0318 	add.w	r3, r7, #24
 8003280:	2220      	movs	r2, #32
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fe84 	bl	8002f90 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, header, header_len);
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	f107 0318 	add.w	r3, r7, #24
 800328e:	6879      	ldr	r1, [r7, #4]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fe7d 	bl	8002f90 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, packet, packet_len);
 8003296:	f897 2094 	ldrb.w	r2, [r7, #148]	@ 0x94
 800329a:	f107 0318 	add.w	r3, r7, #24
 800329e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff fe74 	bl	8002f90 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, crc, 2);
 80032a8:	f107 0318 	add.w	r3, r7, #24
 80032ac:	2202      	movs	r2, #2
 80032ae:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fe6c 	bl	8002f90 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, signature, 7);
 80032b8:	f107 0318 	add.w	r3, r7, #24
 80032bc:	2207      	movs	r2, #7
 80032be:	68b9      	ldr	r1, [r7, #8]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fe65 	bl	8002f90 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, &signature[7]);
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	1dda      	adds	r2, r3, #7
 80032ca:	f107 0318 	add.w	r3, r7, #24
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fedf 	bl	8003094 <mavlink_sha256_final_48>
	
	return MAVLINK_SIGNATURE_BLOCK_LEN;
 80032d6:	230d      	movs	r3, #13
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3780      	adds	r7, #128	@ 0x80
 80032dc:	46bd      	mov	sp, r7
 80032de:	bdb0      	pop	{r4, r5, r7, pc}

080032e0 <_mav_trim_payload>:
 * @param payload Serialised payload buffer.
 * @param length Length of full-width payload buffer.
 * @return Length of payload after zero-filled bytes are trimmed.
 */
MAVLINK_HELPER uint8_t _mav_trim_payload(const char *payload, uint8_t length)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80032ec:	e002      	b.n	80032f4 <_mav_trim_payload+0x14>
		length--;
 80032ee:	78fb      	ldrb	r3, [r7, #3]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	70fb      	strb	r3, [r7, #3]
	while (length > 1 && payload[length-1] == 0) {
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d906      	bls.n	8003308 <_mav_trim_payload+0x28>
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	4413      	add	r3, r2
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0f2      	beq.n	80032ee <_mav_trim_payload+0xe>
	}
	return length;
 8003308:	78fb      	ldrb	r3, [r7, #3]
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8003318:	b5b0      	push	{r4, r5, r7, lr}
 800331a:	b0aa      	sub	sp, #168	@ 0xa8
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <mavlink_signature_check+0x16>
		return true;
 800332a:	2301      	movs	r3, #1
 800332c:	e13e      	b.n	80035ac <mavlink_signature_check+0x294>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3302      	adds	r3, #2
 8003332:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	const uint8_t *psig = msg->signature;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 800333c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        const uint8_t *incoming_signature = psig+7;
 8003340:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003344:	3307      	adds	r3, #7
 8003346:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 800334a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fc06 	bl	8002b60 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f103 0110 	add.w	r1, r3, #16
 800335a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800335e:	2220      	movs	r2, #32
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fe15 	bl	8002f90 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8003366:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800336a:	220a      	movs	r2, #10
 800336c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8003370:	4618      	mov	r0, r3
 8003372:	f7ff fe0d 	bl	8002f90 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f103 010c 	add.w	r1, r3, #12
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	78db      	ldrb	r3, [r3, #3]
 8003380:	461a      	mov	r2, r3
 8003382:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff fe02 	bl	8002f90 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f503 718a 	add.w	r1, r3, #276	@ 0x114
 8003392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003396:	2202      	movs	r2, #2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff fdf9 	bl	8002f90 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 800339e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033a2:	2207      	movs	r2, #7
 80033a4:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff fdf1 	bl	8002f90 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 80033ae:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80033b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80033b6:	4611      	mov	r1, r2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff fe6b 	bl	8003094 <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 80033be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033c2:	2206      	movs	r2, #6
 80033c4:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80033c8:	4618      	mov	r0, r3
 80033ca:	f001 fa3b 	bl	8004844 <memcmp>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <mavlink_signature_check+0xc8>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
		return false;
 80033dc:	2300      	movs	r3, #0
 80033de:	e0e5      	b.n	80035ac <mavlink_signature_check+0x294>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 80033e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	tstamp.t64 = 0;
 80033ea:	f04f 0200 	mov.w	r2, #0
 80033ee:	f04f 0300 	mov.w	r3, #0
 80033f2:	e9c7 2306 	strd	r2, r3, [r7, #24]
	memcpy(tstamp.t8, psig+1, 6);
 80033f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033fa:	1c59      	adds	r1, r3, #1
 80033fc:	f107 0318 	add.w	r3, r7, #24
 8003400:	2206      	movs	r2, #6
 8003402:	4618      	mov	r0, r3
 8003404:	f001 fa5a 	bl	80048bc <memcpy>

	if (signing_streams == NULL) {
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d105      	bne.n	800341a <mavlink_signature_check+0x102>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2203      	movs	r2, #3
 8003412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                return false;
 8003416:	2300      	movs	r3, #0
 8003418:	e0c8      	b.n	80035ac <mavlink_signature_check+0x294>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 800341a:	2300      	movs	r3, #0
 800341c:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 8003420:	e02b      	b.n	800347a <mavlink_signature_check+0x162>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	79d9      	ldrb	r1, [r3, #7]
 8003426:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800342a:	68b8      	ldr	r0, [r7, #8]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	4403      	add	r3, r0
 8003434:	3303      	adds	r3, #3
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	4299      	cmp	r1, r3
 800343a:	d119      	bne.n	8003470 <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	7a19      	ldrb	r1, [r3, #8]
 8003440:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8003444:	68b8      	ldr	r0, [r7, #8]
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	4403      	add	r3, r0
 800344e:	3304      	adds	r3, #4
 8003450:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8003452:	4299      	cmp	r1, r3
 8003454:	d10c      	bne.n	8003470 <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 8003456:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	440b      	add	r3, r1
 8003464:	3302      	adds	r3, #2
 8003466:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8003468:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800346c:	429a      	cmp	r2, r3
 800346e:	d00b      	beq.n	8003488 <mavlink_signature_check+0x170>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8003470:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8003474:	3301      	adds	r3, #1
 8003476:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8003482:	429a      	cmp	r2, r3
 8003484:	d3cd      	bcc.n	8003422 <mavlink_signature_check+0x10a>
 8003486:	e000      	b.n	800348a <mavlink_signature_check+0x172>
			break;
 8003488:	bf00      	nop
		}
	}
	if (i == signing_streams->num_signing_streams) {
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	881b      	ldrh	r3, [r3, #0]
 800348e:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8003492:	429a      	cmp	r2, r3
 8003494:	d146      	bne.n	8003524 <mavlink_signature_check+0x20c>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	2b0f      	cmp	r3, #15
 800349c:	d905      	bls.n	80034aa <mavlink_signature_check+0x192>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2204      	movs	r2, #4
 80034a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e080      	b.n	80035ac <mavlink_signature_check+0x294>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 80034aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034ae:	4941      	ldr	r1, [pc, #260]	@ (80035b4 <mavlink_signature_check+0x29c>)
 80034b0:	1854      	adds	r4, r2, r1
 80034b2:	f143 0500 	adc.w	r5, r3, #0
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80034bc:	4294      	cmp	r4, r2
 80034be:	eb75 0303 	sbcs.w	r3, r5, r3
 80034c2:	d205      	bcs.n	80034d0 <mavlink_signature_check+0x1b8>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2205      	movs	r2, #5
 80034c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e06d      	b.n	80035ac <mavlink_signature_check+0x294>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 80034d0:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	79d8      	ldrb	r0, [r3, #7]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	4613      	mov	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	440b      	add	r3, r1
 80034e2:	3303      	adds	r3, #3
 80034e4:	4602      	mov	r2, r0
 80034e6:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 80034e8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	7a18      	ldrb	r0, [r3, #8]
 80034f0:	68b9      	ldr	r1, [r7, #8]
 80034f2:	4613      	mov	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	440b      	add	r3, r1
 80034fa:	3304      	adds	r3, #4
 80034fc:	4602      	mov	r2, r0
 80034fe:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8003500:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8003504:	68b9      	ldr	r1, [r7, #8]
 8003506:	4613      	mov	r3, r2
 8003508:	00db      	lsls	r3, r3, #3
 800350a:	4413      	add	r3, r2
 800350c:	440b      	add	r3, r1
 800350e:	3302      	adds	r3, #2
 8003510:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 8003514:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	3301      	adds	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	801a      	strh	r2, [r3, #0]
 8003522:	e021      	b.n	8003568 <mavlink_signature_check+0x250>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8003530:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	4413      	add	r3, r2
 800353e:	1d59      	adds	r1, r3, #5
 8003540:	f107 0310 	add.w	r3, r7, #16
 8003544:	2206      	movs	r2, #6
 8003546:	4618      	mov	r0, r3
 8003548:	f001 f9b8 	bl	80048bc <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 800354c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003550:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003554:	4290      	cmp	r0, r2
 8003556:	eb71 0303 	sbcs.w	r3, r1, r3
 800355a:	d305      	bcc.n	8003568 <mavlink_signature_check+0x250>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2206      	movs	r2, #6
 8003560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
                        return false;
 8003564:	2300      	movs	r3, #0
 8003566:	e021      	b.n	80035ac <mavlink_signature_check+0x294>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8003568:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	@ 0xa6
 800356c:	4613      	mov	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	4413      	add	r3, r2
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	4413      	add	r3, r2
 8003576:	1d58      	adds	r0, r3, #5
 8003578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800357c:	3301      	adds	r3, #1
 800357e:	2206      	movs	r2, #6
 8003580:	4619      	mov	r1, r3
 8003582:	f001 f99b 	bl	80048bc <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8003586:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	e9d1 0102 	ldrd	r0, r1, [r1, #8]
 8003590:	4290      	cmp	r0, r2
 8003592:	eb71 0303 	sbcs.w	r3, r1, r3
 8003596:	d204      	bcs.n	80035a2 <mavlink_signature_check+0x28a>
		signing->timestamp = tstamp.t64;
 8003598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800359c:	68f9      	ldr	r1, [r7, #12]
 800359e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        return true;
 80035aa:	2301      	movs	r3, #1
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	37a8      	adds	r7, #168	@ 0xa8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bdb0      	pop	{r4, r5, r7, pc}
 80035b4:	005b8d80 	.word	0x005b8d80

080035b8 <mavlink_finalize_message_buffer>:
 * @param system_id Id of the sending (this) system, 1-127
 * @param length Message length
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message_buffer(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      mavlink_status_t* status, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 80035b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ba:	b08f      	sub	sp, #60	@ 0x3c
 80035bc:	af04      	add	r7, sp, #16
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	607b      	str	r3, [r7, #4]
 80035c2:	460b      	mov	r3, r1
 80035c4:	72fb      	strb	r3, [r7, #11]
 80035c6:	4613      	mov	r3, r2
 80035c8:	72bb      	strb	r3, [r7, #10]
	bool mavlink1 = (status->flags & MAVLINK_STATUS_FLAG_OUT_MAVLINK1) != 0;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	7b1b      	ldrb	r3, [r3, #12]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	bf14      	ite	ne
 80035d6:	2301      	movne	r3, #1
 80035d8:	2300      	moveq	r3, #0
 80035da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
#ifndef MAVLINK_NO_SIGN_PACKET
	bool signing = 	(!mavlink1) && status->signing && (status->signing->flags & MAVLINK_SIGNING_FLAG_SIGN_OUTGOING);
 80035de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80035e2:	f083 0301 	eor.w	r3, r3, #1
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <mavlink_finalize_message_buffer+0x4e>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d008      	beq.n	8003606 <mavlink_finalize_message_buffer+0x4e>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <mavlink_finalize_message_buffer+0x4e>
 8003602:	2301      	movs	r3, #1
 8003604:	e000      	b.n	8003608 <mavlink_finalize_message_buffer+0x50>
 8003606:	2300      	movs	r3, #0
 8003608:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800360c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#else
	bool signing = false;
#endif
	uint8_t signature_len = signing? MAVLINK_SIGNATURE_BLOCK_LEN : 0;
 8003618:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <mavlink_finalize_message_buffer+0x6c>
 8003620:	230d      	movs	r3, #13
 8003622:	e000      	b.n	8003626 <mavlink_finalize_message_buffer+0x6e>
 8003624:	2300      	movs	r3, #0
 8003626:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        uint8_t header_len = MAVLINK_CORE_HEADER_LEN+1;
 800362a:	230a      	movs	r3, #10
 800362c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t buf[MAVLINK_CORE_HEADER_LEN+1];
	if (mavlink1) {
 8003630:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003634:	2b00      	cmp	r3, #0
 8003636:	d006      	beq.n	8003646 <mavlink_finalize_message_buffer+0x8e>
		msg->magic = MAVLINK_STX_MAVLINK1;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	22fe      	movs	r2, #254	@ 0xfe
 800363c:	709a      	strb	r2, [r3, #2]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN+1;
 800363e:	2306      	movs	r3, #6
 8003640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003644:	e002      	b.n	800364c <mavlink_finalize_message_buffer+0x94>
	} else {
		msg->magic = MAVLINK_STX;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	22fd      	movs	r2, #253	@ 0xfd
 800364a:	709a      	strb	r2, [r3, #2]
	}
	msg->len = mavlink1?min_length:_mav_trim_payload(_MAV_PAYLOAD(msg), length);
 800364c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <mavlink_finalize_message_buffer+0xb2>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	330c      	adds	r3, #12
 8003658:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 800365c:	4611      	mov	r1, r2
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fe3e 	bl	80032e0 <_mav_trim_payload>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	e001      	b.n	800366e <mavlink_finalize_message_buffer+0xb6>
 800366a:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	70da      	strb	r2, [r3, #3]
	msg->sysid = system_id;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	7afa      	ldrb	r2, [r7, #11]
 8003676:	71da      	strb	r2, [r3, #7]
	msg->compid = component_id;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	7aba      	ldrb	r2, [r7, #10]
 800367c:	721a      	strb	r2, [r3, #8]
	msg->incompat_flags = 0;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	711a      	strb	r2, [r3, #4]
	if (signing) {
 8003684:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003688:	2b00      	cmp	r3, #0
 800368a:	d006      	beq.n	800369a <mavlink_finalize_message_buffer+0xe2>
		msg->incompat_flags |= MAVLINK_IFLAG_SIGNED;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	791b      	ldrb	r3, [r3, #4]
 8003690:	f043 0301 	orr.w	r3, r3, #1
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	711a      	strb	r2, [r3, #4]
	}
	msg->compat_flags = 0;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	715a      	strb	r2, [r3, #5]
	msg->seq = status->current_tx_seq;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	799a      	ldrb	r2, [r3, #6]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	719a      	strb	r2, [r3, #6]
	status->current_tx_seq = status->current_tx_seq + 1;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	799b      	ldrb	r3, [r3, #6]
 80036ac:	3301      	adds	r3, #1
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	719a      	strb	r2, [r3, #6]

	// form the header as a byte array for the crc
	buf[0] = msg->magic;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	789b      	ldrb	r3, [r3, #2]
 80036b8:	763b      	strb	r3, [r7, #24]
	buf[1] = msg->len;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	78db      	ldrb	r3, [r3, #3]
 80036be:	767b      	strb	r3, [r7, #25]
	if (mavlink1) {
 80036c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d013      	beq.n	80036f0 <mavlink_finalize_message_buffer+0x138>
		buf[2] = msg->seq;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	799b      	ldrb	r3, [r3, #6]
 80036cc:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->sysid;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	79db      	ldrb	r3, [r3, #7]
 80036d2:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->compid;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	7a1b      	ldrb	r3, [r3, #8]
 80036d8:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->msgid & 0xFF;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	7a5a      	ldrb	r2, [r3, #9]
 80036de:	7a99      	ldrb	r1, [r3, #10]
 80036e0:	0209      	lsls	r1, r1, #8
 80036e2:	430a      	orrs	r2, r1
 80036e4:	7adb      	ldrb	r3, [r3, #11]
 80036e6:	041b      	lsls	r3, r3, #16
 80036e8:	4313      	orrs	r3, r2
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	777b      	strb	r3, [r7, #29]
 80036ee:	e030      	b.n	8003752 <mavlink_finalize_message_buffer+0x19a>
	} else {
		buf[2] = msg->incompat_flags;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	791b      	ldrb	r3, [r3, #4]
 80036f4:	76bb      	strb	r3, [r7, #26]
		buf[3] = msg->compat_flags;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	795b      	ldrb	r3, [r3, #5]
 80036fa:	76fb      	strb	r3, [r7, #27]
		buf[4] = msg->seq;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	799b      	ldrb	r3, [r3, #6]
 8003700:	773b      	strb	r3, [r7, #28]
		buf[5] = msg->sysid;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	79db      	ldrb	r3, [r3, #7]
 8003706:	777b      	strb	r3, [r7, #29]
		buf[6] = msg->compid;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	7a1b      	ldrb	r3, [r3, #8]
 800370c:	77bb      	strb	r3, [r7, #30]
		buf[7] = msg->msgid & 0xFF;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	7a5a      	ldrb	r2, [r3, #9]
 8003712:	7a99      	ldrb	r1, [r3, #10]
 8003714:	0209      	lsls	r1, r1, #8
 8003716:	430a      	orrs	r2, r1
 8003718:	7adb      	ldrb	r3, [r3, #11]
 800371a:	041b      	lsls	r3, r3, #16
 800371c:	4313      	orrs	r3, r2
 800371e:	b2db      	uxtb	r3, r3
 8003720:	77fb      	strb	r3, [r7, #31]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	7a5a      	ldrb	r2, [r3, #9]
 8003726:	7a99      	ldrb	r1, [r3, #10]
 8003728:	0209      	lsls	r1, r1, #8
 800372a:	430a      	orrs	r2, r1
 800372c:	7adb      	ldrb	r3, [r3, #11]
 800372e:	041b      	lsls	r3, r3, #16
 8003730:	4313      	orrs	r3, r2
 8003732:	121b      	asrs	r3, r3, #8
 8003734:	b2db      	uxtb	r3, r3
 8003736:	f887 3020 	strb.w	r3, [r7, #32]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	7a5a      	ldrb	r2, [r3, #9]
 800373e:	7a99      	ldrb	r1, [r3, #10]
 8003740:	0209      	lsls	r1, r1, #8
 8003742:	430a      	orrs	r2, r1
 8003744:	7adb      	ldrb	r3, [r3, #11]
 8003746:	041b      	lsls	r3, r3, #16
 8003748:	4313      	orrs	r3, r2
 800374a:	141b      	asrs	r3, r3, #16
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	}
	
	uint16_t checksum = crc_calculate(&buf[1], header_len-1);
 8003752:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003756:	b29b      	uxth	r3, r3
 8003758:	3b01      	subs	r3, #1
 800375a:	b29a      	uxth	r2, r3
 800375c:	f107 0318 	add.w	r3, r7, #24
 8003760:	3301      	adds	r3, #1
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff f9bf 	bl	8002ae8 <crc_calculate>
 800376a:	4603      	mov	r3, r0
 800376c:	82fb      	strh	r3, [r7, #22]
	crc_accumulate_buffer(&checksum, _MAV_PAYLOAD(msg), msg->len);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f103 010c 	add.w	r1, r3, #12
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	78db      	ldrb	r3, [r3, #3]
 8003778:	461a      	mov	r2, r3
 800377a:	f107 0316 	add.w	r3, r7, #22
 800377e:	4618      	mov	r0, r3
 8003780:	f7ff f9d2 	bl	8002b28 <crc_accumulate_buffer>
	crc_accumulate(crc_extra, &checksum);
 8003784:	f107 0216 	add.w	r2, r7, #22
 8003788:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800378c:	4611      	mov	r1, r2
 800378e:	4618      	mov	r0, r3
 8003790:	f7ff f967 	bl	8002a62 <crc_accumulate>
	mavlink_ck_a(msg) = (uint8_t)(checksum & 0xFF);
 8003794:	8af9      	ldrh	r1, [r7, #22]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	330c      	adds	r3, #12
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	78d2      	ldrb	r2, [r2, #3]
 800379e:	4413      	add	r3, r2
 80037a0:	b2ca      	uxtb	r2, r1
 80037a2:	701a      	strb	r2, [r3, #0]
	mavlink_ck_b(msg) = (uint8_t)(checksum >> 8);
 80037a4:	8afb      	ldrh	r3, [r7, #22]
 80037a6:	0a1b      	lsrs	r3, r3, #8
 80037a8:	b299      	uxth	r1, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f103 020c 	add.w	r2, r3, #12
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	78db      	ldrb	r3, [r3, #3]
 80037b4:	3301      	adds	r3, #1
 80037b6:	4413      	add	r3, r2
 80037b8:	b2ca      	uxtb	r2, r1
 80037ba:	701a      	strb	r2, [r3, #0]

	msg->checksum = checksum;
 80037bc:	8afa      	ldrh	r2, [r7, #22]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	801a      	strh	r2, [r3, #0]

#ifndef MAVLINK_NO_SIGN_PACKET
	if (signing) {
 80037c2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d01a      	beq.n	8003800 <mavlink_finalize_message_buffer+0x248>
		mavlink_sign_packet(status->signing,
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691c      	ldr	r4, [r3, #16]
				    msg->signature,
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f503 758b 	add.w	r5, r3, #278	@ 0x116
				    (const uint8_t *)buf, header_len,
				    (const uint8_t *)_MAV_PAYLOAD(msg), msg->len,
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	330c      	adds	r3, #12
		mavlink_sign_packet(status->signing,
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	78d2      	ldrb	r2, [r2, #3]
				    (const uint8_t *)_MAV_PAYLOAD(msg)+(uint16_t)msg->len);
 80037dc:	68f9      	ldr	r1, [r7, #12]
 80037de:	310c      	adds	r1, #12
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	78c0      	ldrb	r0, [r0, #3]
		mavlink_sign_packet(status->signing,
 80037e4:	4401      	add	r1, r0
 80037e6:	f897 6027 	ldrb.w	r6, [r7, #39]	@ 0x27
 80037ea:	f107 0018 	add.w	r0, r7, #24
 80037ee:	9102      	str	r1, [sp, #8]
 80037f0:	9201      	str	r2, [sp, #4]
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	4633      	mov	r3, r6
 80037f6:	4602      	mov	r2, r0
 80037f8:	4629      	mov	r1, r5
 80037fa:	4620      	mov	r0, r4
 80037fc:	f7ff fd0a 	bl	8003214 <mavlink_sign_packet>
	}
#endif

	return msg->len + header_len + 2 + signature_len;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	78db      	ldrb	r3, [r3, #3]
 8003804:	461a      	mov	r2, r3
 8003806:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800380a:	b29b      	uxth	r3, r3
 800380c:	4413      	add	r3, r2
 800380e:	b29a      	uxth	r2, r3
 8003810:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003814:	b29b      	uxth	r3, r3
 8003816:	4413      	add	r3, r2
 8003818:	b29b      	uxth	r3, r3
 800381a:	3302      	adds	r3, #2
 800381c:	b29b      	uxth	r3, r3
}
 800381e:	4618      	mov	r0, r3
 8003820:	372c      	adds	r7, #44	@ 0x2c
 8003822:	46bd      	mov	sp, r7
 8003824:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003826 <mavlink_finalize_message_chan>:

MAVLINK_HELPER uint16_t mavlink_finalize_message_chan(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id,
						      uint8_t chan, uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b088      	sub	sp, #32
 800382a:	af04      	add	r7, sp, #16
 800382c:	6078      	str	r0, [r7, #4]
 800382e:	4608      	mov	r0, r1
 8003830:	4611      	mov	r1, r2
 8003832:	461a      	mov	r2, r3
 8003834:	4603      	mov	r3, r0
 8003836:	70fb      	strb	r3, [r7, #3]
 8003838:	460b      	mov	r3, r1
 800383a:	70bb      	strb	r3, [r7, #2]
 800383c:	4613      	mov	r3, r2
 800383e:	707b      	strb	r3, [r7, #1]
	mavlink_status_t *status = mavlink_get_channel_status(chan);
 8003840:	787b      	ldrb	r3, [r7, #1]
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fcbe 	bl	80031c4 <mavlink_get_channel_status>
 8003848:	60f8      	str	r0, [r7, #12]
	return mavlink_finalize_message_buffer(msg, system_id, component_id, status, min_length, length, crc_extra);
 800384a:	78ba      	ldrb	r2, [r7, #2]
 800384c:	78f9      	ldrb	r1, [r7, #3]
 800384e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003852:	9302      	str	r3, [sp, #8]
 8003854:	7f3b      	ldrb	r3, [r7, #28]
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	7e3b      	ldrb	r3, [r7, #24]
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff feaa 	bl	80035b8 <mavlink_finalize_message_buffer>
 8003864:	4603      	mov	r3, r0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <mavlink_finalize_message>:
/**
 * @brief Finalize a MAVLink message with MAVLINK_COMM_0 as default channel
 */
MAVLINK_HELPER uint16_t mavlink_finalize_message(mavlink_message_t* msg, uint8_t system_id, uint8_t component_id, 
						 uint8_t min_length, uint8_t length, uint8_t crc_extra)
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b086      	sub	sp, #24
 8003872:	af04      	add	r7, sp, #16
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	4608      	mov	r0, r1
 8003878:	4611      	mov	r1, r2
 800387a:	461a      	mov	r2, r3
 800387c:	4603      	mov	r3, r0
 800387e:	70fb      	strb	r3, [r7, #3]
 8003880:	460b      	mov	r3, r1
 8003882:	70bb      	strb	r3, [r7, #2]
 8003884:	4613      	mov	r3, r2
 8003886:	707b      	strb	r3, [r7, #1]
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
 8003888:	78ba      	ldrb	r2, [r7, #2]
 800388a:	78f9      	ldrb	r1, [r7, #3]
 800388c:	7d3b      	ldrb	r3, [r7, #20]
 800388e:	9302      	str	r3, [sp, #8]
 8003890:	7c3b      	ldrb	r3, [r7, #16]
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	787b      	ldrb	r3, [r7, #1]
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2300      	movs	r3, #0
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7ff ffc3 	bl	8003826 <mavlink_finalize_message_chan>
 80038a0:	4603      	mov	r3, r0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <_mav_parse_error>:

static inline void _mav_parse_error(mavlink_status_t *status)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	789b      	ldrb	r3, [r3, #2]
 80038b6:	3301      	adds	r3, #1
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	709a      	strb	r2, [r3, #2]
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr

080038ca <mavlink_msg_to_send_buffer>:

/**
 * @brief Pack a message to send it over a serial byte stream
 */
MAVLINK_HELPER uint16_t mavlink_msg_to_send_buffer(uint8_t *buf, const mavlink_message_t *msg)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b086      	sub	sp, #24
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	6039      	str	r1, [r7, #0]
	uint8_t signature_len, header_len;
	uint8_t *ck;
        uint8_t length = msg->len;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	78db      	ldrb	r3, [r3, #3]
 80038d8:	73fb      	strb	r3, [r7, #15]
        
	if (msg->magic == MAVLINK_STX_MAVLINK1) {
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	789b      	ldrb	r3, [r3, #2]
 80038de:	2bfe      	cmp	r3, #254	@ 0xfe
 80038e0:	d13a      	bne.n	8003958 <mavlink_msg_to_send_buffer+0x8e>
		signature_len = 0;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]
		header_len = MAVLINK_CORE_HEADER_MAVLINK1_LEN;
 80038e6:	2305      	movs	r3, #5
 80038e8:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	789a      	ldrb	r2, [r3, #2]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3301      	adds	r3, #1
 80038f6:	7bfa      	ldrb	r2, [r7, #15]
 80038f8:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->seq;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3302      	adds	r3, #2
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	7992      	ldrb	r2, [r2, #6]
 8003902:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->sysid;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3303      	adds	r3, #3
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	79d2      	ldrb	r2, [r2, #7]
 800390c:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->compid;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3304      	adds	r3, #4
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	7a12      	ldrb	r2, [r2, #8]
 8003916:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->msgid & 0xFF;
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	7a5a      	ldrb	r2, [r3, #9]
 800391c:	7a99      	ldrb	r1, [r3, #10]
 800391e:	0209      	lsls	r1, r1, #8
 8003920:	430a      	orrs	r2, r1
 8003922:	7adb      	ldrb	r3, [r3, #11]
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	4313      	orrs	r3, r2
 8003928:	461a      	mov	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3305      	adds	r3, #5
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[6], _MAV_PAYLOAD(msg), msg->len);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	1d98      	adds	r0, r3, #6
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	f103 010c 	add.w	r1, r3, #12
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	78db      	ldrb	r3, [r3, #3]
 8003940:	461a      	mov	r2, r3
 8003942:	f000 ffbb 	bl	80048bc <memcpy>
		ck = buf + header_len + 1 + (uint16_t)msg->len;
 8003946:	7dbb      	ldrb	r3, [r7, #22]
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	78d2      	ldrb	r2, [r2, #3]
 800394c:	4413      	add	r3, r2
 800394e:	3301      	adds	r3, #1
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	4413      	add	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
 8003956:	e06c      	b.n	8003a32 <mavlink_msg_to_send_buffer+0x168>
	} else {
		length = _mav_trim_payload(_MAV_PAYLOAD(msg), length);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	330c      	adds	r3, #12
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	4611      	mov	r1, r2
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fcbd 	bl	80032e0 <_mav_trim_payload>
 8003966:	4603      	mov	r3, r0
 8003968:	73fb      	strb	r3, [r7, #15]
		header_len = MAVLINK_CORE_HEADER_LEN;
 800396a:	2309      	movs	r3, #9
 800396c:	75bb      	strb	r3, [r7, #22]
		buf[0] = msg->magic;
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	789a      	ldrb	r2, [r3, #2]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	701a      	strb	r2, [r3, #0]
		buf[1] = length;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3301      	adds	r3, #1
 800397a:	7bfa      	ldrb	r2, [r7, #15]
 800397c:	701a      	strb	r2, [r3, #0]
		buf[2] = msg->incompat_flags;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	3302      	adds	r3, #2
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	7912      	ldrb	r2, [r2, #4]
 8003986:	701a      	strb	r2, [r3, #0]
		buf[3] = msg->compat_flags;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3303      	adds	r3, #3
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	7952      	ldrb	r2, [r2, #5]
 8003990:	701a      	strb	r2, [r3, #0]
		buf[4] = msg->seq;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	3304      	adds	r3, #4
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	7992      	ldrb	r2, [r2, #6]
 800399a:	701a      	strb	r2, [r3, #0]
		buf[5] = msg->sysid;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3305      	adds	r3, #5
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	79d2      	ldrb	r2, [r2, #7]
 80039a4:	701a      	strb	r2, [r3, #0]
		buf[6] = msg->compid;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	3306      	adds	r3, #6
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	7a12      	ldrb	r2, [r2, #8]
 80039ae:	701a      	strb	r2, [r3, #0]
		buf[7] = msg->msgid & 0xFF;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	7a5a      	ldrb	r2, [r3, #9]
 80039b4:	7a99      	ldrb	r1, [r3, #10]
 80039b6:	0209      	lsls	r1, r1, #8
 80039b8:	430a      	orrs	r2, r1
 80039ba:	7adb      	ldrb	r3, [r3, #11]
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	4313      	orrs	r3, r2
 80039c0:	461a      	mov	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3307      	adds	r3, #7
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]
		buf[8] = (msg->msgid >> 8) & 0xFF;
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	7a5a      	ldrb	r2, [r3, #9]
 80039ce:	7a99      	ldrb	r1, [r3, #10]
 80039d0:	0209      	lsls	r1, r1, #8
 80039d2:	430a      	orrs	r2, r1
 80039d4:	7adb      	ldrb	r3, [r3, #11]
 80039d6:	041b      	lsls	r3, r3, #16
 80039d8:	4313      	orrs	r3, r2
 80039da:	0a1a      	lsrs	r2, r3, #8
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3308      	adds	r3, #8
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	701a      	strb	r2, [r3, #0]
		buf[9] = (msg->msgid >> 16) & 0xFF;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	7a5a      	ldrb	r2, [r3, #9]
 80039e8:	7a99      	ldrb	r1, [r3, #10]
 80039ea:	0209      	lsls	r1, r1, #8
 80039ec:	430a      	orrs	r2, r1
 80039ee:	7adb      	ldrb	r3, [r3, #11]
 80039f0:	041b      	lsls	r3, r3, #16
 80039f2:	4313      	orrs	r3, r2
 80039f4:	0c1a      	lsrs	r2, r3, #16
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3309      	adds	r3, #9
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]
		memcpy(&buf[10], _MAV_PAYLOAD(msg), length);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f103 000a 	add.w	r0, r3, #10
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	330c      	adds	r3, #12
 8003a08:	7bfa      	ldrb	r2, [r7, #15]
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f000 ff56 	bl	80048bc <memcpy>
		ck = buf + header_len + 1 + (uint16_t)length;
 8003a10:	7dba      	ldrb	r2, [r7, #22]
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	4413      	add	r3, r2
 8003a16:	3301      	adds	r3, #1
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
		signature_len = (msg->incompat_flags & MAVLINK_IFLAG_SIGNED)?MAVLINK_SIGNATURE_BLOCK_LEN:0;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	791b      	ldrb	r3, [r3, #4]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <mavlink_msg_to_send_buffer+0x164>
 8003a2a:	230d      	movs	r3, #13
 8003a2c:	e000      	b.n	8003a30 <mavlink_msg_to_send_buffer+0x166>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75fb      	strb	r3, [r7, #23]
	}
	ck[0] = (uint8_t)(msg->checksum & 0xFF);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	881b      	ldrh	r3, [r3, #0]
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	701a      	strb	r2, [r3, #0]
	ck[1] = (uint8_t)(msg->checksum >> 8);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	881b      	ldrh	r3, [r3, #0]
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	0a1b      	lsrs	r3, r3, #8
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]
	if (signature_len > 0) {
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <mavlink_msg_to_send_buffer+0x19e>
		memcpy(&ck[2], msg->signature, signature_len);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1c98      	adds	r0, r3, #2
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	f503 738b 	add.w	r3, r3, #278	@ 0x116
 8003a60:	7dfa      	ldrb	r2, [r7, #23]
 8003a62:	4619      	mov	r1, r3
 8003a64:	f000 ff2a 	bl	80048bc <memcpy>
	}

	return header_len + 1 + 2 + (uint16_t)length + (uint16_t)signature_len;
 8003a68:	7dbb      	ldrb	r3, [r7, #22]
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	7bfb      	ldrb	r3, [r7, #15]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	4413      	add	r3, r2
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	7dfb      	ldrb	r3, [r7, #23]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	4413      	add	r3, r2
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	3303      	adds	r3, #3
 8003a7e:	b29b      	uxth	r3, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	81fb      	strh	r3, [r7, #14]
	crc_init(&crcTmp);
 8003a94:	f107 030e 	add.w	r3, r7, #14
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff f817 	bl	8002acc <crc_init>
	msg->checksum = crcTmp;
 8003a9e:	89fa      	ldrh	r2, [r7, #14]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	801a      	strh	r2, [r3, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
	uint16_t checksum = msg->checksum;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	881b      	ldrh	r3, [r3, #0]
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	81fb      	strh	r3, [r7, #14]
	crc_accumulate(c, &checksum);
 8003ac0:	f107 020e 	add.w	r2, r7, #14
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fe ffca 	bl	8002a62 <crc_accumulate>
	msg->checksum = checksum;
 8003ace:	89fa      	ldrh	r2, [r7, #14]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	801a      	strh	r2, [r3, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b087      	sub	sp, #28
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
 8003ae8:	23e4      	movs	r3, #228	@ 0xe4
 8003aea:	613b      	str	r3, [r7, #16]
        while (low < high) {
 8003aec:	e025      	b.n	8003b3a <mavlink_get_msg_entry+0x5e>
            uint32_t mid = (low+1+high)/2;
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	3301      	adds	r3, #1
 8003af6:	085b      	lsrs	r3, r3, #1
 8003af8:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 8003afa:	491f      	ldr	r1, [pc, #124]	@ (8003b78 <mavlink_get_msg_entry+0x9c>)
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4613      	mov	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d203      	bcs.n	8003b18 <mavlink_get_msg_entry+0x3c>
                high = mid-1;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	3b01      	subs	r3, #1
 8003b14:	613b      	str	r3, [r7, #16]
                continue;
 8003b16:	e010      	b.n	8003b3a <mavlink_get_msg_entry+0x5e>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 8003b18:	4917      	ldr	r1, [pc, #92]	@ (8003b78 <mavlink_get_msg_entry+0x9c>)
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d902      	bls.n	8003b34 <mavlink_get_msg_entry+0x58>
                low = mid;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	617b      	str	r3, [r7, #20]
                continue;
 8003b32:	e002      	b.n	8003b3a <mavlink_get_msg_entry+0x5e>
            }
            low = mid;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	617b      	str	r3, [r7, #20]
            break;
 8003b38:	e003      	b.n	8003b42 <mavlink_get_msg_entry+0x66>
        while (low < high) {
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d3d5      	bcc.n	8003aee <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 8003b42:	490d      	ldr	r1, [pc, #52]	@ (8003b78 <mavlink_get_msg_entry+0x9c>)
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	4613      	mov	r3, r2
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	440b      	add	r3, r1
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <mavlink_get_msg_entry+0x80>
            // msgid is not in the table
            return NULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e006      	b.n	8003b6a <mavlink_get_msg_entry+0x8e>
        }
        return &mavlink_message_crcs[low];
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	005b      	lsls	r3, r3, #1
 8003b62:	4413      	add	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4a04      	ldr	r2, [pc, #16]	@ (8003b78 <mavlink_get_msg_entry+0x9c>)
 8003b68:	4413      	add	r3, r2
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	08004a08 	.word	0x08004a08

08003b7c <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b088      	sub	sp, #32
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	603b      	str	r3, [r7, #0]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	71fb      	strb	r3, [r7, #7]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	78db      	ldrb	r3, [r3, #3]
 8003b96:	2b0f      	cmp	r3, #15
 8003b98:	f200 8272 	bhi.w	8004080 <mavlink_frame_char_buffer+0x504>
 8003b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <mavlink_frame_char_buffer+0x28>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003be5 	.word	0x08003be5
 8003ba8:	08003be5 	.word	0x08003be5
 8003bac:	08003c43 	.word	0x08003c43
 8003bb0:	08003ca9 	.word	0x08003ca9
 8003bb4:	08003cdd 	.word	0x08003cdd
 8003bb8:	08003cf5 	.word	0x08003cf5
 8003bbc:	08003d0d 	.word	0x08003d0d
 8003bc0:	08003d25 	.word	0x08003d25
 8003bc4:	08003d3d 	.word	0x08003d3d
 8003bc8:	08003d97 	.word	0x08003d97
 8003bcc:	08003de3 	.word	0x08003de3
 8003bd0:	08003e3f 	.word	0x08003e3f
 8003bd4:	08003e77 	.word	0x08003e77
 8003bd8:	08003f0f 	.word	0x08003f0f
 8003bdc:	08003f0f 	.word	0x08003f0f
 8003be0:	08003fcb 	.word	0x08003fcb
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	2bfd      	cmp	r3, #253	@ 0xfd
 8003be8:	d113      	bne.n	8003c12 <mavlink_frame_char_buffer+0x96>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	2202      	movs	r2, #2
 8003bee:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	79fa      	ldrb	r2, [r7, #7]
 8003bfa:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	7b1b      	ldrb	r3, [r3, #12]
 8003c00:	f023 0301 	bic.w	r3, r3, #1
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7ff ff3c 	bl	8003a88 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8003c10:	e22d      	b.n	800406e <mavlink_frame_char_buffer+0x4f2>
		} else if (c == MAVLINK_STX_MAVLINK1)
 8003c12:	79fb      	ldrb	r3, [r7, #7]
 8003c14:	2bfe      	cmp	r3, #254	@ 0xfe
 8003c16:	f040 822a 	bne.w	800406e <mavlink_frame_char_buffer+0x4f2>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	79fa      	ldrb	r2, [r7, #7]
 8003c2a:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	7b1b      	ldrb	r3, [r3, #12]
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7ff ff24 	bl	8003a88 <mavlink_start_checksum>
		break;
 8003c40:	e215      	b.n	800406e <mavlink_frame_char_buffer+0x4f2>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00f      	beq.n	8003c6a <mavlink_frame_char_buffer+0xee>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 8003c56:	68b8      	ldr	r0, [r7, #8]
 8003c58:	f7ff fe27 	bl	80038aa <_mav_parse_error>
			status->msg_received = 0;
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2201      	movs	r2, #1
 8003c66:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8003c68:	e20a      	b.n	8004080 <mavlink_frame_char_buffer+0x504>
			rxmsg->len = c;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	79fa      	ldrb	r2, [r7, #7]
 8003c6e:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2200      	movs	r2, #0
 8003c74:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	4619      	mov	r1, r3
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7ff ff16 	bl	8003aac <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	7b1b      	ldrb	r3, [r3, #12]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d009      	beq.n	8003ca0 <mavlink_frame_char_buffer+0x124>
                            rxmsg->incompat_flags = 0;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2205      	movs	r2, #5
 8003c9c:	70da      	strb	r2, [r3, #3]
		break;
 8003c9e:	e1ef      	b.n	8004080 <mavlink_frame_char_buffer+0x504>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2203      	movs	r2, #3
 8003ca4:	70da      	strb	r2, [r3, #3]
		break;
 8003ca6:	e1eb      	b.n	8004080 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	79fa      	ldrb	r2, [r7, #7]
 8003cac:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	791b      	ldrb	r3, [r3, #4]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d909      	bls.n	8003cca <mavlink_frame_char_buffer+0x14e>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 8003cb6:	68b8      	ldr	r0, [r7, #8]
 8003cb8:	f7ff fdf7 	bl	80038aa <_mav_parse_error>
			status->msg_received = 0;
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	70da      	strb	r2, [r3, #3]
			break;
 8003cc8:	e1da      	b.n	8004080 <mavlink_frame_char_buffer+0x504>
		}
		mavlink_update_checksum(rxmsg, c);
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	4619      	mov	r1, r3
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f7ff feec 	bl	8003aac <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2204      	movs	r2, #4
 8003cd8:	70da      	strb	r2, [r3, #3]
		break;
 8003cda:	e1d1      	b.n	8004080 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	79fa      	ldrb	r2, [r7, #7]
 8003ce0:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7ff fee0 	bl	8003aac <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2205      	movs	r2, #5
 8003cf0:	70da      	strb	r2, [r3, #3]
		break;
 8003cf2:	e1c5      	b.n	8004080 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	79fa      	ldrb	r2, [r7, #7]
 8003cf8:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f7ff fed4 	bl	8003aac <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2206      	movs	r2, #6
 8003d08:	70da      	strb	r2, [r3, #3]
		break;
 8003d0a:	e1b9      	b.n	8004080 <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	79fa      	ldrb	r2, [r7, #7]
 8003d10:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	4619      	mov	r1, r3
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f7ff fec8 	bl	8003aac <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2207      	movs	r2, #7
 8003d20:	70da      	strb	r2, [r3, #3]
		break;
 8003d22:	e1ad      	b.n	8004080 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	79fa      	ldrb	r2, [r7, #7]
 8003d28:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f7ff febc 	bl	8003aac <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	2208      	movs	r2, #8
 8003d38:	70da      	strb	r2, [r3, #3]
		break;
 8003d3a:	e1a1      	b.n	8004080 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	b2d9      	uxtb	r1, r3
 8003d46:	2000      	movs	r0, #0
 8003d48:	4301      	orrs	r1, r0
 8003d4a:	7251      	strb	r1, [r2, #9]
 8003d4c:	0a19      	lsrs	r1, r3, #8
 8003d4e:	b2c9      	uxtb	r1, r1
 8003d50:	2000      	movs	r0, #0
 8003d52:	4301      	orrs	r1, r0
 8003d54:	7291      	strb	r1, [r2, #10]
 8003d56:	0c1b      	lsrs	r3, r3, #16
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	72d3      	strb	r3, [r2, #11]
		mavlink_update_checksum(rxmsg, c);
 8003d60:	79fb      	ldrb	r3, [r7, #7]
 8003d62:	4619      	mov	r1, r3
 8003d64:	68f8      	ldr	r0, [r7, #12]
 8003d66:	f7ff fea1 	bl	8003aac <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	7b1b      	ldrb	r3, [r3, #12]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <mavlink_frame_char_buffer+0x212>
			if(rxmsg->len > 0) {
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	78db      	ldrb	r3, [r3, #3]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <mavlink_frame_char_buffer+0x20a>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	220b      	movs	r2, #11
 8003d82:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8003d84:	e17c      	b.n	8004080 <mavlink_frame_char_buffer+0x504>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	220c      	movs	r2, #12
 8003d8a:	70da      	strb	r2, [r3, #3]
		break;
 8003d8c:	e178      	b.n	8004080 <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2209      	movs	r2, #9
 8003d92:	70da      	strb	r2, [r3, #3]
		break;
 8003d94:	e174      	b.n	8004080 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= ((uint32_t)c)<<8;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	7a5a      	ldrb	r2, [r3, #9]
 8003d9a:	7a99      	ldrb	r1, [r3, #10]
 8003d9c:	0209      	lsls	r1, r1, #8
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	7adb      	ldrb	r3, [r3, #11]
 8003da2:	041b      	lsls	r3, r3, #16
 8003da4:	4313      	orrs	r3, r2
 8003da6:	461a      	mov	r2, r3
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	021b      	lsls	r3, r3, #8
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	b2d1      	uxtb	r1, r2
 8003db6:	2000      	movs	r0, #0
 8003db8:	4301      	orrs	r1, r0
 8003dba:	7259      	strb	r1, [r3, #9]
 8003dbc:	0a11      	lsrs	r1, r2, #8
 8003dbe:	b2c9      	uxtb	r1, r1
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	4301      	orrs	r1, r0
 8003dc4:	7299      	strb	r1, [r3, #10]
 8003dc6:	0c12      	lsrs	r2, r2, #16
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	2100      	movs	r1, #0
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	68f8      	ldr	r0, [r7, #12]
 8003dd6:	f7ff fe69 	bl	8003aac <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	220a      	movs	r2, #10
 8003dde:	70da      	strb	r2, [r3, #3]
		break;
 8003de0:	e14e      	b.n	8004080 <mavlink_frame_char_buffer+0x504>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	7a5a      	ldrb	r2, [r3, #9]
 8003de6:	7a99      	ldrb	r1, [r3, #10]
 8003de8:	0209      	lsls	r1, r1, #8
 8003dea:	430a      	orrs	r2, r1
 8003dec:	7adb      	ldrb	r3, [r3, #11]
 8003dee:	041b      	lsls	r3, r3, #16
 8003df0:	4313      	orrs	r3, r2
 8003df2:	461a      	mov	r2, r3
 8003df4:	79fb      	ldrb	r3, [r7, #7]
 8003df6:	041b      	lsls	r3, r3, #16
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	b2d1      	uxtb	r1, r2
 8003e02:	2000      	movs	r0, #0
 8003e04:	4301      	orrs	r1, r0
 8003e06:	7259      	strb	r1, [r3, #9]
 8003e08:	0a11      	lsrs	r1, r2, #8
 8003e0a:	b2c9      	uxtb	r1, r1
 8003e0c:	2000      	movs	r0, #0
 8003e0e:	4301      	orrs	r1, r0
 8003e10:	7299      	strb	r1, [r3, #10]
 8003e12:	0c12      	lsrs	r2, r2, #16
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	2100      	movs	r1, #0
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	72da      	strb	r2, [r3, #11]
		mavlink_update_checksum(rxmsg, c);
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	4619      	mov	r1, r3
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f7ff fe43 	bl	8003aac <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	78db      	ldrb	r3, [r3, #3]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <mavlink_frame_char_buffer+0x2ba>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	220b      	movs	r2, #11
 8003e32:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8003e34:	e124      	b.n	8004080 <mavlink_frame_char_buffer+0x504>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	220c      	movs	r2, #12
 8003e3a:	70da      	strb	r2, [r3, #3]
		break;
 8003e3c:	e120      	b.n	8004080 <mavlink_frame_char_buffer+0x504>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f103 020c 	add.w	r2, r3, #12
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	791b      	ldrb	r3, [r3, #4]
 8003e48:	1c59      	adds	r1, r3, #1
 8003e4a:	b2c8      	uxtb	r0, r1
 8003e4c:	68b9      	ldr	r1, [r7, #8]
 8003e4e:	7108      	strb	r0, [r1, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	79fa      	ldrb	r2, [r7, #7]
 8003e54:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	4619      	mov	r1, r3
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff fe26 	bl	8003aac <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	791a      	ldrb	r2, [r3, #4]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	78db      	ldrb	r3, [r3, #3]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	f040 8102 	bne.w	8004072 <mavlink_frame_char_buffer+0x4f6>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	220c      	movs	r2, #12
 8003e72:	70da      	strb	r2, [r3, #3]
		}
		break;
 8003e74:	e0fd      	b.n	8004072 <mavlink_frame_char_buffer+0x4f6>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	7a5a      	ldrb	r2, [r3, #9]
 8003e7a:	7a99      	ldrb	r1, [r3, #10]
 8003e7c:	0209      	lsls	r1, r1, #8
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	7adb      	ldrb	r3, [r3, #11]
 8003e82:	041b      	lsls	r3, r3, #16
 8003e84:	4313      	orrs	r3, r2
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff fe28 	bl	8003adc <mavlink_get_msg_entry>
 8003e8c:	61b8      	str	r0, [r7, #24]
		if (e == NULL) {
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d107      	bne.n	8003ea4 <mavlink_frame_char_buffer+0x328>
			// Message not found in CRC_EXTRA table.
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	220e      	movs	r2, #14
 8003e98:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	79fa      	ldrb	r2, [r7, #7]
 8003e9e:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
			// zero-fill the packet to cope with short incoming packets
				if (e && status->packet_idx < e->max_msg_len) {
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
			}
		}
		break;
 8003ea2:	e0e8      	b.n	8004076 <mavlink_frame_char_buffer+0x4fa>
			uint8_t crc_extra = e->crc_extra;
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	791b      	ldrb	r3, [r3, #4]
 8003ea8:	75fb      	strb	r3, [r7, #23]
			mavlink_update_checksum(rxmsg, crc_extra);
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
 8003eac:	4619      	mov	r1, r3
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f7ff fdfc 	bl	8003aac <mavlink_update_checksum>
			if (c != (rxmsg->checksum & 0xFF)) {
 8003eb4:	79fa      	ldrb	r2, [r7, #7]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d003      	beq.n	8003eca <mavlink_frame_char_buffer+0x34e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	220e      	movs	r2, #14
 8003ec6:	70da      	strb	r2, [r3, #3]
 8003ec8:	e002      	b.n	8003ed0 <mavlink_frame_char_buffer+0x354>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	220d      	movs	r2, #13
 8003ece:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	79fa      	ldrb	r2, [r7, #7]
 8003ed4:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
				if (e && status->packet_idx < e->max_msg_len) {
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 80cb 	beq.w	8004076 <mavlink_frame_char_buffer+0x4fa>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	791a      	ldrb	r2, [r3, #4]
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	799b      	ldrb	r3, [r3, #6]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	f080 80c4 	bcs.w	8004076 <mavlink_frame_char_buffer+0x4fa>
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	7912      	ldrb	r2, [r2, #4]
 8003ef6:	1898      	adds	r0, r3, r2
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	799b      	ldrb	r3, [r3, #6]
 8003efc:	461a      	mov	r2, r3
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	791b      	ldrb	r3, [r3, #4]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	461a      	mov	r2, r3
 8003f06:	2100      	movs	r1, #0
 8003f08:	f000 fcac 	bl	8004864 <memset>
		break;
 8003f0c:	e0b3      	b.n	8004076 <mavlink_frame_char_buffer+0x4fa>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	78db      	ldrb	r3, [r3, #3]
 8003f12:	2b0e      	cmp	r3, #14
 8003f14:	d008      	beq.n	8003f28 <mavlink_frame_char_buffer+0x3ac>
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	881b      	ldrh	r3, [r3, #0]
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	0a1b      	lsrs	r3, r3, #8
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d003      	beq.n	8003f30 <mavlink_frame_char_buffer+0x3b4>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	e002      	b.n	8003f36 <mavlink_frame_char_buffer+0x3ba>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	2201      	movs	r2, #1
 8003f34:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	79fa      	ldrb	r2, [r7, #7]
 8003f3a:	f883 2115 	strb.w	r2, [r3, #277]	@ 0x115

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	791b      	ldrb	r3, [r3, #4]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00e      	beq.n	8003f68 <mavlink_frame_char_buffer+0x3ec>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	220f      	movs	r2, #15
 8003f4e:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	220d      	movs	r2, #13
 8003f54:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	f000 808d 	beq.w	800407a <mavlink_frame_char_buffer+0x4fe>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8003f66:	e088      	b.n	800407a <mavlink_frame_char_buffer+0x4fe>
			if (status->signing &&
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01f      	beq.n	8003fb0 <mavlink_frame_char_buffer+0x434>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (status->signing &&
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d013      	beq.n	8003fa2 <mavlink_frame_char_buffer+0x426>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	7a59      	ldrb	r1, [r3, #9]
 8003f84:	7a98      	ldrb	r0, [r3, #10]
 8003f86:	0200      	lsls	r0, r0, #8
 8003f88:	4301      	orrs	r1, r0
 8003f8a:	7adb      	ldrb	r3, [r3, #11]
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	430b      	orrs	r3, r1
 8003f90:	4619      	mov	r1, r3
 8003f92:	68b8      	ldr	r0, [r7, #8]
 8003f94:	4790      	blx	r2
 8003f96:	4603      	mov	r3, r0
 8003f98:	f083 0301 	eor.w	r3, r3, #1
 8003f9c:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d006      	beq.n	8003fb0 <mavlink_frame_char_buffer+0x434>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	781b      	ldrb	r3, [r3, #0]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d002      	beq.n	8003fb0 <mavlink_frame_char_buffer+0x434>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2203      	movs	r2, #3
 8003fae:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d05e      	beq.n	800407a <mavlink_frame_char_buffer+0x4fe>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8003fbc:	f240 1223 	movw	r2, #291	@ 0x123
 8003fc0:	68f9      	ldr	r1, [r7, #12]
 8003fc2:	6838      	ldr	r0, [r7, #0]
 8003fc4:	f000 fc7a 	bl	80048bc <memcpy>
		break;
 8003fc8:	e057      	b.n	800407a <mavlink_frame_char_buffer+0x4fe>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	7b5b      	ldrb	r3, [r3, #13]
 8003fce:	f1c3 030d 	rsb	r3, r3, #13
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	79fa      	ldrb	r2, [r7, #7]
 8003fd8:	f883 2116 	strb.w	r2, [r3, #278]	@ 0x116
		status->signature_wait--;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	7b5b      	ldrb	r3, [r3, #13]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	7b5b      	ldrb	r3, [r3, #13]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d146      	bne.n	800407e <mavlink_frame_char_buffer+0x502>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	6918      	ldr	r0, [r3, #16]
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f7ff f98c 	bl	8003318 <mavlink_signature_check>
 8004000:	4603      	mov	r3, r0
 8004002:	77fb      	strb	r3, [r7, #31]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8004004:	7ffb      	ldrb	r3, [r7, #31]
 8004006:	f083 0301 	eor.w	r3, r3, #1
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d017      	beq.n	8004040 <mavlink_frame_char_buffer+0x4c4>
			   	(status->signing->accept_unsigned_callback &&
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (!sig_ok &&
 8004016:	2b00      	cmp	r3, #0
 8004018:	d012      	beq.n	8004040 <mavlink_frame_char_buffer+0x4c4>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	7a59      	ldrb	r1, [r3, #9]
 8004024:	7a98      	ldrb	r0, [r3, #10]
 8004026:	0200      	lsls	r0, r0, #8
 8004028:	4301      	orrs	r1, r0
 800402a:	7adb      	ldrb	r3, [r3, #11]
 800402c:	041b      	lsls	r3, r3, #16
 800402e:	430b      	orrs	r3, r1
 8004030:	4619      	mov	r1, r3
 8004032:	68b8      	ldr	r0, [r7, #8]
 8004034:	4790      	blx	r2
 8004036:	4603      	mov	r3, r0
			   	(status->signing->accept_unsigned_callback &&
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <mavlink_frame_char_buffer+0x4c4>
				// accepted via application level override
				sig_ok = true;
 800403c:	2301      	movs	r3, #1
 800403e:	77fb      	strb	r3, [r7, #31]
			}
			if (sig_ok) {
 8004040:	7ffb      	ldrb	r3, [r7, #31]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <mavlink_frame_char_buffer+0x4d2>
				status->msg_received = MAVLINK_FRAMING_OK;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2201      	movs	r2, #1
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	e002      	b.n	8004054 <mavlink_frame_char_buffer+0x4d8>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2203      	movs	r2, #3
 8004052:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2201      	movs	r2, #1
 8004058:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00e      	beq.n	800407e <mavlink_frame_char_buffer+0x502>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8004060:	f240 1223 	movw	r2, #291	@ 0x123
 8004064:	68f9      	ldr	r1, [r7, #12]
 8004066:	6838      	ldr	r0, [r7, #0]
 8004068:	f000 fc28 	bl	80048bc <memcpy>
			}
		}
		break;
 800406c:	e007      	b.n	800407e <mavlink_frame_char_buffer+0x502>
		break;
 800406e:	bf00      	nop
 8004070:	e006      	b.n	8004080 <mavlink_frame_char_buffer+0x504>
		break;
 8004072:	bf00      	nop
 8004074:	e004      	b.n	8004080 <mavlink_frame_char_buffer+0x504>
		break;
 8004076:	bf00      	nop
 8004078:	e002      	b.n	8004080 <mavlink_frame_char_buffer+0x504>
		break;
 800407a:	bf00      	nop
 800407c:	e000      	b.n	8004080 <mavlink_frame_char_buffer+0x504>
		break;
 800407e:	bf00      	nop
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d110      	bne.n	80040aa <mavlink_frame_char_buffer+0x52e>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	799a      	ldrb	r2, [r3, #6]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	891b      	ldrh	r3, [r3, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d102      	bne.n	800409e <mavlink_frame_char_buffer+0x522>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2200      	movs	r2, #0
 800409c:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	891b      	ldrh	r3, [r3, #8]
 80040a2:	3301      	adds	r3, #1
 80040a4:	b29a      	uxth	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <mavlink_frame_char_buffer+0x53c>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	78da      	ldrb	r2, [r3, #3]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 80040b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01a      	beq.n	80040f4 <mavlink_frame_char_buffer+0x578>
           r_mavlink_status->parse_state = status->parse_state;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	78da      	ldrb	r2, [r3, #3]
 80040c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c4:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	791a      	ldrb	r2, [r3, #4]
 80040ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040cc:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	795b      	ldrb	r3, [r3, #5]
 80040d2:	3301      	adds	r3, #1
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040d8:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	891a      	ldrh	r2, [r3, #8]
 80040de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e0:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	789b      	ldrb	r3, [r3, #2]
 80040e6:	461a      	mov	r2, r3
 80040e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ea:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	7b1a      	ldrb	r2, [r3, #12]
 80040f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f2:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	2200      	movs	r2, #0
 80040f8:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d111      	bne.n	8004126 <mavlink_frame_char_buffer+0x5aa>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00e      	beq.n	8004126 <mavlink_frame_char_buffer+0x5aa>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f893 3114 	ldrb.w	r3, [r3, #276]	@ 0x114
 800410e:	b21a      	sxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3115 	ldrb.w	r3, [r3, #277]	@ 0x115
 8004116:	b21b      	sxth	r3, r3
 8004118:	021b      	lsls	r3, r3, #8
 800411a:	b21b      	sxth	r3, r3
 800411c:	4313      	orrs	r3, r2
 800411e:	b21b      	sxth	r3, r3
 8004120:	b29a      	uxth	r2, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	801a      	strh	r2, [r3, #0]
            }
	}

	return status->msg_received;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3720      	adds	r7, #32
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop

08004134 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8004134:	b590      	push	{r4, r7, lr}
 8004136:	b087      	sub	sp, #28
 8004138:	af02      	add	r7, sp, #8
 800413a:	60ba      	str	r2, [r7, #8]
 800413c:	607b      	str	r3, [r7, #4]
 800413e:	4603      	mov	r3, r0
 8004140:	73fb      	strb	r3, [r7, #15]
 8004142:	460b      	mov	r3, r1
 8004144:	73bb      	strb	r3, [r7, #14]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8004146:	7bfb      	ldrb	r3, [r7, #15]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff f84f 	bl	80031ec <mavlink_get_channel_buffer>
 800414e:	4604      	mov	r4, r0
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff f836 	bl	80031c4 <mavlink_get_channel_status>
 8004158:	4601      	mov	r1, r0
 800415a:	7bba      	ldrb	r2, [r7, #14]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4620      	mov	r0, r4
 8004164:	f7ff fd0a 	bl	8003b7c <mavlink_frame_char_buffer>
 8004168:	4603      	mov	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	bd90      	pop	{r4, r7, pc}

08004172 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b088      	sub	sp, #32
 8004176:	af00      	add	r7, sp, #0
 8004178:	60ba      	str	r2, [r7, #8]
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	4603      	mov	r3, r0
 800417e:	73fb      	strb	r3, [r7, #15]
 8004180:	460b      	mov	r3, r1
 8004182:	73bb      	strb	r3, [r7, #14]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8004184:	7bb9      	ldrb	r1, [r7, #14]
 8004186:	7bf8      	ldrb	r0, [r7, #15]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	f7ff ffd2 	bl	8004134 <mavlink_frame_char>
 8004190:	4603      	mov	r3, r0
 8004192:	77fb      	strb	r3, [r7, #31]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8004194:	7ffb      	ldrb	r3, [r7, #31]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d002      	beq.n	80041a0 <mavlink_parse_char+0x2e>
 800419a:	7ffb      	ldrb	r3, [r7, #31]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d120      	bne.n	80041e2 <mavlink_parse_char+0x70>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff f822 	bl	80031ec <mavlink_get_channel_buffer>
 80041a8:	61b8      	str	r0, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff f809 	bl	80031c4 <mavlink_get_channel_status>
 80041b2:	6178      	str	r0, [r7, #20]
	    _mav_parse_error(status);
 80041b4:	6978      	ldr	r0, [r7, #20]
 80041b6:	f7ff fb78 	bl	80038aa <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2201      	movs	r2, #1
 80041c4:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 80041c6:	7bbb      	ldrb	r3, [r7, #14]
 80041c8:	2bfd      	cmp	r3, #253	@ 0xfd
 80041ca:	d108      	bne.n	80041de <mavlink_parse_char+0x6c>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	2202      	movs	r2, #2
 80041d0:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	2200      	movs	r2, #0
 80041d6:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 80041d8:	69b8      	ldr	r0, [r7, #24]
 80041da:	f7ff fc55 	bl	8003a88 <mavlink_start_checksum>
	    }
	    return 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <mavlink_parse_char+0x72>
    }
    return msg_received;
 80041e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3720      	adds	r7, #32
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <mavlink_msg_attitude_decode>:
 *
 * @param msg The message to decode
 * @param attitude C-struct to decode the message contents into
 */
static inline void mavlink_msg_attitude_decode(const mavlink_message_t* msg, mavlink_attitude_t* attitude)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
    attitude->yaw = mavlink_msg_attitude_get_yaw(msg);
    attitude->rollspeed = mavlink_msg_attitude_get_rollspeed(msg);
    attitude->pitchspeed = mavlink_msg_attitude_get_pitchspeed(msg);
    attitude->yawspeed = mavlink_msg_attitude_get_yawspeed(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_ATTITUDE_LEN? msg->len : MAVLINK_MSG_ID_ATTITUDE_LEN;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	78db      	ldrb	r3, [r3, #3]
 80041fa:	2b1c      	cmp	r3, #28
 80041fc:	bf28      	it	cs
 80041fe:	231c      	movcs	r3, #28
 8004200:	73fb      	strb	r3, [r7, #15]
        memset(attitude, 0, MAVLINK_MSG_ID_ATTITUDE_LEN);
 8004202:	221c      	movs	r2, #28
 8004204:	2100      	movs	r1, #0
 8004206:	6838      	ldr	r0, [r7, #0]
 8004208:	f000 fb2c 	bl	8004864 <memset>
    memcpy(attitude, _MAV_PAYLOAD(msg), len);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	330c      	adds	r3, #12
 8004210:	7bfa      	ldrb	r2, [r7, #15]
 8004212:	4619      	mov	r1, r3
 8004214:	6838      	ldr	r0, [r7, #0]
 8004216:	f000 fb51 	bl	80048bc <memcpy>
#endif
}
 800421a:	bf00      	nop
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <mavlink_msg_heartbeat_pack>:
 * @param system_status  System status flag.
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_heartbeat_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b088      	sub	sp, #32
 8004226:	af02      	add	r7, sp, #8
 8004228:	603a      	str	r2, [r7, #0]
 800422a:	461a      	mov	r2, r3
 800422c:	4603      	mov	r3, r0
 800422e:	71fb      	strb	r3, [r7, #7]
 8004230:	460b      	mov	r3, r1
 8004232:	71bb      	strb	r3, [r7, #6]
 8004234:	4613      	mov	r3, r2
 8004236:	717b      	strb	r3, [r7, #5]
    _mav_put_uint8_t(buf, 8, 3);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#else
    mavlink_heartbeat_t packet;
    packet.custom_mode = custom_mode;
 8004238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423a:	60fb      	str	r3, [r7, #12]
    packet.type = type;
 800423c:	797b      	ldrb	r3, [r7, #5]
 800423e:	743b      	strb	r3, [r7, #16]
    packet.autopilot = autopilot;
 8004240:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004244:	747b      	strb	r3, [r7, #17]
    packet.base_mode = base_mode;
 8004246:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800424a:	74bb      	strb	r3, [r7, #18]
    packet.system_status = system_status;
 800424c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004250:	74fb      	strb	r3, [r7, #19]
    packet.mavlink_version = 3;
 8004252:	2303      	movs	r3, #3
 8004254:	753b      	strb	r3, [r7, #20]

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	330c      	adds	r3, #12
 800425a:	f107 010c 	add.w	r1, r7, #12
 800425e:	2209      	movs	r2, #9
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fb2b 	bl	80048bc <memcpy>
#endif

    msg->msgid = MAVLINK_MSG_ID_HEARTBEAT;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2200      	movs	r2, #0
 800426a:	725a      	strb	r2, [r3, #9]
 800426c:	2200      	movs	r2, #0
 800426e:	729a      	strb	r2, [r3, #10]
 8004270:	2200      	movs	r2, #0
 8004272:	72da      	strb	r2, [r3, #11]
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_HEARTBEAT_MIN_LEN, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
 8004274:	79ba      	ldrb	r2, [r7, #6]
 8004276:	79f9      	ldrb	r1, [r7, #7]
 8004278:	2332      	movs	r3, #50	@ 0x32
 800427a:	9301      	str	r3, [sp, #4]
 800427c:	2309      	movs	r3, #9
 800427e:	9300      	str	r3, [sp, #0]
 8004280:	2309      	movs	r3, #9
 8004282:	6838      	ldr	r0, [r7, #0]
 8004284:	f7ff faf3 	bl	800386e <mavlink_finalize_message>
 8004288:	4603      	mov	r3, r0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	78db      	ldrb	r3, [r3, #3]
 80042a0:	2b09      	cmp	r3, #9
 80042a2:	bf28      	it	cs
 80042a4:	2309      	movcs	r3, #9
 80042a6:	73fb      	strb	r3, [r7, #15]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 80042a8:	2209      	movs	r2, #9
 80042aa:	2100      	movs	r1, #0
 80042ac:	6838      	ldr	r0, [r7, #0]
 80042ae:	f000 fad9 	bl	8004864 <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	330c      	adds	r3, #12
 80042b6:	7bfa      	ldrb	r2, [r7, #15]
 80042b8:	4619      	mov	r1, r3
 80042ba:	6838      	ldr	r0, [r7, #0]
 80042bc:	f000 fafe 	bl	80048bc <memcpy>
#endif
}
 80042c0:	bf00      	nop
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <pulse_in_period>:

/* ---------- LED ---------- */
/* ---------- Helpers ---------- */
// Helper: compute ON window in a repeating period
static inline uint8_t pulse_in_period(uint32_t now, uint32_t t0, uint16_t period_ms, uint16_t on_ms)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	4611      	mov	r1, r2
 80042d4:	461a      	mov	r2, r3
 80042d6:	460b      	mov	r3, r1
 80042d8:	80fb      	strh	r3, [r7, #6]
 80042da:	4613      	mov	r3, r2
 80042dc:	80bb      	strh	r3, [r7, #4]
    uint32_t phase = (now - t0) % period_ms; // unsigned math -> overflow-safe
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	88fa      	ldrh	r2, [r7, #6]
 80042e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80042ea:	fb01 f202 	mul.w	r2, r1, r2
 80042ee:	1a9b      	subs	r3, r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    return (phase < on_ms) ? 1u : 0u;
 80042f2:	88bb      	ldrh	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d201      	bcs.n	80042fe <pulse_in_period+0x36>
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <pulse_in_period+0x38>
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <set_pin_if_changed>:

// Helper: write only when a pin actually needs to change
static inline void set_pin_if_changed(GPIO_TypeDef *port, uint16_t pin, uint8_t on, uint8_t *cached)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	607b      	str	r3, [r7, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	817b      	strh	r3, [r7, #10]
 800431a:	4613      	mov	r3, r2
 800431c:	727b      	strb	r3, [r7, #9]
    if (on != *cached)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	7a7a      	ldrb	r2, [r7, #9]
 8004324:	429a      	cmp	r2, r3
 8004326:	d00e      	beq.n	8004346 <set_pin_if_changed+0x3a>
    {
        HAL_GPIO_WritePin(port, pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8004328:	7a7b      	ldrb	r3, [r7, #9]
 800432a:	2b00      	cmp	r3, #0
 800432c:	bf14      	ite	ne
 800432e:	2301      	movne	r3, #1
 8004330:	2300      	moveq	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	897b      	ldrh	r3, [r7, #10]
 8004338:	4619      	mov	r1, r3
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7fc fe8c 	bl	8001058 <HAL_GPIO_WritePin>
        *cached = on;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7a7a      	ldrb	r2, [r7, #9]
 8004344:	701a      	strb	r2, [r3, #0]
    }
}
 8004346:	bf00      	nop
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_UART_RxCpltCallback>:
/* ---------- UART IRQ ---------- */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a09      	ldr	r2, [pc, #36]	@ (8004384 <HAL_UART_RxCpltCallback+0x34>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10b      	bne.n	800437a <HAL_UART_RxCpltCallback+0x2a>
	{
		RINGBUF_Put(&ui.ring, ui.rx_byte);
 8004362:	4b09      	ldr	r3, [pc, #36]	@ (8004388 <HAL_UART_RxCpltCallback+0x38>)
 8004364:	f893 3508 	ldrb.w	r3, [r3, #1288]	@ 0x508
 8004368:	4619      	mov	r1, r3
 800436a:	4807      	ldr	r0, [pc, #28]	@ (8004388 <HAL_UART_RxCpltCallback+0x38>)
 800436c:	f7fe fb22 	bl	80029b4 <RINGBUF_Put>
		HAL_UART_Receive_IT(&huart2, &ui.rx_byte, 1);
 8004370:	2201      	movs	r2, #1
 8004372:	4906      	ldr	r1, [pc, #24]	@ (800438c <HAL_UART_RxCpltCallback+0x3c>)
 8004374:	4806      	ldr	r0, [pc, #24]	@ (8004390 <HAL_UART_RxCpltCallback+0x40>)
 8004376:	f7fd fbce 	bl	8001b16 <HAL_UART_Receive_IT>
	}
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40004400 	.word	0x40004400
 8004388:	20000084 	.word	0x20000084
 800438c:	2000058c 	.word	0x2000058c
 8004390:	2000002c 	.word	0x2000002c

08004394 <ring_buffer_send_data>:
static void ring_buffer_send_data(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
    if (ui.uart_tx_busy) return;
 800439a:	4b10      	ldr	r3, [pc, #64]	@ (80043dc <ring_buffer_send_data+0x48>)
 800439c:	f893 350a 	ldrb.w	r3, [r3, #1290]	@ 0x50a
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d116      	bne.n	80043d4 <ring_buffer_send_data+0x40>

    uint8_t data_to_send = 0;
 80043a6:	2300      	movs	r3, #0
 80043a8:	71fb      	strb	r3, [r7, #7]
	if(RINGBUF_Get(&ui.ring_tx, &data_to_send) == RING_OK)
 80043aa:	1dfb      	adds	r3, r7, #7
 80043ac:	4619      	mov	r1, r3
 80043ae:	480c      	ldr	r0, [pc, #48]	@ (80043e0 <ring_buffer_send_data+0x4c>)
 80043b0:	f7fe fb2c 	bl	8002a0c <RINGBUF_Get>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10d      	bne.n	80043d6 <ring_buffer_send_data+0x42>
	{
		uint8_t tx_data[1] = {data_to_send};
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	713b      	strb	r3, [r7, #4]
		ui.uart_tx_busy = 1;
 80043be:	4b07      	ldr	r3, [pc, #28]	@ (80043dc <ring_buffer_send_data+0x48>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 250a 	strb.w	r2, [r3, #1290]	@ 0x50a
		HAL_UART_Transmit_IT(&huart2, tx_data, 1);
 80043c6:	1d3b      	adds	r3, r7, #4
 80043c8:	2201      	movs	r2, #1
 80043ca:	4619      	mov	r1, r3
 80043cc:	4805      	ldr	r0, [pc, #20]	@ (80043e4 <ring_buffer_send_data+0x50>)
 80043ce:	f7fd fb6c 	bl	8001aaa <HAL_UART_Transmit_IT>
 80043d2:	e000      	b.n	80043d6 <ring_buffer_send_data+0x42>
    if (ui.uart_tx_busy) return;
 80043d4:	bf00      	nop
	}
}
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000084 	.word	0x20000084
 80043e0:	20000094 	.word	0x20000094
 80043e4:	2000002c 	.word	0x2000002c

080043e8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a06      	ldr	r2, [pc, #24]	@ (8004410 <HAL_UART_TxCpltCallback+0x28>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d105      	bne.n	8004406 <HAL_UART_TxCpltCallback+0x1e>
    {
      ui.uart_tx_busy = 0;
 80043fa:	4b06      	ldr	r3, [pc, #24]	@ (8004414 <HAL_UART_TxCpltCallback+0x2c>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 250a 	strb.w	r2, [r3, #1290]	@ 0x50a
      ring_buffer_send_data();
 8004402:	f7ff ffc7 	bl	8004394 <ring_buffer_send_data>
    }
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40004400 	.word	0x40004400
 8004414:	20000084 	.word	0x20000084

08004418 <update_leds_by_mav_state>:


static void update_leds_by_mav_state(uint8_t state, uint32_t now)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	6039      	str	r1, [r7, #0]
 8004422:	71fb      	strb	r3, [r7, #7]

    // Track when we entered the current state to restart patterns cleanly
    static uint8_t  last_state      = 0xFF;
    static uint32_t state_t0        = 0;

    if (state != last_state)
 8004424:	4b72      	ldr	r3, [pc, #456]	@ (80045f0 <update_leds_by_mav_state+0x1d8>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	79fa      	ldrb	r2, [r7, #7]
 800442a:	429a      	cmp	r2, r3
 800442c:	d005      	beq.n	800443a <update_leds_by_mav_state+0x22>
    {
        last_state = state;
 800442e:	4a70      	ldr	r2, [pc, #448]	@ (80045f0 <update_leds_by_mav_state+0x1d8>)
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	7013      	strb	r3, [r2, #0]
        state_t0   = now;
 8004434:	4a6f      	ldr	r2, [pc, #444]	@ (80045f4 <update_leds_by_mav_state+0x1dc>)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	6013      	str	r3, [r2, #0]
    }

    // Front LEDs: constant according to your original logic
    set_pin_if_changed(gpio, LED_FRONT_GEAR_GREEN_Pin, 1, &last_front_green);
 800443a:	4b6f      	ldr	r3, [pc, #444]	@ (80045f8 <update_leds_by_mav_state+0x1e0>)
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	4b6f      	ldr	r3, [pc, #444]	@ (80045fc <update_leds_by_mav_state+0x1e4>)
 8004440:	2201      	movs	r2, #1
 8004442:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004446:	f7ff ff61 	bl	800430c <set_pin_if_changed>
    set_pin_if_changed(gpio, LED_FRONT_GEAR_RED_Pin,   0, &last_front_red);
 800444a:	4b6b      	ldr	r3, [pc, #428]	@ (80045f8 <update_leds_by_mav_state+0x1e0>)
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	4b6c      	ldr	r3, [pc, #432]	@ (8004600 <update_leds_by_mav_state+0x1e8>)
 8004450:	2200      	movs	r2, #0
 8004452:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004456:	f7ff ff59 	bl	800430c <set_pin_if_changed>

    // Compute desired rear LED states for this frame
    uint8_t rg = last_rear_green;  // default: keep previous if we don't handle the state
 800445a:	4b6a      	ldr	r3, [pc, #424]	@ (8004604 <update_leds_by_mav_state+0x1ec>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	75fb      	strb	r3, [r7, #23]
    uint8_t rr = last_rear_red;
 8004460:	4b69      	ldr	r3, [pc, #420]	@ (8004608 <update_leds_by_mav_state+0x1f0>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	75bb      	strb	r3, [r7, #22]
    /* ---------- OVERRIDE: DISARM + TILT ---------- */
    do {
        static uint8_t tilt_override_last = 0;

        const uint8_t is_armed = (mav.hb.base_mode & MAV_MODE_FLAG_SAFETY_ARMED) ? 1 : 0;
 8004466:	4b69      	ldr	r3, [pc, #420]	@ (800460c <update_leds_by_mav_state+0x1f4>)
 8004468:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 800446c:	09db      	lsrs	r3, r3, #7
 800446e:	757b      	strb	r3, [r7, #21]

        const uint8_t att_fresh = (att_last_ms != 0) && ((now - att_last_ms) <= ATT_VALID_MS);
 8004470:	4b67      	ldr	r3, [pc, #412]	@ (8004610 <update_leds_by_mav_state+0x1f8>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d008      	beq.n	800448a <update_leds_by_mav_state+0x72>
 8004478:	4b65      	ldr	r3, [pc, #404]	@ (8004610 <update_leds_by_mav_state+0x1f8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004484:	d801      	bhi.n	800448a <update_leds_by_mav_state+0x72>
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <update_leds_by_mav_state+0x74>
 800448a:	2300      	movs	r3, #0
 800448c:	753b      	strb	r3, [r7, #20]

        const float tilt_thresh_rad = DISARM_TILT_DEG * (float)M_PI / 180.0f;
 800448e:	4b61      	ldr	r3, [pc, #388]	@ (8004614 <update_leds_by_mav_state+0x1fc>)
 8004490:	613b      	str	r3, [r7, #16]
        const uint8_t is_tilted = (att_fresh &&
                                  (fabsf(att_roll)  > tilt_thresh_rad ||
                                   fabsf(att_pitch) > tilt_thresh_rad)) ? 1 : 0;
 8004492:	7d3b      	ldrb	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d019      	beq.n	80044cc <update_leds_by_mav_state+0xb4>
                                  (fabsf(att_roll)  > tilt_thresh_rad ||
 8004498:	4b5f      	ldr	r3, [pc, #380]	@ (8004618 <update_leds_by_mav_state+0x200>)
 800449a:	edd3 7a00 	vldr	s15, [r3]
 800449e:	eef0 7ae7 	vabs.f32	s15, s15
                                   fabsf(att_pitch) > tilt_thresh_rad)) ? 1 : 0;
 80044a2:	ed97 7a04 	vldr	s14, [r7, #16]
 80044a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ae:	d40b      	bmi.n	80044c8 <update_leds_by_mav_state+0xb0>
 80044b0:	4b5a      	ldr	r3, [pc, #360]	@ (800461c <update_leds_by_mav_state+0x204>)
 80044b2:	edd3 7a00 	vldr	s15, [r3]
 80044b6:	eef0 7ae7 	vabs.f32	s15, s15
                                  (fabsf(att_roll)  > tilt_thresh_rad ||
 80044ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80044be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c6:	d501      	bpl.n	80044cc <update_leds_by_mav_state+0xb4>
                                   fabsf(att_pitch) > tilt_thresh_rad)) ? 1 : 0;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <update_leds_by_mav_state+0xb6>
 80044cc:	2300      	movs	r3, #0
        const uint8_t is_tilted = (att_fresh &&
 80044ce:	73fb      	strb	r3, [r7, #15]

        const uint8_t tilt_override = (!is_armed && is_tilted) ? 1 : 0;
 80044d0:	7d7b      	ldrb	r3, [r7, #21]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d104      	bne.n	80044e0 <update_leds_by_mav_state+0xc8>
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <update_leds_by_mav_state+0xc8>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <update_leds_by_mav_state+0xca>
 80044e0:	2300      	movs	r3, #0
 80044e2:	73bb      	strb	r3, [r7, #14]

        if (tilt_override != tilt_override_last)
 80044e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004620 <update_leds_by_mav_state+0x208>)
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	7bba      	ldrb	r2, [r7, #14]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d005      	beq.n	80044fa <update_leds_by_mav_state+0xe2>
        {
            state_t0 = now;
 80044ee:	4a41      	ldr	r2, [pc, #260]	@ (80045f4 <update_leds_by_mav_state+0x1dc>)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6013      	str	r3, [r2, #0]
            tilt_override_last = tilt_override;
 80044f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004620 <update_leds_by_mav_state+0x208>)
 80044f6:	7bbb      	ldrb	r3, [r7, #14]
 80044f8:	7013      	strb	r3, [r2, #0]
        }

        if (tilt_override)
 80044fa:	7bbb      	ldrb	r3, [r7, #14]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01b      	beq.n	8004538 <update_leds_by_mav_state+0x120>
        {
            rg = 0;
 8004500:	2300      	movs	r3, #0
 8004502:	75fb      	strb	r3, [r7, #23]
            rr = pulse_in_period(now, state_t0, 2 * CRITICAL_HALF_PERIOD_MS, CRITICAL_HALF_PERIOD_MS);
 8004504:	4b3b      	ldr	r3, [pc, #236]	@ (80045f4 <update_leds_by_mav_state+0x1dc>)
 8004506:	6819      	ldr	r1, [r3, #0]
 8004508:	23c8      	movs	r3, #200	@ 0xc8
 800450a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800450e:	6838      	ldr	r0, [r7, #0]
 8004510:	f7ff feda 	bl	80042c8 <pulse_in_period>
 8004514:	4603      	mov	r3, r0
 8004516:	75bb      	strb	r3, [r7, #22]
            set_pin_if_changed(gpio, LED_REAR_GEAR_GREEN_Pin, rg, &last_rear_green);
 8004518:	4b37      	ldr	r3, [pc, #220]	@ (80045f8 <update_leds_by_mav_state+0x1e0>)
 800451a:	6818      	ldr	r0, [r3, #0]
 800451c:	7dfa      	ldrb	r2, [r7, #23]
 800451e:	4b39      	ldr	r3, [pc, #228]	@ (8004604 <update_leds_by_mav_state+0x1ec>)
 8004520:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004524:	f7ff fef2 	bl	800430c <set_pin_if_changed>
            set_pin_if_changed(gpio, LED_REAR_GEAR_RED_Pin,   rr, &last_rear_red);
 8004528:	4b33      	ldr	r3, [pc, #204]	@ (80045f8 <update_leds_by_mav_state+0x1e0>)
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	7dba      	ldrb	r2, [r7, #22]
 800452e:	4b36      	ldr	r3, [pc, #216]	@ (8004608 <update_leds_by_mav_state+0x1f0>)
 8004530:	2104      	movs	r1, #4
 8004532:	f7ff feeb 	bl	800430c <set_pin_if_changed>
            return;
 8004536:	e058      	b.n	80045ea <update_leds_by_mav_state+0x1d2>
        }
    } while (0);
    /* --------------------------------------------- */
    switch (state)
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	2b04      	cmp	r3, #4
 800453c:	d021      	beq.n	8004582 <update_leds_by_mav_state+0x16a>
 800453e:	2b04      	cmp	r3, #4
 8004540:	dc34      	bgt.n	80045ac <update_leds_by_mav_state+0x194>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d002      	beq.n	800454c <update_leds_by_mav_state+0x134>
 8004546:	2b03      	cmp	r3, #3
 8004548:	d00e      	beq.n	8004568 <update_leds_by_mav_state+0x150>
 800454a:	e02f      	b.n	80045ac <update_leds_by_mav_state+0x194>
    {
		case MAV_STATE_UNINIT:
		{
			// Both rear blink together at 300 ms on/off (3.33 Hz)
			rg = rr = pulse_in_period(now, state_t0, 2 * UNINIT_HALF_PERIOD_MS, UNINIT_HALF_PERIOD_MS);
 800454c:	4b29      	ldr	r3, [pc, #164]	@ (80045f4 <update_leds_by_mav_state+0x1dc>)
 800454e:	6819      	ldr	r1, [r3, #0]
 8004550:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8004554:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8004558:	6838      	ldr	r0, [r7, #0]
 800455a:	f7ff feb5 	bl	80042c8 <pulse_in_period>
 800455e:	4603      	mov	r3, r0
 8004560:	75bb      	strb	r3, [r7, #22]
 8004562:	7dbb      	ldrb	r3, [r7, #22]
 8004564:	75fb      	strb	r3, [r7, #23]
			break;
 8004566:	e031      	b.n	80045cc <update_leds_by_mav_state+0x1b4>
		}
		case MAV_STATE_STANDBY:
		{
			// Short green pulse (50 ms) every 1050 ms, red off
			rg = pulse_in_period(now, state_t0, STANDBY_PERIOD_MS, STANDBY_ON_MS);
 8004568:	4b22      	ldr	r3, [pc, #136]	@ (80045f4 <update_leds_by_mav_state+0x1dc>)
 800456a:	6819      	ldr	r1, [r3, #0]
 800456c:	2332      	movs	r3, #50	@ 0x32
 800456e:	f240 421a 	movw	r2, #1050	@ 0x41a
 8004572:	6838      	ldr	r0, [r7, #0]
 8004574:	f7ff fea8 	bl	80042c8 <pulse_in_period>
 8004578:	4603      	mov	r3, r0
 800457a:	75fb      	strb	r3, [r7, #23]
			rr = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	75bb      	strb	r3, [r7, #22]
			break;
 8004580:	e024      	b.n	80045cc <update_leds_by_mav_state+0x1b4>
		}
		case MAV_STATE_ACTIVE:
		{
			// Alternate green/red every 300 ms
			uint8_t first_half = pulse_in_period(now, state_t0, 2 * ACTIVE_HALF_PERIOD_MS, ACTIVE_HALF_PERIOD_MS);
 8004582:	4b1c      	ldr	r3, [pc, #112]	@ (80045f4 <update_leds_by_mav_state+0x1dc>)
 8004584:	6819      	ldr	r1, [r3, #0]
 8004586:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800458a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800458e:	6838      	ldr	r0, [r7, #0]
 8004590:	f7ff fe9a 	bl	80042c8 <pulse_in_period>
 8004594:	4603      	mov	r3, r0
 8004596:	737b      	strb	r3, [r7, #13]
			rg = first_half;
 8004598:	7b7b      	ldrb	r3, [r7, #13]
 800459a:	75fb      	strb	r3, [r7, #23]
			rr = !first_half;
 800459c:	7b7b      	ldrb	r3, [r7, #13]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bf0c      	ite	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	2300      	movne	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	75bb      	strb	r3, [r7, #22]
			break;
 80045aa:	e00f      	b.n	80045cc <update_leds_by_mav_state+0x1b4>
		}
		default:
			if (state >= MAV_STATE_CRITICAL)
 80045ac:	79fb      	ldrb	r3, [r7, #7]
 80045ae:	2b04      	cmp	r3, #4
 80045b0:	d90b      	bls.n	80045ca <update_leds_by_mav_state+0x1b2>
			{
				// Red blinks at 5 Hz (200 ms on/off), green off
				rg = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	75fb      	strb	r3, [r7, #23]
				rr = pulse_in_period(now, state_t0, 2 * CRITICAL_HALF_PERIOD_MS, CRITICAL_HALF_PERIOD_MS);
 80045b6:	4b0f      	ldr	r3, [pc, #60]	@ (80045f4 <update_leds_by_mav_state+0x1dc>)
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	23c8      	movs	r3, #200	@ 0xc8
 80045bc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80045c0:	6838      	ldr	r0, [r7, #0]
 80045c2:	f7ff fe81 	bl	80042c8 <pulse_in_period>
 80045c6:	4603      	mov	r3, r0
 80045c8:	75bb      	strb	r3, [r7, #22]
			}
			// else: leave rear LEDs as they were (matches your original 'default' behavior)
			break;
 80045ca:	bf00      	nop
    }

    // Push rear outputs (only if they changed)
    set_pin_if_changed(gpio, LED_REAR_GEAR_GREEN_Pin, rg, &last_rear_green);
 80045cc:	4b0a      	ldr	r3, [pc, #40]	@ (80045f8 <update_leds_by_mav_state+0x1e0>)
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	7dfa      	ldrb	r2, [r7, #23]
 80045d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004604 <update_leds_by_mav_state+0x1ec>)
 80045d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80045d8:	f7ff fe98 	bl	800430c <set_pin_if_changed>
    set_pin_if_changed(gpio, LED_REAR_GEAR_RED_Pin,   rr, &last_rear_red);
 80045dc:	4b06      	ldr	r3, [pc, #24]	@ (80045f8 <update_leds_by_mav_state+0x1e0>)
 80045de:	6818      	ldr	r0, [r3, #0]
 80045e0:	7dba      	ldrb	r2, [r7, #22]
 80045e2:	4b09      	ldr	r3, [pc, #36]	@ (8004608 <update_leds_by_mav_state+0x1f0>)
 80045e4:	2104      	movs	r1, #4
 80045e6:	f7ff fe91 	bl	800430c <set_pin_if_changed>
}
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	20000009 	.word	0x20000009
 80045f4:	200006e8 	.word	0x200006e8
 80045f8:	200006e4 	.word	0x200006e4
 80045fc:	2000000a 	.word	0x2000000a
 8004600:	2000000b 	.word	0x2000000b
 8004604:	2000000c 	.word	0x2000000c
 8004608:	2000000d 	.word	0x2000000d
 800460c:	20000590 	.word	0x20000590
 8004610:	20000080 	.word	0x20000080
 8004614:	3f32b8c3 	.word	0x3f32b8c3
 8004618:	20000078 	.word	0x20000078
 800461c:	2000007c 	.word	0x2000007c
 8004620:	200006ec 	.word	0x200006ec

08004624 <send_heartbeat>:
/* ---------- MAVLink ---------- */
static void send_heartbeat(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800462a:	af04      	add	r7, sp, #16
	mavlink_message_t msg;
	uint8_t tx_frame[MAVLINK_MAX_PACKET_LEN];
	const uint8_t sysid = 1, compid = 1;
 800462c:	2301      	movs	r3, #1
 800462e:	f887 3245 	strb.w	r3, [r7, #581]	@ 0x245
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3244 	strb.w	r3, [r7, #580]	@ 0x244

	mavlink_msg_heartbeat_pack(sysid, compid, &msg,
 8004638:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 800463c:	f897 1244 	ldrb.w	r1, [r7, #580]	@ 0x244
 8004640:	f897 0245 	ldrb.w	r0, [r7, #581]	@ 0x245
 8004644:	2304      	movs	r3, #4
 8004646:	9303      	str	r3, [sp, #12]
 8004648:	2300      	movs	r3, #0
 800464a:	9302      	str	r3, [sp, #8]
 800464c:	23c0      	movs	r3, #192	@ 0xc0
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	2300      	movs	r3, #0
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	2300      	movs	r3, #0
 8004656:	f7ff fde4 	bl	8004222 <mavlink_msg_heartbeat_pack>
							 MAV_AUTOPILOT_GENERIC,
							 MAV_MODE_MANUAL_ARMED,
							 0,
							 MAV_STATE_ACTIVE);

	uint16_t len = mavlink_msg_to_send_buffer(tx_frame, &msg);
 800465a:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 800465e:	1d3b      	adds	r3, r7, #4
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff f931 	bl	80038ca <mavlink_msg_to_send_buffer>
 8004668:	4603      	mov	r3, r0
 800466a:	f8a7 3242 	strh.w	r3, [r7, #578]	@ 0x242
	for (uint16_t i = 0; i < len; i++)
 800466e:	2300      	movs	r3, #0
 8004670:	f8a7 3246 	strh.w	r3, [r7, #582]	@ 0x246
 8004674:	e00f      	b.n	8004696 <send_heartbeat+0x72>
	{
		RINGBUF_Put(&ui.ring_tx, tx_frame[i]);
 8004676:	f8b7 3246 	ldrh.w	r3, [r7, #582]	@ 0x246
 800467a:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 800467e:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8004682:	5cd3      	ldrb	r3, [r2, r3]
 8004684:	4619      	mov	r1, r3
 8004686:	480a      	ldr	r0, [pc, #40]	@ (80046b0 <send_heartbeat+0x8c>)
 8004688:	f7fe f994 	bl	80029b4 <RINGBUF_Put>
	for (uint16_t i = 0; i < len; i++)
 800468c:	f8b7 3246 	ldrh.w	r3, [r7, #582]	@ 0x246
 8004690:	3301      	adds	r3, #1
 8004692:	f8a7 3246 	strh.w	r3, [r7, #582]	@ 0x246
 8004696:	f8b7 2246 	ldrh.w	r2, [r7, #582]	@ 0x246
 800469a:	f8b7 3242 	ldrh.w	r3, [r7, #578]	@ 0x242
 800469e:	429a      	cmp	r2, r3
 80046a0:	d3e9      	bcc.n	8004676 <send_heartbeat+0x52>
	}
	ring_buffer_send_data();
 80046a2:	f7ff fe77 	bl	8004394 <ring_buffer_send_data>
}
 80046a6:	bf00      	nop
 80046a8:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000094 	.word	0x20000094

080046b4 <mavlink_process>:
static void mavlink_process(uint32_t now)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08a      	sub	sp, #40	@ 0x28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
	update_leds_by_mav_state(mav.hb.system_status, now);
 80046bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004774 <mavlink_process+0xc0>)
 80046be:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fea7 	bl	8004418 <update_leds_by_mav_state>
	while (RINGBUF_Get(&ui.ring, &ui.read_data) == RING_OK)
 80046ca:	e046      	b.n	800475a <mavlink_process+0xa6>
	{
		if (mavlink_parse_char(MAVLINK_COMM_0, ui.read_data, &mav.rx_msg, &mav.status))
 80046cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004778 <mavlink_process+0xc4>)
 80046ce:	f893 1509 	ldrb.w	r1, [r3, #1289]	@ 0x509
 80046d2:	4b2a      	ldr	r3, [pc, #168]	@ (800477c <mavlink_process+0xc8>)
 80046d4:	4a27      	ldr	r2, [pc, #156]	@ (8004774 <mavlink_process+0xc0>)
 80046d6:	2000      	movs	r0, #0
 80046d8:	f7ff fd4b 	bl	8004172 <mavlink_parse_char>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d03b      	beq.n	800475a <mavlink_process+0xa6>
		{
			switch (mav.rx_msg.msgid)
 80046e2:	4b24      	ldr	r3, [pc, #144]	@ (8004774 <mavlink_process+0xc0>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d002      	beq.n	80046f4 <mavlink_process+0x40>
 80046ee:	2b1e      	cmp	r3, #30
 80046f0:	d023      	beq.n	800473a <mavlink_process+0x86>
                    att_last_ms = now;
                    break;
                }

				default:
					break;
 80046f2:	e032      	b.n	800475a <mavlink_process+0xa6>
					mavlink_msg_heartbeat_decode(&mav.rx_msg, &mav.hb);
 80046f4:	4922      	ldr	r1, [pc, #136]	@ (8004780 <mavlink_process+0xcc>)
 80046f6:	481f      	ldr	r0, [pc, #124]	@ (8004774 <mavlink_process+0xc0>)
 80046f8:	f7ff fdcb 	bl	8004292 <mavlink_msg_heartbeat_decode>
					if (last_heartbeat_time != 0)
 80046fc:	4b21      	ldr	r3, [pc, #132]	@ (8004784 <mavlink_process+0xd0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d016      	beq.n	8004732 <mavlink_process+0x7e>
						heartbeat_period_ms = now - last_heartbeat_time;
 8004704:	4b1f      	ldr	r3, [pc, #124]	@ (8004784 <mavlink_process+0xd0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	4a1e      	ldr	r2, [pc, #120]	@ (8004788 <mavlink_process+0xd4>)
 800470e:	6013      	str	r3, [r2, #0]
						if (heartbeat_period_ms > 0)
 8004710:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <mavlink_process+0xd4>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00c      	beq.n	8004732 <mavlink_process+0x7e>
							heartbeat_freq_hz = 1000.0f / (float)heartbeat_period_ms;
 8004718:	4b1b      	ldr	r3, [pc, #108]	@ (8004788 <mavlink_process+0xd4>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	ee07 3a90 	vmov	s15, r3
 8004720:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004724:	eddf 6a19 	vldr	s13, [pc, #100]	@ 800478c <mavlink_process+0xd8>
 8004728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472c:	4b18      	ldr	r3, [pc, #96]	@ (8004790 <mavlink_process+0xdc>)
 800472e:	edc3 7a00 	vstr	s15, [r3]
					last_heartbeat_time = now;
 8004732:	4a14      	ldr	r2, [pc, #80]	@ (8004784 <mavlink_process+0xd0>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6013      	str	r3, [r2, #0]
					break;
 8004738:	e00f      	b.n	800475a <mavlink_process+0xa6>
                    mavlink_msg_attitude_decode(&mav.rx_msg, &att);
 800473a:	f107 030c 	add.w	r3, r7, #12
 800473e:	4619      	mov	r1, r3
 8004740:	480c      	ldr	r0, [pc, #48]	@ (8004774 <mavlink_process+0xc0>)
 8004742:	f7ff fd53 	bl	80041ec <mavlink_msg_attitude_decode>
                    att_roll    = att.roll;   // rad
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4a12      	ldr	r2, [pc, #72]	@ (8004794 <mavlink_process+0xe0>)
 800474a:	6013      	str	r3, [r2, #0]
                    att_pitch   = att.pitch;  // rad
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	4a12      	ldr	r2, [pc, #72]	@ (8004798 <mavlink_process+0xe4>)
 8004750:	6013      	str	r3, [r2, #0]
                    att_last_ms = now;
 8004752:	4a12      	ldr	r2, [pc, #72]	@ (800479c <mavlink_process+0xe8>)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6013      	str	r3, [r2, #0]
                    break;
 8004758:	bf00      	nop
	while (RINGBUF_Get(&ui.ring, &ui.read_data) == RING_OK)
 800475a:	4911      	ldr	r1, [pc, #68]	@ (80047a0 <mavlink_process+0xec>)
 800475c:	4806      	ldr	r0, [pc, #24]	@ (8004778 <mavlink_process+0xc4>)
 800475e:	f7fe f955 	bl	8002a0c <RINGBUF_Get>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0b1      	beq.n	80046cc <mavlink_process+0x18>
			}
		}
	}
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	3728      	adds	r7, #40	@ 0x28
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000590 	.word	0x20000590
 8004778:	20000084 	.word	0x20000084
 800477c:	200006b4 	.word	0x200006b4
 8004780:	200006cc 	.word	0x200006cc
 8004784:	200006d8 	.word	0x200006d8
 8004788:	200006dc 	.word	0x200006dc
 800478c:	447a0000 	.word	0x447a0000
 8004790:	200006e0 	.word	0x200006e0
 8004794:	20000078 	.word	0x20000078
 8004798:	2000007c 	.word	0x2000007c
 800479c:	20000080 	.word	0x20000080
 80047a0:	2000058d 	.word	0x2000058d

080047a4 <ui_handle>:

/* ---------- App loop ---------- */
void ui_handle(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
	static uint32_t t_hb = 0;
	if (HAL_GetTick() - t_hb > 1000)
 80047a8:	f7fc f90a 	bl	80009c0 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	4b0a      	ldr	r3, [pc, #40]	@ (80047d8 <ui_handle+0x34>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80047b8:	d906      	bls.n	80047c8 <ui_handle+0x24>
	{
		send_heartbeat();
 80047ba:	f7ff ff33 	bl	8004624 <send_heartbeat>
		t_hb = HAL_GetTick();
 80047be:	f7fc f8ff 	bl	80009c0 <HAL_GetTick>
 80047c2:	4603      	mov	r3, r0
 80047c4:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <ui_handle+0x34>)
 80047c6:	6013      	str	r3, [r2, #0]
	}
	mavlink_process(HAL_GetTick());
 80047c8:	f7fc f8fa 	bl	80009c0 <HAL_GetTick>
 80047cc:	4603      	mov	r3, r0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7ff ff70 	bl	80046b4 <mavlink_process>
}
 80047d4:	bf00      	nop
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000bdc 	.word	0x20000bdc

080047dc <ui_init>:

/*--------- App Init ---------*/
void ui_init(GPIO_TypeDef* gpio_x)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
	memset(&ui, 0, sizeof(ui));
 80047e4:	f240 520c 	movw	r2, #1292	@ 0x50c
 80047e8:	2100      	movs	r1, #0
 80047ea:	480f      	ldr	r0, [pc, #60]	@ (8004828 <ui_init+0x4c>)
 80047ec:	f000 f83a 	bl	8004864 <memset>
	ui.uart_tx_busy = 0;
 80047f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004828 <ui_init+0x4c>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 250a 	strb.w	r2, [r3, #1290]	@ 0x50a
	RINGBUF_Init(&ui.ring, ui.ring_buf, sizeof(ui.ring_buf));
 80047f8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047fc:	490b      	ldr	r1, [pc, #44]	@ (800482c <ui_init+0x50>)
 80047fe:	480a      	ldr	r0, [pc, #40]	@ (8004828 <ui_init+0x4c>)
 8004800:	f7fe f8b6 	bl	8002970 <RINGBUF_Init>
	RINGBUF_Init(&ui.ring_tx, ui.ring_buf_tx, sizeof(ui.ring_buf_tx));
 8004804:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004808:	4909      	ldr	r1, [pc, #36]	@ (8004830 <ui_init+0x54>)
 800480a:	480a      	ldr	r0, [pc, #40]	@ (8004834 <ui_init+0x58>)
 800480c:	f7fe f8b0 	bl	8002970 <RINGBUF_Init>
	HAL_UART_Receive_IT(&huart2, &ui.rx_byte, 1);
 8004810:	2201      	movs	r2, #1
 8004812:	4909      	ldr	r1, [pc, #36]	@ (8004838 <ui_init+0x5c>)
 8004814:	4809      	ldr	r0, [pc, #36]	@ (800483c <ui_init+0x60>)
 8004816:	f7fd f97e 	bl	8001b16 <HAL_UART_Receive_IT>
	gpio = gpio_x;
 800481a:	4a09      	ldr	r2, [pc, #36]	@ (8004840 <ui_init+0x64>)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6013      	str	r3, [r2, #0]
}
 8004820:	bf00      	nop
 8004822:	3708      	adds	r7, #8
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000084 	.word	0x20000084
 800482c:	200000a4 	.word	0x200000a4
 8004830:	2000048c 	.word	0x2000048c
 8004834:	20000094 	.word	0x20000094
 8004838:	2000058c 	.word	0x2000058c
 800483c:	2000002c 	.word	0x2000002c
 8004840:	200006e4 	.word	0x200006e4

08004844 <memcmp>:
 8004844:	b510      	push	{r4, lr}
 8004846:	3901      	subs	r1, #1
 8004848:	4402      	add	r2, r0
 800484a:	4290      	cmp	r0, r2
 800484c:	d101      	bne.n	8004852 <memcmp+0xe>
 800484e:	2000      	movs	r0, #0
 8004850:	e005      	b.n	800485e <memcmp+0x1a>
 8004852:	7803      	ldrb	r3, [r0, #0]
 8004854:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004858:	42a3      	cmp	r3, r4
 800485a:	d001      	beq.n	8004860 <memcmp+0x1c>
 800485c:	1b18      	subs	r0, r3, r4
 800485e:	bd10      	pop	{r4, pc}
 8004860:	3001      	adds	r0, #1
 8004862:	e7f2      	b.n	800484a <memcmp+0x6>

08004864 <memset>:
 8004864:	4402      	add	r2, r0
 8004866:	4603      	mov	r3, r0
 8004868:	4293      	cmp	r3, r2
 800486a:	d100      	bne.n	800486e <memset+0xa>
 800486c:	4770      	bx	lr
 800486e:	f803 1b01 	strb.w	r1, [r3], #1
 8004872:	e7f9      	b.n	8004868 <memset+0x4>

08004874 <__libc_init_array>:
 8004874:	b570      	push	{r4, r5, r6, lr}
 8004876:	4d0d      	ldr	r5, [pc, #52]	@ (80048ac <__libc_init_array+0x38>)
 8004878:	4c0d      	ldr	r4, [pc, #52]	@ (80048b0 <__libc_init_array+0x3c>)
 800487a:	1b64      	subs	r4, r4, r5
 800487c:	10a4      	asrs	r4, r4, #2
 800487e:	2600      	movs	r6, #0
 8004880:	42a6      	cmp	r6, r4
 8004882:	d109      	bne.n	8004898 <__libc_init_array+0x24>
 8004884:	4d0b      	ldr	r5, [pc, #44]	@ (80048b4 <__libc_init_array+0x40>)
 8004886:	4c0c      	ldr	r4, [pc, #48]	@ (80048b8 <__libc_init_array+0x44>)
 8004888:	f000 f826 	bl	80048d8 <_init>
 800488c:	1b64      	subs	r4, r4, r5
 800488e:	10a4      	asrs	r4, r4, #2
 8004890:	2600      	movs	r6, #0
 8004892:	42a6      	cmp	r6, r4
 8004894:	d105      	bne.n	80048a2 <__libc_init_array+0x2e>
 8004896:	bd70      	pop	{r4, r5, r6, pc}
 8004898:	f855 3b04 	ldr.w	r3, [r5], #4
 800489c:	4798      	blx	r3
 800489e:	3601      	adds	r6, #1
 80048a0:	e7ee      	b.n	8004880 <__libc_init_array+0xc>
 80048a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048a6:	4798      	blx	r3
 80048a8:	3601      	adds	r6, #1
 80048aa:	e7f2      	b.n	8004892 <__libc_init_array+0x1e>
 80048ac:	080054cc 	.word	0x080054cc
 80048b0:	080054cc 	.word	0x080054cc
 80048b4:	080054cc 	.word	0x080054cc
 80048b8:	080054d0 	.word	0x080054d0

080048bc <memcpy>:
 80048bc:	440a      	add	r2, r1
 80048be:	4291      	cmp	r1, r2
 80048c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80048c4:	d100      	bne.n	80048c8 <memcpy+0xc>
 80048c6:	4770      	bx	lr
 80048c8:	b510      	push	{r4, lr}
 80048ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048d2:	4291      	cmp	r1, r2
 80048d4:	d1f9      	bne.n	80048ca <memcpy+0xe>
 80048d6:	bd10      	pop	{r4, pc}

080048d8 <_init>:
 80048d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048da:	bf00      	nop
 80048dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048de:	bc08      	pop	{r3}
 80048e0:	469e      	mov	lr, r3
 80048e2:	4770      	bx	lr

080048e4 <_fini>:
 80048e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048e6:	bf00      	nop
 80048e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ea:	bc08      	pop	{r3}
 80048ec:	469e      	mov	lr, r3
 80048ee:	4770      	bx	lr
