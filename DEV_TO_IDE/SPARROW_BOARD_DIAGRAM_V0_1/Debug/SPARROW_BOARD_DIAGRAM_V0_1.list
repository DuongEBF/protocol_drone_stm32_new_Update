
SPARROW_BOARD_DIAGRAM_V0_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093f8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001998  080094b8  080094b8  0000a4b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae50  0800ae50  0000c010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ae50  0800ae50  0000be50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae58  0800ae58  0000c010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae58  0800ae58  0000be58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae5c  0800ae5c  0000be5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800ae60  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  20000010  0800ae70  0000c010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200012a0  0800ae70  0000c2a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000c010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001570a  00000000  00000000  0000c038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003329  00000000  00000000  00021742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00024a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dce  00000000  00000000  00025be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023910  00000000  00000000  000269b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f0b0  00000000  00000000  0004a2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010aeec  00000000  00000000  00069376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00174262  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040d4  00000000  00000000  001742a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  0017837c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080094a0 	.word	0x080094a0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080094a0 	.word	0x080094a0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cfrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0008      	movs	r0, r1
 80003f8:	4661      	mov	r1, ip
 80003fa:	e7ff      	b.n	80003fc <__aeabi_cfcmpeq>

080003fc <__aeabi_cfcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 fc97 	bl	8000d30 <__lesf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cfcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_fcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fc1f 	bl	8000c50 <__eqsf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_fcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 fc89 	bl	8000d30 <__lesf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_fcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_fcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fc7f 	bl	8000d30 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_fcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			@ (mov r8, r8)

08000440 <__aeabi_fcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fc2d 	bl	8000ca0 <__gesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_fcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)

08000454 <__aeabi_fcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fc23 	bl	8000ca0 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_fcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)

08000468 <__aeabi_uldivmod>:
 8000468:	2b00      	cmp	r3, #0
 800046a:	d111      	bne.n	8000490 <__aeabi_uldivmod+0x28>
 800046c:	2a00      	cmp	r2, #0
 800046e:	d10f      	bne.n	8000490 <__aeabi_uldivmod+0x28>
 8000470:	2900      	cmp	r1, #0
 8000472:	d100      	bne.n	8000476 <__aeabi_uldivmod+0xe>
 8000474:	2800      	cmp	r0, #0
 8000476:	d002      	beq.n	800047e <__aeabi_uldivmod+0x16>
 8000478:	2100      	movs	r1, #0
 800047a:	43c9      	mvns	r1, r1
 800047c:	0008      	movs	r0, r1
 800047e:	b407      	push	{r0, r1, r2}
 8000480:	4802      	ldr	r0, [pc, #8]	@ (800048c <__aeabi_uldivmod+0x24>)
 8000482:	a102      	add	r1, pc, #8	@ (adr r1, 800048c <__aeabi_uldivmod+0x24>)
 8000484:	1840      	adds	r0, r0, r1
 8000486:	9002      	str	r0, [sp, #8]
 8000488:	bd03      	pop	{r0, r1, pc}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	ffffff65 	.word	0xffffff65
 8000490:	b403      	push	{r0, r1}
 8000492:	4668      	mov	r0, sp
 8000494:	b501      	push	{r0, lr}
 8000496:	9802      	ldr	r0, [sp, #8]
 8000498:	f000 f806 	bl	80004a8 <__udivmoddi4>
 800049c:	9b01      	ldr	r3, [sp, #4]
 800049e:	469e      	mov	lr, r3
 80004a0:	b002      	add	sp, #8
 80004a2:	bc0c      	pop	{r2, r3}
 80004a4:	4770      	bx	lr
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__udivmoddi4>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	4657      	mov	r7, sl
 80004ac:	464e      	mov	r6, r9
 80004ae:	4645      	mov	r5, r8
 80004b0:	46de      	mov	lr, fp
 80004b2:	b5e0      	push	{r5, r6, r7, lr}
 80004b4:	0004      	movs	r4, r0
 80004b6:	000d      	movs	r5, r1
 80004b8:	4692      	mov	sl, r2
 80004ba:	4699      	mov	r9, r3
 80004bc:	b083      	sub	sp, #12
 80004be:	428b      	cmp	r3, r1
 80004c0:	d830      	bhi.n	8000524 <__udivmoddi4+0x7c>
 80004c2:	d02d      	beq.n	8000520 <__udivmoddi4+0x78>
 80004c4:	4649      	mov	r1, r9
 80004c6:	4650      	mov	r0, sl
 80004c8:	f001 f8bc 	bl	8001644 <__clzdi2>
 80004cc:	0029      	movs	r1, r5
 80004ce:	0006      	movs	r6, r0
 80004d0:	0020      	movs	r0, r4
 80004d2:	f001 f8b7 	bl	8001644 <__clzdi2>
 80004d6:	1a33      	subs	r3, r6, r0
 80004d8:	4698      	mov	r8, r3
 80004da:	3b20      	subs	r3, #32
 80004dc:	d434      	bmi.n	8000548 <__udivmoddi4+0xa0>
 80004de:	469b      	mov	fp, r3
 80004e0:	4653      	mov	r3, sl
 80004e2:	465a      	mov	r2, fp
 80004e4:	4093      	lsls	r3, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	001f      	movs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d83b      	bhi.n	800056c <__udivmoddi4+0xc4>
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d100      	bne.n	80004fa <__udivmoddi4+0x52>
 80004f8:	e079      	b.n	80005ee <__udivmoddi4+0x146>
 80004fa:	465b      	mov	r3, fp
 80004fc:	1ba4      	subs	r4, r4, r6
 80004fe:	41bd      	sbcs	r5, r7
 8000500:	2b00      	cmp	r3, #0
 8000502:	da00      	bge.n	8000506 <__udivmoddi4+0x5e>
 8000504:	e076      	b.n	80005f4 <__udivmoddi4+0x14c>
 8000506:	2200      	movs	r2, #0
 8000508:	2300      	movs	r3, #0
 800050a:	9200      	str	r2, [sp, #0]
 800050c:	9301      	str	r3, [sp, #4]
 800050e:	2301      	movs	r3, #1
 8000510:	465a      	mov	r2, fp
 8000512:	4093      	lsls	r3, r2
 8000514:	9301      	str	r3, [sp, #4]
 8000516:	2301      	movs	r3, #1
 8000518:	4642      	mov	r2, r8
 800051a:	4093      	lsls	r3, r2
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	e029      	b.n	8000574 <__udivmoddi4+0xcc>
 8000520:	4282      	cmp	r2, r0
 8000522:	d9cf      	bls.n	80004c4 <__udivmoddi4+0x1c>
 8000524:	2200      	movs	r2, #0
 8000526:	2300      	movs	r3, #0
 8000528:	9200      	str	r2, [sp, #0]
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <__udivmoddi4+0x8e>
 8000532:	601c      	str	r4, [r3, #0]
 8000534:	605d      	str	r5, [r3, #4]
 8000536:	9800      	ldr	r0, [sp, #0]
 8000538:	9901      	ldr	r1, [sp, #4]
 800053a:	b003      	add	sp, #12
 800053c:	bcf0      	pop	{r4, r5, r6, r7}
 800053e:	46bb      	mov	fp, r7
 8000540:	46b2      	mov	sl, r6
 8000542:	46a9      	mov	r9, r5
 8000544:	46a0      	mov	r8, r4
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	4642      	mov	r2, r8
 800054a:	469b      	mov	fp, r3
 800054c:	2320      	movs	r3, #32
 800054e:	1a9b      	subs	r3, r3, r2
 8000550:	4652      	mov	r2, sl
 8000552:	40da      	lsrs	r2, r3
 8000554:	4641      	mov	r1, r8
 8000556:	0013      	movs	r3, r2
 8000558:	464a      	mov	r2, r9
 800055a:	408a      	lsls	r2, r1
 800055c:	0017      	movs	r7, r2
 800055e:	4642      	mov	r2, r8
 8000560:	431f      	orrs	r7, r3
 8000562:	4653      	mov	r3, sl
 8000564:	4093      	lsls	r3, r2
 8000566:	001e      	movs	r6, r3
 8000568:	42af      	cmp	r7, r5
 800056a:	d9c3      	bls.n	80004f4 <__udivmoddi4+0x4c>
 800056c:	2200      	movs	r2, #0
 800056e:	2300      	movs	r3, #0
 8000570:	9200      	str	r2, [sp, #0]
 8000572:	9301      	str	r3, [sp, #4]
 8000574:	4643      	mov	r3, r8
 8000576:	2b00      	cmp	r3, #0
 8000578:	d0d8      	beq.n	800052c <__udivmoddi4+0x84>
 800057a:	07fb      	lsls	r3, r7, #31
 800057c:	0872      	lsrs	r2, r6, #1
 800057e:	431a      	orrs	r2, r3
 8000580:	4646      	mov	r6, r8
 8000582:	087b      	lsrs	r3, r7, #1
 8000584:	e00e      	b.n	80005a4 <__udivmoddi4+0xfc>
 8000586:	42ab      	cmp	r3, r5
 8000588:	d101      	bne.n	800058e <__udivmoddi4+0xe6>
 800058a:	42a2      	cmp	r2, r4
 800058c:	d80c      	bhi.n	80005a8 <__udivmoddi4+0x100>
 800058e:	1aa4      	subs	r4, r4, r2
 8000590:	419d      	sbcs	r5, r3
 8000592:	2001      	movs	r0, #1
 8000594:	1924      	adds	r4, r4, r4
 8000596:	416d      	adcs	r5, r5
 8000598:	2100      	movs	r1, #0
 800059a:	3e01      	subs	r6, #1
 800059c:	1824      	adds	r4, r4, r0
 800059e:	414d      	adcs	r5, r1
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d006      	beq.n	80005b2 <__udivmoddi4+0x10a>
 80005a4:	42ab      	cmp	r3, r5
 80005a6:	d9ee      	bls.n	8000586 <__udivmoddi4+0xde>
 80005a8:	3e01      	subs	r6, #1
 80005aa:	1924      	adds	r4, r4, r4
 80005ac:	416d      	adcs	r5, r5
 80005ae:	2e00      	cmp	r6, #0
 80005b0:	d1f8      	bne.n	80005a4 <__udivmoddi4+0xfc>
 80005b2:	9800      	ldr	r0, [sp, #0]
 80005b4:	9901      	ldr	r1, [sp, #4]
 80005b6:	465b      	mov	r3, fp
 80005b8:	1900      	adds	r0, r0, r4
 80005ba:	4169      	adcs	r1, r5
 80005bc:	2b00      	cmp	r3, #0
 80005be:	db24      	blt.n	800060a <__udivmoddi4+0x162>
 80005c0:	002b      	movs	r3, r5
 80005c2:	465a      	mov	r2, fp
 80005c4:	4644      	mov	r4, r8
 80005c6:	40d3      	lsrs	r3, r2
 80005c8:	002a      	movs	r2, r5
 80005ca:	40e2      	lsrs	r2, r4
 80005cc:	001c      	movs	r4, r3
 80005ce:	465b      	mov	r3, fp
 80005d0:	0015      	movs	r5, r2
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	db2a      	blt.n	800062c <__udivmoddi4+0x184>
 80005d6:	0026      	movs	r6, r4
 80005d8:	409e      	lsls	r6, r3
 80005da:	0033      	movs	r3, r6
 80005dc:	0026      	movs	r6, r4
 80005de:	4647      	mov	r7, r8
 80005e0:	40be      	lsls	r6, r7
 80005e2:	0032      	movs	r2, r6
 80005e4:	1a80      	subs	r0, r0, r2
 80005e6:	4199      	sbcs	r1, r3
 80005e8:	9000      	str	r0, [sp, #0]
 80005ea:	9101      	str	r1, [sp, #4]
 80005ec:	e79e      	b.n	800052c <__udivmoddi4+0x84>
 80005ee:	42a3      	cmp	r3, r4
 80005f0:	d8bc      	bhi.n	800056c <__udivmoddi4+0xc4>
 80005f2:	e782      	b.n	80004fa <__udivmoddi4+0x52>
 80005f4:	4642      	mov	r2, r8
 80005f6:	2320      	movs	r3, #32
 80005f8:	2100      	movs	r1, #0
 80005fa:	1a9b      	subs	r3, r3, r2
 80005fc:	2200      	movs	r2, #0
 80005fe:	9100      	str	r1, [sp, #0]
 8000600:	9201      	str	r2, [sp, #4]
 8000602:	2201      	movs	r2, #1
 8000604:	40da      	lsrs	r2, r3
 8000606:	9201      	str	r2, [sp, #4]
 8000608:	e785      	b.n	8000516 <__udivmoddi4+0x6e>
 800060a:	4642      	mov	r2, r8
 800060c:	2320      	movs	r3, #32
 800060e:	1a9b      	subs	r3, r3, r2
 8000610:	002a      	movs	r2, r5
 8000612:	4646      	mov	r6, r8
 8000614:	409a      	lsls	r2, r3
 8000616:	0023      	movs	r3, r4
 8000618:	40f3      	lsrs	r3, r6
 800061a:	4644      	mov	r4, r8
 800061c:	4313      	orrs	r3, r2
 800061e:	002a      	movs	r2, r5
 8000620:	40e2      	lsrs	r2, r4
 8000622:	001c      	movs	r4, r3
 8000624:	465b      	mov	r3, fp
 8000626:	0015      	movs	r5, r2
 8000628:	2b00      	cmp	r3, #0
 800062a:	dad4      	bge.n	80005d6 <__udivmoddi4+0x12e>
 800062c:	4642      	mov	r2, r8
 800062e:	002f      	movs	r7, r5
 8000630:	2320      	movs	r3, #32
 8000632:	0026      	movs	r6, r4
 8000634:	4097      	lsls	r7, r2
 8000636:	1a9b      	subs	r3, r3, r2
 8000638:	40de      	lsrs	r6, r3
 800063a:	003b      	movs	r3, r7
 800063c:	4333      	orrs	r3, r6
 800063e:	e7cd      	b.n	80005dc <__udivmoddi4+0x134>

08000640 <__aeabi_fadd>:
 8000640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000642:	024b      	lsls	r3, r1, #9
 8000644:	0a5a      	lsrs	r2, r3, #9
 8000646:	4694      	mov	ip, r2
 8000648:	004a      	lsls	r2, r1, #1
 800064a:	0fc9      	lsrs	r1, r1, #31
 800064c:	46ce      	mov	lr, r9
 800064e:	4647      	mov	r7, r8
 8000650:	4689      	mov	r9, r1
 8000652:	0045      	lsls	r5, r0, #1
 8000654:	0246      	lsls	r6, r0, #9
 8000656:	0e2d      	lsrs	r5, r5, #24
 8000658:	0e12      	lsrs	r2, r2, #24
 800065a:	b580      	push	{r7, lr}
 800065c:	0999      	lsrs	r1, r3, #6
 800065e:	0a77      	lsrs	r7, r6, #9
 8000660:	0fc4      	lsrs	r4, r0, #31
 8000662:	09b6      	lsrs	r6, r6, #6
 8000664:	1aab      	subs	r3, r5, r2
 8000666:	454c      	cmp	r4, r9
 8000668:	d020      	beq.n	80006ac <__aeabi_fadd+0x6c>
 800066a:	2b00      	cmp	r3, #0
 800066c:	dd0c      	ble.n	8000688 <__aeabi_fadd+0x48>
 800066e:	2a00      	cmp	r2, #0
 8000670:	d134      	bne.n	80006dc <__aeabi_fadd+0x9c>
 8000672:	2900      	cmp	r1, #0
 8000674:	d02a      	beq.n	80006cc <__aeabi_fadd+0x8c>
 8000676:	1e5a      	subs	r2, r3, #1
 8000678:	2b01      	cmp	r3, #1
 800067a:	d100      	bne.n	800067e <__aeabi_fadd+0x3e>
 800067c:	e08f      	b.n	800079e <__aeabi_fadd+0x15e>
 800067e:	2bff      	cmp	r3, #255	@ 0xff
 8000680:	d100      	bne.n	8000684 <__aeabi_fadd+0x44>
 8000682:	e0cd      	b.n	8000820 <__aeabi_fadd+0x1e0>
 8000684:	0013      	movs	r3, r2
 8000686:	e02f      	b.n	80006e8 <__aeabi_fadd+0xa8>
 8000688:	2b00      	cmp	r3, #0
 800068a:	d060      	beq.n	800074e <__aeabi_fadd+0x10e>
 800068c:	1b53      	subs	r3, r2, r5
 800068e:	2d00      	cmp	r5, #0
 8000690:	d000      	beq.n	8000694 <__aeabi_fadd+0x54>
 8000692:	e0ee      	b.n	8000872 <__aeabi_fadd+0x232>
 8000694:	2e00      	cmp	r6, #0
 8000696:	d100      	bne.n	800069a <__aeabi_fadd+0x5a>
 8000698:	e13e      	b.n	8000918 <__aeabi_fadd+0x2d8>
 800069a:	1e5c      	subs	r4, r3, #1
 800069c:	2b01      	cmp	r3, #1
 800069e:	d100      	bne.n	80006a2 <__aeabi_fadd+0x62>
 80006a0:	e16b      	b.n	800097a <__aeabi_fadd+0x33a>
 80006a2:	2bff      	cmp	r3, #255	@ 0xff
 80006a4:	d100      	bne.n	80006a8 <__aeabi_fadd+0x68>
 80006a6:	e0b9      	b.n	800081c <__aeabi_fadd+0x1dc>
 80006a8:	0023      	movs	r3, r4
 80006aa:	e0e7      	b.n	800087c <__aeabi_fadd+0x23c>
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	dc00      	bgt.n	80006b2 <__aeabi_fadd+0x72>
 80006b0:	e0a4      	b.n	80007fc <__aeabi_fadd+0x1bc>
 80006b2:	2a00      	cmp	r2, #0
 80006b4:	d069      	beq.n	800078a <__aeabi_fadd+0x14a>
 80006b6:	2dff      	cmp	r5, #255	@ 0xff
 80006b8:	d100      	bne.n	80006bc <__aeabi_fadd+0x7c>
 80006ba:	e0b1      	b.n	8000820 <__aeabi_fadd+0x1e0>
 80006bc:	2280      	movs	r2, #128	@ 0x80
 80006be:	04d2      	lsls	r2, r2, #19
 80006c0:	4311      	orrs	r1, r2
 80006c2:	2b1b      	cmp	r3, #27
 80006c4:	dc00      	bgt.n	80006c8 <__aeabi_fadd+0x88>
 80006c6:	e0e9      	b.n	800089c <__aeabi_fadd+0x25c>
 80006c8:	002b      	movs	r3, r5
 80006ca:	3605      	adds	r6, #5
 80006cc:	08f7      	lsrs	r7, r6, #3
 80006ce:	2bff      	cmp	r3, #255	@ 0xff
 80006d0:	d100      	bne.n	80006d4 <__aeabi_fadd+0x94>
 80006d2:	e0a5      	b.n	8000820 <__aeabi_fadd+0x1e0>
 80006d4:	027a      	lsls	r2, r7, #9
 80006d6:	0a52      	lsrs	r2, r2, #9
 80006d8:	b2d8      	uxtb	r0, r3
 80006da:	e030      	b.n	800073e <__aeabi_fadd+0xfe>
 80006dc:	2dff      	cmp	r5, #255	@ 0xff
 80006de:	d100      	bne.n	80006e2 <__aeabi_fadd+0xa2>
 80006e0:	e09e      	b.n	8000820 <__aeabi_fadd+0x1e0>
 80006e2:	2280      	movs	r2, #128	@ 0x80
 80006e4:	04d2      	lsls	r2, r2, #19
 80006e6:	4311      	orrs	r1, r2
 80006e8:	2001      	movs	r0, #1
 80006ea:	2b1b      	cmp	r3, #27
 80006ec:	dc08      	bgt.n	8000700 <__aeabi_fadd+0xc0>
 80006ee:	0008      	movs	r0, r1
 80006f0:	2220      	movs	r2, #32
 80006f2:	40d8      	lsrs	r0, r3
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	4099      	lsls	r1, r3
 80006f8:	000b      	movs	r3, r1
 80006fa:	1e5a      	subs	r2, r3, #1
 80006fc:	4193      	sbcs	r3, r2
 80006fe:	4318      	orrs	r0, r3
 8000700:	1a36      	subs	r6, r6, r0
 8000702:	0173      	lsls	r3, r6, #5
 8000704:	d400      	bmi.n	8000708 <__aeabi_fadd+0xc8>
 8000706:	e071      	b.n	80007ec <__aeabi_fadd+0x1ac>
 8000708:	01b6      	lsls	r6, r6, #6
 800070a:	09b7      	lsrs	r7, r6, #6
 800070c:	0038      	movs	r0, r7
 800070e:	f000 ff7b 	bl	8001608 <__clzsi2>
 8000712:	003b      	movs	r3, r7
 8000714:	3805      	subs	r0, #5
 8000716:	4083      	lsls	r3, r0
 8000718:	4285      	cmp	r5, r0
 800071a:	dd4d      	ble.n	80007b8 <__aeabi_fadd+0x178>
 800071c:	4eb4      	ldr	r6, [pc, #720]	@ (80009f0 <__aeabi_fadd+0x3b0>)
 800071e:	1a2d      	subs	r5, r5, r0
 8000720:	401e      	ands	r6, r3
 8000722:	075a      	lsls	r2, r3, #29
 8000724:	d068      	beq.n	80007f8 <__aeabi_fadd+0x1b8>
 8000726:	220f      	movs	r2, #15
 8000728:	4013      	ands	r3, r2
 800072a:	2b04      	cmp	r3, #4
 800072c:	d064      	beq.n	80007f8 <__aeabi_fadd+0x1b8>
 800072e:	3604      	adds	r6, #4
 8000730:	0173      	lsls	r3, r6, #5
 8000732:	d561      	bpl.n	80007f8 <__aeabi_fadd+0x1b8>
 8000734:	1c68      	adds	r0, r5, #1
 8000736:	2dfe      	cmp	r5, #254	@ 0xfe
 8000738:	d154      	bne.n	80007e4 <__aeabi_fadd+0x1a4>
 800073a:	20ff      	movs	r0, #255	@ 0xff
 800073c:	2200      	movs	r2, #0
 800073e:	05c0      	lsls	r0, r0, #23
 8000740:	4310      	orrs	r0, r2
 8000742:	07e4      	lsls	r4, r4, #31
 8000744:	4320      	orrs	r0, r4
 8000746:	bcc0      	pop	{r6, r7}
 8000748:	46b9      	mov	r9, r7
 800074a:	46b0      	mov	r8, r6
 800074c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800074e:	22fe      	movs	r2, #254	@ 0xfe
 8000750:	4690      	mov	r8, r2
 8000752:	1c68      	adds	r0, r5, #1
 8000754:	0002      	movs	r2, r0
 8000756:	4640      	mov	r0, r8
 8000758:	4210      	tst	r0, r2
 800075a:	d16b      	bne.n	8000834 <__aeabi_fadd+0x1f4>
 800075c:	2d00      	cmp	r5, #0
 800075e:	d000      	beq.n	8000762 <__aeabi_fadd+0x122>
 8000760:	e0dd      	b.n	800091e <__aeabi_fadd+0x2de>
 8000762:	2e00      	cmp	r6, #0
 8000764:	d100      	bne.n	8000768 <__aeabi_fadd+0x128>
 8000766:	e102      	b.n	800096e <__aeabi_fadd+0x32e>
 8000768:	2900      	cmp	r1, #0
 800076a:	d0b3      	beq.n	80006d4 <__aeabi_fadd+0x94>
 800076c:	2280      	movs	r2, #128	@ 0x80
 800076e:	1a77      	subs	r7, r6, r1
 8000770:	04d2      	lsls	r2, r2, #19
 8000772:	4217      	tst	r7, r2
 8000774:	d100      	bne.n	8000778 <__aeabi_fadd+0x138>
 8000776:	e136      	b.n	80009e6 <__aeabi_fadd+0x3a6>
 8000778:	464c      	mov	r4, r9
 800077a:	1b8e      	subs	r6, r1, r6
 800077c:	d061      	beq.n	8000842 <__aeabi_fadd+0x202>
 800077e:	2001      	movs	r0, #1
 8000780:	4216      	tst	r6, r2
 8000782:	d130      	bne.n	80007e6 <__aeabi_fadd+0x1a6>
 8000784:	2300      	movs	r3, #0
 8000786:	08f7      	lsrs	r7, r6, #3
 8000788:	e7a4      	b.n	80006d4 <__aeabi_fadd+0x94>
 800078a:	2900      	cmp	r1, #0
 800078c:	d09e      	beq.n	80006cc <__aeabi_fadd+0x8c>
 800078e:	1e5a      	subs	r2, r3, #1
 8000790:	2b01      	cmp	r3, #1
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x156>
 8000794:	e0ca      	b.n	800092c <__aeabi_fadd+0x2ec>
 8000796:	2bff      	cmp	r3, #255	@ 0xff
 8000798:	d042      	beq.n	8000820 <__aeabi_fadd+0x1e0>
 800079a:	0013      	movs	r3, r2
 800079c:	e791      	b.n	80006c2 <__aeabi_fadd+0x82>
 800079e:	1a71      	subs	r1, r6, r1
 80007a0:	014b      	lsls	r3, r1, #5
 80007a2:	d400      	bmi.n	80007a6 <__aeabi_fadd+0x166>
 80007a4:	e0d1      	b.n	800094a <__aeabi_fadd+0x30a>
 80007a6:	018f      	lsls	r7, r1, #6
 80007a8:	09bf      	lsrs	r7, r7, #6
 80007aa:	0038      	movs	r0, r7
 80007ac:	f000 ff2c 	bl	8001608 <__clzsi2>
 80007b0:	003b      	movs	r3, r7
 80007b2:	3805      	subs	r0, #5
 80007b4:	4083      	lsls	r3, r0
 80007b6:	2501      	movs	r5, #1
 80007b8:	2220      	movs	r2, #32
 80007ba:	1b40      	subs	r0, r0, r5
 80007bc:	3001      	adds	r0, #1
 80007be:	1a12      	subs	r2, r2, r0
 80007c0:	001e      	movs	r6, r3
 80007c2:	4093      	lsls	r3, r2
 80007c4:	40c6      	lsrs	r6, r0
 80007c6:	1e5a      	subs	r2, r3, #1
 80007c8:	4193      	sbcs	r3, r2
 80007ca:	431e      	orrs	r6, r3
 80007cc:	d039      	beq.n	8000842 <__aeabi_fadd+0x202>
 80007ce:	0773      	lsls	r3, r6, #29
 80007d0:	d100      	bne.n	80007d4 <__aeabi_fadd+0x194>
 80007d2:	e11b      	b.n	8000a0c <__aeabi_fadd+0x3cc>
 80007d4:	230f      	movs	r3, #15
 80007d6:	2500      	movs	r5, #0
 80007d8:	4033      	ands	r3, r6
 80007da:	2b04      	cmp	r3, #4
 80007dc:	d1a7      	bne.n	800072e <__aeabi_fadd+0xee>
 80007de:	2001      	movs	r0, #1
 80007e0:	0172      	lsls	r2, r6, #5
 80007e2:	d57c      	bpl.n	80008de <__aeabi_fadd+0x29e>
 80007e4:	b2c0      	uxtb	r0, r0
 80007e6:	01b2      	lsls	r2, r6, #6
 80007e8:	0a52      	lsrs	r2, r2, #9
 80007ea:	e7a8      	b.n	800073e <__aeabi_fadd+0xfe>
 80007ec:	0773      	lsls	r3, r6, #29
 80007ee:	d003      	beq.n	80007f8 <__aeabi_fadd+0x1b8>
 80007f0:	230f      	movs	r3, #15
 80007f2:	4033      	ands	r3, r6
 80007f4:	2b04      	cmp	r3, #4
 80007f6:	d19a      	bne.n	800072e <__aeabi_fadd+0xee>
 80007f8:	002b      	movs	r3, r5
 80007fa:	e767      	b.n	80006cc <__aeabi_fadd+0x8c>
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d023      	beq.n	8000848 <__aeabi_fadd+0x208>
 8000800:	1b53      	subs	r3, r2, r5
 8000802:	2d00      	cmp	r5, #0
 8000804:	d17b      	bne.n	80008fe <__aeabi_fadd+0x2be>
 8000806:	2e00      	cmp	r6, #0
 8000808:	d100      	bne.n	800080c <__aeabi_fadd+0x1cc>
 800080a:	e086      	b.n	800091a <__aeabi_fadd+0x2da>
 800080c:	1e5d      	subs	r5, r3, #1
 800080e:	2b01      	cmp	r3, #1
 8000810:	d100      	bne.n	8000814 <__aeabi_fadd+0x1d4>
 8000812:	e08b      	b.n	800092c <__aeabi_fadd+0x2ec>
 8000814:	2bff      	cmp	r3, #255	@ 0xff
 8000816:	d002      	beq.n	800081e <__aeabi_fadd+0x1de>
 8000818:	002b      	movs	r3, r5
 800081a:	e075      	b.n	8000908 <__aeabi_fadd+0x2c8>
 800081c:	464c      	mov	r4, r9
 800081e:	4667      	mov	r7, ip
 8000820:	2f00      	cmp	r7, #0
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x1e6>
 8000824:	e789      	b.n	800073a <__aeabi_fadd+0xfa>
 8000826:	2280      	movs	r2, #128	@ 0x80
 8000828:	03d2      	lsls	r2, r2, #15
 800082a:	433a      	orrs	r2, r7
 800082c:	0252      	lsls	r2, r2, #9
 800082e:	20ff      	movs	r0, #255	@ 0xff
 8000830:	0a52      	lsrs	r2, r2, #9
 8000832:	e784      	b.n	800073e <__aeabi_fadd+0xfe>
 8000834:	1a77      	subs	r7, r6, r1
 8000836:	017b      	lsls	r3, r7, #5
 8000838:	d46b      	bmi.n	8000912 <__aeabi_fadd+0x2d2>
 800083a:	2f00      	cmp	r7, #0
 800083c:	d000      	beq.n	8000840 <__aeabi_fadd+0x200>
 800083e:	e765      	b.n	800070c <__aeabi_fadd+0xcc>
 8000840:	2400      	movs	r4, #0
 8000842:	2000      	movs	r0, #0
 8000844:	2200      	movs	r2, #0
 8000846:	e77a      	b.n	800073e <__aeabi_fadd+0xfe>
 8000848:	22fe      	movs	r2, #254	@ 0xfe
 800084a:	1c6b      	adds	r3, r5, #1
 800084c:	421a      	tst	r2, r3
 800084e:	d149      	bne.n	80008e4 <__aeabi_fadd+0x2a4>
 8000850:	2d00      	cmp	r5, #0
 8000852:	d000      	beq.n	8000856 <__aeabi_fadd+0x216>
 8000854:	e09f      	b.n	8000996 <__aeabi_fadd+0x356>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d100      	bne.n	800085c <__aeabi_fadd+0x21c>
 800085a:	e0ba      	b.n	80009d2 <__aeabi_fadd+0x392>
 800085c:	2900      	cmp	r1, #0
 800085e:	d100      	bne.n	8000862 <__aeabi_fadd+0x222>
 8000860:	e0cf      	b.n	8000a02 <__aeabi_fadd+0x3c2>
 8000862:	1872      	adds	r2, r6, r1
 8000864:	0153      	lsls	r3, r2, #5
 8000866:	d400      	bmi.n	800086a <__aeabi_fadd+0x22a>
 8000868:	e0cd      	b.n	8000a06 <__aeabi_fadd+0x3c6>
 800086a:	0192      	lsls	r2, r2, #6
 800086c:	2001      	movs	r0, #1
 800086e:	0a52      	lsrs	r2, r2, #9
 8000870:	e765      	b.n	800073e <__aeabi_fadd+0xfe>
 8000872:	2aff      	cmp	r2, #255	@ 0xff
 8000874:	d0d2      	beq.n	800081c <__aeabi_fadd+0x1dc>
 8000876:	2080      	movs	r0, #128	@ 0x80
 8000878:	04c0      	lsls	r0, r0, #19
 800087a:	4306      	orrs	r6, r0
 800087c:	2001      	movs	r0, #1
 800087e:	2b1b      	cmp	r3, #27
 8000880:	dc08      	bgt.n	8000894 <__aeabi_fadd+0x254>
 8000882:	0030      	movs	r0, r6
 8000884:	2420      	movs	r4, #32
 8000886:	40d8      	lsrs	r0, r3
 8000888:	1ae3      	subs	r3, r4, r3
 800088a:	409e      	lsls	r6, r3
 800088c:	0033      	movs	r3, r6
 800088e:	1e5c      	subs	r4, r3, #1
 8000890:	41a3      	sbcs	r3, r4
 8000892:	4318      	orrs	r0, r3
 8000894:	464c      	mov	r4, r9
 8000896:	0015      	movs	r5, r2
 8000898:	1a0e      	subs	r6, r1, r0
 800089a:	e732      	b.n	8000702 <__aeabi_fadd+0xc2>
 800089c:	0008      	movs	r0, r1
 800089e:	2220      	movs	r2, #32
 80008a0:	40d8      	lsrs	r0, r3
 80008a2:	1ad3      	subs	r3, r2, r3
 80008a4:	4099      	lsls	r1, r3
 80008a6:	000b      	movs	r3, r1
 80008a8:	1e5a      	subs	r2, r3, #1
 80008aa:	4193      	sbcs	r3, r2
 80008ac:	4303      	orrs	r3, r0
 80008ae:	18f6      	adds	r6, r6, r3
 80008b0:	0173      	lsls	r3, r6, #5
 80008b2:	d59b      	bpl.n	80007ec <__aeabi_fadd+0x1ac>
 80008b4:	3501      	adds	r5, #1
 80008b6:	2dff      	cmp	r5, #255	@ 0xff
 80008b8:	d100      	bne.n	80008bc <__aeabi_fadd+0x27c>
 80008ba:	e73e      	b.n	800073a <__aeabi_fadd+0xfa>
 80008bc:	2301      	movs	r3, #1
 80008be:	494d      	ldr	r1, [pc, #308]	@ (80009f4 <__aeabi_fadd+0x3b4>)
 80008c0:	0872      	lsrs	r2, r6, #1
 80008c2:	4033      	ands	r3, r6
 80008c4:	400a      	ands	r2, r1
 80008c6:	431a      	orrs	r2, r3
 80008c8:	0016      	movs	r6, r2
 80008ca:	0753      	lsls	r3, r2, #29
 80008cc:	d004      	beq.n	80008d8 <__aeabi_fadd+0x298>
 80008ce:	230f      	movs	r3, #15
 80008d0:	4013      	ands	r3, r2
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	d000      	beq.n	80008d8 <__aeabi_fadd+0x298>
 80008d6:	e72a      	b.n	800072e <__aeabi_fadd+0xee>
 80008d8:	0173      	lsls	r3, r6, #5
 80008da:	d500      	bpl.n	80008de <__aeabi_fadd+0x29e>
 80008dc:	e72a      	b.n	8000734 <__aeabi_fadd+0xf4>
 80008de:	002b      	movs	r3, r5
 80008e0:	08f7      	lsrs	r7, r6, #3
 80008e2:	e6f7      	b.n	80006d4 <__aeabi_fadd+0x94>
 80008e4:	2bff      	cmp	r3, #255	@ 0xff
 80008e6:	d100      	bne.n	80008ea <__aeabi_fadd+0x2aa>
 80008e8:	e727      	b.n	800073a <__aeabi_fadd+0xfa>
 80008ea:	1871      	adds	r1, r6, r1
 80008ec:	0849      	lsrs	r1, r1, #1
 80008ee:	074a      	lsls	r2, r1, #29
 80008f0:	d02f      	beq.n	8000952 <__aeabi_fadd+0x312>
 80008f2:	220f      	movs	r2, #15
 80008f4:	400a      	ands	r2, r1
 80008f6:	2a04      	cmp	r2, #4
 80008f8:	d02b      	beq.n	8000952 <__aeabi_fadd+0x312>
 80008fa:	1d0e      	adds	r6, r1, #4
 80008fc:	e6e6      	b.n	80006cc <__aeabi_fadd+0x8c>
 80008fe:	2aff      	cmp	r2, #255	@ 0xff
 8000900:	d08d      	beq.n	800081e <__aeabi_fadd+0x1de>
 8000902:	2080      	movs	r0, #128	@ 0x80
 8000904:	04c0      	lsls	r0, r0, #19
 8000906:	4306      	orrs	r6, r0
 8000908:	2b1b      	cmp	r3, #27
 800090a:	dd24      	ble.n	8000956 <__aeabi_fadd+0x316>
 800090c:	0013      	movs	r3, r2
 800090e:	1d4e      	adds	r6, r1, #5
 8000910:	e6dc      	b.n	80006cc <__aeabi_fadd+0x8c>
 8000912:	464c      	mov	r4, r9
 8000914:	1b8f      	subs	r7, r1, r6
 8000916:	e6f9      	b.n	800070c <__aeabi_fadd+0xcc>
 8000918:	464c      	mov	r4, r9
 800091a:	000e      	movs	r6, r1
 800091c:	e6d6      	b.n	80006cc <__aeabi_fadd+0x8c>
 800091e:	2e00      	cmp	r6, #0
 8000920:	d149      	bne.n	80009b6 <__aeabi_fadd+0x376>
 8000922:	2900      	cmp	r1, #0
 8000924:	d068      	beq.n	80009f8 <__aeabi_fadd+0x3b8>
 8000926:	4667      	mov	r7, ip
 8000928:	464c      	mov	r4, r9
 800092a:	e77c      	b.n	8000826 <__aeabi_fadd+0x1e6>
 800092c:	1870      	adds	r0, r6, r1
 800092e:	0143      	lsls	r3, r0, #5
 8000930:	d574      	bpl.n	8000a1c <__aeabi_fadd+0x3dc>
 8000932:	4930      	ldr	r1, [pc, #192]	@ (80009f4 <__aeabi_fadd+0x3b4>)
 8000934:	0840      	lsrs	r0, r0, #1
 8000936:	4001      	ands	r1, r0
 8000938:	0743      	lsls	r3, r0, #29
 800093a:	d009      	beq.n	8000950 <__aeabi_fadd+0x310>
 800093c:	230f      	movs	r3, #15
 800093e:	4003      	ands	r3, r0
 8000940:	2b04      	cmp	r3, #4
 8000942:	d005      	beq.n	8000950 <__aeabi_fadd+0x310>
 8000944:	2302      	movs	r3, #2
 8000946:	1d0e      	adds	r6, r1, #4
 8000948:	e6c0      	b.n	80006cc <__aeabi_fadd+0x8c>
 800094a:	2301      	movs	r3, #1
 800094c:	08cf      	lsrs	r7, r1, #3
 800094e:	e6c1      	b.n	80006d4 <__aeabi_fadd+0x94>
 8000950:	2302      	movs	r3, #2
 8000952:	08cf      	lsrs	r7, r1, #3
 8000954:	e6be      	b.n	80006d4 <__aeabi_fadd+0x94>
 8000956:	2520      	movs	r5, #32
 8000958:	0030      	movs	r0, r6
 800095a:	40d8      	lsrs	r0, r3
 800095c:	1aeb      	subs	r3, r5, r3
 800095e:	409e      	lsls	r6, r3
 8000960:	0033      	movs	r3, r6
 8000962:	1e5d      	subs	r5, r3, #1
 8000964:	41ab      	sbcs	r3, r5
 8000966:	4303      	orrs	r3, r0
 8000968:	0015      	movs	r5, r2
 800096a:	185e      	adds	r6, r3, r1
 800096c:	e7a0      	b.n	80008b0 <__aeabi_fadd+0x270>
 800096e:	2900      	cmp	r1, #0
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x334>
 8000972:	e765      	b.n	8000840 <__aeabi_fadd+0x200>
 8000974:	464c      	mov	r4, r9
 8000976:	4667      	mov	r7, ip
 8000978:	e6ac      	b.n	80006d4 <__aeabi_fadd+0x94>
 800097a:	1b8f      	subs	r7, r1, r6
 800097c:	017b      	lsls	r3, r7, #5
 800097e:	d52e      	bpl.n	80009de <__aeabi_fadd+0x39e>
 8000980:	01bf      	lsls	r7, r7, #6
 8000982:	09bf      	lsrs	r7, r7, #6
 8000984:	0038      	movs	r0, r7
 8000986:	f000 fe3f 	bl	8001608 <__clzsi2>
 800098a:	003b      	movs	r3, r7
 800098c:	3805      	subs	r0, #5
 800098e:	4083      	lsls	r3, r0
 8000990:	464c      	mov	r4, r9
 8000992:	3501      	adds	r5, #1
 8000994:	e710      	b.n	80007b8 <__aeabi_fadd+0x178>
 8000996:	2e00      	cmp	r6, #0
 8000998:	d100      	bne.n	800099c <__aeabi_fadd+0x35c>
 800099a:	e740      	b.n	800081e <__aeabi_fadd+0x1de>
 800099c:	2900      	cmp	r1, #0
 800099e:	d100      	bne.n	80009a2 <__aeabi_fadd+0x362>
 80009a0:	e741      	b.n	8000826 <__aeabi_fadd+0x1e6>
 80009a2:	2380      	movs	r3, #128	@ 0x80
 80009a4:	03db      	lsls	r3, r3, #15
 80009a6:	429f      	cmp	r7, r3
 80009a8:	d200      	bcs.n	80009ac <__aeabi_fadd+0x36c>
 80009aa:	e73c      	b.n	8000826 <__aeabi_fadd+0x1e6>
 80009ac:	459c      	cmp	ip, r3
 80009ae:	d300      	bcc.n	80009b2 <__aeabi_fadd+0x372>
 80009b0:	e739      	b.n	8000826 <__aeabi_fadd+0x1e6>
 80009b2:	4667      	mov	r7, ip
 80009b4:	e737      	b.n	8000826 <__aeabi_fadd+0x1e6>
 80009b6:	2900      	cmp	r1, #0
 80009b8:	d100      	bne.n	80009bc <__aeabi_fadd+0x37c>
 80009ba:	e734      	b.n	8000826 <__aeabi_fadd+0x1e6>
 80009bc:	2380      	movs	r3, #128	@ 0x80
 80009be:	03db      	lsls	r3, r3, #15
 80009c0:	429f      	cmp	r7, r3
 80009c2:	d200      	bcs.n	80009c6 <__aeabi_fadd+0x386>
 80009c4:	e72f      	b.n	8000826 <__aeabi_fadd+0x1e6>
 80009c6:	459c      	cmp	ip, r3
 80009c8:	d300      	bcc.n	80009cc <__aeabi_fadd+0x38c>
 80009ca:	e72c      	b.n	8000826 <__aeabi_fadd+0x1e6>
 80009cc:	464c      	mov	r4, r9
 80009ce:	4667      	mov	r7, ip
 80009d0:	e729      	b.n	8000826 <__aeabi_fadd+0x1e6>
 80009d2:	2900      	cmp	r1, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fadd+0x398>
 80009d6:	e734      	b.n	8000842 <__aeabi_fadd+0x202>
 80009d8:	2300      	movs	r3, #0
 80009da:	08cf      	lsrs	r7, r1, #3
 80009dc:	e67a      	b.n	80006d4 <__aeabi_fadd+0x94>
 80009de:	464c      	mov	r4, r9
 80009e0:	2301      	movs	r3, #1
 80009e2:	08ff      	lsrs	r7, r7, #3
 80009e4:	e676      	b.n	80006d4 <__aeabi_fadd+0x94>
 80009e6:	2f00      	cmp	r7, #0
 80009e8:	d100      	bne.n	80009ec <__aeabi_fadd+0x3ac>
 80009ea:	e729      	b.n	8000840 <__aeabi_fadd+0x200>
 80009ec:	08ff      	lsrs	r7, r7, #3
 80009ee:	e671      	b.n	80006d4 <__aeabi_fadd+0x94>
 80009f0:	fbffffff 	.word	0xfbffffff
 80009f4:	7dffffff 	.word	0x7dffffff
 80009f8:	2280      	movs	r2, #128	@ 0x80
 80009fa:	2400      	movs	r4, #0
 80009fc:	20ff      	movs	r0, #255	@ 0xff
 80009fe:	03d2      	lsls	r2, r2, #15
 8000a00:	e69d      	b.n	800073e <__aeabi_fadd+0xfe>
 8000a02:	2300      	movs	r3, #0
 8000a04:	e666      	b.n	80006d4 <__aeabi_fadd+0x94>
 8000a06:	2300      	movs	r3, #0
 8000a08:	08d7      	lsrs	r7, r2, #3
 8000a0a:	e663      	b.n	80006d4 <__aeabi_fadd+0x94>
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	0172      	lsls	r2, r6, #5
 8000a10:	d500      	bpl.n	8000a14 <__aeabi_fadd+0x3d4>
 8000a12:	e6e7      	b.n	80007e4 <__aeabi_fadd+0x1a4>
 8000a14:	0031      	movs	r1, r6
 8000a16:	2300      	movs	r3, #0
 8000a18:	08cf      	lsrs	r7, r1, #3
 8000a1a:	e65b      	b.n	80006d4 <__aeabi_fadd+0x94>
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	08c7      	lsrs	r7, r0, #3
 8000a20:	e658      	b.n	80006d4 <__aeabi_fadd+0x94>
 8000a22:	46c0      	nop			@ (mov r8, r8)

08000a24 <__aeabi_fdiv>:
 8000a24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a26:	4646      	mov	r6, r8
 8000a28:	464f      	mov	r7, r9
 8000a2a:	46d6      	mov	lr, sl
 8000a2c:	0245      	lsls	r5, r0, #9
 8000a2e:	b5c0      	push	{r6, r7, lr}
 8000a30:	0fc3      	lsrs	r3, r0, #31
 8000a32:	0047      	lsls	r7, r0, #1
 8000a34:	4698      	mov	r8, r3
 8000a36:	1c0e      	adds	r6, r1, #0
 8000a38:	0a6d      	lsrs	r5, r5, #9
 8000a3a:	0e3f      	lsrs	r7, r7, #24
 8000a3c:	d05b      	beq.n	8000af6 <__aeabi_fdiv+0xd2>
 8000a3e:	2fff      	cmp	r7, #255	@ 0xff
 8000a40:	d021      	beq.n	8000a86 <__aeabi_fdiv+0x62>
 8000a42:	2380      	movs	r3, #128	@ 0x80
 8000a44:	00ed      	lsls	r5, r5, #3
 8000a46:	04db      	lsls	r3, r3, #19
 8000a48:	431d      	orrs	r5, r3
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	4699      	mov	r9, r3
 8000a4e:	469a      	mov	sl, r3
 8000a50:	3f7f      	subs	r7, #127	@ 0x7f
 8000a52:	0274      	lsls	r4, r6, #9
 8000a54:	0073      	lsls	r3, r6, #1
 8000a56:	0a64      	lsrs	r4, r4, #9
 8000a58:	0e1b      	lsrs	r3, r3, #24
 8000a5a:	0ff6      	lsrs	r6, r6, #31
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d020      	beq.n	8000aa2 <__aeabi_fdiv+0x7e>
 8000a60:	2bff      	cmp	r3, #255	@ 0xff
 8000a62:	d043      	beq.n	8000aec <__aeabi_fdiv+0xc8>
 8000a64:	2280      	movs	r2, #128	@ 0x80
 8000a66:	2000      	movs	r0, #0
 8000a68:	00e4      	lsls	r4, r4, #3
 8000a6a:	04d2      	lsls	r2, r2, #19
 8000a6c:	4314      	orrs	r4, r2
 8000a6e:	3b7f      	subs	r3, #127	@ 0x7f
 8000a70:	4642      	mov	r2, r8
 8000a72:	1aff      	subs	r7, r7, r3
 8000a74:	464b      	mov	r3, r9
 8000a76:	4072      	eors	r2, r6
 8000a78:	2b0f      	cmp	r3, #15
 8000a7a:	d900      	bls.n	8000a7e <__aeabi_fdiv+0x5a>
 8000a7c:	e09d      	b.n	8000bba <__aeabi_fdiv+0x196>
 8000a7e:	4971      	ldr	r1, [pc, #452]	@ (8000c44 <__aeabi_fdiv+0x220>)
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	58cb      	ldr	r3, [r1, r3]
 8000a84:	469f      	mov	pc, r3
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	d15a      	bne.n	8000b40 <__aeabi_fdiv+0x11c>
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	4699      	mov	r9, r3
 8000a8e:	3b06      	subs	r3, #6
 8000a90:	0274      	lsls	r4, r6, #9
 8000a92:	469a      	mov	sl, r3
 8000a94:	0073      	lsls	r3, r6, #1
 8000a96:	27ff      	movs	r7, #255	@ 0xff
 8000a98:	0a64      	lsrs	r4, r4, #9
 8000a9a:	0e1b      	lsrs	r3, r3, #24
 8000a9c:	0ff6      	lsrs	r6, r6, #31
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d1de      	bne.n	8000a60 <__aeabi_fdiv+0x3c>
 8000aa2:	2c00      	cmp	r4, #0
 8000aa4:	d13b      	bne.n	8000b1e <__aeabi_fdiv+0xfa>
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	4642      	mov	r2, r8
 8000aaa:	4649      	mov	r1, r9
 8000aac:	4072      	eors	r2, r6
 8000aae:	4319      	orrs	r1, r3
 8000ab0:	290e      	cmp	r1, #14
 8000ab2:	d818      	bhi.n	8000ae6 <__aeabi_fdiv+0xc2>
 8000ab4:	4864      	ldr	r0, [pc, #400]	@ (8000c48 <__aeabi_fdiv+0x224>)
 8000ab6:	0089      	lsls	r1, r1, #2
 8000ab8:	5841      	ldr	r1, [r0, r1]
 8000aba:	468f      	mov	pc, r1
 8000abc:	4653      	mov	r3, sl
 8000abe:	2b02      	cmp	r3, #2
 8000ac0:	d100      	bne.n	8000ac4 <__aeabi_fdiv+0xa0>
 8000ac2:	e0b8      	b.n	8000c36 <__aeabi_fdiv+0x212>
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d06e      	beq.n	8000ba6 <__aeabi_fdiv+0x182>
 8000ac8:	4642      	mov	r2, r8
 8000aca:	002c      	movs	r4, r5
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d140      	bne.n	8000b52 <__aeabi_fdiv+0x12e>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	2400      	movs	r4, #0
 8000ad4:	05c0      	lsls	r0, r0, #23
 8000ad6:	4320      	orrs	r0, r4
 8000ad8:	07d2      	lsls	r2, r2, #31
 8000ada:	4310      	orrs	r0, r2
 8000adc:	bce0      	pop	{r5, r6, r7}
 8000ade:	46ba      	mov	sl, r7
 8000ae0:	46b1      	mov	r9, r6
 8000ae2:	46a8      	mov	r8, r5
 8000ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae6:	20ff      	movs	r0, #255	@ 0xff
 8000ae8:	2400      	movs	r4, #0
 8000aea:	e7f3      	b.n	8000ad4 <__aeabi_fdiv+0xb0>
 8000aec:	2c00      	cmp	r4, #0
 8000aee:	d120      	bne.n	8000b32 <__aeabi_fdiv+0x10e>
 8000af0:	2302      	movs	r3, #2
 8000af2:	3fff      	subs	r7, #255	@ 0xff
 8000af4:	e7d8      	b.n	8000aa8 <__aeabi_fdiv+0x84>
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	d105      	bne.n	8000b06 <__aeabi_fdiv+0xe2>
 8000afa:	2304      	movs	r3, #4
 8000afc:	4699      	mov	r9, r3
 8000afe:	3b03      	subs	r3, #3
 8000b00:	2700      	movs	r7, #0
 8000b02:	469a      	mov	sl, r3
 8000b04:	e7a5      	b.n	8000a52 <__aeabi_fdiv+0x2e>
 8000b06:	0028      	movs	r0, r5
 8000b08:	f000 fd7e 	bl	8001608 <__clzsi2>
 8000b0c:	2776      	movs	r7, #118	@ 0x76
 8000b0e:	1f43      	subs	r3, r0, #5
 8000b10:	409d      	lsls	r5, r3
 8000b12:	2300      	movs	r3, #0
 8000b14:	427f      	negs	r7, r7
 8000b16:	4699      	mov	r9, r3
 8000b18:	469a      	mov	sl, r3
 8000b1a:	1a3f      	subs	r7, r7, r0
 8000b1c:	e799      	b.n	8000a52 <__aeabi_fdiv+0x2e>
 8000b1e:	0020      	movs	r0, r4
 8000b20:	f000 fd72 	bl	8001608 <__clzsi2>
 8000b24:	1f43      	subs	r3, r0, #5
 8000b26:	409c      	lsls	r4, r3
 8000b28:	2376      	movs	r3, #118	@ 0x76
 8000b2a:	425b      	negs	r3, r3
 8000b2c:	1a1b      	subs	r3, r3, r0
 8000b2e:	2000      	movs	r0, #0
 8000b30:	e79e      	b.n	8000a70 <__aeabi_fdiv+0x4c>
 8000b32:	2303      	movs	r3, #3
 8000b34:	464a      	mov	r2, r9
 8000b36:	431a      	orrs	r2, r3
 8000b38:	4691      	mov	r9, r2
 8000b3a:	2003      	movs	r0, #3
 8000b3c:	33fc      	adds	r3, #252	@ 0xfc
 8000b3e:	e797      	b.n	8000a70 <__aeabi_fdiv+0x4c>
 8000b40:	230c      	movs	r3, #12
 8000b42:	4699      	mov	r9, r3
 8000b44:	3b09      	subs	r3, #9
 8000b46:	27ff      	movs	r7, #255	@ 0xff
 8000b48:	469a      	mov	sl, r3
 8000b4a:	e782      	b.n	8000a52 <__aeabi_fdiv+0x2e>
 8000b4c:	2803      	cmp	r0, #3
 8000b4e:	d02c      	beq.n	8000baa <__aeabi_fdiv+0x186>
 8000b50:	0032      	movs	r2, r6
 8000b52:	0038      	movs	r0, r7
 8000b54:	307f      	adds	r0, #127	@ 0x7f
 8000b56:	2800      	cmp	r0, #0
 8000b58:	dd47      	ble.n	8000bea <__aeabi_fdiv+0x1c6>
 8000b5a:	0763      	lsls	r3, r4, #29
 8000b5c:	d004      	beq.n	8000b68 <__aeabi_fdiv+0x144>
 8000b5e:	230f      	movs	r3, #15
 8000b60:	4023      	ands	r3, r4
 8000b62:	2b04      	cmp	r3, #4
 8000b64:	d000      	beq.n	8000b68 <__aeabi_fdiv+0x144>
 8000b66:	3404      	adds	r4, #4
 8000b68:	0123      	lsls	r3, r4, #4
 8000b6a:	d503      	bpl.n	8000b74 <__aeabi_fdiv+0x150>
 8000b6c:	0038      	movs	r0, r7
 8000b6e:	4b37      	ldr	r3, [pc, #220]	@ (8000c4c <__aeabi_fdiv+0x228>)
 8000b70:	3080      	adds	r0, #128	@ 0x80
 8000b72:	401c      	ands	r4, r3
 8000b74:	28fe      	cmp	r0, #254	@ 0xfe
 8000b76:	dcb6      	bgt.n	8000ae6 <__aeabi_fdiv+0xc2>
 8000b78:	01a4      	lsls	r4, r4, #6
 8000b7a:	0a64      	lsrs	r4, r4, #9
 8000b7c:	b2c0      	uxtb	r0, r0
 8000b7e:	e7a9      	b.n	8000ad4 <__aeabi_fdiv+0xb0>
 8000b80:	2480      	movs	r4, #128	@ 0x80
 8000b82:	2200      	movs	r2, #0
 8000b84:	20ff      	movs	r0, #255	@ 0xff
 8000b86:	03e4      	lsls	r4, r4, #15
 8000b88:	e7a4      	b.n	8000ad4 <__aeabi_fdiv+0xb0>
 8000b8a:	2380      	movs	r3, #128	@ 0x80
 8000b8c:	03db      	lsls	r3, r3, #15
 8000b8e:	421d      	tst	r5, r3
 8000b90:	d001      	beq.n	8000b96 <__aeabi_fdiv+0x172>
 8000b92:	421c      	tst	r4, r3
 8000b94:	d00b      	beq.n	8000bae <__aeabi_fdiv+0x18a>
 8000b96:	2480      	movs	r4, #128	@ 0x80
 8000b98:	03e4      	lsls	r4, r4, #15
 8000b9a:	432c      	orrs	r4, r5
 8000b9c:	0264      	lsls	r4, r4, #9
 8000b9e:	4642      	mov	r2, r8
 8000ba0:	20ff      	movs	r0, #255	@ 0xff
 8000ba2:	0a64      	lsrs	r4, r4, #9
 8000ba4:	e796      	b.n	8000ad4 <__aeabi_fdiv+0xb0>
 8000ba6:	4646      	mov	r6, r8
 8000ba8:	002c      	movs	r4, r5
 8000baa:	2380      	movs	r3, #128	@ 0x80
 8000bac:	03db      	lsls	r3, r3, #15
 8000bae:	431c      	orrs	r4, r3
 8000bb0:	0264      	lsls	r4, r4, #9
 8000bb2:	0032      	movs	r2, r6
 8000bb4:	20ff      	movs	r0, #255	@ 0xff
 8000bb6:	0a64      	lsrs	r4, r4, #9
 8000bb8:	e78c      	b.n	8000ad4 <__aeabi_fdiv+0xb0>
 8000bba:	016d      	lsls	r5, r5, #5
 8000bbc:	0160      	lsls	r0, r4, #5
 8000bbe:	4285      	cmp	r5, r0
 8000bc0:	d22d      	bcs.n	8000c1e <__aeabi_fdiv+0x1fa>
 8000bc2:	231b      	movs	r3, #27
 8000bc4:	2400      	movs	r4, #0
 8000bc6:	3f01      	subs	r7, #1
 8000bc8:	2601      	movs	r6, #1
 8000bca:	0029      	movs	r1, r5
 8000bcc:	0064      	lsls	r4, r4, #1
 8000bce:	006d      	lsls	r5, r5, #1
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	db01      	blt.n	8000bd8 <__aeabi_fdiv+0x1b4>
 8000bd4:	4285      	cmp	r5, r0
 8000bd6:	d301      	bcc.n	8000bdc <__aeabi_fdiv+0x1b8>
 8000bd8:	1a2d      	subs	r5, r5, r0
 8000bda:	4334      	orrs	r4, r6
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d1f3      	bne.n	8000bca <__aeabi_fdiv+0x1a6>
 8000be2:	1e6b      	subs	r3, r5, #1
 8000be4:	419d      	sbcs	r5, r3
 8000be6:	432c      	orrs	r4, r5
 8000be8:	e7b3      	b.n	8000b52 <__aeabi_fdiv+0x12e>
 8000bea:	2301      	movs	r3, #1
 8000bec:	1a1b      	subs	r3, r3, r0
 8000bee:	2b1b      	cmp	r3, #27
 8000bf0:	dd00      	ble.n	8000bf4 <__aeabi_fdiv+0x1d0>
 8000bf2:	e76d      	b.n	8000ad0 <__aeabi_fdiv+0xac>
 8000bf4:	0021      	movs	r1, r4
 8000bf6:	379e      	adds	r7, #158	@ 0x9e
 8000bf8:	40d9      	lsrs	r1, r3
 8000bfa:	40bc      	lsls	r4, r7
 8000bfc:	000b      	movs	r3, r1
 8000bfe:	1e61      	subs	r1, r4, #1
 8000c00:	418c      	sbcs	r4, r1
 8000c02:	4323      	orrs	r3, r4
 8000c04:	0759      	lsls	r1, r3, #29
 8000c06:	d004      	beq.n	8000c12 <__aeabi_fdiv+0x1ee>
 8000c08:	210f      	movs	r1, #15
 8000c0a:	4019      	ands	r1, r3
 8000c0c:	2904      	cmp	r1, #4
 8000c0e:	d000      	beq.n	8000c12 <__aeabi_fdiv+0x1ee>
 8000c10:	3304      	adds	r3, #4
 8000c12:	0159      	lsls	r1, r3, #5
 8000c14:	d413      	bmi.n	8000c3e <__aeabi_fdiv+0x21a>
 8000c16:	019b      	lsls	r3, r3, #6
 8000c18:	2000      	movs	r0, #0
 8000c1a:	0a5c      	lsrs	r4, r3, #9
 8000c1c:	e75a      	b.n	8000ad4 <__aeabi_fdiv+0xb0>
 8000c1e:	231a      	movs	r3, #26
 8000c20:	2401      	movs	r4, #1
 8000c22:	1a2d      	subs	r5, r5, r0
 8000c24:	e7d0      	b.n	8000bc8 <__aeabi_fdiv+0x1a4>
 8000c26:	1e98      	subs	r0, r3, #2
 8000c28:	4243      	negs	r3, r0
 8000c2a:	4158      	adcs	r0, r3
 8000c2c:	4240      	negs	r0, r0
 8000c2e:	0032      	movs	r2, r6
 8000c30:	2400      	movs	r4, #0
 8000c32:	b2c0      	uxtb	r0, r0
 8000c34:	e74e      	b.n	8000ad4 <__aeabi_fdiv+0xb0>
 8000c36:	4642      	mov	r2, r8
 8000c38:	20ff      	movs	r0, #255	@ 0xff
 8000c3a:	2400      	movs	r4, #0
 8000c3c:	e74a      	b.n	8000ad4 <__aeabi_fdiv+0xb0>
 8000c3e:	2001      	movs	r0, #1
 8000c40:	2400      	movs	r4, #0
 8000c42:	e747      	b.n	8000ad4 <__aeabi_fdiv+0xb0>
 8000c44:	080094b8 	.word	0x080094b8
 8000c48:	080094f8 	.word	0x080094f8
 8000c4c:	f7ffffff 	.word	0xf7ffffff

08000c50 <__eqsf2>:
 8000c50:	b570      	push	{r4, r5, r6, lr}
 8000c52:	0042      	lsls	r2, r0, #1
 8000c54:	024e      	lsls	r6, r1, #9
 8000c56:	004c      	lsls	r4, r1, #1
 8000c58:	0245      	lsls	r5, r0, #9
 8000c5a:	0a6d      	lsrs	r5, r5, #9
 8000c5c:	0e12      	lsrs	r2, r2, #24
 8000c5e:	0fc3      	lsrs	r3, r0, #31
 8000c60:	0a76      	lsrs	r6, r6, #9
 8000c62:	0e24      	lsrs	r4, r4, #24
 8000c64:	0fc9      	lsrs	r1, r1, #31
 8000c66:	2aff      	cmp	r2, #255	@ 0xff
 8000c68:	d010      	beq.n	8000c8c <__eqsf2+0x3c>
 8000c6a:	2cff      	cmp	r4, #255	@ 0xff
 8000c6c:	d00c      	beq.n	8000c88 <__eqsf2+0x38>
 8000c6e:	2001      	movs	r0, #1
 8000c70:	42a2      	cmp	r2, r4
 8000c72:	d10a      	bne.n	8000c8a <__eqsf2+0x3a>
 8000c74:	42b5      	cmp	r5, r6
 8000c76:	d108      	bne.n	8000c8a <__eqsf2+0x3a>
 8000c78:	428b      	cmp	r3, r1
 8000c7a:	d00f      	beq.n	8000c9c <__eqsf2+0x4c>
 8000c7c:	2a00      	cmp	r2, #0
 8000c7e:	d104      	bne.n	8000c8a <__eqsf2+0x3a>
 8000c80:	0028      	movs	r0, r5
 8000c82:	1e43      	subs	r3, r0, #1
 8000c84:	4198      	sbcs	r0, r3
 8000c86:	e000      	b.n	8000c8a <__eqsf2+0x3a>
 8000c88:	2001      	movs	r0, #1
 8000c8a:	bd70      	pop	{r4, r5, r6, pc}
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	2cff      	cmp	r4, #255	@ 0xff
 8000c90:	d1fb      	bne.n	8000c8a <__eqsf2+0x3a>
 8000c92:	4335      	orrs	r5, r6
 8000c94:	d1f9      	bne.n	8000c8a <__eqsf2+0x3a>
 8000c96:	404b      	eors	r3, r1
 8000c98:	0018      	movs	r0, r3
 8000c9a:	e7f6      	b.n	8000c8a <__eqsf2+0x3a>
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	e7f4      	b.n	8000c8a <__eqsf2+0x3a>

08000ca0 <__gesf2>:
 8000ca0:	b530      	push	{r4, r5, lr}
 8000ca2:	0042      	lsls	r2, r0, #1
 8000ca4:	0244      	lsls	r4, r0, #9
 8000ca6:	024d      	lsls	r5, r1, #9
 8000ca8:	0fc3      	lsrs	r3, r0, #31
 8000caa:	0048      	lsls	r0, r1, #1
 8000cac:	0a64      	lsrs	r4, r4, #9
 8000cae:	0e12      	lsrs	r2, r2, #24
 8000cb0:	0a6d      	lsrs	r5, r5, #9
 8000cb2:	0e00      	lsrs	r0, r0, #24
 8000cb4:	0fc9      	lsrs	r1, r1, #31
 8000cb6:	2aff      	cmp	r2, #255	@ 0xff
 8000cb8:	d018      	beq.n	8000cec <__gesf2+0x4c>
 8000cba:	28ff      	cmp	r0, #255	@ 0xff
 8000cbc:	d00a      	beq.n	8000cd4 <__gesf2+0x34>
 8000cbe:	2a00      	cmp	r2, #0
 8000cc0:	d11e      	bne.n	8000d00 <__gesf2+0x60>
 8000cc2:	2800      	cmp	r0, #0
 8000cc4:	d10a      	bne.n	8000cdc <__gesf2+0x3c>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d029      	beq.n	8000d1e <__gesf2+0x7e>
 8000cca:	2c00      	cmp	r4, #0
 8000ccc:	d12d      	bne.n	8000d2a <__gesf2+0x8a>
 8000cce:	0048      	lsls	r0, r1, #1
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	bd30      	pop	{r4, r5, pc}
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	d125      	bne.n	8000d24 <__gesf2+0x84>
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d101      	bne.n	8000ce0 <__gesf2+0x40>
 8000cdc:	2c00      	cmp	r4, #0
 8000cde:	d0f6      	beq.n	8000cce <__gesf2+0x2e>
 8000ce0:	428b      	cmp	r3, r1
 8000ce2:	d019      	beq.n	8000d18 <__gesf2+0x78>
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	425b      	negs	r3, r3
 8000ce8:	4318      	orrs	r0, r3
 8000cea:	e7f2      	b.n	8000cd2 <__gesf2+0x32>
 8000cec:	2c00      	cmp	r4, #0
 8000cee:	d119      	bne.n	8000d24 <__gesf2+0x84>
 8000cf0:	28ff      	cmp	r0, #255	@ 0xff
 8000cf2:	d1f7      	bne.n	8000ce4 <__gesf2+0x44>
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d115      	bne.n	8000d24 <__gesf2+0x84>
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d1f2      	bne.n	8000ce4 <__gesf2+0x44>
 8000cfe:	e7e8      	b.n	8000cd2 <__gesf2+0x32>
 8000d00:	2800      	cmp	r0, #0
 8000d02:	d0ef      	beq.n	8000ce4 <__gesf2+0x44>
 8000d04:	428b      	cmp	r3, r1
 8000d06:	d1ed      	bne.n	8000ce4 <__gesf2+0x44>
 8000d08:	4282      	cmp	r2, r0
 8000d0a:	dceb      	bgt.n	8000ce4 <__gesf2+0x44>
 8000d0c:	db04      	blt.n	8000d18 <__gesf2+0x78>
 8000d0e:	42ac      	cmp	r4, r5
 8000d10:	d8e8      	bhi.n	8000ce4 <__gesf2+0x44>
 8000d12:	2000      	movs	r0, #0
 8000d14:	42ac      	cmp	r4, r5
 8000d16:	d2dc      	bcs.n	8000cd2 <__gesf2+0x32>
 8000d18:	0058      	lsls	r0, r3, #1
 8000d1a:	3801      	subs	r0, #1
 8000d1c:	e7d9      	b.n	8000cd2 <__gesf2+0x32>
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	d0d7      	beq.n	8000cd2 <__gesf2+0x32>
 8000d22:	e7df      	b.n	8000ce4 <__gesf2+0x44>
 8000d24:	2002      	movs	r0, #2
 8000d26:	4240      	negs	r0, r0
 8000d28:	e7d3      	b.n	8000cd2 <__gesf2+0x32>
 8000d2a:	428b      	cmp	r3, r1
 8000d2c:	d1da      	bne.n	8000ce4 <__gesf2+0x44>
 8000d2e:	e7ee      	b.n	8000d0e <__gesf2+0x6e>

08000d30 <__lesf2>:
 8000d30:	b530      	push	{r4, r5, lr}
 8000d32:	0042      	lsls	r2, r0, #1
 8000d34:	0244      	lsls	r4, r0, #9
 8000d36:	024d      	lsls	r5, r1, #9
 8000d38:	0fc3      	lsrs	r3, r0, #31
 8000d3a:	0048      	lsls	r0, r1, #1
 8000d3c:	0a64      	lsrs	r4, r4, #9
 8000d3e:	0e12      	lsrs	r2, r2, #24
 8000d40:	0a6d      	lsrs	r5, r5, #9
 8000d42:	0e00      	lsrs	r0, r0, #24
 8000d44:	0fc9      	lsrs	r1, r1, #31
 8000d46:	2aff      	cmp	r2, #255	@ 0xff
 8000d48:	d017      	beq.n	8000d7a <__lesf2+0x4a>
 8000d4a:	28ff      	cmp	r0, #255	@ 0xff
 8000d4c:	d00a      	beq.n	8000d64 <__lesf2+0x34>
 8000d4e:	2a00      	cmp	r2, #0
 8000d50:	d11b      	bne.n	8000d8a <__lesf2+0x5a>
 8000d52:	2800      	cmp	r0, #0
 8000d54:	d10a      	bne.n	8000d6c <__lesf2+0x3c>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d01d      	beq.n	8000d96 <__lesf2+0x66>
 8000d5a:	2c00      	cmp	r4, #0
 8000d5c:	d12d      	bne.n	8000dba <__lesf2+0x8a>
 8000d5e:	0048      	lsls	r0, r1, #1
 8000d60:	3801      	subs	r0, #1
 8000d62:	e011      	b.n	8000d88 <__lesf2+0x58>
 8000d64:	2d00      	cmp	r5, #0
 8000d66:	d10e      	bne.n	8000d86 <__lesf2+0x56>
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	d101      	bne.n	8000d70 <__lesf2+0x40>
 8000d6c:	2c00      	cmp	r4, #0
 8000d6e:	d0f6      	beq.n	8000d5e <__lesf2+0x2e>
 8000d70:	428b      	cmp	r3, r1
 8000d72:	d10c      	bne.n	8000d8e <__lesf2+0x5e>
 8000d74:	0058      	lsls	r0, r3, #1
 8000d76:	3801      	subs	r0, #1
 8000d78:	e006      	b.n	8000d88 <__lesf2+0x58>
 8000d7a:	2c00      	cmp	r4, #0
 8000d7c:	d103      	bne.n	8000d86 <__lesf2+0x56>
 8000d7e:	28ff      	cmp	r0, #255	@ 0xff
 8000d80:	d105      	bne.n	8000d8e <__lesf2+0x5e>
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d015      	beq.n	8000db2 <__lesf2+0x82>
 8000d86:	2002      	movs	r0, #2
 8000d88:	bd30      	pop	{r4, r5, pc}
 8000d8a:	2800      	cmp	r0, #0
 8000d8c:	d106      	bne.n	8000d9c <__lesf2+0x6c>
 8000d8e:	2001      	movs	r0, #1
 8000d90:	425b      	negs	r3, r3
 8000d92:	4318      	orrs	r0, r3
 8000d94:	e7f8      	b.n	8000d88 <__lesf2+0x58>
 8000d96:	2c00      	cmp	r4, #0
 8000d98:	d0f6      	beq.n	8000d88 <__lesf2+0x58>
 8000d9a:	e7f8      	b.n	8000d8e <__lesf2+0x5e>
 8000d9c:	428b      	cmp	r3, r1
 8000d9e:	d1f6      	bne.n	8000d8e <__lesf2+0x5e>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	dcf4      	bgt.n	8000d8e <__lesf2+0x5e>
 8000da4:	dbe6      	blt.n	8000d74 <__lesf2+0x44>
 8000da6:	42ac      	cmp	r4, r5
 8000da8:	d8f1      	bhi.n	8000d8e <__lesf2+0x5e>
 8000daa:	2000      	movs	r0, #0
 8000dac:	42ac      	cmp	r4, r5
 8000dae:	d2eb      	bcs.n	8000d88 <__lesf2+0x58>
 8000db0:	e7e0      	b.n	8000d74 <__lesf2+0x44>
 8000db2:	2000      	movs	r0, #0
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d1ea      	bne.n	8000d8e <__lesf2+0x5e>
 8000db8:	e7e6      	b.n	8000d88 <__lesf2+0x58>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d1e7      	bne.n	8000d8e <__lesf2+0x5e>
 8000dbe:	e7f2      	b.n	8000da6 <__lesf2+0x76>

08000dc0 <__aeabi_fmul>:
 8000dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dc2:	464f      	mov	r7, r9
 8000dc4:	4646      	mov	r6, r8
 8000dc6:	46d6      	mov	lr, sl
 8000dc8:	0044      	lsls	r4, r0, #1
 8000dca:	b5c0      	push	{r6, r7, lr}
 8000dcc:	0246      	lsls	r6, r0, #9
 8000dce:	1c0f      	adds	r7, r1, #0
 8000dd0:	0a76      	lsrs	r6, r6, #9
 8000dd2:	0e24      	lsrs	r4, r4, #24
 8000dd4:	0fc5      	lsrs	r5, r0, #31
 8000dd6:	2c00      	cmp	r4, #0
 8000dd8:	d100      	bne.n	8000ddc <__aeabi_fmul+0x1c>
 8000dda:	e0da      	b.n	8000f92 <__aeabi_fmul+0x1d2>
 8000ddc:	2cff      	cmp	r4, #255	@ 0xff
 8000dde:	d074      	beq.n	8000eca <__aeabi_fmul+0x10a>
 8000de0:	2380      	movs	r3, #128	@ 0x80
 8000de2:	00f6      	lsls	r6, r6, #3
 8000de4:	04db      	lsls	r3, r3, #19
 8000de6:	431e      	orrs	r6, r3
 8000de8:	2300      	movs	r3, #0
 8000dea:	4699      	mov	r9, r3
 8000dec:	469a      	mov	sl, r3
 8000dee:	3c7f      	subs	r4, #127	@ 0x7f
 8000df0:	027b      	lsls	r3, r7, #9
 8000df2:	0a5b      	lsrs	r3, r3, #9
 8000df4:	4698      	mov	r8, r3
 8000df6:	007b      	lsls	r3, r7, #1
 8000df8:	0e1b      	lsrs	r3, r3, #24
 8000dfa:	0fff      	lsrs	r7, r7, #31
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d074      	beq.n	8000eea <__aeabi_fmul+0x12a>
 8000e00:	2bff      	cmp	r3, #255	@ 0xff
 8000e02:	d100      	bne.n	8000e06 <__aeabi_fmul+0x46>
 8000e04:	e08e      	b.n	8000f24 <__aeabi_fmul+0x164>
 8000e06:	4642      	mov	r2, r8
 8000e08:	2180      	movs	r1, #128	@ 0x80
 8000e0a:	00d2      	lsls	r2, r2, #3
 8000e0c:	04c9      	lsls	r1, r1, #19
 8000e0e:	4311      	orrs	r1, r2
 8000e10:	3b7f      	subs	r3, #127	@ 0x7f
 8000e12:	002a      	movs	r2, r5
 8000e14:	18e4      	adds	r4, r4, r3
 8000e16:	464b      	mov	r3, r9
 8000e18:	407a      	eors	r2, r7
 8000e1a:	4688      	mov	r8, r1
 8000e1c:	b2d2      	uxtb	r2, r2
 8000e1e:	2b0a      	cmp	r3, #10
 8000e20:	dc75      	bgt.n	8000f0e <__aeabi_fmul+0x14e>
 8000e22:	464b      	mov	r3, r9
 8000e24:	2000      	movs	r0, #0
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	dd0f      	ble.n	8000e4a <__aeabi_fmul+0x8a>
 8000e2a:	4649      	mov	r1, r9
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	408b      	lsls	r3, r1
 8000e30:	21a6      	movs	r1, #166	@ 0xa6
 8000e32:	00c9      	lsls	r1, r1, #3
 8000e34:	420b      	tst	r3, r1
 8000e36:	d169      	bne.n	8000f0c <__aeabi_fmul+0x14c>
 8000e38:	2190      	movs	r1, #144	@ 0x90
 8000e3a:	0089      	lsls	r1, r1, #2
 8000e3c:	420b      	tst	r3, r1
 8000e3e:	d000      	beq.n	8000e42 <__aeabi_fmul+0x82>
 8000e40:	e100      	b.n	8001044 <__aeabi_fmul+0x284>
 8000e42:	2188      	movs	r1, #136	@ 0x88
 8000e44:	4219      	tst	r1, r3
 8000e46:	d000      	beq.n	8000e4a <__aeabi_fmul+0x8a>
 8000e48:	e0f5      	b.n	8001036 <__aeabi_fmul+0x276>
 8000e4a:	4641      	mov	r1, r8
 8000e4c:	0409      	lsls	r1, r1, #16
 8000e4e:	0c09      	lsrs	r1, r1, #16
 8000e50:	4643      	mov	r3, r8
 8000e52:	0008      	movs	r0, r1
 8000e54:	0c35      	lsrs	r5, r6, #16
 8000e56:	0436      	lsls	r6, r6, #16
 8000e58:	0c1b      	lsrs	r3, r3, #16
 8000e5a:	0c36      	lsrs	r6, r6, #16
 8000e5c:	4370      	muls	r0, r6
 8000e5e:	4369      	muls	r1, r5
 8000e60:	435e      	muls	r6, r3
 8000e62:	435d      	muls	r5, r3
 8000e64:	1876      	adds	r6, r6, r1
 8000e66:	0c03      	lsrs	r3, r0, #16
 8000e68:	199b      	adds	r3, r3, r6
 8000e6a:	4299      	cmp	r1, r3
 8000e6c:	d903      	bls.n	8000e76 <__aeabi_fmul+0xb6>
 8000e6e:	2180      	movs	r1, #128	@ 0x80
 8000e70:	0249      	lsls	r1, r1, #9
 8000e72:	468c      	mov	ip, r1
 8000e74:	4465      	add	r5, ip
 8000e76:	0400      	lsls	r0, r0, #16
 8000e78:	0419      	lsls	r1, r3, #16
 8000e7a:	0c00      	lsrs	r0, r0, #16
 8000e7c:	1809      	adds	r1, r1, r0
 8000e7e:	018e      	lsls	r6, r1, #6
 8000e80:	1e70      	subs	r0, r6, #1
 8000e82:	4186      	sbcs	r6, r0
 8000e84:	0c1b      	lsrs	r3, r3, #16
 8000e86:	0e89      	lsrs	r1, r1, #26
 8000e88:	195b      	adds	r3, r3, r5
 8000e8a:	430e      	orrs	r6, r1
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	011b      	lsls	r3, r3, #4
 8000e92:	d46c      	bmi.n	8000f6e <__aeabi_fmul+0x1ae>
 8000e94:	0023      	movs	r3, r4
 8000e96:	337f      	adds	r3, #127	@ 0x7f
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	dc00      	bgt.n	8000e9e <__aeabi_fmul+0xde>
 8000e9c:	e0b1      	b.n	8001002 <__aeabi_fmul+0x242>
 8000e9e:	0015      	movs	r5, r2
 8000ea0:	0771      	lsls	r1, r6, #29
 8000ea2:	d00b      	beq.n	8000ebc <__aeabi_fmul+0xfc>
 8000ea4:	200f      	movs	r0, #15
 8000ea6:	0021      	movs	r1, r4
 8000ea8:	4030      	ands	r0, r6
 8000eaa:	2804      	cmp	r0, #4
 8000eac:	d006      	beq.n	8000ebc <__aeabi_fmul+0xfc>
 8000eae:	3604      	adds	r6, #4
 8000eb0:	0132      	lsls	r2, r6, #4
 8000eb2:	d503      	bpl.n	8000ebc <__aeabi_fmul+0xfc>
 8000eb4:	4b6e      	ldr	r3, [pc, #440]	@ (8001070 <__aeabi_fmul+0x2b0>)
 8000eb6:	401e      	ands	r6, r3
 8000eb8:	000b      	movs	r3, r1
 8000eba:	3380      	adds	r3, #128	@ 0x80
 8000ebc:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ebe:	dd00      	ble.n	8000ec2 <__aeabi_fmul+0x102>
 8000ec0:	e0bd      	b.n	800103e <__aeabi_fmul+0x27e>
 8000ec2:	01b2      	lsls	r2, r6, #6
 8000ec4:	0a52      	lsrs	r2, r2, #9
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	e048      	b.n	8000f5c <__aeabi_fmul+0x19c>
 8000eca:	2e00      	cmp	r6, #0
 8000ecc:	d000      	beq.n	8000ed0 <__aeabi_fmul+0x110>
 8000ece:	e092      	b.n	8000ff6 <__aeabi_fmul+0x236>
 8000ed0:	2308      	movs	r3, #8
 8000ed2:	4699      	mov	r9, r3
 8000ed4:	3b06      	subs	r3, #6
 8000ed6:	469a      	mov	sl, r3
 8000ed8:	027b      	lsls	r3, r7, #9
 8000eda:	0a5b      	lsrs	r3, r3, #9
 8000edc:	4698      	mov	r8, r3
 8000ede:	007b      	lsls	r3, r7, #1
 8000ee0:	24ff      	movs	r4, #255	@ 0xff
 8000ee2:	0e1b      	lsrs	r3, r3, #24
 8000ee4:	0fff      	lsrs	r7, r7, #31
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d18a      	bne.n	8000e00 <__aeabi_fmul+0x40>
 8000eea:	4642      	mov	r2, r8
 8000eec:	2a00      	cmp	r2, #0
 8000eee:	d164      	bne.n	8000fba <__aeabi_fmul+0x1fa>
 8000ef0:	4649      	mov	r1, r9
 8000ef2:	3201      	adds	r2, #1
 8000ef4:	4311      	orrs	r1, r2
 8000ef6:	4689      	mov	r9, r1
 8000ef8:	290a      	cmp	r1, #10
 8000efa:	dc08      	bgt.n	8000f0e <__aeabi_fmul+0x14e>
 8000efc:	407d      	eors	r5, r7
 8000efe:	2001      	movs	r0, #1
 8000f00:	b2ea      	uxtb	r2, r5
 8000f02:	2902      	cmp	r1, #2
 8000f04:	dc91      	bgt.n	8000e2a <__aeabi_fmul+0x6a>
 8000f06:	0015      	movs	r5, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	e027      	b.n	8000f5c <__aeabi_fmul+0x19c>
 8000f0c:	0015      	movs	r5, r2
 8000f0e:	4653      	mov	r3, sl
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d100      	bne.n	8000f16 <__aeabi_fmul+0x156>
 8000f14:	e093      	b.n	800103e <__aeabi_fmul+0x27e>
 8000f16:	2b03      	cmp	r3, #3
 8000f18:	d01a      	beq.n	8000f50 <__aeabi_fmul+0x190>
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d12c      	bne.n	8000f78 <__aeabi_fmul+0x1b8>
 8000f1e:	2300      	movs	r3, #0
 8000f20:	2200      	movs	r2, #0
 8000f22:	e01b      	b.n	8000f5c <__aeabi_fmul+0x19c>
 8000f24:	4643      	mov	r3, r8
 8000f26:	34ff      	adds	r4, #255	@ 0xff
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d055      	beq.n	8000fd8 <__aeabi_fmul+0x218>
 8000f2c:	2103      	movs	r1, #3
 8000f2e:	464b      	mov	r3, r9
 8000f30:	430b      	orrs	r3, r1
 8000f32:	0019      	movs	r1, r3
 8000f34:	2b0a      	cmp	r3, #10
 8000f36:	dc00      	bgt.n	8000f3a <__aeabi_fmul+0x17a>
 8000f38:	e092      	b.n	8001060 <__aeabi_fmul+0x2a0>
 8000f3a:	2b0f      	cmp	r3, #15
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fmul+0x180>
 8000f3e:	e08c      	b.n	800105a <__aeabi_fmul+0x29a>
 8000f40:	2280      	movs	r2, #128	@ 0x80
 8000f42:	03d2      	lsls	r2, r2, #15
 8000f44:	4216      	tst	r6, r2
 8000f46:	d003      	beq.n	8000f50 <__aeabi_fmul+0x190>
 8000f48:	4643      	mov	r3, r8
 8000f4a:	4213      	tst	r3, r2
 8000f4c:	d100      	bne.n	8000f50 <__aeabi_fmul+0x190>
 8000f4e:	e07d      	b.n	800104c <__aeabi_fmul+0x28c>
 8000f50:	2280      	movs	r2, #128	@ 0x80
 8000f52:	03d2      	lsls	r2, r2, #15
 8000f54:	4332      	orrs	r2, r6
 8000f56:	0252      	lsls	r2, r2, #9
 8000f58:	0a52      	lsrs	r2, r2, #9
 8000f5a:	23ff      	movs	r3, #255	@ 0xff
 8000f5c:	05d8      	lsls	r0, r3, #23
 8000f5e:	07ed      	lsls	r5, r5, #31
 8000f60:	4310      	orrs	r0, r2
 8000f62:	4328      	orrs	r0, r5
 8000f64:	bce0      	pop	{r5, r6, r7}
 8000f66:	46ba      	mov	sl, r7
 8000f68:	46b1      	mov	r9, r6
 8000f6a:	46a8      	mov	r8, r5
 8000f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f6e:	2301      	movs	r3, #1
 8000f70:	0015      	movs	r5, r2
 8000f72:	0871      	lsrs	r1, r6, #1
 8000f74:	401e      	ands	r6, r3
 8000f76:	430e      	orrs	r6, r1
 8000f78:	0023      	movs	r3, r4
 8000f7a:	3380      	adds	r3, #128	@ 0x80
 8000f7c:	1c61      	adds	r1, r4, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	dd41      	ble.n	8001006 <__aeabi_fmul+0x246>
 8000f82:	0772      	lsls	r2, r6, #29
 8000f84:	d094      	beq.n	8000eb0 <__aeabi_fmul+0xf0>
 8000f86:	220f      	movs	r2, #15
 8000f88:	4032      	ands	r2, r6
 8000f8a:	2a04      	cmp	r2, #4
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_fmul+0x1d0>
 8000f8e:	e78e      	b.n	8000eae <__aeabi_fmul+0xee>
 8000f90:	e78e      	b.n	8000eb0 <__aeabi_fmul+0xf0>
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d105      	bne.n	8000fa2 <__aeabi_fmul+0x1e2>
 8000f96:	2304      	movs	r3, #4
 8000f98:	4699      	mov	r9, r3
 8000f9a:	3b03      	subs	r3, #3
 8000f9c:	2400      	movs	r4, #0
 8000f9e:	469a      	mov	sl, r3
 8000fa0:	e726      	b.n	8000df0 <__aeabi_fmul+0x30>
 8000fa2:	0030      	movs	r0, r6
 8000fa4:	f000 fb30 	bl	8001608 <__clzsi2>
 8000fa8:	2476      	movs	r4, #118	@ 0x76
 8000faa:	1f43      	subs	r3, r0, #5
 8000fac:	409e      	lsls	r6, r3
 8000fae:	2300      	movs	r3, #0
 8000fb0:	4264      	negs	r4, r4
 8000fb2:	4699      	mov	r9, r3
 8000fb4:	469a      	mov	sl, r3
 8000fb6:	1a24      	subs	r4, r4, r0
 8000fb8:	e71a      	b.n	8000df0 <__aeabi_fmul+0x30>
 8000fba:	4640      	mov	r0, r8
 8000fbc:	f000 fb24 	bl	8001608 <__clzsi2>
 8000fc0:	464b      	mov	r3, r9
 8000fc2:	1a24      	subs	r4, r4, r0
 8000fc4:	3c76      	subs	r4, #118	@ 0x76
 8000fc6:	2b0a      	cmp	r3, #10
 8000fc8:	dca1      	bgt.n	8000f0e <__aeabi_fmul+0x14e>
 8000fca:	4643      	mov	r3, r8
 8000fcc:	3805      	subs	r0, #5
 8000fce:	4083      	lsls	r3, r0
 8000fd0:	407d      	eors	r5, r7
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	b2ea      	uxtb	r2, r5
 8000fd6:	e724      	b.n	8000e22 <__aeabi_fmul+0x62>
 8000fd8:	464a      	mov	r2, r9
 8000fda:	3302      	adds	r3, #2
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	002a      	movs	r2, r5
 8000fe0:	407a      	eors	r2, r7
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	2b0a      	cmp	r3, #10
 8000fe6:	dc92      	bgt.n	8000f0e <__aeabi_fmul+0x14e>
 8000fe8:	4649      	mov	r1, r9
 8000fea:	0015      	movs	r5, r2
 8000fec:	2900      	cmp	r1, #0
 8000fee:	d026      	beq.n	800103e <__aeabi_fmul+0x27e>
 8000ff0:	4699      	mov	r9, r3
 8000ff2:	2002      	movs	r0, #2
 8000ff4:	e719      	b.n	8000e2a <__aeabi_fmul+0x6a>
 8000ff6:	230c      	movs	r3, #12
 8000ff8:	4699      	mov	r9, r3
 8000ffa:	3b09      	subs	r3, #9
 8000ffc:	24ff      	movs	r4, #255	@ 0xff
 8000ffe:	469a      	mov	sl, r3
 8001000:	e6f6      	b.n	8000df0 <__aeabi_fmul+0x30>
 8001002:	0015      	movs	r5, r2
 8001004:	0021      	movs	r1, r4
 8001006:	2201      	movs	r2, #1
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b1b      	cmp	r3, #27
 800100c:	dd00      	ble.n	8001010 <__aeabi_fmul+0x250>
 800100e:	e786      	b.n	8000f1e <__aeabi_fmul+0x15e>
 8001010:	319e      	adds	r1, #158	@ 0x9e
 8001012:	0032      	movs	r2, r6
 8001014:	408e      	lsls	r6, r1
 8001016:	40da      	lsrs	r2, r3
 8001018:	1e73      	subs	r3, r6, #1
 800101a:	419e      	sbcs	r6, r3
 800101c:	4332      	orrs	r2, r6
 800101e:	0753      	lsls	r3, r2, #29
 8001020:	d004      	beq.n	800102c <__aeabi_fmul+0x26c>
 8001022:	230f      	movs	r3, #15
 8001024:	4013      	ands	r3, r2
 8001026:	2b04      	cmp	r3, #4
 8001028:	d000      	beq.n	800102c <__aeabi_fmul+0x26c>
 800102a:	3204      	adds	r2, #4
 800102c:	0153      	lsls	r3, r2, #5
 800102e:	d510      	bpl.n	8001052 <__aeabi_fmul+0x292>
 8001030:	2301      	movs	r3, #1
 8001032:	2200      	movs	r2, #0
 8001034:	e792      	b.n	8000f5c <__aeabi_fmul+0x19c>
 8001036:	003d      	movs	r5, r7
 8001038:	4646      	mov	r6, r8
 800103a:	4682      	mov	sl, r0
 800103c:	e767      	b.n	8000f0e <__aeabi_fmul+0x14e>
 800103e:	23ff      	movs	r3, #255	@ 0xff
 8001040:	2200      	movs	r2, #0
 8001042:	e78b      	b.n	8000f5c <__aeabi_fmul+0x19c>
 8001044:	2280      	movs	r2, #128	@ 0x80
 8001046:	2500      	movs	r5, #0
 8001048:	03d2      	lsls	r2, r2, #15
 800104a:	e786      	b.n	8000f5a <__aeabi_fmul+0x19a>
 800104c:	003d      	movs	r5, r7
 800104e:	431a      	orrs	r2, r3
 8001050:	e783      	b.n	8000f5a <__aeabi_fmul+0x19a>
 8001052:	0192      	lsls	r2, r2, #6
 8001054:	2300      	movs	r3, #0
 8001056:	0a52      	lsrs	r2, r2, #9
 8001058:	e780      	b.n	8000f5c <__aeabi_fmul+0x19c>
 800105a:	003d      	movs	r5, r7
 800105c:	4646      	mov	r6, r8
 800105e:	e777      	b.n	8000f50 <__aeabi_fmul+0x190>
 8001060:	002a      	movs	r2, r5
 8001062:	2301      	movs	r3, #1
 8001064:	407a      	eors	r2, r7
 8001066:	408b      	lsls	r3, r1
 8001068:	2003      	movs	r0, #3
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	e6e9      	b.n	8000e42 <__aeabi_fmul+0x82>
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	f7ffffff 	.word	0xf7ffffff

08001074 <__aeabi_fsub>:
 8001074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001076:	4647      	mov	r7, r8
 8001078:	46ce      	mov	lr, r9
 800107a:	0243      	lsls	r3, r0, #9
 800107c:	b580      	push	{r7, lr}
 800107e:	0a5f      	lsrs	r7, r3, #9
 8001080:	099b      	lsrs	r3, r3, #6
 8001082:	0045      	lsls	r5, r0, #1
 8001084:	004a      	lsls	r2, r1, #1
 8001086:	469c      	mov	ip, r3
 8001088:	024b      	lsls	r3, r1, #9
 800108a:	0fc4      	lsrs	r4, r0, #31
 800108c:	0fce      	lsrs	r6, r1, #31
 800108e:	0e2d      	lsrs	r5, r5, #24
 8001090:	0a58      	lsrs	r0, r3, #9
 8001092:	0e12      	lsrs	r2, r2, #24
 8001094:	0999      	lsrs	r1, r3, #6
 8001096:	2aff      	cmp	r2, #255	@ 0xff
 8001098:	d06b      	beq.n	8001172 <__aeabi_fsub+0xfe>
 800109a:	2301      	movs	r3, #1
 800109c:	405e      	eors	r6, r3
 800109e:	1aab      	subs	r3, r5, r2
 80010a0:	42b4      	cmp	r4, r6
 80010a2:	d04b      	beq.n	800113c <__aeabi_fsub+0xc8>
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dc00      	bgt.n	80010aa <__aeabi_fsub+0x36>
 80010a8:	e0ff      	b.n	80012aa <__aeabi_fsub+0x236>
 80010aa:	2a00      	cmp	r2, #0
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0x3c>
 80010ae:	e088      	b.n	80011c2 <__aeabi_fsub+0x14e>
 80010b0:	2dff      	cmp	r5, #255	@ 0xff
 80010b2:	d100      	bne.n	80010b6 <__aeabi_fsub+0x42>
 80010b4:	e0ef      	b.n	8001296 <__aeabi_fsub+0x222>
 80010b6:	2280      	movs	r2, #128	@ 0x80
 80010b8:	04d2      	lsls	r2, r2, #19
 80010ba:	4311      	orrs	r1, r2
 80010bc:	2001      	movs	r0, #1
 80010be:	2b1b      	cmp	r3, #27
 80010c0:	dc08      	bgt.n	80010d4 <__aeabi_fsub+0x60>
 80010c2:	0008      	movs	r0, r1
 80010c4:	2220      	movs	r2, #32
 80010c6:	40d8      	lsrs	r0, r3
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	4099      	lsls	r1, r3
 80010cc:	000b      	movs	r3, r1
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	4193      	sbcs	r3, r2
 80010d2:	4318      	orrs	r0, r3
 80010d4:	4663      	mov	r3, ip
 80010d6:	1a1b      	subs	r3, r3, r0
 80010d8:	469c      	mov	ip, r3
 80010da:	4663      	mov	r3, ip
 80010dc:	015b      	lsls	r3, r3, #5
 80010de:	d400      	bmi.n	80010e2 <__aeabi_fsub+0x6e>
 80010e0:	e0cd      	b.n	800127e <__aeabi_fsub+0x20a>
 80010e2:	4663      	mov	r3, ip
 80010e4:	019f      	lsls	r7, r3, #6
 80010e6:	09bf      	lsrs	r7, r7, #6
 80010e8:	0038      	movs	r0, r7
 80010ea:	f000 fa8d 	bl	8001608 <__clzsi2>
 80010ee:	003b      	movs	r3, r7
 80010f0:	3805      	subs	r0, #5
 80010f2:	4083      	lsls	r3, r0
 80010f4:	4285      	cmp	r5, r0
 80010f6:	dc00      	bgt.n	80010fa <__aeabi_fsub+0x86>
 80010f8:	e0a2      	b.n	8001240 <__aeabi_fsub+0x1cc>
 80010fa:	4ab7      	ldr	r2, [pc, #732]	@ (80013d8 <__aeabi_fsub+0x364>)
 80010fc:	1a2d      	subs	r5, r5, r0
 80010fe:	401a      	ands	r2, r3
 8001100:	4694      	mov	ip, r2
 8001102:	075a      	lsls	r2, r3, #29
 8001104:	d100      	bne.n	8001108 <__aeabi_fsub+0x94>
 8001106:	e0c3      	b.n	8001290 <__aeabi_fsub+0x21c>
 8001108:	220f      	movs	r2, #15
 800110a:	4013      	ands	r3, r2
 800110c:	2b04      	cmp	r3, #4
 800110e:	d100      	bne.n	8001112 <__aeabi_fsub+0x9e>
 8001110:	e0be      	b.n	8001290 <__aeabi_fsub+0x21c>
 8001112:	2304      	movs	r3, #4
 8001114:	4698      	mov	r8, r3
 8001116:	44c4      	add	ip, r8
 8001118:	4663      	mov	r3, ip
 800111a:	015b      	lsls	r3, r3, #5
 800111c:	d400      	bmi.n	8001120 <__aeabi_fsub+0xac>
 800111e:	e0b7      	b.n	8001290 <__aeabi_fsub+0x21c>
 8001120:	1c68      	adds	r0, r5, #1
 8001122:	2dfe      	cmp	r5, #254	@ 0xfe
 8001124:	d000      	beq.n	8001128 <__aeabi_fsub+0xb4>
 8001126:	e0a5      	b.n	8001274 <__aeabi_fsub+0x200>
 8001128:	20ff      	movs	r0, #255	@ 0xff
 800112a:	2200      	movs	r2, #0
 800112c:	05c0      	lsls	r0, r0, #23
 800112e:	4310      	orrs	r0, r2
 8001130:	07e4      	lsls	r4, r4, #31
 8001132:	4320      	orrs	r0, r4
 8001134:	bcc0      	pop	{r6, r7}
 8001136:	46b9      	mov	r9, r7
 8001138:	46b0      	mov	r8, r6
 800113a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800113c:	2b00      	cmp	r3, #0
 800113e:	dc00      	bgt.n	8001142 <__aeabi_fsub+0xce>
 8001140:	e1eb      	b.n	800151a <__aeabi_fsub+0x4a6>
 8001142:	2a00      	cmp	r2, #0
 8001144:	d046      	beq.n	80011d4 <__aeabi_fsub+0x160>
 8001146:	2dff      	cmp	r5, #255	@ 0xff
 8001148:	d100      	bne.n	800114c <__aeabi_fsub+0xd8>
 800114a:	e0a4      	b.n	8001296 <__aeabi_fsub+0x222>
 800114c:	2280      	movs	r2, #128	@ 0x80
 800114e:	04d2      	lsls	r2, r2, #19
 8001150:	4311      	orrs	r1, r2
 8001152:	2b1b      	cmp	r3, #27
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fsub+0xe4>
 8001156:	e0fb      	b.n	8001350 <__aeabi_fsub+0x2dc>
 8001158:	2305      	movs	r3, #5
 800115a:	4698      	mov	r8, r3
 800115c:	002b      	movs	r3, r5
 800115e:	44c4      	add	ip, r8
 8001160:	4662      	mov	r2, ip
 8001162:	08d7      	lsrs	r7, r2, #3
 8001164:	2bff      	cmp	r3, #255	@ 0xff
 8001166:	d100      	bne.n	800116a <__aeabi_fsub+0xf6>
 8001168:	e095      	b.n	8001296 <__aeabi_fsub+0x222>
 800116a:	027a      	lsls	r2, r7, #9
 800116c:	0a52      	lsrs	r2, r2, #9
 800116e:	b2d8      	uxtb	r0, r3
 8001170:	e7dc      	b.n	800112c <__aeabi_fsub+0xb8>
 8001172:	002b      	movs	r3, r5
 8001174:	3bff      	subs	r3, #255	@ 0xff
 8001176:	4699      	mov	r9, r3
 8001178:	2900      	cmp	r1, #0
 800117a:	d118      	bne.n	80011ae <__aeabi_fsub+0x13a>
 800117c:	2301      	movs	r3, #1
 800117e:	405e      	eors	r6, r3
 8001180:	42b4      	cmp	r4, r6
 8001182:	d100      	bne.n	8001186 <__aeabi_fsub+0x112>
 8001184:	e0ca      	b.n	800131c <__aeabi_fsub+0x2a8>
 8001186:	464b      	mov	r3, r9
 8001188:	2b00      	cmp	r3, #0
 800118a:	d02d      	beq.n	80011e8 <__aeabi_fsub+0x174>
 800118c:	2d00      	cmp	r5, #0
 800118e:	d000      	beq.n	8001192 <__aeabi_fsub+0x11e>
 8001190:	e13c      	b.n	800140c <__aeabi_fsub+0x398>
 8001192:	23ff      	movs	r3, #255	@ 0xff
 8001194:	4664      	mov	r4, ip
 8001196:	2c00      	cmp	r4, #0
 8001198:	d100      	bne.n	800119c <__aeabi_fsub+0x128>
 800119a:	e15f      	b.n	800145c <__aeabi_fsub+0x3e8>
 800119c:	1e5d      	subs	r5, r3, #1
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x130>
 80011a2:	e174      	b.n	800148e <__aeabi_fsub+0x41a>
 80011a4:	0034      	movs	r4, r6
 80011a6:	2bff      	cmp	r3, #255	@ 0xff
 80011a8:	d074      	beq.n	8001294 <__aeabi_fsub+0x220>
 80011aa:	002b      	movs	r3, r5
 80011ac:	e103      	b.n	80013b6 <__aeabi_fsub+0x342>
 80011ae:	42b4      	cmp	r4, r6
 80011b0:	d100      	bne.n	80011b4 <__aeabi_fsub+0x140>
 80011b2:	e09c      	b.n	80012ee <__aeabi_fsub+0x27a>
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d017      	beq.n	80011e8 <__aeabi_fsub+0x174>
 80011b8:	2d00      	cmp	r5, #0
 80011ba:	d0ea      	beq.n	8001192 <__aeabi_fsub+0x11e>
 80011bc:	0007      	movs	r7, r0
 80011be:	0034      	movs	r4, r6
 80011c0:	e06c      	b.n	800129c <__aeabi_fsub+0x228>
 80011c2:	2900      	cmp	r1, #0
 80011c4:	d0cc      	beq.n	8001160 <__aeabi_fsub+0xec>
 80011c6:	1e5a      	subs	r2, r3, #1
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d02b      	beq.n	8001224 <__aeabi_fsub+0x1b0>
 80011cc:	2bff      	cmp	r3, #255	@ 0xff
 80011ce:	d062      	beq.n	8001296 <__aeabi_fsub+0x222>
 80011d0:	0013      	movs	r3, r2
 80011d2:	e773      	b.n	80010bc <__aeabi_fsub+0x48>
 80011d4:	2900      	cmp	r1, #0
 80011d6:	d0c3      	beq.n	8001160 <__aeabi_fsub+0xec>
 80011d8:	1e5a      	subs	r2, r3, #1
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d100      	bne.n	80011e0 <__aeabi_fsub+0x16c>
 80011de:	e11e      	b.n	800141e <__aeabi_fsub+0x3aa>
 80011e0:	2bff      	cmp	r3, #255	@ 0xff
 80011e2:	d058      	beq.n	8001296 <__aeabi_fsub+0x222>
 80011e4:	0013      	movs	r3, r2
 80011e6:	e7b4      	b.n	8001152 <__aeabi_fsub+0xde>
 80011e8:	22fe      	movs	r2, #254	@ 0xfe
 80011ea:	1c6b      	adds	r3, r5, #1
 80011ec:	421a      	tst	r2, r3
 80011ee:	d10d      	bne.n	800120c <__aeabi_fsub+0x198>
 80011f0:	2d00      	cmp	r5, #0
 80011f2:	d060      	beq.n	80012b6 <__aeabi_fsub+0x242>
 80011f4:	4663      	mov	r3, ip
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d000      	beq.n	80011fc <__aeabi_fsub+0x188>
 80011fa:	e120      	b.n	800143e <__aeabi_fsub+0x3ca>
 80011fc:	2900      	cmp	r1, #0
 80011fe:	d000      	beq.n	8001202 <__aeabi_fsub+0x18e>
 8001200:	e128      	b.n	8001454 <__aeabi_fsub+0x3e0>
 8001202:	2280      	movs	r2, #128	@ 0x80
 8001204:	2400      	movs	r4, #0
 8001206:	20ff      	movs	r0, #255	@ 0xff
 8001208:	03d2      	lsls	r2, r2, #15
 800120a:	e78f      	b.n	800112c <__aeabi_fsub+0xb8>
 800120c:	4663      	mov	r3, ip
 800120e:	1a5f      	subs	r7, r3, r1
 8001210:	017b      	lsls	r3, r7, #5
 8001212:	d500      	bpl.n	8001216 <__aeabi_fsub+0x1a2>
 8001214:	e0fe      	b.n	8001414 <__aeabi_fsub+0x3a0>
 8001216:	2f00      	cmp	r7, #0
 8001218:	d000      	beq.n	800121c <__aeabi_fsub+0x1a8>
 800121a:	e765      	b.n	80010e8 <__aeabi_fsub+0x74>
 800121c:	2400      	movs	r4, #0
 800121e:	2000      	movs	r0, #0
 8001220:	2200      	movs	r2, #0
 8001222:	e783      	b.n	800112c <__aeabi_fsub+0xb8>
 8001224:	4663      	mov	r3, ip
 8001226:	1a59      	subs	r1, r3, r1
 8001228:	014b      	lsls	r3, r1, #5
 800122a:	d400      	bmi.n	800122e <__aeabi_fsub+0x1ba>
 800122c:	e119      	b.n	8001462 <__aeabi_fsub+0x3ee>
 800122e:	018f      	lsls	r7, r1, #6
 8001230:	09bf      	lsrs	r7, r7, #6
 8001232:	0038      	movs	r0, r7
 8001234:	f000 f9e8 	bl	8001608 <__clzsi2>
 8001238:	003b      	movs	r3, r7
 800123a:	3805      	subs	r0, #5
 800123c:	4083      	lsls	r3, r0
 800123e:	2501      	movs	r5, #1
 8001240:	2220      	movs	r2, #32
 8001242:	1b40      	subs	r0, r0, r5
 8001244:	3001      	adds	r0, #1
 8001246:	1a12      	subs	r2, r2, r0
 8001248:	0019      	movs	r1, r3
 800124a:	4093      	lsls	r3, r2
 800124c:	40c1      	lsrs	r1, r0
 800124e:	1e5a      	subs	r2, r3, #1
 8001250:	4193      	sbcs	r3, r2
 8001252:	4319      	orrs	r1, r3
 8001254:	468c      	mov	ip, r1
 8001256:	1e0b      	subs	r3, r1, #0
 8001258:	d0e1      	beq.n	800121e <__aeabi_fsub+0x1aa>
 800125a:	075b      	lsls	r3, r3, #29
 800125c:	d100      	bne.n	8001260 <__aeabi_fsub+0x1ec>
 800125e:	e152      	b.n	8001506 <__aeabi_fsub+0x492>
 8001260:	230f      	movs	r3, #15
 8001262:	2500      	movs	r5, #0
 8001264:	400b      	ands	r3, r1
 8001266:	2b04      	cmp	r3, #4
 8001268:	d000      	beq.n	800126c <__aeabi_fsub+0x1f8>
 800126a:	e752      	b.n	8001112 <__aeabi_fsub+0x9e>
 800126c:	2001      	movs	r0, #1
 800126e:	014a      	lsls	r2, r1, #5
 8001270:	d400      	bmi.n	8001274 <__aeabi_fsub+0x200>
 8001272:	e092      	b.n	800139a <__aeabi_fsub+0x326>
 8001274:	b2c0      	uxtb	r0, r0
 8001276:	4663      	mov	r3, ip
 8001278:	019a      	lsls	r2, r3, #6
 800127a:	0a52      	lsrs	r2, r2, #9
 800127c:	e756      	b.n	800112c <__aeabi_fsub+0xb8>
 800127e:	4663      	mov	r3, ip
 8001280:	075b      	lsls	r3, r3, #29
 8001282:	d005      	beq.n	8001290 <__aeabi_fsub+0x21c>
 8001284:	230f      	movs	r3, #15
 8001286:	4662      	mov	r2, ip
 8001288:	4013      	ands	r3, r2
 800128a:	2b04      	cmp	r3, #4
 800128c:	d000      	beq.n	8001290 <__aeabi_fsub+0x21c>
 800128e:	e740      	b.n	8001112 <__aeabi_fsub+0x9e>
 8001290:	002b      	movs	r3, r5
 8001292:	e765      	b.n	8001160 <__aeabi_fsub+0xec>
 8001294:	0007      	movs	r7, r0
 8001296:	2f00      	cmp	r7, #0
 8001298:	d100      	bne.n	800129c <__aeabi_fsub+0x228>
 800129a:	e745      	b.n	8001128 <__aeabi_fsub+0xb4>
 800129c:	2280      	movs	r2, #128	@ 0x80
 800129e:	03d2      	lsls	r2, r2, #15
 80012a0:	433a      	orrs	r2, r7
 80012a2:	0252      	lsls	r2, r2, #9
 80012a4:	20ff      	movs	r0, #255	@ 0xff
 80012a6:	0a52      	lsrs	r2, r2, #9
 80012a8:	e740      	b.n	800112c <__aeabi_fsub+0xb8>
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d179      	bne.n	80013a2 <__aeabi_fsub+0x32e>
 80012ae:	22fe      	movs	r2, #254	@ 0xfe
 80012b0:	1c6b      	adds	r3, r5, #1
 80012b2:	421a      	tst	r2, r3
 80012b4:	d1aa      	bne.n	800120c <__aeabi_fsub+0x198>
 80012b6:	4663      	mov	r3, ip
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d100      	bne.n	80012be <__aeabi_fsub+0x24a>
 80012bc:	e0f5      	b.n	80014aa <__aeabi_fsub+0x436>
 80012be:	2900      	cmp	r1, #0
 80012c0:	d100      	bne.n	80012c4 <__aeabi_fsub+0x250>
 80012c2:	e0d1      	b.n	8001468 <__aeabi_fsub+0x3f4>
 80012c4:	1a5f      	subs	r7, r3, r1
 80012c6:	2380      	movs	r3, #128	@ 0x80
 80012c8:	04db      	lsls	r3, r3, #19
 80012ca:	421f      	tst	r7, r3
 80012cc:	d100      	bne.n	80012d0 <__aeabi_fsub+0x25c>
 80012ce:	e10e      	b.n	80014ee <__aeabi_fsub+0x47a>
 80012d0:	4662      	mov	r2, ip
 80012d2:	2401      	movs	r4, #1
 80012d4:	1a8a      	subs	r2, r1, r2
 80012d6:	4694      	mov	ip, r2
 80012d8:	2000      	movs	r0, #0
 80012da:	4034      	ands	r4, r6
 80012dc:	2a00      	cmp	r2, #0
 80012de:	d100      	bne.n	80012e2 <__aeabi_fsub+0x26e>
 80012e0:	e724      	b.n	800112c <__aeabi_fsub+0xb8>
 80012e2:	2001      	movs	r0, #1
 80012e4:	421a      	tst	r2, r3
 80012e6:	d1c6      	bne.n	8001276 <__aeabi_fsub+0x202>
 80012e8:	2300      	movs	r3, #0
 80012ea:	08d7      	lsrs	r7, r2, #3
 80012ec:	e73d      	b.n	800116a <__aeabi_fsub+0xf6>
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d017      	beq.n	8001322 <__aeabi_fsub+0x2ae>
 80012f2:	2d00      	cmp	r5, #0
 80012f4:	d000      	beq.n	80012f8 <__aeabi_fsub+0x284>
 80012f6:	e0af      	b.n	8001458 <__aeabi_fsub+0x3e4>
 80012f8:	23ff      	movs	r3, #255	@ 0xff
 80012fa:	4665      	mov	r5, ip
 80012fc:	2d00      	cmp	r5, #0
 80012fe:	d100      	bne.n	8001302 <__aeabi_fsub+0x28e>
 8001300:	e0ad      	b.n	800145e <__aeabi_fsub+0x3ea>
 8001302:	1e5e      	subs	r6, r3, #1
 8001304:	2b01      	cmp	r3, #1
 8001306:	d100      	bne.n	800130a <__aeabi_fsub+0x296>
 8001308:	e089      	b.n	800141e <__aeabi_fsub+0x3aa>
 800130a:	2bff      	cmp	r3, #255	@ 0xff
 800130c:	d0c2      	beq.n	8001294 <__aeabi_fsub+0x220>
 800130e:	2e1b      	cmp	r6, #27
 8001310:	dc00      	bgt.n	8001314 <__aeabi_fsub+0x2a0>
 8001312:	e0ab      	b.n	800146c <__aeabi_fsub+0x3f8>
 8001314:	1d4b      	adds	r3, r1, #5
 8001316:	469c      	mov	ip, r3
 8001318:	0013      	movs	r3, r2
 800131a:	e721      	b.n	8001160 <__aeabi_fsub+0xec>
 800131c:	464b      	mov	r3, r9
 800131e:	2b00      	cmp	r3, #0
 8001320:	d170      	bne.n	8001404 <__aeabi_fsub+0x390>
 8001322:	22fe      	movs	r2, #254	@ 0xfe
 8001324:	1c6b      	adds	r3, r5, #1
 8001326:	421a      	tst	r2, r3
 8001328:	d15e      	bne.n	80013e8 <__aeabi_fsub+0x374>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d000      	beq.n	8001330 <__aeabi_fsub+0x2bc>
 800132e:	e0c3      	b.n	80014b8 <__aeabi_fsub+0x444>
 8001330:	4663      	mov	r3, ip
 8001332:	2b00      	cmp	r3, #0
 8001334:	d100      	bne.n	8001338 <__aeabi_fsub+0x2c4>
 8001336:	e0d0      	b.n	80014da <__aeabi_fsub+0x466>
 8001338:	2900      	cmp	r1, #0
 800133a:	d100      	bne.n	800133e <__aeabi_fsub+0x2ca>
 800133c:	e094      	b.n	8001468 <__aeabi_fsub+0x3f4>
 800133e:	000a      	movs	r2, r1
 8001340:	4462      	add	r2, ip
 8001342:	0153      	lsls	r3, r2, #5
 8001344:	d400      	bmi.n	8001348 <__aeabi_fsub+0x2d4>
 8001346:	e0d8      	b.n	80014fa <__aeabi_fsub+0x486>
 8001348:	0192      	lsls	r2, r2, #6
 800134a:	2001      	movs	r0, #1
 800134c:	0a52      	lsrs	r2, r2, #9
 800134e:	e6ed      	b.n	800112c <__aeabi_fsub+0xb8>
 8001350:	0008      	movs	r0, r1
 8001352:	2220      	movs	r2, #32
 8001354:	40d8      	lsrs	r0, r3
 8001356:	1ad3      	subs	r3, r2, r3
 8001358:	4099      	lsls	r1, r3
 800135a:	000b      	movs	r3, r1
 800135c:	1e5a      	subs	r2, r3, #1
 800135e:	4193      	sbcs	r3, r2
 8001360:	4303      	orrs	r3, r0
 8001362:	449c      	add	ip, r3
 8001364:	4663      	mov	r3, ip
 8001366:	015b      	lsls	r3, r3, #5
 8001368:	d589      	bpl.n	800127e <__aeabi_fsub+0x20a>
 800136a:	3501      	adds	r5, #1
 800136c:	2dff      	cmp	r5, #255	@ 0xff
 800136e:	d100      	bne.n	8001372 <__aeabi_fsub+0x2fe>
 8001370:	e6da      	b.n	8001128 <__aeabi_fsub+0xb4>
 8001372:	4662      	mov	r2, ip
 8001374:	2301      	movs	r3, #1
 8001376:	4919      	ldr	r1, [pc, #100]	@ (80013dc <__aeabi_fsub+0x368>)
 8001378:	4013      	ands	r3, r2
 800137a:	0852      	lsrs	r2, r2, #1
 800137c:	400a      	ands	r2, r1
 800137e:	431a      	orrs	r2, r3
 8001380:	0013      	movs	r3, r2
 8001382:	4694      	mov	ip, r2
 8001384:	075b      	lsls	r3, r3, #29
 8001386:	d004      	beq.n	8001392 <__aeabi_fsub+0x31e>
 8001388:	230f      	movs	r3, #15
 800138a:	4013      	ands	r3, r2
 800138c:	2b04      	cmp	r3, #4
 800138e:	d000      	beq.n	8001392 <__aeabi_fsub+0x31e>
 8001390:	e6bf      	b.n	8001112 <__aeabi_fsub+0x9e>
 8001392:	4663      	mov	r3, ip
 8001394:	015b      	lsls	r3, r3, #5
 8001396:	d500      	bpl.n	800139a <__aeabi_fsub+0x326>
 8001398:	e6c2      	b.n	8001120 <__aeabi_fsub+0xac>
 800139a:	4663      	mov	r3, ip
 800139c:	08df      	lsrs	r7, r3, #3
 800139e:	002b      	movs	r3, r5
 80013a0:	e6e3      	b.n	800116a <__aeabi_fsub+0xf6>
 80013a2:	1b53      	subs	r3, r2, r5
 80013a4:	2d00      	cmp	r5, #0
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x336>
 80013a8:	e6f4      	b.n	8001194 <__aeabi_fsub+0x120>
 80013aa:	2080      	movs	r0, #128	@ 0x80
 80013ac:	4664      	mov	r4, ip
 80013ae:	04c0      	lsls	r0, r0, #19
 80013b0:	4304      	orrs	r4, r0
 80013b2:	46a4      	mov	ip, r4
 80013b4:	0034      	movs	r4, r6
 80013b6:	2001      	movs	r0, #1
 80013b8:	2b1b      	cmp	r3, #27
 80013ba:	dc09      	bgt.n	80013d0 <__aeabi_fsub+0x35c>
 80013bc:	2520      	movs	r5, #32
 80013be:	4660      	mov	r0, ip
 80013c0:	40d8      	lsrs	r0, r3
 80013c2:	1aeb      	subs	r3, r5, r3
 80013c4:	4665      	mov	r5, ip
 80013c6:	409d      	lsls	r5, r3
 80013c8:	002b      	movs	r3, r5
 80013ca:	1e5d      	subs	r5, r3, #1
 80013cc:	41ab      	sbcs	r3, r5
 80013ce:	4318      	orrs	r0, r3
 80013d0:	1a0b      	subs	r3, r1, r0
 80013d2:	469c      	mov	ip, r3
 80013d4:	0015      	movs	r5, r2
 80013d6:	e680      	b.n	80010da <__aeabi_fsub+0x66>
 80013d8:	fbffffff 	.word	0xfbffffff
 80013dc:	7dffffff 	.word	0x7dffffff
 80013e0:	22fe      	movs	r2, #254	@ 0xfe
 80013e2:	1c6b      	adds	r3, r5, #1
 80013e4:	4213      	tst	r3, r2
 80013e6:	d0a3      	beq.n	8001330 <__aeabi_fsub+0x2bc>
 80013e8:	2bff      	cmp	r3, #255	@ 0xff
 80013ea:	d100      	bne.n	80013ee <__aeabi_fsub+0x37a>
 80013ec:	e69c      	b.n	8001128 <__aeabi_fsub+0xb4>
 80013ee:	4461      	add	r1, ip
 80013f0:	0849      	lsrs	r1, r1, #1
 80013f2:	074a      	lsls	r2, r1, #29
 80013f4:	d049      	beq.n	800148a <__aeabi_fsub+0x416>
 80013f6:	220f      	movs	r2, #15
 80013f8:	400a      	ands	r2, r1
 80013fa:	2a04      	cmp	r2, #4
 80013fc:	d045      	beq.n	800148a <__aeabi_fsub+0x416>
 80013fe:	1d0a      	adds	r2, r1, #4
 8001400:	4694      	mov	ip, r2
 8001402:	e6ad      	b.n	8001160 <__aeabi_fsub+0xec>
 8001404:	2d00      	cmp	r5, #0
 8001406:	d100      	bne.n	800140a <__aeabi_fsub+0x396>
 8001408:	e776      	b.n	80012f8 <__aeabi_fsub+0x284>
 800140a:	e68d      	b.n	8001128 <__aeabi_fsub+0xb4>
 800140c:	0034      	movs	r4, r6
 800140e:	20ff      	movs	r0, #255	@ 0xff
 8001410:	2200      	movs	r2, #0
 8001412:	e68b      	b.n	800112c <__aeabi_fsub+0xb8>
 8001414:	4663      	mov	r3, ip
 8001416:	2401      	movs	r4, #1
 8001418:	1acf      	subs	r7, r1, r3
 800141a:	4034      	ands	r4, r6
 800141c:	e664      	b.n	80010e8 <__aeabi_fsub+0x74>
 800141e:	4461      	add	r1, ip
 8001420:	014b      	lsls	r3, r1, #5
 8001422:	d56d      	bpl.n	8001500 <__aeabi_fsub+0x48c>
 8001424:	0848      	lsrs	r0, r1, #1
 8001426:	4944      	ldr	r1, [pc, #272]	@ (8001538 <__aeabi_fsub+0x4c4>)
 8001428:	4001      	ands	r1, r0
 800142a:	0743      	lsls	r3, r0, #29
 800142c:	d02c      	beq.n	8001488 <__aeabi_fsub+0x414>
 800142e:	230f      	movs	r3, #15
 8001430:	4003      	ands	r3, r0
 8001432:	2b04      	cmp	r3, #4
 8001434:	d028      	beq.n	8001488 <__aeabi_fsub+0x414>
 8001436:	1d0b      	adds	r3, r1, #4
 8001438:	469c      	mov	ip, r3
 800143a:	2302      	movs	r3, #2
 800143c:	e690      	b.n	8001160 <__aeabi_fsub+0xec>
 800143e:	2900      	cmp	r1, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x3d0>
 8001442:	e72b      	b.n	800129c <__aeabi_fsub+0x228>
 8001444:	2380      	movs	r3, #128	@ 0x80
 8001446:	03db      	lsls	r3, r3, #15
 8001448:	429f      	cmp	r7, r3
 800144a:	d200      	bcs.n	800144e <__aeabi_fsub+0x3da>
 800144c:	e726      	b.n	800129c <__aeabi_fsub+0x228>
 800144e:	4298      	cmp	r0, r3
 8001450:	d300      	bcc.n	8001454 <__aeabi_fsub+0x3e0>
 8001452:	e723      	b.n	800129c <__aeabi_fsub+0x228>
 8001454:	2401      	movs	r4, #1
 8001456:	4034      	ands	r4, r6
 8001458:	0007      	movs	r7, r0
 800145a:	e71f      	b.n	800129c <__aeabi_fsub+0x228>
 800145c:	0034      	movs	r4, r6
 800145e:	468c      	mov	ip, r1
 8001460:	e67e      	b.n	8001160 <__aeabi_fsub+0xec>
 8001462:	2301      	movs	r3, #1
 8001464:	08cf      	lsrs	r7, r1, #3
 8001466:	e680      	b.n	800116a <__aeabi_fsub+0xf6>
 8001468:	2300      	movs	r3, #0
 800146a:	e67e      	b.n	800116a <__aeabi_fsub+0xf6>
 800146c:	2020      	movs	r0, #32
 800146e:	4665      	mov	r5, ip
 8001470:	1b80      	subs	r0, r0, r6
 8001472:	4085      	lsls	r5, r0
 8001474:	4663      	mov	r3, ip
 8001476:	0028      	movs	r0, r5
 8001478:	40f3      	lsrs	r3, r6
 800147a:	1e45      	subs	r5, r0, #1
 800147c:	41a8      	sbcs	r0, r5
 800147e:	4303      	orrs	r3, r0
 8001480:	469c      	mov	ip, r3
 8001482:	0015      	movs	r5, r2
 8001484:	448c      	add	ip, r1
 8001486:	e76d      	b.n	8001364 <__aeabi_fsub+0x2f0>
 8001488:	2302      	movs	r3, #2
 800148a:	08cf      	lsrs	r7, r1, #3
 800148c:	e66d      	b.n	800116a <__aeabi_fsub+0xf6>
 800148e:	1b0f      	subs	r7, r1, r4
 8001490:	017b      	lsls	r3, r7, #5
 8001492:	d528      	bpl.n	80014e6 <__aeabi_fsub+0x472>
 8001494:	01bf      	lsls	r7, r7, #6
 8001496:	09bf      	lsrs	r7, r7, #6
 8001498:	0038      	movs	r0, r7
 800149a:	f000 f8b5 	bl	8001608 <__clzsi2>
 800149e:	003b      	movs	r3, r7
 80014a0:	3805      	subs	r0, #5
 80014a2:	4083      	lsls	r3, r0
 80014a4:	0034      	movs	r4, r6
 80014a6:	2501      	movs	r5, #1
 80014a8:	e6ca      	b.n	8001240 <__aeabi_fsub+0x1cc>
 80014aa:	2900      	cmp	r1, #0
 80014ac:	d100      	bne.n	80014b0 <__aeabi_fsub+0x43c>
 80014ae:	e6b5      	b.n	800121c <__aeabi_fsub+0x1a8>
 80014b0:	2401      	movs	r4, #1
 80014b2:	0007      	movs	r7, r0
 80014b4:	4034      	ands	r4, r6
 80014b6:	e658      	b.n	800116a <__aeabi_fsub+0xf6>
 80014b8:	4663      	mov	r3, ip
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_fsub+0x44c>
 80014be:	e6e9      	b.n	8001294 <__aeabi_fsub+0x220>
 80014c0:	2900      	cmp	r1, #0
 80014c2:	d100      	bne.n	80014c6 <__aeabi_fsub+0x452>
 80014c4:	e6ea      	b.n	800129c <__aeabi_fsub+0x228>
 80014c6:	2380      	movs	r3, #128	@ 0x80
 80014c8:	03db      	lsls	r3, r3, #15
 80014ca:	429f      	cmp	r7, r3
 80014cc:	d200      	bcs.n	80014d0 <__aeabi_fsub+0x45c>
 80014ce:	e6e5      	b.n	800129c <__aeabi_fsub+0x228>
 80014d0:	4298      	cmp	r0, r3
 80014d2:	d300      	bcc.n	80014d6 <__aeabi_fsub+0x462>
 80014d4:	e6e2      	b.n	800129c <__aeabi_fsub+0x228>
 80014d6:	0007      	movs	r7, r0
 80014d8:	e6e0      	b.n	800129c <__aeabi_fsub+0x228>
 80014da:	2900      	cmp	r1, #0
 80014dc:	d100      	bne.n	80014e0 <__aeabi_fsub+0x46c>
 80014de:	e69e      	b.n	800121e <__aeabi_fsub+0x1aa>
 80014e0:	2300      	movs	r3, #0
 80014e2:	08cf      	lsrs	r7, r1, #3
 80014e4:	e641      	b.n	800116a <__aeabi_fsub+0xf6>
 80014e6:	0034      	movs	r4, r6
 80014e8:	2301      	movs	r3, #1
 80014ea:	08ff      	lsrs	r7, r7, #3
 80014ec:	e63d      	b.n	800116a <__aeabi_fsub+0xf6>
 80014ee:	2f00      	cmp	r7, #0
 80014f0:	d100      	bne.n	80014f4 <__aeabi_fsub+0x480>
 80014f2:	e693      	b.n	800121c <__aeabi_fsub+0x1a8>
 80014f4:	2300      	movs	r3, #0
 80014f6:	08ff      	lsrs	r7, r7, #3
 80014f8:	e637      	b.n	800116a <__aeabi_fsub+0xf6>
 80014fa:	2300      	movs	r3, #0
 80014fc:	08d7      	lsrs	r7, r2, #3
 80014fe:	e634      	b.n	800116a <__aeabi_fsub+0xf6>
 8001500:	2301      	movs	r3, #1
 8001502:	08cf      	lsrs	r7, r1, #3
 8001504:	e631      	b.n	800116a <__aeabi_fsub+0xf6>
 8001506:	2280      	movs	r2, #128	@ 0x80
 8001508:	000b      	movs	r3, r1
 800150a:	04d2      	lsls	r2, r2, #19
 800150c:	2001      	movs	r0, #1
 800150e:	4013      	ands	r3, r2
 8001510:	4211      	tst	r1, r2
 8001512:	d000      	beq.n	8001516 <__aeabi_fsub+0x4a2>
 8001514:	e6ae      	b.n	8001274 <__aeabi_fsub+0x200>
 8001516:	08cf      	lsrs	r7, r1, #3
 8001518:	e627      	b.n	800116a <__aeabi_fsub+0xf6>
 800151a:	2b00      	cmp	r3, #0
 800151c:	d100      	bne.n	8001520 <__aeabi_fsub+0x4ac>
 800151e:	e75f      	b.n	80013e0 <__aeabi_fsub+0x36c>
 8001520:	1b56      	subs	r6, r2, r5
 8001522:	2d00      	cmp	r5, #0
 8001524:	d101      	bne.n	800152a <__aeabi_fsub+0x4b6>
 8001526:	0033      	movs	r3, r6
 8001528:	e6e7      	b.n	80012fa <__aeabi_fsub+0x286>
 800152a:	2380      	movs	r3, #128	@ 0x80
 800152c:	4660      	mov	r0, ip
 800152e:	04db      	lsls	r3, r3, #19
 8001530:	4318      	orrs	r0, r3
 8001532:	4684      	mov	ip, r0
 8001534:	e6eb      	b.n	800130e <__aeabi_fsub+0x29a>
 8001536:	46c0      	nop			@ (mov r8, r8)
 8001538:	7dffffff 	.word	0x7dffffff

0800153c <__aeabi_f2iz>:
 800153c:	0241      	lsls	r1, r0, #9
 800153e:	0042      	lsls	r2, r0, #1
 8001540:	0fc3      	lsrs	r3, r0, #31
 8001542:	0a49      	lsrs	r1, r1, #9
 8001544:	2000      	movs	r0, #0
 8001546:	0e12      	lsrs	r2, r2, #24
 8001548:	2a7e      	cmp	r2, #126	@ 0x7e
 800154a:	dd03      	ble.n	8001554 <__aeabi_f2iz+0x18>
 800154c:	2a9d      	cmp	r2, #157	@ 0x9d
 800154e:	dd02      	ble.n	8001556 <__aeabi_f2iz+0x1a>
 8001550:	4a09      	ldr	r2, [pc, #36]	@ (8001578 <__aeabi_f2iz+0x3c>)
 8001552:	1898      	adds	r0, r3, r2
 8001554:	4770      	bx	lr
 8001556:	2080      	movs	r0, #128	@ 0x80
 8001558:	0400      	lsls	r0, r0, #16
 800155a:	4301      	orrs	r1, r0
 800155c:	2a95      	cmp	r2, #149	@ 0x95
 800155e:	dc07      	bgt.n	8001570 <__aeabi_f2iz+0x34>
 8001560:	2096      	movs	r0, #150	@ 0x96
 8001562:	1a82      	subs	r2, r0, r2
 8001564:	40d1      	lsrs	r1, r2
 8001566:	4248      	negs	r0, r1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f3      	bne.n	8001554 <__aeabi_f2iz+0x18>
 800156c:	0008      	movs	r0, r1
 800156e:	e7f1      	b.n	8001554 <__aeabi_f2iz+0x18>
 8001570:	3a96      	subs	r2, #150	@ 0x96
 8001572:	4091      	lsls	r1, r2
 8001574:	e7f7      	b.n	8001566 <__aeabi_f2iz+0x2a>
 8001576:	46c0      	nop			@ (mov r8, r8)
 8001578:	7fffffff 	.word	0x7fffffff

0800157c <__aeabi_ui2f>:
 800157c:	b510      	push	{r4, lr}
 800157e:	1e04      	subs	r4, r0, #0
 8001580:	d00d      	beq.n	800159e <__aeabi_ui2f+0x22>
 8001582:	f000 f841 	bl	8001608 <__clzsi2>
 8001586:	239e      	movs	r3, #158	@ 0x9e
 8001588:	1a1b      	subs	r3, r3, r0
 800158a:	2b96      	cmp	r3, #150	@ 0x96
 800158c:	dc0c      	bgt.n	80015a8 <__aeabi_ui2f+0x2c>
 800158e:	2808      	cmp	r0, #8
 8001590:	d034      	beq.n	80015fc <__aeabi_ui2f+0x80>
 8001592:	3808      	subs	r0, #8
 8001594:	4084      	lsls	r4, r0
 8001596:	0264      	lsls	r4, r4, #9
 8001598:	0a64      	lsrs	r4, r4, #9
 800159a:	b2d8      	uxtb	r0, r3
 800159c:	e001      	b.n	80015a2 <__aeabi_ui2f+0x26>
 800159e:	2000      	movs	r0, #0
 80015a0:	2400      	movs	r4, #0
 80015a2:	05c0      	lsls	r0, r0, #23
 80015a4:	4320      	orrs	r0, r4
 80015a6:	bd10      	pop	{r4, pc}
 80015a8:	2b99      	cmp	r3, #153	@ 0x99
 80015aa:	dc13      	bgt.n	80015d4 <__aeabi_ui2f+0x58>
 80015ac:	1f42      	subs	r2, r0, #5
 80015ae:	4094      	lsls	r4, r2
 80015b0:	4a14      	ldr	r2, [pc, #80]	@ (8001604 <__aeabi_ui2f+0x88>)
 80015b2:	4022      	ands	r2, r4
 80015b4:	0761      	lsls	r1, r4, #29
 80015b6:	d01c      	beq.n	80015f2 <__aeabi_ui2f+0x76>
 80015b8:	210f      	movs	r1, #15
 80015ba:	4021      	ands	r1, r4
 80015bc:	2904      	cmp	r1, #4
 80015be:	d018      	beq.n	80015f2 <__aeabi_ui2f+0x76>
 80015c0:	3204      	adds	r2, #4
 80015c2:	08d4      	lsrs	r4, r2, #3
 80015c4:	0152      	lsls	r2, r2, #5
 80015c6:	d515      	bpl.n	80015f4 <__aeabi_ui2f+0x78>
 80015c8:	239f      	movs	r3, #159	@ 0x9f
 80015ca:	0264      	lsls	r4, r4, #9
 80015cc:	1a18      	subs	r0, r3, r0
 80015ce:	0a64      	lsrs	r4, r4, #9
 80015d0:	b2c0      	uxtb	r0, r0
 80015d2:	e7e6      	b.n	80015a2 <__aeabi_ui2f+0x26>
 80015d4:	0002      	movs	r2, r0
 80015d6:	0021      	movs	r1, r4
 80015d8:	321b      	adds	r2, #27
 80015da:	4091      	lsls	r1, r2
 80015dc:	000a      	movs	r2, r1
 80015de:	1e51      	subs	r1, r2, #1
 80015e0:	418a      	sbcs	r2, r1
 80015e2:	2105      	movs	r1, #5
 80015e4:	1a09      	subs	r1, r1, r0
 80015e6:	40cc      	lsrs	r4, r1
 80015e8:	4314      	orrs	r4, r2
 80015ea:	4a06      	ldr	r2, [pc, #24]	@ (8001604 <__aeabi_ui2f+0x88>)
 80015ec:	4022      	ands	r2, r4
 80015ee:	0761      	lsls	r1, r4, #29
 80015f0:	d1e2      	bne.n	80015b8 <__aeabi_ui2f+0x3c>
 80015f2:	08d4      	lsrs	r4, r2, #3
 80015f4:	0264      	lsls	r4, r4, #9
 80015f6:	0a64      	lsrs	r4, r4, #9
 80015f8:	b2d8      	uxtb	r0, r3
 80015fa:	e7d2      	b.n	80015a2 <__aeabi_ui2f+0x26>
 80015fc:	0264      	lsls	r4, r4, #9
 80015fe:	0a64      	lsrs	r4, r4, #9
 8001600:	308e      	adds	r0, #142	@ 0x8e
 8001602:	e7ce      	b.n	80015a2 <__aeabi_ui2f+0x26>
 8001604:	fbffffff 	.word	0xfbffffff

08001608 <__clzsi2>:
 8001608:	211c      	movs	r1, #28
 800160a:	2301      	movs	r3, #1
 800160c:	041b      	lsls	r3, r3, #16
 800160e:	4298      	cmp	r0, r3
 8001610:	d301      	bcc.n	8001616 <__clzsi2+0xe>
 8001612:	0c00      	lsrs	r0, r0, #16
 8001614:	3910      	subs	r1, #16
 8001616:	0a1b      	lsrs	r3, r3, #8
 8001618:	4298      	cmp	r0, r3
 800161a:	d301      	bcc.n	8001620 <__clzsi2+0x18>
 800161c:	0a00      	lsrs	r0, r0, #8
 800161e:	3908      	subs	r1, #8
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	4298      	cmp	r0, r3
 8001624:	d301      	bcc.n	800162a <__clzsi2+0x22>
 8001626:	0900      	lsrs	r0, r0, #4
 8001628:	3904      	subs	r1, #4
 800162a:	a202      	add	r2, pc, #8	@ (adr r2, 8001634 <__clzsi2+0x2c>)
 800162c:	5c10      	ldrb	r0, [r2, r0]
 800162e:	1840      	adds	r0, r0, r1
 8001630:	4770      	bx	lr
 8001632:	46c0      	nop			@ (mov r8, r8)
 8001634:	02020304 	.word	0x02020304
 8001638:	01010101 	.word	0x01010101
	...

08001644 <__clzdi2>:
 8001644:	b510      	push	{r4, lr}
 8001646:	2900      	cmp	r1, #0
 8001648:	d103      	bne.n	8001652 <__clzdi2+0xe>
 800164a:	f7ff ffdd 	bl	8001608 <__clzsi2>
 800164e:	3020      	adds	r0, #32
 8001650:	e002      	b.n	8001658 <__clzdi2+0x14>
 8001652:	0008      	movs	r0, r1
 8001654:	f7ff ffd8 	bl	8001608 <__clzsi2>
 8001658:	bd10      	pop	{r4, pc}
 800165a:	46c0      	nop			@ (mov r8, r8)

0800165c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001660:	f000 fbb0 	bl	8001dc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001664:	f000 f828 	bl	80016b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001668:	f000 f97a 	bl	8001960 <MX_GPIO_Init>
  MX_TIM3_Init();
 800166c:	f000 f87c 	bl	8001768 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001670:	f000 f8da 	bl	8001828 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001674:	f000 f926 	bl	80018c4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  led_controller_init(GPIOB);
 8001678:	4b0c      	ldr	r3, [pc, #48]	@ (80016ac <main+0x50>)
 800167a:	0018      	movs	r0, r3
 800167c:	f006 fb3a 	bl	8007cf4 <led_controller_init>
  fan_controller_init(&htim3);
 8001680:	4b0b      	ldr	r3, [pc, #44]	@ (80016b0 <main+0x54>)
 8001682:	0018      	movs	r0, r3
 8001684:	f004 ffa2 	bl	80065cc <fan_controller_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  led_process();
 8001688:	f006 fb1a 	bl	8007cc0 <led_process>
	  static uint32_t last_read_tobufi = 0;
	  if(HAL_GetTick() - last_read_tobufi > 100)
 800168c:	f000 fc16 	bl	8001ebc <HAL_GetTick>
 8001690:	0002      	movs	r2, r0
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <main+0x58>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	2b64      	cmp	r3, #100	@ 0x64
 800169a:	d9f5      	bls.n	8001688 <main+0x2c>
	  {
		  fan_controller_process();
 800169c:	f004 ffac 	bl	80065f8 <fan_controller_process>
		  last_read_tobufi = HAL_GetTick();
 80016a0:	f000 fc0c 	bl	8001ebc <HAL_GetTick>
 80016a4:	0002      	movs	r2, r0
 80016a6:	4b03      	ldr	r3, [pc, #12]	@ (80016b4 <main+0x58>)
 80016a8:	601a      	str	r2, [r3, #0]
  {
 80016aa:	e7ed      	b.n	8001688 <main+0x2c>
 80016ac:	50000400 	.word	0x50000400
 80016b0:	2000002c 	.word	0x2000002c
 80016b4:	200001a0 	.word	0x200001a0

080016b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b095      	sub	sp, #84	@ 0x54
 80016bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016be:	2414      	movs	r4, #20
 80016c0:	193b      	adds	r3, r7, r4
 80016c2:	0018      	movs	r0, r3
 80016c4:	233c      	movs	r3, #60	@ 0x3c
 80016c6:	001a      	movs	r2, r3
 80016c8:	2100      	movs	r1, #0
 80016ca:	f007 fe8b 	bl	80093e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	0018      	movs	r0, r3
 80016d2:	2310      	movs	r3, #16
 80016d4:	001a      	movs	r2, r3
 80016d6:	2100      	movs	r1, #0
 80016d8:	f007 fe84 	bl	80093e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	0018      	movs	r0, r3
 80016e2:	f000 ff3b 	bl	800255c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e6:	193b      	adds	r3, r7, r4
 80016e8:	2201      	movs	r2, #1
 80016ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ec:	193b      	adds	r3, r7, r4
 80016ee:	2280      	movs	r2, #128	@ 0x80
 80016f0:	0252      	lsls	r2, r2, #9
 80016f2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f4:	0021      	movs	r1, r4
 80016f6:	187b      	adds	r3, r7, r1
 80016f8:	2202      	movs	r2, #2
 80016fa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016fc:	187b      	adds	r3, r7, r1
 80016fe:	2203      	movs	r2, #3
 8001700:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001702:	187b      	adds	r3, r7, r1
 8001704:	2210      	movs	r2, #16
 8001706:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001708:	187b      	adds	r3, r7, r1
 800170a:	2210      	movs	r2, #16
 800170c:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800170e:	187b      	adds	r3, r7, r1
 8001710:	2280      	movs	r2, #128	@ 0x80
 8001712:	0292      	lsls	r2, r2, #10
 8001714:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2280      	movs	r2, #128	@ 0x80
 800171a:	0492      	lsls	r2, r2, #18
 800171c:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV3;
 800171e:	187b      	adds	r3, r7, r1
 8001720:	2280      	movs	r2, #128	@ 0x80
 8001722:	05d2      	lsls	r2, r2, #23
 8001724:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001726:	187b      	adds	r3, r7, r1
 8001728:	0018      	movs	r0, r3
 800172a:	f000 ff63 	bl	80025f4 <HAL_RCC_OscConfig>
 800172e:	1e03      	subs	r3, r0, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001732:	f000 f967 	bl	8001a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	2202      	movs	r2, #2
 8001740:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	2200      	movs	r2, #0
 800174c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2102      	movs	r1, #2
 8001752:	0018      	movs	r0, r3
 8001754:	f001 faae 	bl	8002cb4 <HAL_RCC_ClockConfig>
 8001758:	1e03      	subs	r3, r0, #0
 800175a:	d001      	beq.n	8001760 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800175c:	f000 f952 	bl	8001a04 <Error_Handler>
  }
}
 8001760:	46c0      	nop			@ (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	b015      	add	sp, #84	@ 0x54
 8001766:	bd90      	pop	{r4, r7, pc}

08001768 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	@ 0x28
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176e:	231c      	movs	r3, #28
 8001770:	18fb      	adds	r3, r7, r3
 8001772:	0018      	movs	r0, r3
 8001774:	230c      	movs	r3, #12
 8001776:	001a      	movs	r2, r3
 8001778:	2100      	movs	r1, #0
 800177a:	f007 fe33 	bl	80093e4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800177e:	003b      	movs	r3, r7
 8001780:	0018      	movs	r0, r3
 8001782:	231c      	movs	r3, #28
 8001784:	001a      	movs	r2, r3
 8001786:	2100      	movs	r1, #0
 8001788:	f007 fe2c 	bl	80093e4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800178c:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <MX_TIM3_Init+0xb8>)
 800178e:	4a25      	ldr	r2, [pc, #148]	@ (8001824 <MX_TIM3_Init+0xbc>)
 8001790:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001792:	4b23      	ldr	r3, [pc, #140]	@ (8001820 <MX_TIM3_Init+0xb8>)
 8001794:	223f      	movs	r2, #63	@ 0x3f
 8001796:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <MX_TIM3_Init+0xb8>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800179e:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <MX_TIM3_Init+0xb8>)
 80017a0:	2264      	movs	r2, #100	@ 0x64
 80017a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <MX_TIM3_Init+0xb8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001820 <MX_TIM3_Init+0xb8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <MX_TIM3_Init+0xb8>)
 80017b2:	0018      	movs	r0, r3
 80017b4:	f001 fe84 	bl	80034c0 <HAL_TIM_PWM_Init>
 80017b8:	1e03      	subs	r3, r0, #0
 80017ba:	d001      	beq.n	80017c0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017bc:	f000 f922 	bl	8001a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c0:	211c      	movs	r1, #28
 80017c2:	187b      	adds	r3, r7, r1
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c8:	187b      	adds	r3, r7, r1
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017ce:	187a      	adds	r2, r7, r1
 80017d0:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <MX_TIM3_Init+0xb8>)
 80017d2:	0011      	movs	r1, r2
 80017d4:	0018      	movs	r0, r3
 80017d6:	f002 fc3b 	bl	8004050 <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	1e03      	subs	r3, r0, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80017de:	f000 f911 	bl	8001a04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e2:	003b      	movs	r3, r7
 80017e4:	2260      	movs	r2, #96	@ 0x60
 80017e6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80017e8:	003b      	movs	r3, r7
 80017ea:	2200      	movs	r2, #0
 80017ec:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ee:	003b      	movs	r3, r7
 80017f0:	2200      	movs	r2, #0
 80017f2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f4:	003b      	movs	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017fa:	0039      	movs	r1, r7
 80017fc:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <MX_TIM3_Init+0xb8>)
 80017fe:	220c      	movs	r2, #12
 8001800:	0018      	movs	r0, r3
 8001802:	f001 ffa5 	bl	8003750 <HAL_TIM_PWM_ConfigChannel>
 8001806:	1e03      	subs	r3, r0, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800180a:	f000 f8fb 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800180e:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <MX_TIM3_Init+0xb8>)
 8001810:	0018      	movs	r0, r3
 8001812:	f000 f943 	bl	8001a9c <HAL_TIM_MspPostInit>

}
 8001816:	46c0      	nop			@ (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	b00a      	add	sp, #40	@ 0x28
 800181c:	bd80      	pop	{r7, pc}
 800181e:	46c0      	nop			@ (mov r8, r8)
 8001820:	2000002c 	.word	0x2000002c
 8001824:	40000400 	.word	0x40000400

08001828 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800182c:	4b23      	ldr	r3, [pc, #140]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 800182e:	4a24      	ldr	r2, [pc, #144]	@ (80018c0 <MX_USART2_UART_Init+0x98>)
 8001830:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001832:	4b22      	ldr	r3, [pc, #136]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001834:	22e1      	movs	r2, #225	@ 0xe1
 8001836:	0252      	lsls	r2, r2, #9
 8001838:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800183a:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 800183c:	2200      	movs	r2, #0
 800183e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001840:	4b1e      	ldr	r3, [pc, #120]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001842:	2200      	movs	r2, #0
 8001844:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800184c:	4b1b      	ldr	r3, [pc, #108]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 800184e:	220c      	movs	r2, #12
 8001850:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001852:	4b1a      	ldr	r3, [pc, #104]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001858:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 800185a:	2200      	movs	r2, #0
 800185c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800185e:	4b17      	ldr	r3, [pc, #92]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001860:	2200      	movs	r2, #0
 8001862:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001864:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186a:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 800186c:	2200      	movs	r2, #0
 800186e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001872:	0018      	movs	r0, r3
 8001874:	f002 fc62 	bl	800413c <HAL_UART_Init>
 8001878:	1e03      	subs	r3, r0, #0
 800187a:	d001      	beq.n	8001880 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800187c:	f000 f8c2 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001880:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001882:	2100      	movs	r1, #0
 8001884:	0018      	movs	r0, r3
 8001886:	f004 fcc7 	bl	8006218 <HAL_UARTEx_SetTxFifoThreshold>
 800188a:	1e03      	subs	r3, r0, #0
 800188c:	d001      	beq.n	8001892 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800188e:	f000 f8b9 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001892:	4b0a      	ldr	r3, [pc, #40]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 8001894:	2100      	movs	r1, #0
 8001896:	0018      	movs	r0, r3
 8001898:	f004 fcfe 	bl	8006298 <HAL_UARTEx_SetRxFifoThreshold>
 800189c:	1e03      	subs	r3, r0, #0
 800189e:	d001      	beq.n	80018a4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80018a0:	f000 f8b0 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018a4:	4b05      	ldr	r3, [pc, #20]	@ (80018bc <MX_USART2_UART_Init+0x94>)
 80018a6:	0018      	movs	r0, r3
 80018a8:	f004 fc7c 	bl	80061a4 <HAL_UARTEx_DisableFifoMode>
 80018ac:	1e03      	subs	r3, r0, #0
 80018ae:	d001      	beq.n	80018b4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80018b0:	f000 f8a8 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018b4:	46c0      	nop			@ (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	46c0      	nop			@ (mov r8, r8)
 80018bc:	20000078 	.word	0x20000078
 80018c0:	40004400 	.word	0x40004400

080018c4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018c8:	4b23      	ldr	r3, [pc, #140]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 80018ca:	4a24      	ldr	r2, [pc, #144]	@ (800195c <MX_USART3_UART_Init+0x98>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018ce:	4b22      	ldr	r3, [pc, #136]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 80018d0:	22e1      	movs	r2, #225	@ 0xe1
 80018d2:	0252      	lsls	r2, r2, #9
 80018d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b20      	ldr	r3, [pc, #128]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b18      	ldr	r3, [pc, #96]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018fa:	4b17      	ldr	r3, [pc, #92]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001900:	4b15      	ldr	r3, [pc, #84]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001906:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 8001908:	2200      	movs	r2, #0
 800190a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800190c:	4b12      	ldr	r3, [pc, #72]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 800190e:	0018      	movs	r0, r3
 8001910:	f002 fc14 	bl	800413c <HAL_UART_Init>
 8001914:	1e03      	subs	r3, r0, #0
 8001916:	d001      	beq.n	800191c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001918:	f000 f874 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800191c:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 800191e:	2100      	movs	r1, #0
 8001920:	0018      	movs	r0, r3
 8001922:	f004 fc79 	bl	8006218 <HAL_UARTEx_SetTxFifoThreshold>
 8001926:	1e03      	subs	r3, r0, #0
 8001928:	d001      	beq.n	800192e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800192a:	f000 f86b 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 8001930:	2100      	movs	r1, #0
 8001932:	0018      	movs	r0, r3
 8001934:	f004 fcb0 	bl	8006298 <HAL_UARTEx_SetRxFifoThreshold>
 8001938:	1e03      	subs	r3, r0, #0
 800193a:	d001      	beq.n	8001940 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800193c:	f000 f862 	bl	8001a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <MX_USART3_UART_Init+0x94>)
 8001942:	0018      	movs	r0, r3
 8001944:	f004 fc2e 	bl	80061a4 <HAL_UARTEx_DisableFifoMode>
 8001948:	1e03      	subs	r3, r0, #0
 800194a:	d001      	beq.n	8001950 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800194c:	f000 f85a 	bl	8001a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001950:	46c0      	nop			@ (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	2000010c 	.word	0x2000010c
 800195c:	40004800 	.word	0x40004800

08001960 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001960:	b590      	push	{r4, r7, lr}
 8001962:	b089      	sub	sp, #36	@ 0x24
 8001964:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001966:	240c      	movs	r4, #12
 8001968:	193b      	adds	r3, r7, r4
 800196a:	0018      	movs	r0, r3
 800196c:	2314      	movs	r3, #20
 800196e:	001a      	movs	r2, r3
 8001970:	2100      	movs	r1, #0
 8001972:	f007 fd37 	bl	80093e4 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001976:	4b20      	ldr	r3, [pc, #128]	@ (80019f8 <MX_GPIO_Init+0x98>)
 8001978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800197a:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <MX_GPIO_Init+0x98>)
 800197c:	2120      	movs	r1, #32
 800197e:	430a      	orrs	r2, r1
 8001980:	635a      	str	r2, [r3, #52]	@ 0x34
 8001982:	4b1d      	ldr	r3, [pc, #116]	@ (80019f8 <MX_GPIO_Init+0x98>)
 8001984:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001986:	2220      	movs	r2, #32
 8001988:	4013      	ands	r3, r2
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800198e:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <MX_GPIO_Init+0x98>)
 8001990:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001992:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <MX_GPIO_Init+0x98>)
 8001994:	2101      	movs	r1, #1
 8001996:	430a      	orrs	r2, r1
 8001998:	635a      	str	r2, [r3, #52]	@ 0x34
 800199a:	4b17      	ldr	r3, [pc, #92]	@ (80019f8 <MX_GPIO_Init+0x98>)
 800199c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199e:	2201      	movs	r2, #1
 80019a0:	4013      	ands	r3, r2
 80019a2:	607b      	str	r3, [r7, #4]
 80019a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019a6:	4b14      	ldr	r3, [pc, #80]	@ (80019f8 <MX_GPIO_Init+0x98>)
 80019a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019aa:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <MX_GPIO_Init+0x98>)
 80019ac:	2102      	movs	r1, #2
 80019ae:	430a      	orrs	r2, r1
 80019b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_GPIO_Init+0x98>)
 80019b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019b6:	2202      	movs	r2, #2
 80019b8:	4013      	ands	r3, r2
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_REAR_GEAR_RED_Pin|LED_REAR_GEAR_GREEN_Pin|LED_FRONT_GEAR_RED_Pin|LED_FRONT_GEAR_GREEN_Pin, GPIO_PIN_RESET);
 80019be:	490f      	ldr	r1, [pc, #60]	@ (80019fc <MX_GPIO_Init+0x9c>)
 80019c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <MX_GPIO_Init+0xa0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	0018      	movs	r0, r3
 80019c6:	f000 fdab 	bl	8002520 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_REAR_GEAR_RED_Pin LED_REAR_GEAR_GREEN_Pin LED_FRONT_GEAR_RED_Pin LED_FRONT_GEAR_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_REAR_GEAR_RED_Pin|LED_REAR_GEAR_GREEN_Pin|LED_FRONT_GEAR_RED_Pin|LED_FRONT_GEAR_GREEN_Pin;
 80019ca:	0021      	movs	r1, r4
 80019cc:	187b      	adds	r3, r7, r1
 80019ce:	4a0b      	ldr	r2, [pc, #44]	@ (80019fc <MX_GPIO_Init+0x9c>)
 80019d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d2:	187b      	adds	r3, r7, r1
 80019d4:	2201      	movs	r2, #1
 80019d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	2202      	movs	r2, #2
 80019dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	187b      	adds	r3, r7, r1
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	187b      	adds	r3, r7, r1
 80019e6:	4a06      	ldr	r2, [pc, #24]	@ (8001a00 <MX_GPIO_Init+0xa0>)
 80019e8:	0019      	movs	r1, r3
 80019ea:	0010      	movs	r0, r2
 80019ec:	f000 fc2c 	bl	8002248 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80019f0:	46c0      	nop			@ (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b009      	add	sp, #36	@ 0x24
 80019f6:	bd90      	pop	{r4, r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	00001c04 	.word	0x00001c04
 8001a00:	50000400 	.word	0x50000400

08001a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a08:	b672      	cpsid	i
}
 8001a0a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a0c:	46c0      	nop			@ (mov r8, r8)
 8001a0e:	e7fd      	b.n	8001a0c <Error_Handler+0x8>

08001a10 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a1a:	4b10      	ldr	r3, [pc, #64]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a26:	2201      	movs	r2, #1
 8001a28:	4013      	ands	r3, r2
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a32:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a34:	2180      	movs	r1, #128	@ 0x80
 8001a36:	0549      	lsls	r1, r1, #21
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a3c:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <HAL_MspInit+0x4c>)
 8001a3e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a40:	2380      	movs	r3, #128	@ 0x80
 8001a42:	055b      	lsls	r3, r3, #21
 8001a44:	4013      	ands	r3, r2
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001a4a:	23c0      	movs	r3, #192	@ 0xc0
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 fa3e 	bl	8001ed0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a54:	46c0      	nop			@ (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	b002      	add	sp, #8
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a09      	ldr	r2, [pc, #36]	@ (8001a94 <HAL_TIM_PWM_MspInit+0x34>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d10b      	bne.n	8001a8a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a72:	4b09      	ldr	r3, [pc, #36]	@ (8001a98 <HAL_TIM_PWM_MspInit+0x38>)
 8001a74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a76:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <HAL_TIM_PWM_MspInit+0x38>)
 8001a78:	2102      	movs	r1, #2
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_TIM_PWM_MspInit+0x38>)
 8001a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a82:	2202      	movs	r2, #2
 8001a84:	4013      	ands	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001a8a:	46c0      	nop			@ (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	40000400 	.word	0x40000400
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b089      	sub	sp, #36	@ 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	240c      	movs	r4, #12
 8001aa6:	193b      	adds	r3, r7, r4
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	2314      	movs	r3, #20
 8001aac:	001a      	movs	r2, r3
 8001aae:	2100      	movs	r1, #0
 8001ab0:	f007 fc98 	bl	80093e4 <memset>
  if(htim->Instance==TIM3)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a14      	ldr	r2, [pc, #80]	@ (8001b0c <HAL_TIM_MspPostInit+0x70>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d121      	bne.n	8001b02 <HAL_TIM_MspPostInit+0x66>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abe:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <HAL_TIM_MspPostInit+0x74>)
 8001ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ac2:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <HAL_TIM_MspPostInit+0x74>)
 8001ac4:	2102      	movs	r1, #2
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	635a      	str	r2, [r3, #52]	@ 0x34
 8001aca:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_TIM_MspPostInit+0x74>)
 8001acc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ace:	2202      	movs	r2, #2
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = PWM_FAN_Pin;
 8001ad6:	0021      	movs	r1, r4
 8001ad8:	187b      	adds	r3, r7, r1
 8001ada:	2202      	movs	r2, #2
 8001adc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	187b      	adds	r3, r7, r1
 8001ae0:	2202      	movs	r2, #2
 8001ae2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	187b      	adds	r3, r7, r1
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	187b      	adds	r3, r7, r1
 8001aec:	2200      	movs	r2, #0
 8001aee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001af0:	187b      	adds	r3, r7, r1
 8001af2:	2201      	movs	r2, #1
 8001af4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_FAN_GPIO_Port, &GPIO_InitStruct);
 8001af6:	187b      	adds	r3, r7, r1
 8001af8:	4a06      	ldr	r2, [pc, #24]	@ (8001b14 <HAL_TIM_MspPostInit+0x78>)
 8001afa:	0019      	movs	r1, r3
 8001afc:	0010      	movs	r0, r2
 8001afe:	f000 fba3 	bl	8002248 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b02:	46c0      	nop			@ (mov r8, r8)
 8001b04:	46bd      	mov	sp, r7
 8001b06:	b009      	add	sp, #36	@ 0x24
 8001b08:	bd90      	pop	{r4, r7, pc}
 8001b0a:	46c0      	nop			@ (mov r8, r8)
 8001b0c:	40000400 	.word	0x40000400
 8001b10:	40021000 	.word	0x40021000
 8001b14:	50000400 	.word	0x50000400

08001b18 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b0a1      	sub	sp, #132	@ 0x84
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	236c      	movs	r3, #108	@ 0x6c
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	0018      	movs	r0, r3
 8001b26:	2314      	movs	r3, #20
 8001b28:	001a      	movs	r2, r3
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	f007 fc5a 	bl	80093e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b30:	241c      	movs	r4, #28
 8001b32:	193b      	adds	r3, r7, r4
 8001b34:	0018      	movs	r0, r3
 8001b36:	2350      	movs	r3, #80	@ 0x50
 8001b38:	001a      	movs	r2, r3
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	f007 fc52 	bl	80093e4 <memset>
  if(huart->Instance==USART2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6a      	ldr	r2, [pc, #424]	@ (8001cf0 <HAL_UART_MspInit+0x1d8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d15e      	bne.n	8001c08 <HAL_UART_MspInit+0xf0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b50:	193b      	adds	r3, r7, r4
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b56:	193b      	adds	r3, r7, r4
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f001 fa55 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	1e03      	subs	r3, r0, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b62:	f7ff ff4f 	bl	8001a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b66:	4b63      	ldr	r3, [pc, #396]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001b68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b6a:	4b62      	ldr	r3, [pc, #392]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001b6c:	2180      	movs	r1, #128	@ 0x80
 8001b6e:	0289      	lsls	r1, r1, #10
 8001b70:	430a      	orrs	r2, r1
 8001b72:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b74:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001b76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b78:	2380      	movs	r3, #128	@ 0x80
 8001b7a:	029b      	lsls	r3, r3, #10
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
 8001b80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b82:	4b5c      	ldr	r3, [pc, #368]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b86:	4b5b      	ldr	r3, [pc, #364]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001b88:	2101      	movs	r1, #1
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b8e:	4b59      	ldr	r3, [pc, #356]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001b90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b92:	2201      	movs	r2, #1
 8001b94:	4013      	ands	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b9a:	246c      	movs	r4, #108	@ 0x6c
 8001b9c:	193b      	adds	r3, r7, r4
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	193b      	adds	r3, r7, r4
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	193b      	adds	r3, r7, r4
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bae:	193b      	adds	r3, r7, r4
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001bb4:	193b      	adds	r3, r7, r4
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	193a      	adds	r2, r7, r4
 8001bbc:	23a0      	movs	r3, #160	@ 0xa0
 8001bbe:	05db      	lsls	r3, r3, #23
 8001bc0:	0011      	movs	r1, r2
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	f000 fb40 	bl	8002248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bc8:	0021      	movs	r1, r4
 8001bca:	187b      	adds	r3, r7, r1
 8001bcc:	2208      	movs	r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	187b      	adds	r3, r7, r1
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd6:	187b      	adds	r3, r7, r1
 8001bd8:	2201      	movs	r2, #1
 8001bda:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2200      	movs	r2, #0
 8001be0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2201      	movs	r2, #1
 8001be6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	187a      	adds	r2, r7, r1
 8001bea:	23a0      	movs	r3, #160	@ 0xa0
 8001bec:	05db      	lsls	r3, r3, #23
 8001bee:	0011      	movs	r1, r2
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f000 fb29 	bl	8002248 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_LPUART2_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	201c      	movs	r0, #28
 8001bfc:	f000 fa2a 	bl	8002054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_LPUART2_IRQn);
 8001c00:	201c      	movs	r0, #28
 8001c02:	f000 fa3c 	bl	800207e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c06:	e06e      	b.n	8001ce6 <HAL_UART_MspInit+0x1ce>
  else if(huart->Instance==USART3)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8001cf8 <HAL_UART_MspInit+0x1e0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d169      	bne.n	8001ce6 <HAL_UART_MspInit+0x1ce>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c12:	211c      	movs	r1, #28
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	2204      	movs	r2, #4
 8001c18:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	0018      	movs	r0, r3
 8001c24:	f001 f9f0 	bl	8003008 <HAL_RCCEx_PeriphCLKConfig>
 8001c28:	1e03      	subs	r3, r0, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_UART_MspInit+0x118>
      Error_Handler();
 8001c2c:	f7ff feea 	bl	8001a04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c30:	4b30      	ldr	r3, [pc, #192]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001c32:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c34:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001c36:	2180      	movs	r1, #128	@ 0x80
 8001c38:	02c9      	lsls	r1, r1, #11
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001c40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c42:	2380      	movs	r3, #128	@ 0x80
 8001c44:	02db      	lsls	r3, r3, #11
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4c:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001c4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c50:	4b28      	ldr	r3, [pc, #160]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001c52:	2101      	movs	r1, #1
 8001c54:	430a      	orrs	r2, r1
 8001c56:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c58:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4013      	ands	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c64:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001c66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c68:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001c6a:	2102      	movs	r1, #2
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c70:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <HAL_UART_MspInit+0x1dc>)
 8001c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c74:	2202      	movs	r2, #2
 8001c76:	4013      	ands	r3, r2
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c7c:	246c      	movs	r4, #108	@ 0x6c
 8001c7e:	193b      	adds	r3, r7, r4
 8001c80:	2220      	movs	r2, #32
 8001c82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	193b      	adds	r3, r7, r4
 8001c86:	2202      	movs	r2, #2
 8001c88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	193b      	adds	r3, r7, r4
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	193b      	adds	r3, r7, r4
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001c96:	193b      	adds	r3, r7, r4
 8001c98:	2204      	movs	r2, #4
 8001c9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	193a      	adds	r2, r7, r4
 8001c9e:	23a0      	movs	r3, #160	@ 0xa0
 8001ca0:	05db      	lsls	r3, r3, #23
 8001ca2:	0011      	movs	r1, r2
 8001ca4:	0018      	movs	r0, r3
 8001ca6:	f000 facf 	bl	8002248 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001caa:	0021      	movs	r1, r4
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cb8:	187b      	adds	r3, r7, r1
 8001cba:	2201      	movs	r2, #1
 8001cbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	187b      	adds	r3, r7, r1
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001cc4:	187b      	adds	r3, r7, r1
 8001cc6:	2204      	movs	r2, #4
 8001cc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	@ (8001cfc <HAL_UART_MspInit+0x1e4>)
 8001cce:	0019      	movs	r1, r3
 8001cd0:	0010      	movs	r0, r2
 8001cd2:	f000 fab9 	bl	8002248 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_5_6_LPUART1_IRQn, 0, 0);
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	2100      	movs	r1, #0
 8001cda:	201d      	movs	r0, #29
 8001cdc:	f000 f9ba 	bl	8002054 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_5_6_LPUART1_IRQn);
 8001ce0:	201d      	movs	r0, #29
 8001ce2:	f000 f9cc 	bl	800207e <HAL_NVIC_EnableIRQ>
}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b021      	add	sp, #132	@ 0x84
 8001cec:	bd90      	pop	{r4, r7, pc}
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	40004400 	.word	0x40004400
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	40004800 	.word	0x40004800
 8001cfc:	50000400 	.word	0x50000400

08001d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d04:	46c0      	nop			@ (mov r8, r8)
 8001d06:	e7fd      	b.n	8001d04 <NMI_Handler+0x4>

08001d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0c:	46c0      	nop			@ (mov r8, r8)
 8001d0e:	e7fd      	b.n	8001d0c <HardFault_Handler+0x4>

08001d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d14:	46c0      	nop			@ (mov r8, r8)
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1e:	46c0      	nop			@ (mov r8, r8)
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}

08001d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d28:	f000 f8b6 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	46c0      	nop			@ (mov r8, r8)
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <USART2_LPUART2_IRQHandler>:

/**
  * @brief This function handles USART2 + LPUART2 Interrupt.
  */
void USART2_LPUART2_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_LPUART2_IRQn 0 */

  /* USER CODE END USART2_LPUART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d38:	4b03      	ldr	r3, [pc, #12]	@ (8001d48 <USART2_LPUART2_IRQHandler+0x14>)
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	f002 faba 	bl	80042b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_LPUART2_IRQn 1 */

  /* USER CODE END USART2_LPUART2_IRQn 1 */
}
 8001d40:	46c0      	nop			@ (mov r8, r8)
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	20000078 	.word	0x20000078

08001d4c <USART3_4_5_6_LPUART1_IRQHandler>:

/**
  * @brief This function handles USART3, USART4, USART5, USART6, LPUART1 globlal Interrupts (combined with EXTI 28).
  */
void USART3_4_5_6_LPUART1_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 0 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d50:	4b03      	ldr	r3, [pc, #12]	@ (8001d60 <USART3_4_5_6_LPUART1_IRQHandler+0x14>)
 8001d52:	0018      	movs	r0, r3
 8001d54:	f002 faae 	bl	80042b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_5_6_LPUART1_IRQn 1 */

  /* USER CODE END USART3_4_5_6_LPUART1_IRQn 1 */
}
 8001d58:	46c0      	nop			@ (mov r8, r8)
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	46c0      	nop			@ (mov r8, r8)
 8001d60:	2000010c 	.word	0x2000010c

08001d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d68:	46c0      	nop			@ (mov r8, r8)
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d70:	480d      	ldr	r0, [pc, #52]	@ (8001da8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d72:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d74:	f7ff fff6 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d78:	480c      	ldr	r0, [pc, #48]	@ (8001dac <LoopForever+0x6>)
  ldr r1, =_edata
 8001d7a:	490d      	ldr	r1, [pc, #52]	@ (8001db0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8001db4 <LoopForever+0xe>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d80:	e002      	b.n	8001d88 <LoopCopyDataInit>

08001d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d86:	3304      	adds	r3, #4

08001d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d8c:	d3f9      	bcc.n	8001d82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	@ (8001db8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d90:	4c0a      	ldr	r4, [pc, #40]	@ (8001dbc <LoopForever+0x16>)
  movs r3, #0
 8001d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d94:	e001      	b.n	8001d9a <LoopFillZerobss>

08001d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d98:	3204      	adds	r2, #4

08001d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d9c:	d3fb      	bcc.n	8001d96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d9e:	f007 fb29 	bl	80093f4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001da2:	f7ff fc5b 	bl	800165c <main>

08001da6 <LoopForever>:

LoopForever:
  b LoopForever
 8001da6:	e7fe      	b.n	8001da6 <LoopForever>
  ldr   r0, =_estack
 8001da8:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001dac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001db4:	0800ae60 	.word	0x0800ae60
  ldr r2, =_sbss
 8001db8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001dbc:	200012a0 	.word	0x200012a0

08001dc0 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dc0:	e7fe      	b.n	8001dc0 <ADC1_COMP_IRQHandler>
	...

08001dc4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	2200      	movs	r2, #0
 8001dce:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <HAL_Init+0x3c>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <HAL_Init+0x3c>)
 8001dd6:	2180      	movs	r1, #128	@ 0x80
 8001dd8:	0049      	lsls	r1, r1, #1
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dde:	2003      	movs	r0, #3
 8001de0:	f000 f810 	bl	8001e04 <HAL_InitTick>
 8001de4:	1e03      	subs	r3, r0, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001de8:	1dfb      	adds	r3, r7, #7
 8001dea:	2201      	movs	r2, #1
 8001dec:	701a      	strb	r2, [r3, #0]
 8001dee:	e001      	b.n	8001df4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001df0:	f7ff fe0e 	bl	8001a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001df4:	1dfb      	adds	r3, r7, #7
 8001df6:	781b      	ldrb	r3, [r3, #0]
}
 8001df8:	0018      	movs	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	40022000 	.word	0x40022000

08001e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001e14:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <HAL_InitTick+0x88>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d02b      	beq.n	8001e74 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <HAL_InitTick+0x8c>)
 8001e1e:	681c      	ldr	r4, [r3, #0]
 8001e20:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <HAL_InitTick+0x88>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	0019      	movs	r1, r3
 8001e26:	23fa      	movs	r3, #250	@ 0xfa
 8001e28:	0098      	lsls	r0, r3, #2
 8001e2a:	f7fe f96d 	bl	8000108 <__udivsi3>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	0019      	movs	r1, r3
 8001e32:	0020      	movs	r0, r4
 8001e34:	f7fe f968 	bl	8000108 <__udivsi3>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f000 f92f 	bl	800209e <HAL_SYSTICK_Config>
 8001e40:	1e03      	subs	r3, r0, #0
 8001e42:	d112      	bne.n	8001e6a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d80a      	bhi.n	8001e60 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	425b      	negs	r3, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	0018      	movs	r0, r3
 8001e54:	f000 f8fe 	bl	8002054 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e58:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <HAL_InitTick+0x90>)
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e00d      	b.n	8001e7c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e60:	230f      	movs	r3, #15
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	e008      	b.n	8001e7c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e6a:	230f      	movs	r3, #15
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e003      	b.n	8001e7c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e74:	230f      	movs	r3, #15
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e7c:	230f      	movs	r3, #15
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	781b      	ldrb	r3, [r3, #0]
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b005      	add	sp, #20
 8001e88:	bd90      	pop	{r4, r7, pc}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	20000000 	.word	0x20000000
 8001e94:	20000004 	.word	0x20000004

08001e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_IncTick+0x1c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_IncTick+0x20>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	18d2      	adds	r2, r2, r3
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_IncTick+0x20>)
 8001eaa:	601a      	str	r2, [r3, #0]
}
 8001eac:	46c0      	nop			@ (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	20000008 	.word	0x20000008
 8001eb8:	200001a4 	.word	0x200001a4

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b02      	ldr	r3, [pc, #8]	@ (8001ecc <HAL_GetTick+0x10>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	200001a4 	.word	0x200001a4

08001ed0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001ed8:	4b06      	ldr	r3, [pc, #24]	@ (8001ef4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a06      	ldr	r2, [pc, #24]	@ (8001ef8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	4b04      	ldr	r3, [pc, #16]	@ (8001ef4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	601a      	str	r2, [r3, #0]
}
 8001eea:	46c0      	nop			@ (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	46c0      	nop			@ (mov r8, r8)
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	fffff9ff 	.word	0xfffff9ff

08001efc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	0002      	movs	r2, r0
 8001f04:	1dfb      	adds	r3, r7, #7
 8001f06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f08:	1dfb      	adds	r3, r7, #7
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f0e:	d809      	bhi.n	8001f24 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f10:	1dfb      	adds	r3, r7, #7
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	001a      	movs	r2, r3
 8001f16:	231f      	movs	r3, #31
 8001f18:	401a      	ands	r2, r3
 8001f1a:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <__NVIC_EnableIRQ+0x30>)
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	4091      	lsls	r1, r2
 8001f20:	000a      	movs	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f24:	46c0      	nop			@ (mov r8, r8)
 8001f26:	46bd      	mov	sp, r7
 8001f28:	b002      	add	sp, #8
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	e000e100 	.word	0xe000e100

08001f30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f30:	b590      	push	{r4, r7, lr}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	0002      	movs	r2, r0
 8001f38:	6039      	str	r1, [r7, #0]
 8001f3a:	1dfb      	adds	r3, r7, #7
 8001f3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	1dfb      	adds	r3, r7, #7
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f44:	d828      	bhi.n	8001f98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f46:	4a2f      	ldr	r2, [pc, #188]	@ (8002004 <__NVIC_SetPriority+0xd4>)
 8001f48:	1dfb      	adds	r3, r7, #7
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	089b      	lsrs	r3, r3, #2
 8001f50:	33c0      	adds	r3, #192	@ 0xc0
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	589b      	ldr	r3, [r3, r2]
 8001f56:	1dfa      	adds	r2, r7, #7
 8001f58:	7812      	ldrb	r2, [r2, #0]
 8001f5a:	0011      	movs	r1, r2
 8001f5c:	2203      	movs	r2, #3
 8001f5e:	400a      	ands	r2, r1
 8001f60:	00d2      	lsls	r2, r2, #3
 8001f62:	21ff      	movs	r1, #255	@ 0xff
 8001f64:	4091      	lsls	r1, r2
 8001f66:	000a      	movs	r2, r1
 8001f68:	43d2      	mvns	r2, r2
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	019b      	lsls	r3, r3, #6
 8001f72:	22ff      	movs	r2, #255	@ 0xff
 8001f74:	401a      	ands	r2, r3
 8001f76:	1dfb      	adds	r3, r7, #7
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	4003      	ands	r3, r0
 8001f80:	00db      	lsls	r3, r3, #3
 8001f82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f84:	481f      	ldr	r0, [pc, #124]	@ (8002004 <__NVIC_SetPriority+0xd4>)
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	b25b      	sxtb	r3, r3
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	33c0      	adds	r3, #192	@ 0xc0
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f96:	e031      	b.n	8001ffc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f98:	4a1b      	ldr	r2, [pc, #108]	@ (8002008 <__NVIC_SetPriority+0xd8>)
 8001f9a:	1dfb      	adds	r3, r7, #7
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	400b      	ands	r3, r1
 8001fa4:	3b08      	subs	r3, #8
 8001fa6:	089b      	lsrs	r3, r3, #2
 8001fa8:	3306      	adds	r3, #6
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	18d3      	adds	r3, r2, r3
 8001fae:	3304      	adds	r3, #4
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	1dfa      	adds	r2, r7, #7
 8001fb4:	7812      	ldrb	r2, [r2, #0]
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	2203      	movs	r2, #3
 8001fba:	400a      	ands	r2, r1
 8001fbc:	00d2      	lsls	r2, r2, #3
 8001fbe:	21ff      	movs	r1, #255	@ 0xff
 8001fc0:	4091      	lsls	r1, r2
 8001fc2:	000a      	movs	r2, r1
 8001fc4:	43d2      	mvns	r2, r2
 8001fc6:	401a      	ands	r2, r3
 8001fc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	019b      	lsls	r3, r3, #6
 8001fce:	22ff      	movs	r2, #255	@ 0xff
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	2303      	movs	r3, #3
 8001fda:	4003      	ands	r3, r0
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fe0:	4809      	ldr	r0, [pc, #36]	@ (8002008 <__NVIC_SetPriority+0xd8>)
 8001fe2:	1dfb      	adds	r3, r7, #7
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	001c      	movs	r4, r3
 8001fe8:	230f      	movs	r3, #15
 8001fea:	4023      	ands	r3, r4
 8001fec:	3b08      	subs	r3, #8
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	3306      	adds	r3, #6
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	18c3      	adds	r3, r0, r3
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	601a      	str	r2, [r3, #0]
}
 8001ffc:	46c0      	nop			@ (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b003      	add	sp, #12
 8002002:	bd90      	pop	{r4, r7, pc}
 8002004:	e000e100 	.word	0xe000e100
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	1e5a      	subs	r2, r3, #1
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	045b      	lsls	r3, r3, #17
 800201c:	429a      	cmp	r2, r3
 800201e:	d301      	bcc.n	8002024 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002020:	2301      	movs	r3, #1
 8002022:	e010      	b.n	8002046 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002024:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <SysTick_Config+0x44>)
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	3a01      	subs	r2, #1
 800202a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202c:	2301      	movs	r3, #1
 800202e:	425b      	negs	r3, r3
 8002030:	2103      	movs	r1, #3
 8002032:	0018      	movs	r0, r3
 8002034:	f7ff ff7c 	bl	8001f30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002038:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <SysTick_Config+0x44>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203e:	4b04      	ldr	r3, [pc, #16]	@ (8002050 <SysTick_Config+0x44>)
 8002040:	2207      	movs	r2, #7
 8002042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002044:	2300      	movs	r3, #0
}
 8002046:	0018      	movs	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	b002      	add	sp, #8
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			@ (mov r8, r8)
 8002050:	e000e010 	.word	0xe000e010

08002054 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
 800205e:	210f      	movs	r1, #15
 8002060:	187b      	adds	r3, r7, r1
 8002062:	1c02      	adds	r2, r0, #0
 8002064:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	187b      	adds	r3, r7, r1
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b25b      	sxtb	r3, r3
 800206e:	0011      	movs	r1, r2
 8002070:	0018      	movs	r0, r3
 8002072:	f7ff ff5d 	bl	8001f30 <__NVIC_SetPriority>
}
 8002076:	46c0      	nop			@ (mov r8, r8)
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	0002      	movs	r2, r0
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b25b      	sxtb	r3, r3
 8002090:	0018      	movs	r0, r3
 8002092:	f7ff ff33 	bl	8001efc <__NVIC_EnableIRQ>
}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b002      	add	sp, #8
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	0018      	movs	r0, r3
 80020aa:	f7ff ffaf 	bl	800200c <SysTick_Config>
 80020ae:	0003      	movs	r3, r0
}
 80020b0:	0018      	movs	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	b002      	add	sp, #8
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e04f      	b.n	800216a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2225      	movs	r2, #37	@ 0x25
 80020ce:	5c9b      	ldrb	r3, [r3, r2]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d008      	beq.n	80020e8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2204      	movs	r2, #4
 80020da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2224      	movs	r2, #36	@ 0x24
 80020e0:	2100      	movs	r1, #0
 80020e2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e040      	b.n	800216a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	210e      	movs	r1, #14
 80020f4:	438a      	bics	r2, r1
 80020f6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002102:	491c      	ldr	r1, [pc, #112]	@ (8002174 <HAL_DMA_Abort+0xbc>)
 8002104:	400a      	ands	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2101      	movs	r1, #1
 8002114:	438a      	bics	r2, r1
 8002116:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	221c      	movs	r2, #28
 800211e:	401a      	ands	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002124:	2101      	movs	r1, #1
 8002126:	4091      	lsls	r1, r2
 8002128:	000a      	movs	r2, r1
 800212a:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002134:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00c      	beq.n	8002158 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002148:	490a      	ldr	r1, [pc, #40]	@ (8002174 <HAL_DMA_Abort+0xbc>)
 800214a:	400a      	ands	r2, r1
 800214c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002156:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2225      	movs	r2, #37	@ 0x25
 800215c:	2101      	movs	r1, #1
 800215e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2224      	movs	r2, #36	@ 0x24
 8002164:	2100      	movs	r1, #0
 8002166:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	0018      	movs	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	b002      	add	sp, #8
 8002170:	bd80      	pop	{r7, pc}
 8002172:	46c0      	nop			@ (mov r8, r8)
 8002174:	fffffeff 	.word	0xfffffeff

08002178 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002180:	210f      	movs	r1, #15
 8002182:	187b      	adds	r3, r7, r1
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2225      	movs	r2, #37	@ 0x25
 800218c:	5c9b      	ldrb	r3, [r3, r2]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d006      	beq.n	80021a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2204      	movs	r2, #4
 8002198:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800219a:	187b      	adds	r3, r7, r1
 800219c:	2201      	movs	r2, #1
 800219e:	701a      	strb	r2, [r3, #0]
 80021a0:	e048      	b.n	8002234 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	210e      	movs	r1, #14
 80021ae:	438a      	bics	r2, r1
 80021b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2101      	movs	r1, #1
 80021be:	438a      	bics	r2, r1
 80021c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021cc:	491d      	ldr	r1, [pc, #116]	@ (8002244 <HAL_DMA_Abort_IT+0xcc>)
 80021ce:	400a      	ands	r2, r1
 80021d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d6:	221c      	movs	r2, #28
 80021d8:	401a      	ands	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	2101      	movs	r1, #1
 80021e0:	4091      	lsls	r1, r2
 80021e2:	000a      	movs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80021ee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00c      	beq.n	8002212 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002202:	4910      	ldr	r1, [pc, #64]	@ (8002244 <HAL_DMA_Abort_IT+0xcc>)
 8002204:	400a      	ands	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002210:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2225      	movs	r2, #37	@ 0x25
 8002216:	2101      	movs	r1, #1
 8002218:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2224      	movs	r2, #36	@ 0x24
 800221e:	2100      	movs	r1, #0
 8002220:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002226:	2b00      	cmp	r3, #0
 8002228:	d004      	beq.n	8002234 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	0010      	movs	r0, r2
 8002232:	4798      	blx	r3
    }
  }
  return status;
 8002234:	230f      	movs	r3, #15
 8002236:	18fb      	adds	r3, r7, r3
 8002238:	781b      	ldrb	r3, [r3, #0]
}
 800223a:	0018      	movs	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	b004      	add	sp, #16
 8002240:	bd80      	pop	{r7, pc}
 8002242:	46c0      	nop			@ (mov r8, r8)
 8002244:	fffffeff 	.word	0xfffffeff

08002248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002256:	e14d      	b.n	80024f4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2101      	movs	r1, #1
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4091      	lsls	r1, r2
 8002262:	000a      	movs	r2, r1
 8002264:	4013      	ands	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d100      	bne.n	8002270 <HAL_GPIO_Init+0x28>
 800226e:	e13e      	b.n	80024ee <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2203      	movs	r2, #3
 8002276:	4013      	ands	r3, r2
 8002278:	2b01      	cmp	r3, #1
 800227a:	d005      	beq.n	8002288 <HAL_GPIO_Init+0x40>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	2203      	movs	r2, #3
 8002282:	4013      	ands	r3, r2
 8002284:	2b02      	cmp	r3, #2
 8002286:	d130      	bne.n	80022ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	409a      	lsls	r2, r3
 8002296:	0013      	movs	r3, r2
 8002298:	43da      	mvns	r2, r3
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68da      	ldr	r2, [r3, #12]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	409a      	lsls	r2, r3
 80022aa:	0013      	movs	r3, r2
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022be:	2201      	movs	r2, #1
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	409a      	lsls	r2, r3
 80022c4:	0013      	movs	r3, r2
 80022c6:	43da      	mvns	r2, r3
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	2201      	movs	r2, #1
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
 80022dc:	0013      	movs	r3, r2
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	693a      	ldr	r2, [r7, #16]
 80022e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2203      	movs	r2, #3
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d017      	beq.n	8002326 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	2203      	movs	r2, #3
 8002302:	409a      	lsls	r2, r3
 8002304:	0013      	movs	r3, r2
 8002306:	43da      	mvns	r2, r3
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4013      	ands	r3, r2
 800230c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689a      	ldr	r2, [r3, #8]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	409a      	lsls	r2, r3
 8002318:	0013      	movs	r3, r2
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	2203      	movs	r2, #3
 800232c:	4013      	ands	r3, r2
 800232e:	2b02      	cmp	r3, #2
 8002330:	d123      	bne.n	800237a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	08da      	lsrs	r2, r3, #3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	3208      	adds	r2, #8
 800233a:	0092      	lsls	r2, r2, #2
 800233c:	58d3      	ldr	r3, [r2, r3]
 800233e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	2207      	movs	r2, #7
 8002344:	4013      	ands	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	220f      	movs	r2, #15
 800234a:	409a      	lsls	r2, r3
 800234c:	0013      	movs	r3, r2
 800234e:	43da      	mvns	r2, r3
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	691a      	ldr	r2, [r3, #16]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2107      	movs	r1, #7
 800235e:	400b      	ands	r3, r1
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	409a      	lsls	r2, r3
 8002364:	0013      	movs	r3, r2
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4313      	orrs	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	08da      	lsrs	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3208      	adds	r2, #8
 8002374:	0092      	lsls	r2, r2, #2
 8002376:	6939      	ldr	r1, [r7, #16]
 8002378:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	2203      	movs	r2, #3
 8002386:	409a      	lsls	r2, r3
 8002388:	0013      	movs	r3, r2
 800238a:	43da      	mvns	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4013      	ands	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2203      	movs	r2, #3
 8002398:	401a      	ands	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	23c0      	movs	r3, #192	@ 0xc0
 80023b4:	029b      	lsls	r3, r3, #10
 80023b6:	4013      	ands	r3, r2
 80023b8:	d100      	bne.n	80023bc <HAL_GPIO_Init+0x174>
 80023ba:	e098      	b.n	80024ee <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80023bc:	4a53      	ldr	r2, [pc, #332]	@ (800250c <HAL_GPIO_Init+0x2c4>)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	089b      	lsrs	r3, r3, #2
 80023c2:	3318      	adds	r3, #24
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	589b      	ldr	r3, [r3, r2]
 80023c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2203      	movs	r2, #3
 80023ce:	4013      	ands	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	220f      	movs	r2, #15
 80023d4:	409a      	lsls	r2, r3
 80023d6:	0013      	movs	r3, r2
 80023d8:	43da      	mvns	r2, r3
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	23a0      	movs	r3, #160	@ 0xa0
 80023e4:	05db      	lsls	r3, r3, #23
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d019      	beq.n	800241e <HAL_GPIO_Init+0x1d6>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a48      	ldr	r2, [pc, #288]	@ (8002510 <HAL_GPIO_Init+0x2c8>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d013      	beq.n	800241a <HAL_GPIO_Init+0x1d2>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a47      	ldr	r2, [pc, #284]	@ (8002514 <HAL_GPIO_Init+0x2cc>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d00d      	beq.n	8002416 <HAL_GPIO_Init+0x1ce>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	4a46      	ldr	r2, [pc, #280]	@ (8002518 <HAL_GPIO_Init+0x2d0>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d007      	beq.n	8002412 <HAL_GPIO_Init+0x1ca>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a45      	ldr	r2, [pc, #276]	@ (800251c <HAL_GPIO_Init+0x2d4>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d101      	bne.n	800240e <HAL_GPIO_Init+0x1c6>
 800240a:	2304      	movs	r3, #4
 800240c:	e008      	b.n	8002420 <HAL_GPIO_Init+0x1d8>
 800240e:	2305      	movs	r3, #5
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x1d8>
 8002412:	2303      	movs	r3, #3
 8002414:	e004      	b.n	8002420 <HAL_GPIO_Init+0x1d8>
 8002416:	2302      	movs	r3, #2
 8002418:	e002      	b.n	8002420 <HAL_GPIO_Init+0x1d8>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x1d8>
 800241e:	2300      	movs	r3, #0
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	2103      	movs	r1, #3
 8002424:	400a      	ands	r2, r1
 8002426:	00d2      	lsls	r2, r2, #3
 8002428:	4093      	lsls	r3, r2
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002430:	4936      	ldr	r1, [pc, #216]	@ (800250c <HAL_GPIO_Init+0x2c4>)
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3318      	adds	r3, #24
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800243e:	4b33      	ldr	r3, [pc, #204]	@ (800250c <HAL_GPIO_Init+0x2c4>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	43da      	mvns	r2, r3
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4013      	ands	r3, r2
 800244c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	2380      	movs	r3, #128	@ 0x80
 8002454:	035b      	lsls	r3, r3, #13
 8002456:	4013      	ands	r3, r2
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4313      	orrs	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002462:	4b2a      	ldr	r3, [pc, #168]	@ (800250c <HAL_GPIO_Init+0x2c4>)
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002468:	4b28      	ldr	r3, [pc, #160]	@ (800250c <HAL_GPIO_Init+0x2c4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	43da      	mvns	r2, r3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	2380      	movs	r3, #128	@ 0x80
 800247e:	039b      	lsls	r3, r3, #14
 8002480:	4013      	ands	r3, r2
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	4313      	orrs	r3, r2
 800248a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800248c:	4b1f      	ldr	r3, [pc, #124]	@ (800250c <HAL_GPIO_Init+0x2c4>)
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002492:	4a1e      	ldr	r2, [pc, #120]	@ (800250c <HAL_GPIO_Init+0x2c4>)
 8002494:	2384      	movs	r3, #132	@ 0x84
 8002496:	58d3      	ldr	r3, [r2, r3]
 8002498:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	43da      	mvns	r2, r3
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	2380      	movs	r3, #128	@ 0x80
 80024aa:	029b      	lsls	r3, r3, #10
 80024ac:	4013      	ands	r3, r2
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024b8:	4914      	ldr	r1, [pc, #80]	@ (800250c <HAL_GPIO_Init+0x2c4>)
 80024ba:	2284      	movs	r2, #132	@ 0x84
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80024c0:	4a12      	ldr	r2, [pc, #72]	@ (800250c <HAL_GPIO_Init+0x2c4>)
 80024c2:	2380      	movs	r3, #128	@ 0x80
 80024c4:	58d3      	ldr	r3, [r2, r3]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	43da      	mvns	r2, r3
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	4013      	ands	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	2380      	movs	r3, #128	@ 0x80
 80024d8:	025b      	lsls	r3, r3, #9
 80024da:	4013      	ands	r3, r2
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80024e6:	4909      	ldr	r1, [pc, #36]	@ (800250c <HAL_GPIO_Init+0x2c4>)
 80024e8:	2280      	movs	r2, #128	@ 0x80
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	3301      	adds	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	40da      	lsrs	r2, r3
 80024fc:	1e13      	subs	r3, r2, #0
 80024fe:	d000      	beq.n	8002502 <HAL_GPIO_Init+0x2ba>
 8002500:	e6aa      	b.n	8002258 <HAL_GPIO_Init+0x10>
  }
}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	46c0      	nop			@ (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b006      	add	sp, #24
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40021800 	.word	0x40021800
 8002510:	50000400 	.word	0x50000400
 8002514:	50000800 	.word	0x50000800
 8002518:	50000c00 	.word	0x50000c00
 800251c:	50001000 	.word	0x50001000

08002520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	0008      	movs	r0, r1
 800252a:	0011      	movs	r1, r2
 800252c:	1cbb      	adds	r3, r7, #2
 800252e:	1c02      	adds	r2, r0, #0
 8002530:	801a      	strh	r2, [r3, #0]
 8002532:	1c7b      	adds	r3, r7, #1
 8002534:	1c0a      	adds	r2, r1, #0
 8002536:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002538:	1c7b      	adds	r3, r7, #1
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d004      	beq.n	800254a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002540:	1cbb      	adds	r3, r7, #2
 8002542:	881a      	ldrh	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002548:	e003      	b.n	8002552 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800254a:	1cbb      	adds	r3, r7, #2
 800254c:	881a      	ldrh	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	46bd      	mov	sp, r7
 8002556:	b002      	add	sp, #8
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002564:	4b19      	ldr	r3, [pc, #100]	@ (80025cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a19      	ldr	r2, [pc, #100]	@ (80025d0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800256a:	4013      	ands	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	4b17      	ldr	r3, [pc, #92]	@ (80025cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	430a      	orrs	r2, r1
 8002574:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	429a      	cmp	r2, r3
 800257e:	d11f      	bne.n	80025c0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002580:	4b14      	ldr	r3, [pc, #80]	@ (80025d4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	0013      	movs	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	189b      	adds	r3, r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4912      	ldr	r1, [pc, #72]	@ (80025d8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800258e:	0018      	movs	r0, r3
 8002590:	f7fd fdba 	bl	8000108 <__udivsi3>
 8002594:	0003      	movs	r3, r0
 8002596:	3301      	adds	r3, #1
 8002598:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800259a:	e008      	b.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e001      	b.n	80025ae <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e009      	b.n	80025c2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025ae:	4b07      	ldr	r3, [pc, #28]	@ (80025cc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80025b0:	695a      	ldr	r2, [r3, #20]
 80025b2:	2380      	movs	r3, #128	@ 0x80
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	401a      	ands	r2, r3
 80025b8:	2380      	movs	r3, #128	@ 0x80
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	429a      	cmp	r2, r3
 80025be:	d0ed      	beq.n	800259c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	0018      	movs	r0, r3
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b004      	add	sp, #16
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	40007000 	.word	0x40007000
 80025d0:	fffff9ff 	.word	0xfffff9ff
 80025d4:	20000000 	.word	0x20000000
 80025d8:	000f4240 	.word	0x000f4240

080025dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80025e0:	4b03      	ldr	r3, [pc, #12]	@ (80025f0 <LL_RCC_GetAPB1Prescaler+0x14>)
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	23e0      	movs	r3, #224	@ 0xe0
 80025e6:	01db      	lsls	r3, r3, #7
 80025e8:	4013      	ands	r3, r2
}
 80025ea:	0018      	movs	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000

080025f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	f000 fb50 	bl	8002ca8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2201      	movs	r2, #1
 800260e:	4013      	ands	r3, r2
 8002610:	d100      	bne.n	8002614 <HAL_RCC_OscConfig+0x20>
 8002612:	e07c      	b.n	800270e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002614:	4bc3      	ldr	r3, [pc, #780]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2238      	movs	r2, #56	@ 0x38
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800261e:	4bc1      	ldr	r3, [pc, #772]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2203      	movs	r2, #3
 8002624:	4013      	ands	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	2b10      	cmp	r3, #16
 800262c:	d102      	bne.n	8002634 <HAL_RCC_OscConfig+0x40>
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d002      	beq.n	800263a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b08      	cmp	r3, #8
 8002638:	d10b      	bne.n	8002652 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800263a:	4bba      	ldr	r3, [pc, #744]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	2380      	movs	r3, #128	@ 0x80
 8002640:	029b      	lsls	r3, r3, #10
 8002642:	4013      	ands	r3, r2
 8002644:	d062      	beq.n	800270c <HAL_RCC_OscConfig+0x118>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d15e      	bne.n	800270c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e32a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	025b      	lsls	r3, r3, #9
 800265a:	429a      	cmp	r2, r3
 800265c:	d107      	bne.n	800266e <HAL_RCC_OscConfig+0x7a>
 800265e:	4bb1      	ldr	r3, [pc, #708]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4bb0      	ldr	r3, [pc, #704]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002664:	2180      	movs	r1, #128	@ 0x80
 8002666:	0249      	lsls	r1, r1, #9
 8002668:	430a      	orrs	r2, r1
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	e020      	b.n	80026b0 <HAL_RCC_OscConfig+0xbc>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	23a0      	movs	r3, #160	@ 0xa0
 8002674:	02db      	lsls	r3, r3, #11
 8002676:	429a      	cmp	r2, r3
 8002678:	d10e      	bne.n	8002698 <HAL_RCC_OscConfig+0xa4>
 800267a:	4baa      	ldr	r3, [pc, #680]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	4ba9      	ldr	r3, [pc, #676]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002680:	2180      	movs	r1, #128	@ 0x80
 8002682:	02c9      	lsls	r1, r1, #11
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	4ba6      	ldr	r3, [pc, #664]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4ba5      	ldr	r3, [pc, #660]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800268e:	2180      	movs	r1, #128	@ 0x80
 8002690:	0249      	lsls	r1, r1, #9
 8002692:	430a      	orrs	r2, r1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e00b      	b.n	80026b0 <HAL_RCC_OscConfig+0xbc>
 8002698:	4ba2      	ldr	r3, [pc, #648]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4ba1      	ldr	r3, [pc, #644]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800269e:	49a2      	ldr	r1, [pc, #648]	@ (8002928 <HAL_RCC_OscConfig+0x334>)
 80026a0:	400a      	ands	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	4b9f      	ldr	r3, [pc, #636]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b9e      	ldr	r3, [pc, #632]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80026aa:	49a0      	ldr	r1, [pc, #640]	@ (800292c <HAL_RCC_OscConfig+0x338>)
 80026ac:	400a      	ands	r2, r1
 80026ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d014      	beq.n	80026e2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7ff fc00 	bl	8001ebc <HAL_GetTick>
 80026bc:	0003      	movs	r3, r0
 80026be:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026c2:	f7ff fbfb 	bl	8001ebc <HAL_GetTick>
 80026c6:	0002      	movs	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b64      	cmp	r3, #100	@ 0x64
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e2e9      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d4:	4b93      	ldr	r3, [pc, #588]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	2380      	movs	r3, #128	@ 0x80
 80026da:	029b      	lsls	r3, r3, #10
 80026dc:	4013      	ands	r3, r2
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0xce>
 80026e0:	e015      	b.n	800270e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e2:	f7ff fbeb 	bl	8001ebc <HAL_GetTick>
 80026e6:	0003      	movs	r3, r0
 80026e8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ec:	f7ff fbe6 	bl	8001ebc <HAL_GetTick>
 80026f0:	0002      	movs	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	@ 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e2d4      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026fe:	4b89      	ldr	r3, [pc, #548]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	2380      	movs	r3, #128	@ 0x80
 8002704:	029b      	lsls	r3, r3, #10
 8002706:	4013      	ands	r3, r2
 8002708:	d1f0      	bne.n	80026ec <HAL_RCC_OscConfig+0xf8>
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800270c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2202      	movs	r2, #2
 8002714:	4013      	ands	r3, r2
 8002716:	d100      	bne.n	800271a <HAL_RCC_OscConfig+0x126>
 8002718:	e099      	b.n	800284e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800271a:	4b82      	ldr	r3, [pc, #520]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	2238      	movs	r2, #56	@ 0x38
 8002720:	4013      	ands	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002724:	4b7f      	ldr	r3, [pc, #508]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2203      	movs	r2, #3
 800272a:	4013      	ands	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	2b10      	cmp	r3, #16
 8002732:	d102      	bne.n	800273a <HAL_RCC_OscConfig+0x146>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d002      	beq.n	8002740 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d135      	bne.n	80027ac <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002740:	4b78      	ldr	r3, [pc, #480]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	@ 0x80
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4013      	ands	r3, r2
 800274a:	d005      	beq.n	8002758 <HAL_RCC_OscConfig+0x164>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e2a7      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002758:	4b72      	ldr	r3, [pc, #456]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a74      	ldr	r2, [pc, #464]	@ (8002930 <HAL_RCC_OscConfig+0x33c>)
 800275e:	4013      	ands	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	021a      	lsls	r2, r3, #8
 8002768:	4b6e      	ldr	r3, [pc, #440]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d112      	bne.n	800279a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002774:	4b6b      	ldr	r3, [pc, #428]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a6e      	ldr	r2, [pc, #440]	@ (8002934 <HAL_RCC_OscConfig+0x340>)
 800277a:	4013      	ands	r3, r2
 800277c:	0019      	movs	r1, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	691a      	ldr	r2, [r3, #16]
 8002782:	4b68      	ldr	r3, [pc, #416]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002784:	430a      	orrs	r2, r1
 8002786:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002788:	4b66      	ldr	r3, [pc, #408]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0adb      	lsrs	r3, r3, #11
 800278e:	2207      	movs	r2, #7
 8002790:	4013      	ands	r3, r2
 8002792:	4a69      	ldr	r2, [pc, #420]	@ (8002938 <HAL_RCC_OscConfig+0x344>)
 8002794:	40da      	lsrs	r2, r3
 8002796:	4b69      	ldr	r3, [pc, #420]	@ (800293c <HAL_RCC_OscConfig+0x348>)
 8002798:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800279a:	4b69      	ldr	r3, [pc, #420]	@ (8002940 <HAL_RCC_OscConfig+0x34c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	0018      	movs	r0, r3
 80027a0:	f7ff fb30 	bl	8001e04 <HAL_InitTick>
 80027a4:	1e03      	subs	r3, r0, #0
 80027a6:	d051      	beq.n	800284c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e27d      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d030      	beq.n	8002816 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80027b4:	4b5b      	ldr	r3, [pc, #364]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a5e      	ldr	r2, [pc, #376]	@ (8002934 <HAL_RCC_OscConfig+0x340>)
 80027ba:	4013      	ands	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	4b58      	ldr	r3, [pc, #352]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80027c4:	430a      	orrs	r2, r1
 80027c6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80027c8:	4b56      	ldr	r3, [pc, #344]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	4b55      	ldr	r3, [pc, #340]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80027ce:	2180      	movs	r1, #128	@ 0x80
 80027d0:	0049      	lsls	r1, r1, #1
 80027d2:	430a      	orrs	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d6:	f7ff fb71 	bl	8001ebc <HAL_GetTick>
 80027da:	0003      	movs	r3, r0
 80027dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e0:	f7ff fb6c 	bl	8001ebc <HAL_GetTick>
 80027e4:	0002      	movs	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e25a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	2380      	movs	r3, #128	@ 0x80
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4013      	ands	r3, r2
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027fe:	4b49      	ldr	r3, [pc, #292]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	4a4b      	ldr	r2, [pc, #300]	@ (8002930 <HAL_RCC_OscConfig+0x33c>)
 8002804:	4013      	ands	r3, r2
 8002806:	0019      	movs	r1, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	021a      	lsls	r2, r3, #8
 800280e:	4b45      	ldr	r3, [pc, #276]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002810:	430a      	orrs	r2, r1
 8002812:	605a      	str	r2, [r3, #4]
 8002814:	e01b      	b.n	800284e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002816:	4b43      	ldr	r3, [pc, #268]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	4b42      	ldr	r3, [pc, #264]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800281c:	4949      	ldr	r1, [pc, #292]	@ (8002944 <HAL_RCC_OscConfig+0x350>)
 800281e:	400a      	ands	r2, r1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7ff fb4b 	bl	8001ebc <HAL_GetTick>
 8002826:	0003      	movs	r3, r0
 8002828:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282c:	f7ff fb46 	bl	8001ebc <HAL_GetTick>
 8002830:	0002      	movs	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e234      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800283e:	4b39      	ldr	r3, [pc, #228]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	2380      	movs	r3, #128	@ 0x80
 8002844:	00db      	lsls	r3, r3, #3
 8002846:	4013      	ands	r3, r2
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x238>
 800284a:	e000      	b.n	800284e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800284c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2208      	movs	r2, #8
 8002854:	4013      	ands	r3, r2
 8002856:	d047      	beq.n	80028e8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002858:	4b32      	ldr	r3, [pc, #200]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2238      	movs	r2, #56	@ 0x38
 800285e:	4013      	ands	r3, r2
 8002860:	2b18      	cmp	r3, #24
 8002862:	d10a      	bne.n	800287a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002864:	4b2f      	ldr	r3, [pc, #188]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002868:	2202      	movs	r2, #2
 800286a:	4013      	ands	r3, r2
 800286c:	d03c      	beq.n	80028e8 <HAL_RCC_OscConfig+0x2f4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d138      	bne.n	80028e8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e216      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d019      	beq.n	80028b6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002882:	4b28      	ldr	r3, [pc, #160]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002884:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002886:	4b27      	ldr	r3, [pc, #156]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 8002888:	2101      	movs	r1, #1
 800288a:	430a      	orrs	r2, r1
 800288c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288e:	f7ff fb15 	bl	8001ebc <HAL_GetTick>
 8002892:	0003      	movs	r3, r0
 8002894:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002898:	f7ff fb10 	bl	8001ebc <HAL_GetTick>
 800289c:	0002      	movs	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1fe      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028aa:	4b1e      	ldr	r3, [pc, #120]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80028ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028ae:	2202      	movs	r2, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	d0f1      	beq.n	8002898 <HAL_RCC_OscConfig+0x2a4>
 80028b4:	e018      	b.n	80028e8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80028b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80028b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80028ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80028bc:	2101      	movs	r1, #1
 80028be:	438a      	bics	r2, r1
 80028c0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c2:	f7ff fafb 	bl	8001ebc <HAL_GetTick>
 80028c6:	0003      	movs	r3, r0
 80028c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028cc:	f7ff faf6 	bl	8001ebc <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e1e4      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028de:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80028e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028e2:	2202      	movs	r2, #2
 80028e4:	4013      	ands	r3, r2
 80028e6:	d1f1      	bne.n	80028cc <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2204      	movs	r2, #4
 80028ee:	4013      	ands	r3, r2
 80028f0:	d100      	bne.n	80028f4 <HAL_RCC_OscConfig+0x300>
 80028f2:	e0c7      	b.n	8002a84 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f4:	231f      	movs	r3, #31
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	2200      	movs	r2, #0
 80028fa:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028fc:	4b09      	ldr	r3, [pc, #36]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2238      	movs	r2, #56	@ 0x38
 8002902:	4013      	ands	r3, r2
 8002904:	2b20      	cmp	r3, #32
 8002906:	d11f      	bne.n	8002948 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002908:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_RCC_OscConfig+0x330>)
 800290a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290c:	2202      	movs	r2, #2
 800290e:	4013      	ands	r3, r2
 8002910:	d100      	bne.n	8002914 <HAL_RCC_OscConfig+0x320>
 8002912:	e0b7      	b.n	8002a84 <HAL_RCC_OscConfig+0x490>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d000      	beq.n	800291e <HAL_RCC_OscConfig+0x32a>
 800291c:	e0b2      	b.n	8002a84 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e1c2      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
 8002922:	46c0      	nop			@ (mov r8, r8)
 8002924:	40021000 	.word	0x40021000
 8002928:	fffeffff 	.word	0xfffeffff
 800292c:	fffbffff 	.word	0xfffbffff
 8002930:	ffff80ff 	.word	0xffff80ff
 8002934:	ffffc7ff 	.word	0xffffc7ff
 8002938:	00f42400 	.word	0x00f42400
 800293c:	20000000 	.word	0x20000000
 8002940:	20000004 	.word	0x20000004
 8002944:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002948:	4bb5      	ldr	r3, [pc, #724]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 800294a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800294c:	2380      	movs	r3, #128	@ 0x80
 800294e:	055b      	lsls	r3, r3, #21
 8002950:	4013      	ands	r3, r2
 8002952:	d101      	bne.n	8002958 <HAL_RCC_OscConfig+0x364>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <HAL_RCC_OscConfig+0x366>
 8002958:	2300      	movs	r3, #0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d011      	beq.n	8002982 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	4bb0      	ldr	r3, [pc, #704]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002960:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002962:	4baf      	ldr	r3, [pc, #700]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002964:	2180      	movs	r1, #128	@ 0x80
 8002966:	0549      	lsls	r1, r1, #21
 8002968:	430a      	orrs	r2, r1
 800296a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800296c:	4bac      	ldr	r3, [pc, #688]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 800296e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002970:	2380      	movs	r3, #128	@ 0x80
 8002972:	055b      	lsls	r3, r3, #21
 8002974:	4013      	ands	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800297a:	231f      	movs	r3, #31
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002982:	4ba8      	ldr	r3, [pc, #672]	@ (8002c24 <HAL_RCC_OscConfig+0x630>)
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	2380      	movs	r3, #128	@ 0x80
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4013      	ands	r3, r2
 800298c:	d11a      	bne.n	80029c4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800298e:	4ba5      	ldr	r3, [pc, #660]	@ (8002c24 <HAL_RCC_OscConfig+0x630>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	4ba4      	ldr	r3, [pc, #656]	@ (8002c24 <HAL_RCC_OscConfig+0x630>)
 8002994:	2180      	movs	r1, #128	@ 0x80
 8002996:	0049      	lsls	r1, r1, #1
 8002998:	430a      	orrs	r2, r1
 800299a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800299c:	f7ff fa8e 	bl	8001ebc <HAL_GetTick>
 80029a0:	0003      	movs	r3, r0
 80029a2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a6:	f7ff fa89 	bl	8001ebc <HAL_GetTick>
 80029aa:	0002      	movs	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e177      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b8:	4b9a      	ldr	r3, [pc, #616]	@ (8002c24 <HAL_RCC_OscConfig+0x630>)
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4013      	ands	r3, r2
 80029c2:	d0f0      	beq.n	80029a6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x3e6>
 80029cc:	4b94      	ldr	r3, [pc, #592]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 80029ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029d0:	4b93      	ldr	r3, [pc, #588]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 80029d2:	2101      	movs	r1, #1
 80029d4:	430a      	orrs	r2, r1
 80029d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029d8:	e01c      	b.n	8002a14 <HAL_RCC_OscConfig+0x420>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2b05      	cmp	r3, #5
 80029e0:	d10c      	bne.n	80029fc <HAL_RCC_OscConfig+0x408>
 80029e2:	4b8f      	ldr	r3, [pc, #572]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 80029e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029e6:	4b8e      	ldr	r3, [pc, #568]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 80029e8:	2104      	movs	r1, #4
 80029ea:	430a      	orrs	r2, r1
 80029ec:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029ee:	4b8c      	ldr	r3, [pc, #560]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 80029f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029f2:	4b8b      	ldr	r3, [pc, #556]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 80029f4:	2101      	movs	r1, #1
 80029f6:	430a      	orrs	r2, r1
 80029f8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029fa:	e00b      	b.n	8002a14 <HAL_RCC_OscConfig+0x420>
 80029fc:	4b88      	ldr	r3, [pc, #544]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 80029fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a00:	4b87      	ldr	r3, [pc, #540]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002a02:	2101      	movs	r1, #1
 8002a04:	438a      	bics	r2, r1
 8002a06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a08:	4b85      	ldr	r3, [pc, #532]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002a0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002a0c:	4b84      	ldr	r3, [pc, #528]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002a0e:	2104      	movs	r1, #4
 8002a10:	438a      	bics	r2, r1
 8002a12:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d014      	beq.n	8002a46 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1c:	f7ff fa4e 	bl	8001ebc <HAL_GetTick>
 8002a20:	0003      	movs	r3, r0
 8002a22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a24:	e009      	b.n	8002a3a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7ff fa49 	bl	8001ebc <HAL_GetTick>
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	4a7d      	ldr	r2, [pc, #500]	@ (8002c28 <HAL_RCC_OscConfig+0x634>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e136      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3a:	4b79      	ldr	r3, [pc, #484]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x432>
 8002a44:	e013      	b.n	8002a6e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a46:	f7ff fa39 	bl	8001ebc <HAL_GetTick>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a4e:	e009      	b.n	8002a64 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a50:	f7ff fa34 	bl	8001ebc <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	4a73      	ldr	r2, [pc, #460]	@ (8002c28 <HAL_RCC_OscConfig+0x634>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e121      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a64:	4b6e      	ldr	r3, [pc, #440]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a68:	2202      	movs	r2, #2
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d1f0      	bne.n	8002a50 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a6e:	231f      	movs	r3, #31
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a78:	4b69      	ldr	r3, [pc, #420]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002a7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002a7c:	4b68      	ldr	r3, [pc, #416]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002a7e:	496b      	ldr	r1, [pc, #428]	@ (8002c2c <HAL_RCC_OscConfig+0x638>)
 8002a80:	400a      	ands	r2, r1
 8002a82:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d039      	beq.n	8002b02 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01b      	beq.n	8002ace <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a96:	4b62      	ldr	r3, [pc, #392]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	4b61      	ldr	r3, [pc, #388]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002a9c:	2180      	movs	r1, #128	@ 0x80
 8002a9e:	03c9      	lsls	r1, r1, #15
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa4:	f7ff fa0a 	bl	8001ebc <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002aae:	f7ff fa05 	bl	8001ebc <HAL_GetTick>
 8002ab2:	0002      	movs	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e0f3      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002ac0:	4b57      	ldr	r3, [pc, #348]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	2380      	movs	r3, #128	@ 0x80
 8002ac6:	041b      	lsls	r3, r3, #16
 8002ac8:	4013      	ands	r3, r2
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x4ba>
 8002acc:	e019      	b.n	8002b02 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ace:	4b54      	ldr	r3, [pc, #336]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	4b53      	ldr	r3, [pc, #332]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002ad4:	4956      	ldr	r1, [pc, #344]	@ (8002c30 <HAL_RCC_OscConfig+0x63c>)
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7ff f9ef 	bl	8001ebc <HAL_GetTick>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ae4:	f7ff f9ea 	bl	8001ebc <HAL_GetTick>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e0d8      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8002af6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	2380      	movs	r3, #128	@ 0x80
 8002afc:	041b      	lsls	r3, r3, #16
 8002afe:	4013      	ands	r3, r2
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d100      	bne.n	8002b0c <HAL_RCC_OscConfig+0x518>
 8002b0a:	e0cc      	b.n	8002ca6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b0c:	4b44      	ldr	r3, [pc, #272]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2238      	movs	r2, #56	@ 0x38
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d100      	bne.n	8002b1a <HAL_RCC_OscConfig+0x526>
 8002b18:	e07b      	b.n	8002c12 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d156      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b3f      	ldr	r3, [pc, #252]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	4b3e      	ldr	r3, [pc, #248]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002b28:	4942      	ldr	r1, [pc, #264]	@ (8002c34 <HAL_RCC_OscConfig+0x640>)
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2e:	f7ff f9c5 	bl	8001ebc <HAL_GetTick>
 8002b32:	0003      	movs	r3, r0
 8002b34:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b38:	f7ff f9c0 	bl	8001ebc <HAL_GetTick>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e0ae      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b4a:	4b35      	ldr	r3, [pc, #212]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	049b      	lsls	r3, r3, #18
 8002b52:	4013      	ands	r3, r2
 8002b54:	d1f0      	bne.n	8002b38 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b56:	4b32      	ldr	r3, [pc, #200]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a37      	ldr	r2, [pc, #220]	@ (8002c38 <HAL_RCC_OscConfig+0x644>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	0019      	movs	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	431a      	orrs	r2, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b7c:	431a      	orrs	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b82:	431a      	orrs	r2, r3
 8002b84:	4b26      	ldr	r3, [pc, #152]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002b86:	430a      	orrs	r2, r1
 8002b88:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b8a:	4b25      	ldr	r3, [pc, #148]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b24      	ldr	r3, [pc, #144]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002b90:	2180      	movs	r1, #128	@ 0x80
 8002b92:	0449      	lsls	r1, r1, #17
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002b98:	4b21      	ldr	r3, [pc, #132]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002b9a:	68da      	ldr	r2, [r3, #12]
 8002b9c:	4b20      	ldr	r3, [pc, #128]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002b9e:	2180      	movs	r1, #128	@ 0x80
 8002ba0:	0549      	lsls	r1, r1, #21
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba6:	f7ff f989 	bl	8001ebc <HAL_GetTick>
 8002baa:	0003      	movs	r3, r0
 8002bac:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7ff f984 	bl	8001ebc <HAL_GetTick>
 8002bb4:	0002      	movs	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e072      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc2:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	2380      	movs	r3, #128	@ 0x80
 8002bc8:	049b      	lsls	r3, r3, #18
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x5bc>
 8002bce:	e06a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd0:	4b13      	ldr	r3, [pc, #76]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b12      	ldr	r3, [pc, #72]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002bd6:	4917      	ldr	r1, [pc, #92]	@ (8002c34 <HAL_RCC_OscConfig+0x640>)
 8002bd8:	400a      	ands	r2, r1
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bdc:	f7ff f96e 	bl	8001ebc <HAL_GetTick>
 8002be0:	0003      	movs	r3, r0
 8002be2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be6:	f7ff f969 	bl	8001ebc <HAL_GetTick>
 8002bea:	0002      	movs	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e057      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf8:	4b09      	ldr	r3, [pc, #36]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	2380      	movs	r3, #128	@ 0x80
 8002bfe:	049b      	lsls	r3, r3, #18
 8002c00:	4013      	ands	r3, r2
 8002c02:	d1f0      	bne.n	8002be6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002c04:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002c06:	68da      	ldr	r2, [r3, #12]
 8002c08:	4b05      	ldr	r3, [pc, #20]	@ (8002c20 <HAL_RCC_OscConfig+0x62c>)
 8002c0a:	490c      	ldr	r1, [pc, #48]	@ (8002c3c <HAL_RCC_OscConfig+0x648>)
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	60da      	str	r2, [r3, #12]
 8002c10:	e049      	b.n	8002ca6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d112      	bne.n	8002c40 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e044      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40007000 	.word	0x40007000
 8002c28:	00001388 	.word	0x00001388
 8002c2c:	efffffff 	.word	0xefffffff
 8002c30:	ffbfffff 	.word	0xffbfffff
 8002c34:	feffffff 	.word	0xfeffffff
 8002c38:	11c1808c 	.word	0x11c1808c
 8002c3c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002c40:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <HAL_RCC_OscConfig+0x6bc>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2203      	movs	r2, #3
 8002c4a:	401a      	ands	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d126      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	2270      	movs	r2, #112	@ 0x70
 8002c58:	401a      	ands	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d11f      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	23fe      	movs	r3, #254	@ 0xfe
 8002c66:	01db      	lsls	r3, r3, #7
 8002c68:	401a      	ands	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d116      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	23f8      	movs	r3, #248	@ 0xf8
 8002c78:	039b      	lsls	r3, r3, #14
 8002c7a:	401a      	ands	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d10e      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	23e0      	movs	r3, #224	@ 0xe0
 8002c88:	051b      	lsls	r3, r3, #20
 8002c8a:	401a      	ands	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d106      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	0f5b      	lsrs	r3, r3, #29
 8002c98:	075a      	lsls	r2, r3, #29
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d001      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	0018      	movs	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	b008      	add	sp, #32
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40021000 	.word	0x40021000

08002cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0e9      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b76      	ldr	r3, [pc, #472]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2207      	movs	r2, #7
 8002cce:	4013      	ands	r3, r2
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d91e      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b73      	ldr	r3, [pc, #460]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2207      	movs	r2, #7
 8002cdc:	4393      	bics	r3, r2
 8002cde:	0019      	movs	r1, r3
 8002ce0:	4b70      	ldr	r3, [pc, #448]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ce8:	f7ff f8e8 	bl	8001ebc <HAL_GetTick>
 8002cec:	0003      	movs	r3, r0
 8002cee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cf0:	e009      	b.n	8002d06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf2:	f7ff f8e3 	bl	8001ebc <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	4a6a      	ldr	r2, [pc, #424]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f4>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e0ca      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d06:	4b67      	ldr	r3, [pc, #412]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2207      	movs	r2, #7
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1ee      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2202      	movs	r2, #2
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d015      	beq.n	8002d4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2204      	movs	r2, #4
 8002d24:	4013      	ands	r3, r2
 8002d26:	d006      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002d28:	4b60      	ldr	r3, [pc, #384]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	4b5f      	ldr	r3, [pc, #380]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002d2e:	21e0      	movs	r1, #224	@ 0xe0
 8002d30:	01c9      	lsls	r1, r1, #7
 8002d32:	430a      	orrs	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d36:	4b5d      	ldr	r3, [pc, #372]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	4a5d      	ldr	r2, [pc, #372]	@ (8002eb0 <HAL_RCC_ClockConfig+0x1fc>)
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	0019      	movs	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	4b59      	ldr	r3, [pc, #356]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002d46:	430a      	orrs	r2, r1
 8002d48:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	4013      	ands	r3, r2
 8002d52:	d057      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d5c:	4b53      	ldr	r3, [pc, #332]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	029b      	lsls	r3, r3, #10
 8002d64:	4013      	ands	r3, r2
 8002d66:	d12b      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e097      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d74:	4b4d      	ldr	r3, [pc, #308]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2380      	movs	r3, #128	@ 0x80
 8002d7a:	049b      	lsls	r3, r3, #18
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d11f      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e08b      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d8c:	4b47      	ldr	r3, [pc, #284]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	2380      	movs	r3, #128	@ 0x80
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4013      	ands	r3, r2
 8002d96:	d113      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e07f      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d106      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002da4:	4b41      	ldr	r3, [pc, #260]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002da6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002da8:	2202      	movs	r2, #2
 8002daa:	4013      	ands	r3, r2
 8002dac:	d108      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e074      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db2:	4b3e      	ldr	r3, [pc, #248]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db6:	2202      	movs	r2, #2
 8002db8:	4013      	ands	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e06d      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dc0:	4b3a      	ldr	r3, [pc, #232]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	4393      	bics	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4b37      	ldr	r3, [pc, #220]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dd4:	f7ff f872 	bl	8001ebc <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ddc:	e009      	b.n	8002df2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dde:	f7ff f86d 	bl	8001ebc <HAL_GetTick>
 8002de2:	0002      	movs	r2, r0
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	4a2f      	ldr	r2, [pc, #188]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e054      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	4b2e      	ldr	r3, [pc, #184]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2238      	movs	r2, #56	@ 0x38
 8002df8:	401a      	ands	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d1ec      	bne.n	8002dde <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e04:	4b27      	ldr	r3, [pc, #156]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2207      	movs	r2, #7
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d21e      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b24      	ldr	r3, [pc, #144]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2207      	movs	r2, #7
 8002e18:	4393      	bics	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e24:	f7ff f84a 	bl	8001ebc <HAL_GetTick>
 8002e28:	0003      	movs	r3, r0
 8002e2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e2c:	e009      	b.n	8002e42 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e2e:	f7ff f845 	bl	8001ebc <HAL_GetTick>
 8002e32:	0002      	movs	r2, r0
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	4a1b      	ldr	r2, [pc, #108]	@ (8002ea8 <HAL_RCC_ClockConfig+0x1f4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e02c      	b.n	8002e9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e42:	4b18      	ldr	r3, [pc, #96]	@ (8002ea4 <HAL_RCC_ClockConfig+0x1f0>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2207      	movs	r2, #7
 8002e48:	4013      	ands	r3, r2
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d1ee      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2204      	movs	r2, #4
 8002e56:	4013      	ands	r3, r2
 8002e58:	d009      	beq.n	8002e6e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002e5a:	4b14      	ldr	r3, [pc, #80]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	4a15      	ldr	r2, [pc, #84]	@ (8002eb4 <HAL_RCC_ClockConfig+0x200>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	0019      	movs	r1, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002e6e:	f000 f829 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8002e72:	0001      	movs	r1, r0
 8002e74:	4b0d      	ldr	r3, [pc, #52]	@ (8002eac <HAL_RCC_ClockConfig+0x1f8>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb8 <HAL_RCC_ClockConfig+0x204>)
 8002e80:	0092      	lsls	r2, r2, #2
 8002e82:	58d3      	ldr	r3, [r2, r3]
 8002e84:	221f      	movs	r2, #31
 8002e86:	4013      	ands	r3, r2
 8002e88:	000a      	movs	r2, r1
 8002e8a:	40da      	lsrs	r2, r3
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <HAL_RCC_ClockConfig+0x208>)
 8002e8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_ClockConfig+0x20c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0018      	movs	r0, r3
 8002e96:	f7fe ffb5 	bl	8001e04 <HAL_InitTick>
 8002e9a:	0003      	movs	r3, r0
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b004      	add	sp, #16
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40022000 	.word	0x40022000
 8002ea8:	00001388 	.word	0x00001388
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	fffff0ff 	.word	0xfffff0ff
 8002eb4:	ffff8fff 	.word	0xffff8fff
 8002eb8:	08009534 	.word	0x08009534
 8002ebc:	20000000 	.word	0x20000000
 8002ec0:	20000004 	.word	0x20000004

08002ec4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eca:	4b3c      	ldr	r3, [pc, #240]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	2238      	movs	r2, #56	@ 0x38
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d10f      	bne.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002ed4:	4b39      	ldr	r3, [pc, #228]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0adb      	lsrs	r3, r3, #11
 8002eda:	2207      	movs	r2, #7
 8002edc:	4013      	ands	r3, r2
 8002ede:	2201      	movs	r2, #1
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	0013      	movs	r3, r2
 8002ee4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002ee6:	6839      	ldr	r1, [r7, #0]
 8002ee8:	4835      	ldr	r0, [pc, #212]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002eea:	f7fd f90d 	bl	8000108 <__udivsi3>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	e05d      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ef4:	4b31      	ldr	r3, [pc, #196]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2238      	movs	r2, #56	@ 0x38
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d102      	bne.n	8002f06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f00:	4b30      	ldr	r3, [pc, #192]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	e054      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f06:	4b2d      	ldr	r3, [pc, #180]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2238      	movs	r2, #56	@ 0x38
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b10      	cmp	r3, #16
 8002f10:	d138      	bne.n	8002f84 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002f12:	4b2a      	ldr	r3, [pc, #168]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2203      	movs	r2, #3
 8002f18:	4013      	ands	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f1c:	4b27      	ldr	r3, [pc, #156]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	2207      	movs	r2, #7
 8002f24:	4013      	ands	r3, r2
 8002f26:	3301      	adds	r3, #1
 8002f28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d10d      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	4824      	ldr	r0, [pc, #144]	@ (8002fc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002f34:	f7fd f8e8 	bl	8000108 <__udivsi3>
 8002f38:	0003      	movs	r3, r0
 8002f3a:	0019      	movs	r1, r3
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	227f      	movs	r2, #127	@ 0x7f
 8002f44:	4013      	ands	r3, r2
 8002f46:	434b      	muls	r3, r1
 8002f48:	617b      	str	r3, [r7, #20]
        break;
 8002f4a:	e00d      	b.n	8002f68 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	481c      	ldr	r0, [pc, #112]	@ (8002fc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f50:	f7fd f8da 	bl	8000108 <__udivsi3>
 8002f54:	0003      	movs	r3, r0
 8002f56:	0019      	movs	r1, r3
 8002f58:	4b18      	ldr	r3, [pc, #96]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	0a1b      	lsrs	r3, r3, #8
 8002f5e:	227f      	movs	r2, #127	@ 0x7f
 8002f60:	4013      	ands	r3, r2
 8002f62:	434b      	muls	r3, r1
 8002f64:	617b      	str	r3, [r7, #20]
        break;
 8002f66:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002f68:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	0f5b      	lsrs	r3, r3, #29
 8002f6e:	2207      	movs	r2, #7
 8002f70:	4013      	ands	r3, r2
 8002f72:	3301      	adds	r3, #1
 8002f74:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	6978      	ldr	r0, [r7, #20]
 8002f7a:	f7fd f8c5 	bl	8000108 <__udivsi3>
 8002f7e:	0003      	movs	r3, r0
 8002f80:	613b      	str	r3, [r7, #16]
 8002f82:	e015      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002f84:	4b0d      	ldr	r3, [pc, #52]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2238      	movs	r2, #56	@ 0x38
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b20      	cmp	r3, #32
 8002f8e:	d103      	bne.n	8002f98 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002f90:	2380      	movs	r3, #128	@ 0x80
 8002f92:	021b      	lsls	r3, r3, #8
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002f98:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2238      	movs	r2, #56	@ 0x38
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b18      	cmp	r3, #24
 8002fa2:	d103      	bne.n	8002fac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002fa4:	23fa      	movs	r3, #250	@ 0xfa
 8002fa6:	01db      	lsls	r3, r3, #7
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	e001      	b.n	8002fb0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002fac:	2300      	movs	r3, #0
 8002fae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002fb0:	693b      	ldr	r3, [r7, #16]
}
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	b006      	add	sp, #24
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	46c0      	nop			@ (mov r8, r8)
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	00f42400 	.word	0x00f42400
 8002fc4:	016e3600 	.word	0x016e3600

08002fc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fcc:	4b02      	ldr	r3, [pc, #8]	@ (8002fd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	46c0      	nop			@ (mov r8, r8)
 8002fd8:	20000000 	.word	0x20000000

08002fdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fdc:	b5b0      	push	{r4, r5, r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002fe0:	f7ff fff2 	bl	8002fc8 <HAL_RCC_GetHCLKFreq>
 8002fe4:	0004      	movs	r4, r0
 8002fe6:	f7ff faf9 	bl	80025dc <LL_RCC_GetAPB1Prescaler>
 8002fea:	0003      	movs	r3, r0
 8002fec:	0b1a      	lsrs	r2, r3, #12
 8002fee:	4b05      	ldr	r3, [pc, #20]	@ (8003004 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ff0:	0092      	lsls	r2, r2, #2
 8002ff2:	58d3      	ldr	r3, [r2, r3]
 8002ff4:	221f      	movs	r2, #31
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	40dc      	lsrs	r4, r3
 8002ffa:	0023      	movs	r3, r4
}
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bdb0      	pop	{r4, r5, r7, pc}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	08009574 	.word	0x08009574

08003008 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b086      	sub	sp, #24
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003010:	2313      	movs	r3, #19
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003018:	2312      	movs	r3, #18
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	2380      	movs	r3, #128	@ 0x80
 8003026:	029b      	lsls	r3, r3, #10
 8003028:	4013      	ands	r3, r2
 800302a:	d100      	bne.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800302c:	e0ad      	b.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800302e:	2011      	movs	r0, #17
 8003030:	183b      	adds	r3, r7, r0
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003036:	4b47      	ldr	r3, [pc, #284]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003038:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800303a:	2380      	movs	r3, #128	@ 0x80
 800303c:	055b      	lsls	r3, r3, #21
 800303e:	4013      	ands	r3, r2
 8003040:	d110      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003042:	4b44      	ldr	r3, [pc, #272]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003044:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003046:	4b43      	ldr	r3, [pc, #268]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003048:	2180      	movs	r1, #128	@ 0x80
 800304a:	0549      	lsls	r1, r1, #21
 800304c:	430a      	orrs	r2, r1
 800304e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003050:	4b40      	ldr	r3, [pc, #256]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003054:	2380      	movs	r3, #128	@ 0x80
 8003056:	055b      	lsls	r3, r3, #21
 8003058:	4013      	ands	r3, r2
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800305e:	183b      	adds	r3, r7, r0
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003064:	4b3c      	ldr	r3, [pc, #240]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800306a:	2180      	movs	r1, #128	@ 0x80
 800306c:	0049      	lsls	r1, r1, #1
 800306e:	430a      	orrs	r2, r1
 8003070:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003072:	f7fe ff23 	bl	8001ebc <HAL_GetTick>
 8003076:	0003      	movs	r3, r0
 8003078:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800307a:	e00b      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800307c:	f7fe ff1e 	bl	8001ebc <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d904      	bls.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800308a:	2313      	movs	r3, #19
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2203      	movs	r2, #3
 8003090:	701a      	strb	r2, [r3, #0]
        break;
 8003092:	e005      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003094:	4b30      	ldr	r3, [pc, #192]	@ (8003158 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	2380      	movs	r3, #128	@ 0x80
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4013      	ands	r3, r2
 800309e:	d0ed      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80030a0:	2313      	movs	r3, #19
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d15e      	bne.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030ae:	23c0      	movs	r3, #192	@ 0xc0
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	4013      	ands	r3, r2
 80030b4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d019      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c0:	697a      	ldr	r2, [r7, #20]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d014      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030c6:	4b23      	ldr	r3, [pc, #140]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ca:	4a24      	ldr	r2, [pc, #144]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030d0:	4b20      	ldr	r3, [pc, #128]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030d2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030d4:	4b1f      	ldr	r3, [pc, #124]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030d6:	2180      	movs	r1, #128	@ 0x80
 80030d8:	0249      	lsls	r1, r1, #9
 80030da:	430a      	orrs	r2, r1
 80030dc:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030de:	4b1d      	ldr	r3, [pc, #116]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030e4:	491e      	ldr	r1, [pc, #120]	@ (8003160 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 80030e6:	400a      	ands	r2, r1
 80030e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80030ea:	4b1a      	ldr	r3, [pc, #104]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	2201      	movs	r2, #1
 80030f4:	4013      	ands	r3, r2
 80030f6:	d016      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe fee0 	bl	8001ebc <HAL_GetTick>
 80030fc:	0003      	movs	r3, r0
 80030fe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003100:	e00c      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003102:	f7fe fedb 	bl	8001ebc <HAL_GetTick>
 8003106:	0002      	movs	r2, r0
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	4a15      	ldr	r2, [pc, #84]	@ (8003164 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d904      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003112:	2313      	movs	r3, #19
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	2203      	movs	r2, #3
 8003118:	701a      	strb	r2, [r3, #0]
            break;
 800311a:	e004      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800311c:	4b0d      	ldr	r3, [pc, #52]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800311e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003120:	2202      	movs	r2, #2
 8003122:	4013      	ands	r3, r2
 8003124:	d0ed      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003126:	2313      	movs	r3, #19
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003130:	4b08      	ldr	r3, [pc, #32]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	4a09      	ldr	r2, [pc, #36]	@ (800315c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003136:	4013      	ands	r3, r2
 8003138:	0019      	movs	r1, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800313e:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003140:	430a      	orrs	r2, r1
 8003142:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003144:	e016      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003146:	2312      	movs	r3, #18
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2213      	movs	r2, #19
 800314c:	18ba      	adds	r2, r7, r2
 800314e:	7812      	ldrb	r2, [r2, #0]
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e00f      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003154:	40021000 	.word	0x40021000
 8003158:	40007000 	.word	0x40007000
 800315c:	fffffcff 	.word	0xfffffcff
 8003160:	fffeffff 	.word	0xfffeffff
 8003164:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003168:	2312      	movs	r3, #18
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	2213      	movs	r2, #19
 800316e:	18ba      	adds	r2, r7, r2
 8003170:	7812      	ldrb	r2, [r2, #0]
 8003172:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003174:	2311      	movs	r3, #17
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d105      	bne.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317e:	4bc5      	ldr	r3, [pc, #788]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003180:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003182:	4bc4      	ldr	r3, [pc, #784]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003184:	49c4      	ldr	r1, [pc, #784]	@ (8003498 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003186:	400a      	ands	r2, r1
 8003188:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2201      	movs	r2, #1
 8003190:	4013      	ands	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003194:	4bbf      	ldr	r3, [pc, #764]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003198:	2203      	movs	r2, #3
 800319a:	4393      	bics	r3, r2
 800319c:	0019      	movs	r1, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	4bbc      	ldr	r3, [pc, #752]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80031a4:	430a      	orrs	r2, r1
 80031a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2202      	movs	r2, #2
 80031ae:	4013      	ands	r3, r2
 80031b0:	d009      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031b2:	4bb8      	ldr	r3, [pc, #736]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80031b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b6:	220c      	movs	r2, #12
 80031b8:	4393      	bics	r3, r2
 80031ba:	0019      	movs	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	4bb4      	ldr	r3, [pc, #720]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80031c2:	430a      	orrs	r2, r1
 80031c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2204      	movs	r2, #4
 80031cc:	4013      	ands	r3, r2
 80031ce:	d009      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031d0:	4bb0      	ldr	r3, [pc, #704]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80031d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d4:	2230      	movs	r2, #48	@ 0x30
 80031d6:	4393      	bics	r3, r2
 80031d8:	0019      	movs	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	4bad      	ldr	r3, [pc, #692]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80031e0:	430a      	orrs	r2, r1
 80031e2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2210      	movs	r2, #16
 80031ea:	4013      	ands	r3, r2
 80031ec:	d009      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031ee:	4ba9      	ldr	r3, [pc, #676]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80031f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031f2:	4aaa      	ldr	r2, [pc, #680]	@ (800349c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	0019      	movs	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691a      	ldr	r2, [r3, #16]
 80031fc:	4ba5      	ldr	r3, [pc, #660]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80031fe:	430a      	orrs	r2, r1
 8003200:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	2380      	movs	r3, #128	@ 0x80
 8003208:	015b      	lsls	r3, r3, #5
 800320a:	4013      	ands	r3, r2
 800320c:	d009      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800320e:	4ba1      	ldr	r3, [pc, #644]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003212:	4aa3      	ldr	r2, [pc, #652]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003214:	4013      	ands	r3, r2
 8003216:	0019      	movs	r1, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	4b9d      	ldr	r3, [pc, #628]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800321e:	430a      	orrs	r2, r1
 8003220:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	2380      	movs	r3, #128	@ 0x80
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4013      	ands	r3, r2
 800322c:	d009      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800322e:	4b99      	ldr	r3, [pc, #612]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003232:	4a9c      	ldr	r2, [pc, #624]	@ (80034a4 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8003234:	4013      	ands	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800323c:	4b95      	ldr	r3, [pc, #596]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800323e:	430a      	orrs	r2, r1
 8003240:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	2380      	movs	r3, #128	@ 0x80
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4013      	ands	r3, r2
 800324c:	d009      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800324e:	4b91      	ldr	r3, [pc, #580]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003252:	4a95      	ldr	r2, [pc, #596]	@ (80034a8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003254:	4013      	ands	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800325c:	4b8d      	ldr	r3, [pc, #564]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800325e:	430a      	orrs	r2, r1
 8003260:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2220      	movs	r2, #32
 8003268:	4013      	ands	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800326c:	4b89      	ldr	r3, [pc, #548]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800326e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003270:	4a8e      	ldr	r2, [pc, #568]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003272:	4013      	ands	r3, r2
 8003274:	0019      	movs	r1, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699a      	ldr	r2, [r3, #24]
 800327a:	4b86      	ldr	r3, [pc, #536]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800327c:	430a      	orrs	r2, r1
 800327e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2240      	movs	r2, #64	@ 0x40
 8003286:	4013      	ands	r3, r2
 8003288:	d009      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800328a:	4b82      	ldr	r3, [pc, #520]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800328c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328e:	4a88      	ldr	r2, [pc, #544]	@ (80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8003290:	4013      	ands	r3, r2
 8003292:	0019      	movs	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	69da      	ldr	r2, [r3, #28]
 8003298:	4b7e      	ldr	r3, [pc, #504]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800329a:	430a      	orrs	r2, r1
 800329c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	2380      	movs	r3, #128	@ 0x80
 80032a4:	02db      	lsls	r3, r3, #11
 80032a6:	4013      	ands	r3, r2
 80032a8:	d016      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80032ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ae:	4a81      	ldr	r2, [pc, #516]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	0019      	movs	r1, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032b8:	4b76      	ldr	r3, [pc, #472]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80032ba:	430a      	orrs	r2, r1
 80032bc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032c2:	23c0      	movs	r3, #192	@ 0xc0
 80032c4:	051b      	lsls	r3, r3, #20
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d106      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80032ca:	4b72      	ldr	r3, [pc, #456]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	4b71      	ldr	r3, [pc, #452]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80032d0:	2180      	movs	r1, #128	@ 0x80
 80032d2:	0449      	lsls	r1, r1, #17
 80032d4:	430a      	orrs	r2, r1
 80032d6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	2380      	movs	r3, #128	@ 0x80
 80032de:	01db      	lsls	r3, r3, #7
 80032e0:	4013      	ands	r3, r2
 80032e2:	d015      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x308>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032e4:	4b6b      	ldr	r3, [pc, #428]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80032e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	0899      	lsrs	r1, r3, #2
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032f0:	4b68      	ldr	r3, [pc, #416]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80032f2:	430a      	orrs	r2, r1
 80032f4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032fa:	2380      	movs	r3, #128	@ 0x80
 80032fc:	05db      	lsls	r3, r3, #23
 80032fe:	429a      	cmp	r2, r3
 8003300:	d106      	bne.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003302:	4b64      	ldr	r3, [pc, #400]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	4b63      	ldr	r3, [pc, #396]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003308:	2180      	movs	r1, #128	@ 0x80
 800330a:	0249      	lsls	r1, r1, #9
 800330c:	430a      	orrs	r2, r1
 800330e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	031b      	lsls	r3, r3, #12
 8003318:	4013      	ands	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800331c:	4b5d      	ldr	r3, [pc, #372]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800331e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003320:	2240      	movs	r2, #64	@ 0x40
 8003322:	4393      	bics	r3, r2
 8003324:	0019      	movs	r1, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800332a:	4b5a      	ldr	r3, [pc, #360]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800332c:	430a      	orrs	r2, r1
 800332e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	2380      	movs	r3, #128	@ 0x80
 8003336:	039b      	lsls	r3, r3, #14
 8003338:	4013      	ands	r3, r2
 800333a:	d016      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800333c:	4b55      	ldr	r3, [pc, #340]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800333e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003340:	4a5d      	ldr	r2, [pc, #372]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8003342:	4013      	ands	r3, r2
 8003344:	0019      	movs	r1, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800334a:	4b52      	ldr	r3, [pc, #328]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800334c:	430a      	orrs	r2, r1
 800334e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	03db      	lsls	r3, r3, #15
 8003358:	429a      	cmp	r2, r3
 800335a:	d106      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800335c:	4b4d      	ldr	r3, [pc, #308]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	4b4c      	ldr	r3, [pc, #304]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003362:	2180      	movs	r1, #128	@ 0x80
 8003364:	0449      	lsls	r1, r1, #17
 8003366:	430a      	orrs	r2, r1
 8003368:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	2380      	movs	r3, #128	@ 0x80
 8003370:	03db      	lsls	r3, r3, #15
 8003372:	4013      	ands	r3, r2
 8003374:	d016      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003376:	4b47      	ldr	r3, [pc, #284]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800337a:	4a50      	ldr	r2, [pc, #320]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800337c:	4013      	ands	r3, r2
 800337e:	0019      	movs	r1, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003384:	4b43      	ldr	r3, [pc, #268]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003386:	430a      	orrs	r2, r1
 8003388:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800338e:	2380      	movs	r3, #128	@ 0x80
 8003390:	045b      	lsls	r3, r3, #17
 8003392:	429a      	cmp	r2, r3
 8003394:	d106      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003396:	4b3f      	ldr	r3, [pc, #252]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	4b3e      	ldr	r3, [pc, #248]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800339c:	2180      	movs	r1, #128	@ 0x80
 800339e:	0449      	lsls	r1, r1, #17
 80033a0:	430a      	orrs	r2, r1
 80033a2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	4013      	ands	r3, r2
 80033ae:	d014      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80033b0:	4b38      	ldr	r3, [pc, #224]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b4:	2203      	movs	r2, #3
 80033b6:	4393      	bics	r3, r2
 80033b8:	0019      	movs	r1, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1a      	ldr	r2, [r3, #32]
 80033be:	4b35      	ldr	r3, [pc, #212]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80033c0:	430a      	orrs	r2, r1
 80033c2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d106      	bne.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80033cc:	4b31      	ldr	r3, [pc, #196]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	4b30      	ldr	r3, [pc, #192]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80033d2:	2180      	movs	r1, #128	@ 0x80
 80033d4:	0249      	lsls	r1, r1, #9
 80033d6:	430a      	orrs	r2, r1
 80033d8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	2380      	movs	r3, #128	@ 0x80
 80033e0:	019b      	lsls	r3, r3, #6
 80033e2:	4013      	ands	r3, r2
 80033e4:	d014      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80033e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	220c      	movs	r2, #12
 80033ec:	4393      	bics	r3, r2
 80033ee:	0019      	movs	r1, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033f4:	4b27      	ldr	r3, [pc, #156]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 80033f6:	430a      	orrs	r2, r1
 80033f8:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d106      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003402:	4b24      	ldr	r3, [pc, #144]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003404:	68da      	ldr	r2, [r3, #12]
 8003406:	4b23      	ldr	r3, [pc, #140]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003408:	2180      	movs	r1, #128	@ 0x80
 800340a:	0249      	lsls	r1, r1, #9
 800340c:	430a      	orrs	r2, r1
 800340e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	2380      	movs	r3, #128	@ 0x80
 8003416:	045b      	lsls	r3, r3, #17
 8003418:	4013      	ands	r3, r2
 800341a:	d016      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800341c:	4b1d      	ldr	r3, [pc, #116]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800341e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003420:	4a22      	ldr	r2, [pc, #136]	@ (80034ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003422:	4013      	ands	r3, r2
 8003424:	0019      	movs	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800342a:	4b1a      	ldr	r3, [pc, #104]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800342c:	430a      	orrs	r2, r1
 800342e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003434:	2380      	movs	r3, #128	@ 0x80
 8003436:	019b      	lsls	r3, r3, #6
 8003438:	429a      	cmp	r2, r3
 800343a:	d106      	bne.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800343c:	4b15      	ldr	r3, [pc, #84]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800343e:	68da      	ldr	r2, [r3, #12]
 8003440:	4b14      	ldr	r3, [pc, #80]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003442:	2180      	movs	r1, #128	@ 0x80
 8003444:	0449      	lsls	r1, r1, #17
 8003446:	430a      	orrs	r2, r1
 8003448:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	2380      	movs	r3, #128	@ 0x80
 8003450:	049b      	lsls	r3, r3, #18
 8003452:	4013      	ands	r3, r2
 8003454:	d016      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003456:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003458:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800345a:	4a11      	ldr	r2, [pc, #68]	@ (80034a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800345c:	4013      	ands	r3, r2
 800345e:	0019      	movs	r1, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003464:	4b0b      	ldr	r3, [pc, #44]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003466:	430a      	orrs	r2, r1
 8003468:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800346e:	2380      	movs	r3, #128	@ 0x80
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	429a      	cmp	r2, r3
 8003474:	d106      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003476:	4b07      	ldr	r3, [pc, #28]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800347c:	2180      	movs	r1, #128	@ 0x80
 800347e:	0449      	lsls	r1, r1, #17
 8003480:	430a      	orrs	r2, r1
 8003482:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003484:	2312      	movs	r3, #18
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	781b      	ldrb	r3, [r3, #0]
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b006      	add	sp, #24
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			@ (mov r8, r8)
 8003494:	40021000 	.word	0x40021000
 8003498:	efffffff 	.word	0xefffffff
 800349c:	fffff3ff 	.word	0xfffff3ff
 80034a0:	fffffcff 	.word	0xfffffcff
 80034a4:	fff3ffff 	.word	0xfff3ffff
 80034a8:	ffcfffff 	.word	0xffcfffff
 80034ac:	ffffcfff 	.word	0xffffcfff
 80034b0:	ffff3fff 	.word	0xffff3fff
 80034b4:	f3ffffff 	.word	0xf3ffffff
 80034b8:	ffbfffff 	.word	0xffbfffff
 80034bc:	feffffff 	.word	0xfeffffff

080034c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e04a      	b.n	8003568 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	223d      	movs	r2, #61	@ 0x3d
 80034d6:	5c9b      	ldrb	r3, [r3, r2]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	223c      	movs	r2, #60	@ 0x3c
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fe fab9 	bl	8001a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	223d      	movs	r2, #61	@ 0x3d
 80034f2:	2102      	movs	r1, #2
 80034f4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	0019      	movs	r1, r3
 8003500:	0010      	movs	r0, r2
 8003502:	f000 fa25 	bl	8003950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2248      	movs	r2, #72	@ 0x48
 800350a:	2101      	movs	r1, #1
 800350c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	223e      	movs	r2, #62	@ 0x3e
 8003512:	2101      	movs	r1, #1
 8003514:	5499      	strb	r1, [r3, r2]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	223f      	movs	r2, #63	@ 0x3f
 800351a:	2101      	movs	r1, #1
 800351c:	5499      	strb	r1, [r3, r2]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2240      	movs	r2, #64	@ 0x40
 8003522:	2101      	movs	r1, #1
 8003524:	5499      	strb	r1, [r3, r2]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2241      	movs	r2, #65	@ 0x41
 800352a:	2101      	movs	r1, #1
 800352c:	5499      	strb	r1, [r3, r2]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2242      	movs	r2, #66	@ 0x42
 8003532:	2101      	movs	r1, #1
 8003534:	5499      	strb	r1, [r3, r2]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2243      	movs	r2, #67	@ 0x43
 800353a:	2101      	movs	r1, #1
 800353c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2244      	movs	r2, #68	@ 0x44
 8003542:	2101      	movs	r1, #1
 8003544:	5499      	strb	r1, [r3, r2]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2245      	movs	r2, #69	@ 0x45
 800354a:	2101      	movs	r1, #1
 800354c:	5499      	strb	r1, [r3, r2]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2246      	movs	r2, #70	@ 0x46
 8003552:	2101      	movs	r1, #1
 8003554:	5499      	strb	r1, [r3, r2]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2247      	movs	r2, #71	@ 0x47
 800355a:	2101      	movs	r1, #1
 800355c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	223d      	movs	r2, #61	@ 0x3d
 8003562:	2101      	movs	r1, #1
 8003564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b002      	add	sp, #8
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d108      	bne.n	8003592 <HAL_TIM_PWM_Start+0x22>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	223e      	movs	r2, #62	@ 0x3e
 8003584:	5c9b      	ldrb	r3, [r3, r2]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	1e5a      	subs	r2, r3, #1
 800358c:	4193      	sbcs	r3, r2
 800358e:	b2db      	uxtb	r3, r3
 8003590:	e037      	b.n	8003602 <HAL_TIM_PWM_Start+0x92>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b04      	cmp	r3, #4
 8003596:	d108      	bne.n	80035aa <HAL_TIM_PWM_Start+0x3a>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	223f      	movs	r2, #63	@ 0x3f
 800359c:	5c9b      	ldrb	r3, [r3, r2]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	1e5a      	subs	r2, r3, #1
 80035a4:	4193      	sbcs	r3, r2
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	e02b      	b.n	8003602 <HAL_TIM_PWM_Start+0x92>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d108      	bne.n	80035c2 <HAL_TIM_PWM_Start+0x52>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2240      	movs	r2, #64	@ 0x40
 80035b4:	5c9b      	ldrb	r3, [r3, r2]
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	1e5a      	subs	r2, r3, #1
 80035bc:	4193      	sbcs	r3, r2
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	e01f      	b.n	8003602 <HAL_TIM_PWM_Start+0x92>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	d108      	bne.n	80035da <HAL_TIM_PWM_Start+0x6a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2241      	movs	r2, #65	@ 0x41
 80035cc:	5c9b      	ldrb	r3, [r3, r2]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	1e5a      	subs	r2, r3, #1
 80035d4:	4193      	sbcs	r3, r2
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	e013      	b.n	8003602 <HAL_TIM_PWM_Start+0x92>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b10      	cmp	r3, #16
 80035de:	d108      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x82>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2242      	movs	r2, #66	@ 0x42
 80035e4:	5c9b      	ldrb	r3, [r3, r2]
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3b01      	subs	r3, #1
 80035ea:	1e5a      	subs	r2, r3, #1
 80035ec:	4193      	sbcs	r3, r2
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e007      	b.n	8003602 <HAL_TIM_PWM_Start+0x92>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2243      	movs	r2, #67	@ 0x43
 80035f6:	5c9b      	ldrb	r3, [r3, r2]
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	1e5a      	subs	r2, r3, #1
 80035fe:	4193      	sbcs	r3, r2
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e090      	b.n	800372c <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d104      	bne.n	800361a <HAL_TIM_PWM_Start+0xaa>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	223e      	movs	r2, #62	@ 0x3e
 8003614:	2102      	movs	r1, #2
 8003616:	5499      	strb	r1, [r3, r2]
 8003618:	e023      	b.n	8003662 <HAL_TIM_PWM_Start+0xf2>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b04      	cmp	r3, #4
 800361e:	d104      	bne.n	800362a <HAL_TIM_PWM_Start+0xba>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	223f      	movs	r2, #63	@ 0x3f
 8003624:	2102      	movs	r1, #2
 8003626:	5499      	strb	r1, [r3, r2]
 8003628:	e01b      	b.n	8003662 <HAL_TIM_PWM_Start+0xf2>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b08      	cmp	r3, #8
 800362e:	d104      	bne.n	800363a <HAL_TIM_PWM_Start+0xca>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2240      	movs	r2, #64	@ 0x40
 8003634:	2102      	movs	r1, #2
 8003636:	5499      	strb	r1, [r3, r2]
 8003638:	e013      	b.n	8003662 <HAL_TIM_PWM_Start+0xf2>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b0c      	cmp	r3, #12
 800363e:	d104      	bne.n	800364a <HAL_TIM_PWM_Start+0xda>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2241      	movs	r2, #65	@ 0x41
 8003644:	2102      	movs	r1, #2
 8003646:	5499      	strb	r1, [r3, r2]
 8003648:	e00b      	b.n	8003662 <HAL_TIM_PWM_Start+0xf2>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b10      	cmp	r3, #16
 800364e:	d104      	bne.n	800365a <HAL_TIM_PWM_Start+0xea>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2242      	movs	r2, #66	@ 0x42
 8003654:	2102      	movs	r1, #2
 8003656:	5499      	strb	r1, [r3, r2]
 8003658:	e003      	b.n	8003662 <HAL_TIM_PWM_Start+0xf2>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2243      	movs	r2, #67	@ 0x43
 800365e:	2102      	movs	r1, #2
 8003660:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6839      	ldr	r1, [r7, #0]
 8003668:	2201      	movs	r2, #1
 800366a:	0018      	movs	r0, r3
 800366c:	f000 fccc 	bl	8004008 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a2f      	ldr	r2, [pc, #188]	@ (8003734 <HAL_TIM_PWM_Start+0x1c4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00e      	beq.n	8003698 <HAL_TIM_PWM_Start+0x128>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2e      	ldr	r2, [pc, #184]	@ (8003738 <HAL_TIM_PWM_Start+0x1c8>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d009      	beq.n	8003698 <HAL_TIM_PWM_Start+0x128>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a2c      	ldr	r2, [pc, #176]	@ (800373c <HAL_TIM_PWM_Start+0x1cc>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d004      	beq.n	8003698 <HAL_TIM_PWM_Start+0x128>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a2b      	ldr	r2, [pc, #172]	@ (8003740 <HAL_TIM_PWM_Start+0x1d0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d101      	bne.n	800369c <HAL_TIM_PWM_Start+0x12c>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_TIM_PWM_Start+0x12e>
 800369c:	2300      	movs	r3, #0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2180      	movs	r1, #128	@ 0x80
 80036ae:	0209      	lsls	r1, r1, #8
 80036b0:	430a      	orrs	r2, r1
 80036b2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003734 <HAL_TIM_PWM_Start+0x1c4>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d014      	beq.n	80036e8 <HAL_TIM_PWM_Start+0x178>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	2380      	movs	r3, #128	@ 0x80
 80036c4:	05db      	lsls	r3, r3, #23
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d00e      	beq.n	80036e8 <HAL_TIM_PWM_Start+0x178>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1d      	ldr	r2, [pc, #116]	@ (8003744 <HAL_TIM_PWM_Start+0x1d4>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d009      	beq.n	80036e8 <HAL_TIM_PWM_Start+0x178>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003748 <HAL_TIM_PWM_Start+0x1d8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d004      	beq.n	80036e8 <HAL_TIM_PWM_Start+0x178>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a15      	ldr	r2, [pc, #84]	@ (8003738 <HAL_TIM_PWM_Start+0x1c8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d116      	bne.n	8003716 <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	4a17      	ldr	r2, [pc, #92]	@ (800374c <HAL_TIM_PWM_Start+0x1dc>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	d016      	beq.n	8003728 <HAL_TIM_PWM_Start+0x1b8>
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	2380      	movs	r3, #128	@ 0x80
 80036fe:	025b      	lsls	r3, r3, #9
 8003700:	429a      	cmp	r2, r3
 8003702:	d011      	beq.n	8003728 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2101      	movs	r1, #1
 8003710:	430a      	orrs	r2, r1
 8003712:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003714:	e008      	b.n	8003728 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2101      	movs	r1, #1
 8003722:	430a      	orrs	r2, r1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e000      	b.n	800372a <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003728:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	0018      	movs	r0, r3
 800372e:	46bd      	mov	sp, r7
 8003730:	b004      	add	sp, #16
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40012c00 	.word	0x40012c00
 8003738:	40014000 	.word	0x40014000
 800373c:	40014400 	.word	0x40014400
 8003740:	40014800 	.word	0x40014800
 8003744:	40000400 	.word	0x40000400
 8003748:	40000800 	.word	0x40000800
 800374c:	00010007 	.word	0x00010007

08003750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800375c:	2317      	movs	r3, #23
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	223c      	movs	r2, #60	@ 0x3c
 8003768:	5c9b      	ldrb	r3, [r3, r2]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d101      	bne.n	8003772 <HAL_TIM_PWM_ConfigChannel+0x22>
 800376e:	2302      	movs	r3, #2
 8003770:	e0e5      	b.n	800393e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	223c      	movs	r2, #60	@ 0x3c
 8003776:	2101      	movs	r1, #1
 8003778:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b14      	cmp	r3, #20
 800377e:	d900      	bls.n	8003782 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003780:	e0d1      	b.n	8003926 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	009a      	lsls	r2, r3, #2
 8003786:	4b70      	ldr	r3, [pc, #448]	@ (8003948 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003788:	18d3      	adds	r3, r2, r3
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	0011      	movs	r1, r2
 8003796:	0018      	movs	r0, r3
 8003798:	f000 f972 	bl	8003a80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	699a      	ldr	r2, [r3, #24]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2108      	movs	r1, #8
 80037a8:	430a      	orrs	r2, r1
 80037aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699a      	ldr	r2, [r3, #24]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2104      	movs	r1, #4
 80037b8:	438a      	bics	r2, r1
 80037ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6999      	ldr	r1, [r3, #24]
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	619a      	str	r2, [r3, #24]
      break;
 80037ce:	e0af      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	0011      	movs	r1, r2
 80037d8:	0018      	movs	r0, r3
 80037da:	f000 f9db 	bl	8003b94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2180      	movs	r1, #128	@ 0x80
 80037ea:	0109      	lsls	r1, r1, #4
 80037ec:	430a      	orrs	r2, r1
 80037ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4954      	ldr	r1, [pc, #336]	@ (800394c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80037fc:	400a      	ands	r2, r1
 80037fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6999      	ldr	r1, [r3, #24]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	021a      	lsls	r2, r3, #8
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	619a      	str	r2, [r3, #24]
      break;
 8003814:	e08c      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	0011      	movs	r1, r2
 800381e:	0018      	movs	r0, r3
 8003820:	f000 fa3c 	bl	8003c9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2108      	movs	r1, #8
 8003830:	430a      	orrs	r2, r1
 8003832:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69da      	ldr	r2, [r3, #28]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2104      	movs	r1, #4
 8003840:	438a      	bics	r2, r1
 8003842:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69d9      	ldr	r1, [r3, #28]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	691a      	ldr	r2, [r3, #16]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	61da      	str	r2, [r3, #28]
      break;
 8003856:	e06b      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68ba      	ldr	r2, [r7, #8]
 800385e:	0011      	movs	r1, r2
 8003860:	0018      	movs	r0, r3
 8003862:	f000 faa3 	bl	8003dac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69da      	ldr	r2, [r3, #28]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2180      	movs	r1, #128	@ 0x80
 8003872:	0109      	lsls	r1, r1, #4
 8003874:	430a      	orrs	r2, r1
 8003876:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	69da      	ldr	r2, [r3, #28]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4932      	ldr	r1, [pc, #200]	@ (800394c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003884:	400a      	ands	r2, r1
 8003886:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69d9      	ldr	r1, [r3, #28]
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	021a      	lsls	r2, r3, #8
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	61da      	str	r2, [r3, #28]
      break;
 800389c:	e048      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	0011      	movs	r1, r2
 80038a6:	0018      	movs	r0, r3
 80038a8:	f000 faea 	bl	8003e80 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2108      	movs	r1, #8
 80038b8:	430a      	orrs	r2, r1
 80038ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2104      	movs	r1, #4
 80038c8:	438a      	bics	r2, r1
 80038ca:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	691a      	ldr	r2, [r3, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80038de:	e027      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68ba      	ldr	r2, [r7, #8]
 80038e6:	0011      	movs	r1, r2
 80038e8:	0018      	movs	r0, r3
 80038ea:	f000 fb29 	bl	8003f40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2180      	movs	r1, #128	@ 0x80
 80038fa:	0109      	lsls	r1, r1, #4
 80038fc:	430a      	orrs	r2, r1
 80038fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4910      	ldr	r1, [pc, #64]	@ (800394c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800390c:	400a      	ands	r2, r1
 800390e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	021a      	lsls	r2, r3, #8
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003924:	e004      	b.n	8003930 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003926:	2317      	movs	r3, #23
 8003928:	18fb      	adds	r3, r7, r3
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
      break;
 800392e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	223c      	movs	r2, #60	@ 0x3c
 8003934:	2100      	movs	r1, #0
 8003936:	5499      	strb	r1, [r3, r2]

  return status;
 8003938:	2317      	movs	r3, #23
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	781b      	ldrb	r3, [r3, #0]
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b006      	add	sp, #24
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			@ (mov r8, r8)
 8003948:	08009594 	.word	0x08009594
 800394c:	fffffbff 	.word	0xfffffbff

08003950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a3f      	ldr	r2, [pc, #252]	@ (8003a60 <TIM_Base_SetConfig+0x110>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00c      	beq.n	8003982 <TIM_Base_SetConfig+0x32>
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	2380      	movs	r3, #128	@ 0x80
 800396c:	05db      	lsls	r3, r3, #23
 800396e:	429a      	cmp	r2, r3
 8003970:	d007      	beq.n	8003982 <TIM_Base_SetConfig+0x32>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a3b      	ldr	r2, [pc, #236]	@ (8003a64 <TIM_Base_SetConfig+0x114>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_Base_SetConfig+0x32>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a68 <TIM_Base_SetConfig+0x118>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d108      	bne.n	8003994 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2270      	movs	r2, #112	@ 0x70
 8003986:	4393      	bics	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a32      	ldr	r2, [pc, #200]	@ (8003a60 <TIM_Base_SetConfig+0x110>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d01c      	beq.n	80039d6 <TIM_Base_SetConfig+0x86>
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	2380      	movs	r3, #128	@ 0x80
 80039a0:	05db      	lsls	r3, r3, #23
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d017      	beq.n	80039d6 <TIM_Base_SetConfig+0x86>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003a64 <TIM_Base_SetConfig+0x114>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d013      	beq.n	80039d6 <TIM_Base_SetConfig+0x86>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003a68 <TIM_Base_SetConfig+0x118>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00f      	beq.n	80039d6 <TIM_Base_SetConfig+0x86>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a2c      	ldr	r2, [pc, #176]	@ (8003a6c <TIM_Base_SetConfig+0x11c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <TIM_Base_SetConfig+0x86>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003a70 <TIM_Base_SetConfig+0x120>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d007      	beq.n	80039d6 <TIM_Base_SetConfig+0x86>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a2a      	ldr	r2, [pc, #168]	@ (8003a74 <TIM_Base_SetConfig+0x124>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d003      	beq.n	80039d6 <TIM_Base_SetConfig+0x86>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a29      	ldr	r2, [pc, #164]	@ (8003a78 <TIM_Base_SetConfig+0x128>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d108      	bne.n	80039e8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4a28      	ldr	r2, [pc, #160]	@ (8003a7c <TIM_Base_SetConfig+0x12c>)
 80039da:	4013      	ands	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2280      	movs	r2, #128	@ 0x80
 80039ec:	4393      	bics	r3, r2
 80039ee:	001a      	movs	r2, r3
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	695b      	ldr	r3, [r3, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	689a      	ldr	r2, [r3, #8]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a13      	ldr	r2, [pc, #76]	@ (8003a60 <TIM_Base_SetConfig+0x110>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00b      	beq.n	8003a2e <TIM_Base_SetConfig+0xde>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a15      	ldr	r2, [pc, #84]	@ (8003a70 <TIM_Base_SetConfig+0x120>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d007      	beq.n	8003a2e <TIM_Base_SetConfig+0xde>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a14      	ldr	r2, [pc, #80]	@ (8003a74 <TIM_Base_SetConfig+0x124>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <TIM_Base_SetConfig+0xde>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a13      	ldr	r2, [pc, #76]	@ (8003a78 <TIM_Base_SetConfig+0x128>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d103      	bne.n	8003a36 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	2201      	movs	r2, #1
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d106      	bne.n	8003a56 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	4393      	bics	r3, r2
 8003a50:	001a      	movs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	611a      	str	r2, [r3, #16]
  }
}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b004      	add	sp, #16
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			@ (mov r8, r8)
 8003a60:	40012c00 	.word	0x40012c00
 8003a64:	40000400 	.word	0x40000400
 8003a68:	40000800 	.word	0x40000800
 8003a6c:	40002000 	.word	0x40002000
 8003a70:	40014000 	.word	0x40014000
 8003a74:	40014400 	.word	0x40014400
 8003a78:	40014800 	.word	0x40014800
 8003a7c:	fffffcff 	.word	0xfffffcff

08003a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6a1b      	ldr	r3, [r3, #32]
 8003a94:	2201      	movs	r2, #1
 8003a96:	4393      	bics	r3, r2
 8003a98:	001a      	movs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a32      	ldr	r2, [pc, #200]	@ (8003b78 <TIM_OC1_SetConfig+0xf8>)
 8003aae:	4013      	ands	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	4393      	bics	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	4393      	bics	r3, r2
 8003aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a28      	ldr	r2, [pc, #160]	@ (8003b7c <TIM_OC1_SetConfig+0xfc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <TIM_OC1_SetConfig+0x76>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a27      	ldr	r2, [pc, #156]	@ (8003b80 <TIM_OC1_SetConfig+0x100>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d007      	beq.n	8003af6 <TIM_OC1_SetConfig+0x76>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a26      	ldr	r2, [pc, #152]	@ (8003b84 <TIM_OC1_SetConfig+0x104>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d003      	beq.n	8003af6 <TIM_OC1_SetConfig+0x76>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a25      	ldr	r2, [pc, #148]	@ (8003b88 <TIM_OC1_SetConfig+0x108>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d10c      	bne.n	8003b10 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2208      	movs	r2, #8
 8003afa:	4393      	bics	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	2204      	movs	r2, #4
 8003b0c:	4393      	bics	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a1a      	ldr	r2, [pc, #104]	@ (8003b7c <TIM_OC1_SetConfig+0xfc>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d00b      	beq.n	8003b30 <TIM_OC1_SetConfig+0xb0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a19      	ldr	r2, [pc, #100]	@ (8003b80 <TIM_OC1_SetConfig+0x100>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d007      	beq.n	8003b30 <TIM_OC1_SetConfig+0xb0>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a18      	ldr	r2, [pc, #96]	@ (8003b84 <TIM_OC1_SetConfig+0x104>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_OC1_SetConfig+0xb0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a17      	ldr	r2, [pc, #92]	@ (8003b88 <TIM_OC1_SetConfig+0x108>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d111      	bne.n	8003b54 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4a16      	ldr	r2, [pc, #88]	@ (8003b8c <TIM_OC1_SetConfig+0x10c>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4a15      	ldr	r2, [pc, #84]	@ (8003b90 <TIM_OC1_SetConfig+0x110>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	621a      	str	r2, [r3, #32]
}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b006      	add	sp, #24
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	46c0      	nop			@ (mov r8, r8)
 8003b78:	fffeff8f 	.word	0xfffeff8f
 8003b7c:	40012c00 	.word	0x40012c00
 8003b80:	40014000 	.word	0x40014000
 8003b84:	40014400 	.word	0x40014400
 8003b88:	40014800 	.word	0x40014800
 8003b8c:	fffffeff 	.word	0xfffffeff
 8003b90:	fffffdff 	.word	0xfffffdff

08003b94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a1b      	ldr	r3, [r3, #32]
 8003ba2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	2210      	movs	r2, #16
 8003baa:	4393      	bics	r3, r2
 8003bac:	001a      	movs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8003c7c <TIM_OC2_SetConfig+0xe8>)
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8003c80 <TIM_OC2_SetConfig+0xec>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	021b      	lsls	r3, r3, #8
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	4393      	bics	r3, r2
 8003be0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a24      	ldr	r2, [pc, #144]	@ (8003c84 <TIM_OC2_SetConfig+0xf0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d10d      	bne.n	8003c12 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2280      	movs	r2, #128	@ 0x80
 8003bfa:	4393      	bics	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2240      	movs	r2, #64	@ 0x40
 8003c0e:	4393      	bics	r3, r2
 8003c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a1b      	ldr	r2, [pc, #108]	@ (8003c84 <TIM_OC2_SetConfig+0xf0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d00b      	beq.n	8003c32 <TIM_OC2_SetConfig+0x9e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8003c88 <TIM_OC2_SetConfig+0xf4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d007      	beq.n	8003c32 <TIM_OC2_SetConfig+0x9e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a19      	ldr	r2, [pc, #100]	@ (8003c8c <TIM_OC2_SetConfig+0xf8>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d003      	beq.n	8003c32 <TIM_OC2_SetConfig+0x9e>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a18      	ldr	r2, [pc, #96]	@ (8003c90 <TIM_OC2_SetConfig+0xfc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d113      	bne.n	8003c5a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4a17      	ldr	r2, [pc, #92]	@ (8003c94 <TIM_OC2_SetConfig+0x100>)
 8003c36:	4013      	ands	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4a16      	ldr	r2, [pc, #88]	@ (8003c98 <TIM_OC2_SetConfig+0x104>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	621a      	str	r2, [r3, #32]
}
 8003c74:	46c0      	nop			@ (mov r8, r8)
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b006      	add	sp, #24
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	feff8fff 	.word	0xfeff8fff
 8003c80:	fffffcff 	.word	0xfffffcff
 8003c84:	40012c00 	.word	0x40012c00
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40014400 	.word	0x40014400
 8003c90:	40014800 	.word	0x40014800
 8003c94:	fffffbff 	.word	0xfffffbff
 8003c98:	fffff7ff 	.word	0xfffff7ff

08003c9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a1b      	ldr	r3, [r3, #32]
 8003cb0:	4a33      	ldr	r2, [pc, #204]	@ (8003d80 <TIM_OC3_SetConfig+0xe4>)
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a2f      	ldr	r2, [pc, #188]	@ (8003d84 <TIM_OC3_SetConfig+0xe8>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2203      	movs	r2, #3
 8003cd0:	4393      	bics	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	4a29      	ldr	r2, [pc, #164]	@ (8003d88 <TIM_OC3_SetConfig+0xec>)
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a25      	ldr	r2, [pc, #148]	@ (8003d8c <TIM_OC3_SetConfig+0xf0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10d      	bne.n	8003d16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	4a24      	ldr	r2, [pc, #144]	@ (8003d90 <TIM_OC3_SetConfig+0xf4>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	4a20      	ldr	r2, [pc, #128]	@ (8003d94 <TIM_OC3_SetConfig+0xf8>)
 8003d12:	4013      	ands	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a1c      	ldr	r2, [pc, #112]	@ (8003d8c <TIM_OC3_SetConfig+0xf0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00b      	beq.n	8003d36 <TIM_OC3_SetConfig+0x9a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a1d      	ldr	r2, [pc, #116]	@ (8003d98 <TIM_OC3_SetConfig+0xfc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <TIM_OC3_SetConfig+0x9a>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a1c      	ldr	r2, [pc, #112]	@ (8003d9c <TIM_OC3_SetConfig+0x100>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_OC3_SetConfig+0x9a>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a1b      	ldr	r2, [pc, #108]	@ (8003da0 <TIM_OC3_SetConfig+0x104>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d113      	bne.n	8003d5e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4a1a      	ldr	r2, [pc, #104]	@ (8003da4 <TIM_OC3_SetConfig+0x108>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4a19      	ldr	r2, [pc, #100]	@ (8003da8 <TIM_OC3_SetConfig+0x10c>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	621a      	str	r2, [r3, #32]
}
 8003d78:	46c0      	nop			@ (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b006      	add	sp, #24
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	fffffeff 	.word	0xfffffeff
 8003d84:	fffeff8f 	.word	0xfffeff8f
 8003d88:	fffffdff 	.word	0xfffffdff
 8003d8c:	40012c00 	.word	0x40012c00
 8003d90:	fffff7ff 	.word	0xfffff7ff
 8003d94:	fffffbff 	.word	0xfffffbff
 8003d98:	40014000 	.word	0x40014000
 8003d9c:	40014400 	.word	0x40014400
 8003da0:	40014800 	.word	0x40014800
 8003da4:	ffffefff 	.word	0xffffefff
 8003da8:	ffffdfff 	.word	0xffffdfff

08003dac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	4a26      	ldr	r2, [pc, #152]	@ (8003e5c <TIM_OC4_SetConfig+0xb0>)
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4a22      	ldr	r2, [pc, #136]	@ (8003e60 <TIM_OC4_SetConfig+0xb4>)
 8003dd8:	4013      	ands	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4a21      	ldr	r2, [pc, #132]	@ (8003e64 <TIM_OC4_SetConfig+0xb8>)
 8003de0:	4013      	ands	r3, r2
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	021b      	lsls	r3, r3, #8
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4a1d      	ldr	r2, [pc, #116]	@ (8003e68 <TIM_OC4_SetConfig+0xbc>)
 8003df4:	4013      	ands	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	031b      	lsls	r3, r3, #12
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a19      	ldr	r2, [pc, #100]	@ (8003e6c <TIM_OC4_SetConfig+0xc0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d00b      	beq.n	8003e24 <TIM_OC4_SetConfig+0x78>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a18      	ldr	r2, [pc, #96]	@ (8003e70 <TIM_OC4_SetConfig+0xc4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d007      	beq.n	8003e24 <TIM_OC4_SetConfig+0x78>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a17      	ldr	r2, [pc, #92]	@ (8003e74 <TIM_OC4_SetConfig+0xc8>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d003      	beq.n	8003e24 <TIM_OC4_SetConfig+0x78>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a16      	ldr	r2, [pc, #88]	@ (8003e78 <TIM_OC4_SetConfig+0xcc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d109      	bne.n	8003e38 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	4a15      	ldr	r2, [pc, #84]	@ (8003e7c <TIM_OC4_SetConfig+0xd0>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	019b      	lsls	r3, r3, #6
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	621a      	str	r2, [r3, #32]
}
 8003e52:	46c0      	nop			@ (mov r8, r8)
 8003e54:	46bd      	mov	sp, r7
 8003e56:	b006      	add	sp, #24
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	46c0      	nop			@ (mov r8, r8)
 8003e5c:	ffffefff 	.word	0xffffefff
 8003e60:	feff8fff 	.word	0xfeff8fff
 8003e64:	fffffcff 	.word	0xfffffcff
 8003e68:	ffffdfff 	.word	0xffffdfff
 8003e6c:	40012c00 	.word	0x40012c00
 8003e70:	40014000 	.word	0x40014000
 8003e74:	40014400 	.word	0x40014400
 8003e78:	40014800 	.word	0x40014800
 8003e7c:	ffffbfff 	.word	0xffffbfff

08003e80 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a1b      	ldr	r3, [r3, #32]
 8003e94:	4a23      	ldr	r2, [pc, #140]	@ (8003f24 <TIM_OC5_SetConfig+0xa4>)
 8003e96:	401a      	ands	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8003f28 <TIM_OC5_SetConfig+0xa8>)
 8003eac:	4013      	ands	r3, r2
 8003eae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4a1b      	ldr	r2, [pc, #108]	@ (8003f2c <TIM_OC5_SetConfig+0xac>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	041b      	lsls	r3, r3, #16
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a17      	ldr	r2, [pc, #92]	@ (8003f30 <TIM_OC5_SetConfig+0xb0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00b      	beq.n	8003eee <TIM_OC5_SetConfig+0x6e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a16      	ldr	r2, [pc, #88]	@ (8003f34 <TIM_OC5_SetConfig+0xb4>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d007      	beq.n	8003eee <TIM_OC5_SetConfig+0x6e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a15      	ldr	r2, [pc, #84]	@ (8003f38 <TIM_OC5_SetConfig+0xb8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d003      	beq.n	8003eee <TIM_OC5_SetConfig+0x6e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a14      	ldr	r2, [pc, #80]	@ (8003f3c <TIM_OC5_SetConfig+0xbc>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d109      	bne.n	8003f02 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f24 <TIM_OC5_SetConfig+0xa4>)
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685a      	ldr	r2, [r3, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	621a      	str	r2, [r3, #32]
}
 8003f1c:	46c0      	nop			@ (mov r8, r8)
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	b006      	add	sp, #24
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	fffeffff 	.word	0xfffeffff
 8003f28:	fffeff8f 	.word	0xfffeff8f
 8003f2c:	fffdffff 	.word	0xfffdffff
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40014400 	.word	0x40014400
 8003f3c:	40014800 	.word	0x40014800

08003f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	4a24      	ldr	r2, [pc, #144]	@ (8003fe8 <TIM_OC6_SetConfig+0xa8>)
 8003f56:	401a      	ands	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4a20      	ldr	r2, [pc, #128]	@ (8003fec <TIM_OC6_SetConfig+0xac>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff0 <TIM_OC6_SetConfig+0xb0>)
 8003f80:	4013      	ands	r3, r2
 8003f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	051b      	lsls	r3, r3, #20
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4a18      	ldr	r2, [pc, #96]	@ (8003ff4 <TIM_OC6_SetConfig+0xb4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d00b      	beq.n	8003fb0 <TIM_OC6_SetConfig+0x70>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a17      	ldr	r2, [pc, #92]	@ (8003ff8 <TIM_OC6_SetConfig+0xb8>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d007      	beq.n	8003fb0 <TIM_OC6_SetConfig+0x70>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a16      	ldr	r2, [pc, #88]	@ (8003ffc <TIM_OC6_SetConfig+0xbc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <TIM_OC6_SetConfig+0x70>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a15      	ldr	r2, [pc, #84]	@ (8004000 <TIM_OC6_SetConfig+0xc0>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d109      	bne.n	8003fc4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	4a14      	ldr	r2, [pc, #80]	@ (8004004 <TIM_OC6_SetConfig+0xc4>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	029b      	lsls	r3, r3, #10
 8003fbe:	697a      	ldr	r2, [r7, #20]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	621a      	str	r2, [r3, #32]
}
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	b006      	add	sp, #24
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	46c0      	nop			@ (mov r8, r8)
 8003fe8:	ffefffff 	.word	0xffefffff
 8003fec:	feff8fff 	.word	0xfeff8fff
 8003ff0:	ffdfffff 	.word	0xffdfffff
 8003ff4:	40012c00 	.word	0x40012c00
 8003ff8:	40014000 	.word	0x40014000
 8003ffc:	40014400 	.word	0x40014400
 8004000:	40014800 	.word	0x40014800
 8004004:	fffbffff 	.word	0xfffbffff

08004008 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b086      	sub	sp, #24
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	221f      	movs	r2, #31
 8004018:	4013      	ands	r3, r2
 800401a:	2201      	movs	r2, #1
 800401c:	409a      	lsls	r2, r3
 800401e:	0013      	movs	r3, r2
 8004020:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	43d2      	mvns	r2, r2
 800402a:	401a      	ands	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1a      	ldr	r2, [r3, #32]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	211f      	movs	r1, #31
 8004038:	400b      	ands	r3, r1
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4099      	lsls	r1, r3
 800403e:	000b      	movs	r3, r1
 8004040:	431a      	orrs	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]
}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	46bd      	mov	sp, r7
 800404a:	b006      	add	sp, #24
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	223c      	movs	r2, #60	@ 0x3c
 800405e:	5c9b      	ldrb	r3, [r3, r2]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004064:	2302      	movs	r3, #2
 8004066:	e05a      	b.n	800411e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	223c      	movs	r2, #60	@ 0x3c
 800406c:	2101      	movs	r1, #1
 800406e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	223d      	movs	r2, #61	@ 0x3d
 8004074:	2102      	movs	r1, #2
 8004076:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a26      	ldr	r2, [pc, #152]	@ (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d108      	bne.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	4a25      	ldr	r2, [pc, #148]	@ (800412c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004096:	4013      	ands	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2270      	movs	r2, #112	@ 0x70
 80040a8:	4393      	bics	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a19      	ldr	r2, [pc, #100]	@ (8004128 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d014      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	2380      	movs	r3, #128	@ 0x80
 80040ce:	05db      	lsls	r3, r3, #23
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d00e      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a15      	ldr	r2, [pc, #84]	@ (8004130 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d009      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a14      	ldr	r2, [pc, #80]	@ (8004134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d004      	beq.n	80040f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a12      	ldr	r2, [pc, #72]	@ (8004138 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d10c      	bne.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	2280      	movs	r2, #128	@ 0x80
 80040f6:	4393      	bics	r3, r2
 80040f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	4313      	orrs	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	223d      	movs	r2, #61	@ 0x3d
 8004110:	2101      	movs	r1, #1
 8004112:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	223c      	movs	r2, #60	@ 0x3c
 8004118:	2100      	movs	r1, #0
 800411a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	0018      	movs	r0, r3
 8004120:	46bd      	mov	sp, r7
 8004122:	b004      	add	sp, #16
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			@ (mov r8, r8)
 8004128:	40012c00 	.word	0x40012c00
 800412c:	ff0fffff 	.word	0xff0fffff
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800
 8004138:	40014000 	.word	0x40014000

0800413c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e046      	b.n	80041dc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2288      	movs	r2, #136	@ 0x88
 8004152:	589b      	ldr	r3, [r3, r2]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d107      	bne.n	8004168 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2284      	movs	r2, #132	@ 0x84
 800415c:	2100      	movs	r1, #0
 800415e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	0018      	movs	r0, r3
 8004164:	f7fd fcd8 	bl	8001b18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2288      	movs	r2, #136	@ 0x88
 800416c:	2124      	movs	r1, #36	@ 0x24
 800416e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2101      	movs	r1, #1
 800417c:	438a      	bics	r2, r1
 800417e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	0018      	movs	r0, r3
 800418c:	f000 ff2a 	bl	8004fe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	0018      	movs	r0, r3
 8004194:	f000 fbd0 	bl	8004938 <UART_SetConfig>
 8004198:	0003      	movs	r3, r0
 800419a:	2b01      	cmp	r3, #1
 800419c:	d101      	bne.n	80041a2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e01c      	b.n	80041dc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	490d      	ldr	r1, [pc, #52]	@ (80041e4 <HAL_UART_Init+0xa8>)
 80041ae:	400a      	ands	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	212a      	movs	r1, #42	@ 0x2a
 80041be:	438a      	bics	r2, r1
 80041c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2101      	movs	r1, #1
 80041ce:	430a      	orrs	r2, r1
 80041d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	0018      	movs	r0, r3
 80041d6:	f000 ffb9 	bl	800514c <UART_CheckIdleState>
 80041da:	0003      	movs	r3, r0
}
 80041dc:	0018      	movs	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	b002      	add	sp, #8
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	ffffb7ff 	.word	0xffffb7ff

080041e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b088      	sub	sp, #32
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	1dbb      	adds	r3, r7, #6
 80041f4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	228c      	movs	r2, #140	@ 0x8c
 80041fa:	589b      	ldr	r3, [r3, r2]
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d14f      	bne.n	80042a0 <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_UART_Receive_IT+0x26>
 8004206:	1dbb      	adds	r3, r7, #6
 8004208:	881b      	ldrh	r3, [r3, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e047      	b.n	80042a2 <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689a      	ldr	r2, [r3, #8]
 8004216:	2380      	movs	r3, #128	@ 0x80
 8004218:	015b      	lsls	r3, r3, #5
 800421a:	429a      	cmp	r2, r3
 800421c:	d109      	bne.n	8004232 <HAL_UART_Receive_IT+0x4a>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d105      	bne.n	8004232 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	2201      	movs	r2, #1
 800422a:	4013      	ands	r3, r2
 800422c:	d001      	beq.n	8004232 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e037      	b.n	80042a2 <HAL_UART_Receive_IT+0xba>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a1b      	ldr	r2, [pc, #108]	@ (80042ac <HAL_UART_Receive_IT+0xc4>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d025      	beq.n	800428e <HAL_UART_Receive_IT+0xa6>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a1a      	ldr	r2, [pc, #104]	@ (80042b0 <HAL_UART_Receive_IT+0xc8>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d020      	beq.n	800428e <HAL_UART_Receive_IT+0xa6>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	2380      	movs	r3, #128	@ 0x80
 8004254:	041b      	lsls	r3, r3, #16
 8004256:	4013      	ands	r3, r2
 8004258:	d019      	beq.n	800428e <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425a:	f3ef 8310 	mrs	r3, PRIMASK
 800425e:	613b      	str	r3, [r7, #16]
  return(result);
 8004260:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004262:	61fb      	str	r3, [r7, #28]
 8004264:	2301      	movs	r3, #1
 8004266:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f383 8810 	msr	PRIMASK, r3
}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2180      	movs	r1, #128	@ 0x80
 800427c:	04c9      	lsls	r1, r1, #19
 800427e:	430a      	orrs	r2, r1
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	f383 8810 	msr	PRIMASK, r3
}
 800428c:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800428e:	1dbb      	adds	r3, r7, #6
 8004290:	881a      	ldrh	r2, [r3, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	0018      	movs	r0, r3
 8004298:	f001 f872 	bl	8005380 <UART_Start_Receive_IT>
 800429c:	0003      	movs	r3, r0
 800429e:	e000      	b.n	80042a2 <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
  }
}
 80042a2:	0018      	movs	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b008      	add	sp, #32
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	40008000 	.word	0x40008000
 80042b0:	40008400 	.word	0x40008400

080042b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042b4:	b5b0      	push	{r4, r5, r7, lr}
 80042b6:	b0aa      	sub	sp, #168	@ 0xa8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	22a4      	movs	r2, #164	@ 0xa4
 80042c4:	18b9      	adds	r1, r7, r2
 80042c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	20a0      	movs	r0, #160	@ 0xa0
 80042d0:	1839      	adds	r1, r7, r0
 80042d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	249c      	movs	r4, #156	@ 0x9c
 80042dc:	1939      	adds	r1, r7, r4
 80042de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042e0:	0011      	movs	r1, r2
 80042e2:	18bb      	adds	r3, r7, r2
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4aa2      	ldr	r2, [pc, #648]	@ (8004570 <HAL_UART_IRQHandler+0x2bc>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	2298      	movs	r2, #152	@ 0x98
 80042ec:	18bd      	adds	r5, r7, r2
 80042ee:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80042f0:	18bb      	adds	r3, r7, r2
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d11a      	bne.n	800432e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80042f8:	187b      	adds	r3, r7, r1
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2220      	movs	r2, #32
 80042fe:	4013      	ands	r3, r2
 8004300:	d015      	beq.n	800432e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004302:	183b      	adds	r3, r7, r0
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2220      	movs	r2, #32
 8004308:	4013      	ands	r3, r2
 800430a:	d105      	bne.n	8004318 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800430c:	193b      	adds	r3, r7, r4
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	2380      	movs	r3, #128	@ 0x80
 8004312:	055b      	lsls	r3, r3, #21
 8004314:	4013      	ands	r3, r2
 8004316:	d00a      	beq.n	800432e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431c:	2b00      	cmp	r3, #0
 800431e:	d100      	bne.n	8004322 <HAL_UART_IRQHandler+0x6e>
 8004320:	e2dc      	b.n	80048dc <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	0010      	movs	r0, r2
 800432a:	4798      	blx	r3
      }
      return;
 800432c:	e2d6      	b.n	80048dc <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800432e:	2398      	movs	r3, #152	@ 0x98
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d100      	bne.n	800433a <HAL_UART_IRQHandler+0x86>
 8004338:	e122      	b.n	8004580 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800433a:	239c      	movs	r3, #156	@ 0x9c
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a8c      	ldr	r2, [pc, #560]	@ (8004574 <HAL_UART_IRQHandler+0x2c0>)
 8004342:	4013      	ands	r3, r2
 8004344:	d106      	bne.n	8004354 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004346:	23a0      	movs	r3, #160	@ 0xa0
 8004348:	18fb      	adds	r3, r7, r3
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a8a      	ldr	r2, [pc, #552]	@ (8004578 <HAL_UART_IRQHandler+0x2c4>)
 800434e:	4013      	ands	r3, r2
 8004350:	d100      	bne.n	8004354 <HAL_UART_IRQHandler+0xa0>
 8004352:	e115      	b.n	8004580 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004354:	23a4      	movs	r3, #164	@ 0xa4
 8004356:	18fb      	adds	r3, r7, r3
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2201      	movs	r2, #1
 800435c:	4013      	ands	r3, r2
 800435e:	d012      	beq.n	8004386 <HAL_UART_IRQHandler+0xd2>
 8004360:	23a0      	movs	r3, #160	@ 0xa0
 8004362:	18fb      	adds	r3, r7, r3
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	2380      	movs	r3, #128	@ 0x80
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4013      	ands	r3, r2
 800436c:	d00b      	beq.n	8004386 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2201      	movs	r2, #1
 8004374:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2290      	movs	r2, #144	@ 0x90
 800437a:	589b      	ldr	r3, [r3, r2]
 800437c:	2201      	movs	r2, #1
 800437e:	431a      	orrs	r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2190      	movs	r1, #144	@ 0x90
 8004384:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004386:	23a4      	movs	r3, #164	@ 0xa4
 8004388:	18fb      	adds	r3, r7, r3
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2202      	movs	r2, #2
 800438e:	4013      	ands	r3, r2
 8004390:	d011      	beq.n	80043b6 <HAL_UART_IRQHandler+0x102>
 8004392:	239c      	movs	r3, #156	@ 0x9c
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2201      	movs	r2, #1
 800439a:	4013      	ands	r3, r2
 800439c:	d00b      	beq.n	80043b6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2202      	movs	r2, #2
 80043a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2290      	movs	r2, #144	@ 0x90
 80043aa:	589b      	ldr	r3, [r3, r2]
 80043ac:	2204      	movs	r2, #4
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2190      	movs	r1, #144	@ 0x90
 80043b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80043b6:	23a4      	movs	r3, #164	@ 0xa4
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2204      	movs	r2, #4
 80043be:	4013      	ands	r3, r2
 80043c0:	d011      	beq.n	80043e6 <HAL_UART_IRQHandler+0x132>
 80043c2:	239c      	movs	r3, #156	@ 0x9c
 80043c4:	18fb      	adds	r3, r7, r3
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2201      	movs	r2, #1
 80043ca:	4013      	ands	r3, r2
 80043cc:	d00b      	beq.n	80043e6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2204      	movs	r2, #4
 80043d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2290      	movs	r2, #144	@ 0x90
 80043da:	589b      	ldr	r3, [r3, r2]
 80043dc:	2202      	movs	r2, #2
 80043de:	431a      	orrs	r2, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2190      	movs	r1, #144	@ 0x90
 80043e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043e6:	23a4      	movs	r3, #164	@ 0xa4
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2208      	movs	r2, #8
 80043ee:	4013      	ands	r3, r2
 80043f0:	d017      	beq.n	8004422 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80043f2:	23a0      	movs	r3, #160	@ 0xa0
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2220      	movs	r2, #32
 80043fa:	4013      	ands	r3, r2
 80043fc:	d105      	bne.n	800440a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80043fe:	239c      	movs	r3, #156	@ 0x9c
 8004400:	18fb      	adds	r3, r7, r3
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a5b      	ldr	r2, [pc, #364]	@ (8004574 <HAL_UART_IRQHandler+0x2c0>)
 8004406:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004408:	d00b      	beq.n	8004422 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2208      	movs	r2, #8
 8004410:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2290      	movs	r2, #144	@ 0x90
 8004416:	589b      	ldr	r3, [r3, r2]
 8004418:	2208      	movs	r2, #8
 800441a:	431a      	orrs	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2190      	movs	r1, #144	@ 0x90
 8004420:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004422:	23a4      	movs	r3, #164	@ 0xa4
 8004424:	18fb      	adds	r3, r7, r3
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	2380      	movs	r3, #128	@ 0x80
 800442a:	011b      	lsls	r3, r3, #4
 800442c:	4013      	ands	r3, r2
 800442e:	d013      	beq.n	8004458 <HAL_UART_IRQHandler+0x1a4>
 8004430:	23a0      	movs	r3, #160	@ 0xa0
 8004432:	18fb      	adds	r3, r7, r3
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	2380      	movs	r3, #128	@ 0x80
 8004438:	04db      	lsls	r3, r3, #19
 800443a:	4013      	ands	r3, r2
 800443c:	d00c      	beq.n	8004458 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2280      	movs	r2, #128	@ 0x80
 8004444:	0112      	lsls	r2, r2, #4
 8004446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2290      	movs	r2, #144	@ 0x90
 800444c:	589b      	ldr	r3, [r3, r2]
 800444e:	2220      	movs	r2, #32
 8004450:	431a      	orrs	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2190      	movs	r1, #144	@ 0x90
 8004456:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2290      	movs	r2, #144	@ 0x90
 800445c:	589b      	ldr	r3, [r3, r2]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d100      	bne.n	8004464 <HAL_UART_IRQHandler+0x1b0>
 8004462:	e23d      	b.n	80048e0 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004464:	23a4      	movs	r3, #164	@ 0xa4
 8004466:	18fb      	adds	r3, r7, r3
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2220      	movs	r2, #32
 800446c:	4013      	ands	r3, r2
 800446e:	d015      	beq.n	800449c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004470:	23a0      	movs	r3, #160	@ 0xa0
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2220      	movs	r2, #32
 8004478:	4013      	ands	r3, r2
 800447a:	d106      	bne.n	800448a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800447c:	239c      	movs	r3, #156	@ 0x9c
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	2380      	movs	r3, #128	@ 0x80
 8004484:	055b      	lsls	r3, r3, #21
 8004486:	4013      	ands	r3, r2
 8004488:	d008      	beq.n	800449c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800448e:	2b00      	cmp	r3, #0
 8004490:	d004      	beq.n	800449c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	0010      	movs	r0, r2
 800449a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2290      	movs	r2, #144	@ 0x90
 80044a0:	589b      	ldr	r3, [r3, r2]
 80044a2:	2194      	movs	r1, #148	@ 0x94
 80044a4:	187a      	adds	r2, r7, r1
 80044a6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2240      	movs	r2, #64	@ 0x40
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b40      	cmp	r3, #64	@ 0x40
 80044b4:	d004      	beq.n	80044c0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80044b6:	187b      	adds	r3, r7, r1
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2228      	movs	r2, #40	@ 0x28
 80044bc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80044be:	d04c      	beq.n	800455a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	0018      	movs	r0, r3
 80044c4:	f001 f880 	bl	80055c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2240      	movs	r2, #64	@ 0x40
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b40      	cmp	r3, #64	@ 0x40
 80044d4:	d13c      	bne.n	8004550 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044d6:	f3ef 8310 	mrs	r3, PRIMASK
 80044da:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80044dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044de:	2090      	movs	r0, #144	@ 0x90
 80044e0:	183a      	adds	r2, r7, r0
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	2301      	movs	r3, #1
 80044e6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044ea:	f383 8810 	msr	PRIMASK, r3
}
 80044ee:	46c0      	nop			@ (mov r8, r8)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2140      	movs	r1, #64	@ 0x40
 80044fc:	438a      	bics	r2, r1
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	183b      	adds	r3, r7, r0
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004506:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004508:	f383 8810 	msr	PRIMASK, r3
}
 800450c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2280      	movs	r2, #128	@ 0x80
 8004512:	589b      	ldr	r3, [r3, r2]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d016      	beq.n	8004546 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2280      	movs	r2, #128	@ 0x80
 800451c:	589b      	ldr	r3, [r3, r2]
 800451e:	4a17      	ldr	r2, [pc, #92]	@ (800457c <HAL_UART_IRQHandler+0x2c8>)
 8004520:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2280      	movs	r2, #128	@ 0x80
 8004526:	589b      	ldr	r3, [r3, r2]
 8004528:	0018      	movs	r0, r3
 800452a:	f7fd fe25 	bl	8002178 <HAL_DMA_Abort_IT>
 800452e:	1e03      	subs	r3, r0, #0
 8004530:	d01c      	beq.n	800456c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2280      	movs	r2, #128	@ 0x80
 8004536:	589b      	ldr	r3, [r3, r2]
 8004538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	2180      	movs	r1, #128	@ 0x80
 800453e:	5852      	ldr	r2, [r2, r1]
 8004540:	0010      	movs	r0, r2
 8004542:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	e012      	b.n	800456c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f000 f9e1 	bl	8004910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454e:	e00d      	b.n	800456c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	0018      	movs	r0, r3
 8004554:	f000 f9dc 	bl	8004910 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004558:	e008      	b.n	800456c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	0018      	movs	r0, r3
 800455e:	f000 f9d7 	bl	8004910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2290      	movs	r2, #144	@ 0x90
 8004566:	2100      	movs	r1, #0
 8004568:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800456a:	e1b9      	b.n	80048e0 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800456c:	46c0      	nop			@ (mov r8, r8)
    return;
 800456e:	e1b7      	b.n	80048e0 <HAL_UART_IRQHandler+0x62c>
 8004570:	0000080f 	.word	0x0000080f
 8004574:	10000001 	.word	0x10000001
 8004578:	04000120 	.word	0x04000120
 800457c:	08005695 	.word	0x08005695

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d000      	beq.n	800458a <HAL_UART_IRQHandler+0x2d6>
 8004588:	e13e      	b.n	8004808 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800458a:	23a4      	movs	r3, #164	@ 0xa4
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2210      	movs	r2, #16
 8004592:	4013      	ands	r3, r2
 8004594:	d100      	bne.n	8004598 <HAL_UART_IRQHandler+0x2e4>
 8004596:	e137      	b.n	8004808 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004598:	23a0      	movs	r3, #160	@ 0xa0
 800459a:	18fb      	adds	r3, r7, r3
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2210      	movs	r2, #16
 80045a0:	4013      	ands	r3, r2
 80045a2:	d100      	bne.n	80045a6 <HAL_UART_IRQHandler+0x2f2>
 80045a4:	e130      	b.n	8004808 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	2210      	movs	r2, #16
 80045ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2240      	movs	r2, #64	@ 0x40
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b40      	cmp	r3, #64	@ 0x40
 80045ba:	d000      	beq.n	80045be <HAL_UART_IRQHandler+0x30a>
 80045bc:	e0a4      	b.n	8004708 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2280      	movs	r2, #128	@ 0x80
 80045c2:	589b      	ldr	r3, [r3, r2]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685a      	ldr	r2, [r3, #4]
 80045c8:	217e      	movs	r1, #126	@ 0x7e
 80045ca:	187b      	adds	r3, r7, r1
 80045cc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80045ce:	187b      	adds	r3, r7, r1
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d100      	bne.n	80045d8 <HAL_UART_IRQHandler+0x324>
 80045d6:	e185      	b.n	80048e4 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	225c      	movs	r2, #92	@ 0x5c
 80045dc:	5a9b      	ldrh	r3, [r3, r2]
 80045de:	187a      	adds	r2, r7, r1
 80045e0:	8812      	ldrh	r2, [r2, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d300      	bcc.n	80045e8 <HAL_UART_IRQHandler+0x334>
 80045e6:	e17d      	b.n	80048e4 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	187a      	adds	r2, r7, r1
 80045ec:	215e      	movs	r1, #94	@ 0x5e
 80045ee:	8812      	ldrh	r2, [r2, #0]
 80045f0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2280      	movs	r2, #128	@ 0x80
 80045f6:	589b      	ldr	r3, [r3, r2]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2220      	movs	r2, #32
 80045fe:	4013      	ands	r3, r2
 8004600:	d170      	bne.n	80046e4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004602:	f3ef 8310 	mrs	r3, PRIMASK
 8004606:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800460a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800460c:	2301      	movs	r3, #1
 800460e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004612:	f383 8810 	msr	PRIMASK, r3
}
 8004616:	46c0      	nop			@ (mov r8, r8)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	49b4      	ldr	r1, [pc, #720]	@ (80048f4 <HAL_UART_IRQHandler+0x640>)
 8004624:	400a      	ands	r2, r1
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800462a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800462c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462e:	f383 8810 	msr	PRIMASK, r3
}
 8004632:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004634:	f3ef 8310 	mrs	r3, PRIMASK
 8004638:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800463a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800463c:	677b      	str	r3, [r7, #116]	@ 0x74
 800463e:	2301      	movs	r3, #1
 8004640:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			@ (mov r8, r8)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	689a      	ldr	r2, [r3, #8]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2101      	movs	r1, #1
 8004656:	438a      	bics	r2, r1
 8004658:	609a      	str	r2, [r3, #8]
 800465a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800465c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800465e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004660:	f383 8810 	msr	PRIMASK, r3
}
 8004664:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004666:	f3ef 8310 	mrs	r3, PRIMASK
 800466a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800466c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004670:	2301      	movs	r3, #1
 8004672:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004674:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004676:	f383 8810 	msr	PRIMASK, r3
}
 800467a:	46c0      	nop			@ (mov r8, r8)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	689a      	ldr	r2, [r3, #8]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2140      	movs	r1, #64	@ 0x40
 8004688:	438a      	bics	r2, r1
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800468e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004692:	f383 8810 	msr	PRIMASK, r3
}
 8004696:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	228c      	movs	r2, #140	@ 0x8c
 800469c:	2120      	movs	r1, #32
 800469e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a6:	f3ef 8310 	mrs	r3, PRIMASK
 80046aa:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80046ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046b0:	2301      	movs	r3, #1
 80046b2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80046b6:	f383 8810 	msr	PRIMASK, r3
}
 80046ba:	46c0      	nop			@ (mov r8, r8)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2110      	movs	r1, #16
 80046c8:	438a      	bics	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80046ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046d2:	f383 8810 	msr	PRIMASK, r3
}
 80046d6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2280      	movs	r2, #128	@ 0x80
 80046dc:	589b      	ldr	r3, [r3, r2]
 80046de:	0018      	movs	r0, r3
 80046e0:	f7fd fcea 	bl	80020b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2202      	movs	r2, #2
 80046e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	225c      	movs	r2, #92	@ 0x5c
 80046ee:	5a9a      	ldrh	r2, [r3, r2]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	215e      	movs	r1, #94	@ 0x5e
 80046f4:	5a5b      	ldrh	r3, [r3, r1]
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	0011      	movs	r1, r2
 8004700:	0018      	movs	r0, r3
 8004702:	f000 f90d 	bl	8004920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004706:	e0ed      	b.n	80048e4 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	225c      	movs	r2, #92	@ 0x5c
 800470c:	5a99      	ldrh	r1, [r3, r2]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	225e      	movs	r2, #94	@ 0x5e
 8004712:	5a9b      	ldrh	r3, [r3, r2]
 8004714:	b29a      	uxth	r2, r3
 8004716:	208e      	movs	r0, #142	@ 0x8e
 8004718:	183b      	adds	r3, r7, r0
 800471a:	1a8a      	subs	r2, r1, r2
 800471c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	225e      	movs	r2, #94	@ 0x5e
 8004722:	5a9b      	ldrh	r3, [r3, r2]
 8004724:	b29b      	uxth	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d100      	bne.n	800472c <HAL_UART_IRQHandler+0x478>
 800472a:	e0dd      	b.n	80048e8 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800472c:	183b      	adds	r3, r7, r0
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d100      	bne.n	8004736 <HAL_UART_IRQHandler+0x482>
 8004734:	e0d8      	b.n	80048e8 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004736:	f3ef 8310 	mrs	r3, PRIMASK
 800473a:	60fb      	str	r3, [r7, #12]
  return(result);
 800473c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800473e:	2488      	movs	r4, #136	@ 0x88
 8004740:	193a      	adds	r2, r7, r4
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	2301      	movs	r3, #1
 8004746:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	f383 8810 	msr	PRIMASK, r3
}
 800474e:	46c0      	nop			@ (mov r8, r8)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4967      	ldr	r1, [pc, #412]	@ (80048f8 <HAL_UART_IRQHandler+0x644>)
 800475c:	400a      	ands	r2, r1
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	193b      	adds	r3, r7, r4
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f383 8810 	msr	PRIMASK, r3
}
 800476c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800476e:	f3ef 8310 	mrs	r3, PRIMASK
 8004772:	61bb      	str	r3, [r7, #24]
  return(result);
 8004774:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004776:	2484      	movs	r4, #132	@ 0x84
 8004778:	193a      	adds	r2, r7, r4
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	2301      	movs	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	f383 8810 	msr	PRIMASK, r3
}
 8004786:	46c0      	nop			@ (mov r8, r8)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689a      	ldr	r2, [r3, #8]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	495a      	ldr	r1, [pc, #360]	@ (80048fc <HAL_UART_IRQHandler+0x648>)
 8004794:	400a      	ands	r2, r1
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	193b      	adds	r3, r7, r4
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	f383 8810 	msr	PRIMASK, r3
}
 80047a4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	228c      	movs	r2, #140	@ 0x8c
 80047aa:	2120      	movs	r1, #32
 80047ac:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047ba:	f3ef 8310 	mrs	r3, PRIMASK
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80047c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047c2:	2480      	movs	r4, #128	@ 0x80
 80047c4:	193a      	adds	r2, r7, r4
 80047c6:	6013      	str	r3, [r2, #0]
 80047c8:	2301      	movs	r3, #1
 80047ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	f383 8810 	msr	PRIMASK, r3
}
 80047d2:	46c0      	nop			@ (mov r8, r8)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2110      	movs	r1, #16
 80047e0:	438a      	bics	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	193b      	adds	r3, r7, r4
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ec:	f383 8810 	msr	PRIMASK, r3
}
 80047f0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047f8:	183b      	adds	r3, r7, r0
 80047fa:	881a      	ldrh	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	0011      	movs	r1, r2
 8004800:	0018      	movs	r0, r3
 8004802:	f000 f88d 	bl	8004920 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004806:	e06f      	b.n	80048e8 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004808:	23a4      	movs	r3, #164	@ 0xa4
 800480a:	18fb      	adds	r3, r7, r3
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	2380      	movs	r3, #128	@ 0x80
 8004810:	035b      	lsls	r3, r3, #13
 8004812:	4013      	ands	r3, r2
 8004814:	d010      	beq.n	8004838 <HAL_UART_IRQHandler+0x584>
 8004816:	239c      	movs	r3, #156	@ 0x9c
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	2380      	movs	r3, #128	@ 0x80
 800481e:	03db      	lsls	r3, r3, #15
 8004820:	4013      	ands	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2280      	movs	r2, #128	@ 0x80
 800482a:	0352      	lsls	r2, r2, #13
 800482c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	0018      	movs	r0, r3
 8004832:	f001 fc9f 	bl	8006174 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004836:	e05a      	b.n	80048ee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004838:	23a4      	movs	r3, #164	@ 0xa4
 800483a:	18fb      	adds	r3, r7, r3
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2280      	movs	r2, #128	@ 0x80
 8004840:	4013      	ands	r3, r2
 8004842:	d016      	beq.n	8004872 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004844:	23a0      	movs	r3, #160	@ 0xa0
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2280      	movs	r2, #128	@ 0x80
 800484c:	4013      	ands	r3, r2
 800484e:	d106      	bne.n	800485e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004850:	239c      	movs	r3, #156	@ 0x9c
 8004852:	18fb      	adds	r3, r7, r3
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	2380      	movs	r3, #128	@ 0x80
 8004858:	041b      	lsls	r3, r3, #16
 800485a:	4013      	ands	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004862:	2b00      	cmp	r3, #0
 8004864:	d042      	beq.n	80048ec <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	0010      	movs	r0, r2
 800486e:	4798      	blx	r3
    }
    return;
 8004870:	e03c      	b.n	80048ec <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004872:	23a4      	movs	r3, #164	@ 0xa4
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2240      	movs	r2, #64	@ 0x40
 800487a:	4013      	ands	r3, r2
 800487c:	d00a      	beq.n	8004894 <HAL_UART_IRQHandler+0x5e0>
 800487e:	23a0      	movs	r3, #160	@ 0xa0
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2240      	movs	r2, #64	@ 0x40
 8004886:	4013      	ands	r3, r2
 8004888:	d004      	beq.n	8004894 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0018      	movs	r0, r3
 800488e:	f000 ff18 	bl	80056c2 <UART_EndTransmit_IT>
    return;
 8004892:	e02c      	b.n	80048ee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004894:	23a4      	movs	r3, #164	@ 0xa4
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	2380      	movs	r3, #128	@ 0x80
 800489c:	041b      	lsls	r3, r3, #16
 800489e:	4013      	ands	r3, r2
 80048a0:	d00b      	beq.n	80048ba <HAL_UART_IRQHandler+0x606>
 80048a2:	23a0      	movs	r3, #160	@ 0xa0
 80048a4:	18fb      	adds	r3, r7, r3
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	2380      	movs	r3, #128	@ 0x80
 80048aa:	05db      	lsls	r3, r3, #23
 80048ac:	4013      	ands	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	0018      	movs	r0, r3
 80048b4:	f001 fc6e 	bl	8006194 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048b8:	e019      	b.n	80048ee <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80048ba:	23a4      	movs	r3, #164	@ 0xa4
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	2380      	movs	r3, #128	@ 0x80
 80048c2:	045b      	lsls	r3, r3, #17
 80048c4:	4013      	ands	r3, r2
 80048c6:	d012      	beq.n	80048ee <HAL_UART_IRQHandler+0x63a>
 80048c8:	23a0      	movs	r3, #160	@ 0xa0
 80048ca:	18fb      	adds	r3, r7, r3
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	da0d      	bge.n	80048ee <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f001 fc55 	bl	8006184 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80048da:	e008      	b.n	80048ee <HAL_UART_IRQHandler+0x63a>
      return;
 80048dc:	46c0      	nop			@ (mov r8, r8)
 80048de:	e006      	b.n	80048ee <HAL_UART_IRQHandler+0x63a>
    return;
 80048e0:	46c0      	nop			@ (mov r8, r8)
 80048e2:	e004      	b.n	80048ee <HAL_UART_IRQHandler+0x63a>
      return;
 80048e4:	46c0      	nop			@ (mov r8, r8)
 80048e6:	e002      	b.n	80048ee <HAL_UART_IRQHandler+0x63a>
      return;
 80048e8:	46c0      	nop			@ (mov r8, r8)
 80048ea:	e000      	b.n	80048ee <HAL_UART_IRQHandler+0x63a>
    return;
 80048ec:	46c0      	nop			@ (mov r8, r8)
  }
}
 80048ee:	46bd      	mov	sp, r7
 80048f0:	b02a      	add	sp, #168	@ 0xa8
 80048f2:	bdb0      	pop	{r4, r5, r7, pc}
 80048f4:	fffffeff 	.word	0xfffffeff
 80048f8:	fffffedf 	.word	0xfffffedf
 80048fc:	effffffe 	.word	0xeffffffe

08004900 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004908:	46c0      	nop			@ (mov r8, r8)
 800490a:	46bd      	mov	sp, r7
 800490c:	b002      	add	sp, #8
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004918:	46c0      	nop			@ (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	000a      	movs	r2, r1
 800492a:	1cbb      	adds	r3, r7, #2
 800492c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800492e:	46c0      	nop			@ (mov r8, r8)
 8004930:	46bd      	mov	sp, r7
 8004932:	b002      	add	sp, #8
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004938:	b5b0      	push	{r4, r5, r7, lr}
 800493a:	b090      	sub	sp, #64	@ 0x40
 800493c:	af00      	add	r7, sp, #0
 800493e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004940:	231a      	movs	r3, #26
 8004942:	2220      	movs	r2, #32
 8004944:	189b      	adds	r3, r3, r2
 8004946:	19db      	adds	r3, r3, r7
 8004948:	2200      	movs	r2, #0
 800494a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800494c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	431a      	orrs	r2, r3
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	431a      	orrs	r2, r3
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4313      	orrs	r3, r2
 8004962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4ac1      	ldr	r2, [pc, #772]	@ (8004c70 <UART_SetConfig+0x338>)
 800496c:	4013      	ands	r3, r2
 800496e:	0019      	movs	r1, r3
 8004970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004976:	430b      	orrs	r3, r1
 8004978:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	4abc      	ldr	r2, [pc, #752]	@ (8004c74 <UART_SetConfig+0x33c>)
 8004982:	4013      	ands	r3, r2
 8004984:	0018      	movs	r0, r3
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	68d9      	ldr	r1, [r3, #12]
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	0003      	movs	r3, r0
 8004990:	430b      	orrs	r3, r1
 8004992:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4ab6      	ldr	r2, [pc, #728]	@ (8004c78 <UART_SetConfig+0x340>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d009      	beq.n	80049b8 <UART_SetConfig+0x80>
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4ab4      	ldr	r2, [pc, #720]	@ (8004c7c <UART_SetConfig+0x344>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d004      	beq.n	80049b8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80049b4:	4313      	orrs	r3, r2
 80049b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	4ab0      	ldr	r2, [pc, #704]	@ (8004c80 <UART_SetConfig+0x348>)
 80049c0:	4013      	ands	r3, r2
 80049c2:	0019      	movs	r1, r3
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ca:	430b      	orrs	r3, r1
 80049cc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	220f      	movs	r2, #15
 80049d6:	4393      	bics	r3, r2
 80049d8:	0018      	movs	r0, r3
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	0003      	movs	r3, r0
 80049e4:	430b      	orrs	r3, r1
 80049e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4aa5      	ldr	r2, [pc, #660]	@ (8004c84 <UART_SetConfig+0x34c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d131      	bne.n	8004a56 <UART_SetConfig+0x11e>
 80049f2:	4ba5      	ldr	r3, [pc, #660]	@ (8004c88 <UART_SetConfig+0x350>)
 80049f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f6:	2203      	movs	r2, #3
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	d01d      	beq.n	8004a3a <UART_SetConfig+0x102>
 80049fe:	d823      	bhi.n	8004a48 <UART_SetConfig+0x110>
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d00c      	beq.n	8004a1e <UART_SetConfig+0xe6>
 8004a04:	d820      	bhi.n	8004a48 <UART_SetConfig+0x110>
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d002      	beq.n	8004a10 <UART_SetConfig+0xd8>
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d00e      	beq.n	8004a2c <UART_SetConfig+0xf4>
 8004a0e:	e01b      	b.n	8004a48 <UART_SetConfig+0x110>
 8004a10:	231b      	movs	r3, #27
 8004a12:	2220      	movs	r2, #32
 8004a14:	189b      	adds	r3, r3, r2
 8004a16:	19db      	adds	r3, r3, r7
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
 8004a1c:	e154      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004a1e:	231b      	movs	r3, #27
 8004a20:	2220      	movs	r2, #32
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	19db      	adds	r3, r3, r7
 8004a26:	2202      	movs	r2, #2
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e14d      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004a2c:	231b      	movs	r3, #27
 8004a2e:	2220      	movs	r2, #32
 8004a30:	189b      	adds	r3, r3, r2
 8004a32:	19db      	adds	r3, r3, r7
 8004a34:	2204      	movs	r2, #4
 8004a36:	701a      	strb	r2, [r3, #0]
 8004a38:	e146      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004a3a:	231b      	movs	r3, #27
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	189b      	adds	r3, r3, r2
 8004a40:	19db      	adds	r3, r3, r7
 8004a42:	2208      	movs	r2, #8
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	e13f      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004a48:	231b      	movs	r3, #27
 8004a4a:	2220      	movs	r2, #32
 8004a4c:	189b      	adds	r3, r3, r2
 8004a4e:	19db      	adds	r3, r3, r7
 8004a50:	2210      	movs	r2, #16
 8004a52:	701a      	strb	r2, [r3, #0]
 8004a54:	e138      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a8c      	ldr	r2, [pc, #560]	@ (8004c8c <UART_SetConfig+0x354>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d131      	bne.n	8004ac4 <UART_SetConfig+0x18c>
 8004a60:	4b89      	ldr	r3, [pc, #548]	@ (8004c88 <UART_SetConfig+0x350>)
 8004a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a64:	220c      	movs	r2, #12
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b0c      	cmp	r3, #12
 8004a6a:	d01d      	beq.n	8004aa8 <UART_SetConfig+0x170>
 8004a6c:	d823      	bhi.n	8004ab6 <UART_SetConfig+0x17e>
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d00c      	beq.n	8004a8c <UART_SetConfig+0x154>
 8004a72:	d820      	bhi.n	8004ab6 <UART_SetConfig+0x17e>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <UART_SetConfig+0x146>
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d00e      	beq.n	8004a9a <UART_SetConfig+0x162>
 8004a7c:	e01b      	b.n	8004ab6 <UART_SetConfig+0x17e>
 8004a7e:	231b      	movs	r3, #27
 8004a80:	2220      	movs	r2, #32
 8004a82:	189b      	adds	r3, r3, r2
 8004a84:	19db      	adds	r3, r3, r7
 8004a86:	2200      	movs	r2, #0
 8004a88:	701a      	strb	r2, [r3, #0]
 8004a8a:	e11d      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004a8c:	231b      	movs	r3, #27
 8004a8e:	2220      	movs	r2, #32
 8004a90:	189b      	adds	r3, r3, r2
 8004a92:	19db      	adds	r3, r3, r7
 8004a94:	2202      	movs	r2, #2
 8004a96:	701a      	strb	r2, [r3, #0]
 8004a98:	e116      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004a9a:	231b      	movs	r3, #27
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	189b      	adds	r3, r3, r2
 8004aa0:	19db      	adds	r3, r3, r7
 8004aa2:	2204      	movs	r2, #4
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	e10f      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004aa8:	231b      	movs	r3, #27
 8004aaa:	2220      	movs	r2, #32
 8004aac:	189b      	adds	r3, r3, r2
 8004aae:	19db      	adds	r3, r3, r7
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	701a      	strb	r2, [r3, #0]
 8004ab4:	e108      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004ab6:	231b      	movs	r3, #27
 8004ab8:	2220      	movs	r2, #32
 8004aba:	189b      	adds	r3, r3, r2
 8004abc:	19db      	adds	r3, r3, r7
 8004abe:	2210      	movs	r2, #16
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	e101      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a71      	ldr	r2, [pc, #452]	@ (8004c90 <UART_SetConfig+0x358>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d131      	bne.n	8004b32 <UART_SetConfig+0x1fa>
 8004ace:	4b6e      	ldr	r3, [pc, #440]	@ (8004c88 <UART_SetConfig+0x350>)
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ad2:	2230      	movs	r2, #48	@ 0x30
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	2b30      	cmp	r3, #48	@ 0x30
 8004ad8:	d01d      	beq.n	8004b16 <UART_SetConfig+0x1de>
 8004ada:	d823      	bhi.n	8004b24 <UART_SetConfig+0x1ec>
 8004adc:	2b20      	cmp	r3, #32
 8004ade:	d00c      	beq.n	8004afa <UART_SetConfig+0x1c2>
 8004ae0:	d820      	bhi.n	8004b24 <UART_SetConfig+0x1ec>
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d002      	beq.n	8004aec <UART_SetConfig+0x1b4>
 8004ae6:	2b10      	cmp	r3, #16
 8004ae8:	d00e      	beq.n	8004b08 <UART_SetConfig+0x1d0>
 8004aea:	e01b      	b.n	8004b24 <UART_SetConfig+0x1ec>
 8004aec:	231b      	movs	r3, #27
 8004aee:	2220      	movs	r2, #32
 8004af0:	189b      	adds	r3, r3, r2
 8004af2:	19db      	adds	r3, r3, r7
 8004af4:	2200      	movs	r2, #0
 8004af6:	701a      	strb	r2, [r3, #0]
 8004af8:	e0e6      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004afa:	231b      	movs	r3, #27
 8004afc:	2220      	movs	r2, #32
 8004afe:	189b      	adds	r3, r3, r2
 8004b00:	19db      	adds	r3, r3, r7
 8004b02:	2202      	movs	r2, #2
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	e0df      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004b08:	231b      	movs	r3, #27
 8004b0a:	2220      	movs	r2, #32
 8004b0c:	189b      	adds	r3, r3, r2
 8004b0e:	19db      	adds	r3, r3, r7
 8004b10:	2204      	movs	r2, #4
 8004b12:	701a      	strb	r2, [r3, #0]
 8004b14:	e0d8      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004b16:	231b      	movs	r3, #27
 8004b18:	2220      	movs	r2, #32
 8004b1a:	189b      	adds	r3, r3, r2
 8004b1c:	19db      	adds	r3, r3, r7
 8004b1e:	2208      	movs	r2, #8
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	e0d1      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004b24:	231b      	movs	r3, #27
 8004b26:	2220      	movs	r2, #32
 8004b28:	189b      	adds	r3, r3, r2
 8004b2a:	19db      	adds	r3, r3, r7
 8004b2c:	2210      	movs	r2, #16
 8004b2e:	701a      	strb	r2, [r3, #0]
 8004b30:	e0ca      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a57      	ldr	r2, [pc, #348]	@ (8004c94 <UART_SetConfig+0x35c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d106      	bne.n	8004b4a <UART_SetConfig+0x212>
 8004b3c:	231b      	movs	r3, #27
 8004b3e:	2220      	movs	r2, #32
 8004b40:	189b      	adds	r3, r3, r2
 8004b42:	19db      	adds	r3, r3, r7
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	e0be      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a52      	ldr	r2, [pc, #328]	@ (8004c98 <UART_SetConfig+0x360>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d106      	bne.n	8004b62 <UART_SetConfig+0x22a>
 8004b54:	231b      	movs	r3, #27
 8004b56:	2220      	movs	r2, #32
 8004b58:	189b      	adds	r3, r3, r2
 8004b5a:	19db      	adds	r3, r3, r7
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
 8004b60:	e0b2      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a4d      	ldr	r2, [pc, #308]	@ (8004c9c <UART_SetConfig+0x364>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d106      	bne.n	8004b7a <UART_SetConfig+0x242>
 8004b6c:	231b      	movs	r3, #27
 8004b6e:	2220      	movs	r2, #32
 8004b70:	189b      	adds	r3, r3, r2
 8004b72:	19db      	adds	r3, r3, r7
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]
 8004b78:	e0a6      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a3e      	ldr	r2, [pc, #248]	@ (8004c78 <UART_SetConfig+0x340>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d13e      	bne.n	8004c02 <UART_SetConfig+0x2ca>
 8004b84:	4b40      	ldr	r3, [pc, #256]	@ (8004c88 <UART_SetConfig+0x350>)
 8004b86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b88:	23c0      	movs	r3, #192	@ 0xc0
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	22c0      	movs	r2, #192	@ 0xc0
 8004b90:	0112      	lsls	r2, r2, #4
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d027      	beq.n	8004be6 <UART_SetConfig+0x2ae>
 8004b96:	22c0      	movs	r2, #192	@ 0xc0
 8004b98:	0112      	lsls	r2, r2, #4
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d82a      	bhi.n	8004bf4 <UART_SetConfig+0x2bc>
 8004b9e:	2280      	movs	r2, #128	@ 0x80
 8004ba0:	0112      	lsls	r2, r2, #4
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d011      	beq.n	8004bca <UART_SetConfig+0x292>
 8004ba6:	2280      	movs	r2, #128	@ 0x80
 8004ba8:	0112      	lsls	r2, r2, #4
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d822      	bhi.n	8004bf4 <UART_SetConfig+0x2bc>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d004      	beq.n	8004bbc <UART_SetConfig+0x284>
 8004bb2:	2280      	movs	r2, #128	@ 0x80
 8004bb4:	00d2      	lsls	r2, r2, #3
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00e      	beq.n	8004bd8 <UART_SetConfig+0x2a0>
 8004bba:	e01b      	b.n	8004bf4 <UART_SetConfig+0x2bc>
 8004bbc:	231b      	movs	r3, #27
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	189b      	adds	r3, r3, r2
 8004bc2:	19db      	adds	r3, r3, r7
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	e07e      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004bca:	231b      	movs	r3, #27
 8004bcc:	2220      	movs	r2, #32
 8004bce:	189b      	adds	r3, r3, r2
 8004bd0:	19db      	adds	r3, r3, r7
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	701a      	strb	r2, [r3, #0]
 8004bd6:	e077      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004bd8:	231b      	movs	r3, #27
 8004bda:	2220      	movs	r2, #32
 8004bdc:	189b      	adds	r3, r3, r2
 8004bde:	19db      	adds	r3, r3, r7
 8004be0:	2204      	movs	r2, #4
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	e070      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004be6:	231b      	movs	r3, #27
 8004be8:	2220      	movs	r2, #32
 8004bea:	189b      	adds	r3, r3, r2
 8004bec:	19db      	adds	r3, r3, r7
 8004bee:	2208      	movs	r2, #8
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	e069      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004bf4:	231b      	movs	r3, #27
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	189b      	adds	r3, r3, r2
 8004bfa:	19db      	adds	r3, r3, r7
 8004bfc:	2210      	movs	r2, #16
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e062      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1d      	ldr	r2, [pc, #116]	@ (8004c7c <UART_SetConfig+0x344>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d157      	bne.n	8004cbc <UART_SetConfig+0x384>
 8004c0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c88 <UART_SetConfig+0x350>)
 8004c0e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c10:	23c0      	movs	r3, #192	@ 0xc0
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4013      	ands	r3, r2
 8004c16:	22c0      	movs	r2, #192	@ 0xc0
 8004c18:	0092      	lsls	r2, r2, #2
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d040      	beq.n	8004ca0 <UART_SetConfig+0x368>
 8004c1e:	22c0      	movs	r2, #192	@ 0xc0
 8004c20:	0092      	lsls	r2, r2, #2
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d843      	bhi.n	8004cae <UART_SetConfig+0x376>
 8004c26:	2280      	movs	r2, #128	@ 0x80
 8004c28:	0092      	lsls	r2, r2, #2
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d011      	beq.n	8004c52 <UART_SetConfig+0x31a>
 8004c2e:	2280      	movs	r2, #128	@ 0x80
 8004c30:	0092      	lsls	r2, r2, #2
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d83b      	bhi.n	8004cae <UART_SetConfig+0x376>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d004      	beq.n	8004c44 <UART_SetConfig+0x30c>
 8004c3a:	2280      	movs	r2, #128	@ 0x80
 8004c3c:	0052      	lsls	r2, r2, #1
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d00e      	beq.n	8004c60 <UART_SetConfig+0x328>
 8004c42:	e034      	b.n	8004cae <UART_SetConfig+0x376>
 8004c44:	231b      	movs	r3, #27
 8004c46:	2220      	movs	r2, #32
 8004c48:	189b      	adds	r3, r3, r2
 8004c4a:	19db      	adds	r3, r3, r7
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	e03a      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004c52:	231b      	movs	r3, #27
 8004c54:	2220      	movs	r2, #32
 8004c56:	189b      	adds	r3, r3, r2
 8004c58:	19db      	adds	r3, r3, r7
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	701a      	strb	r2, [r3, #0]
 8004c5e:	e033      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004c60:	231b      	movs	r3, #27
 8004c62:	2220      	movs	r2, #32
 8004c64:	189b      	adds	r3, r3, r2
 8004c66:	19db      	adds	r3, r3, r7
 8004c68:	2204      	movs	r2, #4
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e02c      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004c6e:	46c0      	nop			@ (mov r8, r8)
 8004c70:	cfff69f3 	.word	0xcfff69f3
 8004c74:	ffffcfff 	.word	0xffffcfff
 8004c78:	40008000 	.word	0x40008000
 8004c7c:	40008400 	.word	0x40008400
 8004c80:	11fff4ff 	.word	0x11fff4ff
 8004c84:	40013800 	.word	0x40013800
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	40004400 	.word	0x40004400
 8004c90:	40004800 	.word	0x40004800
 8004c94:	40004c00 	.word	0x40004c00
 8004c98:	40005000 	.word	0x40005000
 8004c9c:	40013c00 	.word	0x40013c00
 8004ca0:	231b      	movs	r3, #27
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	19db      	adds	r3, r3, r7
 8004ca8:	2208      	movs	r2, #8
 8004caa:	701a      	strb	r2, [r3, #0]
 8004cac:	e00c      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004cae:	231b      	movs	r3, #27
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	189b      	adds	r3, r3, r2
 8004cb4:	19db      	adds	r3, r3, r7
 8004cb6:	2210      	movs	r2, #16
 8004cb8:	701a      	strb	r2, [r3, #0]
 8004cba:	e005      	b.n	8004cc8 <UART_SetConfig+0x390>
 8004cbc:	231b      	movs	r3, #27
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	189b      	adds	r3, r3, r2
 8004cc2:	19db      	adds	r3, r3, r7
 8004cc4:	2210      	movs	r2, #16
 8004cc6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4ac1      	ldr	r2, [pc, #772]	@ (8004fd4 <UART_SetConfig+0x69c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d005      	beq.n	8004cde <UART_SetConfig+0x3a6>
 8004cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4ac0      	ldr	r2, [pc, #768]	@ (8004fd8 <UART_SetConfig+0x6a0>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d000      	beq.n	8004cde <UART_SetConfig+0x3a6>
 8004cdc:	e093      	b.n	8004e06 <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cde:	231b      	movs	r3, #27
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	189b      	adds	r3, r3, r2
 8004ce4:	19db      	adds	r3, r3, r7
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d015      	beq.n	8004d18 <UART_SetConfig+0x3e0>
 8004cec:	dc18      	bgt.n	8004d20 <UART_SetConfig+0x3e8>
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d00d      	beq.n	8004d0e <UART_SetConfig+0x3d6>
 8004cf2:	dc15      	bgt.n	8004d20 <UART_SetConfig+0x3e8>
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d002      	beq.n	8004cfe <UART_SetConfig+0x3c6>
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d005      	beq.n	8004d08 <UART_SetConfig+0x3d0>
 8004cfc:	e010      	b.n	8004d20 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cfe:	f7fe f96d 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 8004d02:	0003      	movs	r3, r0
 8004d04:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d06:	e014      	b.n	8004d32 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d08:	4bb4      	ldr	r3, [pc, #720]	@ (8004fdc <UART_SetConfig+0x6a4>)
 8004d0a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d0c:	e011      	b.n	8004d32 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0e:	f7fe f8d9 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8004d12:	0003      	movs	r3, r0
 8004d14:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d16:	e00c      	b.n	8004d32 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d18:	2380      	movs	r3, #128	@ 0x80
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004d1e:	e008      	b.n	8004d32 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004d24:	231a      	movs	r3, #26
 8004d26:	2220      	movs	r2, #32
 8004d28:	189b      	adds	r3, r3, r2
 8004d2a:	19db      	adds	r3, r3, r7
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	701a      	strb	r2, [r3, #0]
        break;
 8004d30:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d100      	bne.n	8004d3a <UART_SetConfig+0x402>
 8004d38:	e135      	b.n	8004fa6 <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d3e:	4ba8      	ldr	r3, [pc, #672]	@ (8004fe0 <UART_SetConfig+0x6a8>)
 8004d40:	0052      	lsls	r2, r2, #1
 8004d42:	5ad3      	ldrh	r3, [r2, r3]
 8004d44:	0019      	movs	r1, r3
 8004d46:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004d48:	f7fb f9de 	bl	8000108 <__udivsi3>
 8004d4c:	0003      	movs	r3, r0
 8004d4e:	62bb      	str	r3, [r7, #40]	@ 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	0013      	movs	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	189b      	adds	r3, r3, r2
 8004d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d305      	bcc.n	8004d6c <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d906      	bls.n	8004d7a <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004d6c:	231a      	movs	r3, #26
 8004d6e:	2220      	movs	r2, #32
 8004d70:	189b      	adds	r3, r3, r2
 8004d72:	19db      	adds	r3, r3, r7
 8004d74:	2201      	movs	r2, #1
 8004d76:	701a      	strb	r2, [r3, #0]
 8004d78:	e044      	b.n	8004e04 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7c:	61bb      	str	r3, [r7, #24]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004d86:	4b96      	ldr	r3, [pc, #600]	@ (8004fe0 <UART_SetConfig+0x6a8>)
 8004d88:	0052      	lsls	r2, r2, #1
 8004d8a:	5ad3      	ldrh	r3, [r2, r3]
 8004d8c:	613b      	str	r3, [r7, #16]
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	69b8      	ldr	r0, [r7, #24]
 8004d98:	69f9      	ldr	r1, [r7, #28]
 8004d9a:	f7fb fb65 	bl	8000468 <__aeabi_uldivmod>
 8004d9e:	0002      	movs	r2, r0
 8004da0:	000b      	movs	r3, r1
 8004da2:	0e11      	lsrs	r1, r2, #24
 8004da4:	021d      	lsls	r5, r3, #8
 8004da6:	430d      	orrs	r5, r1
 8004da8:	0214      	lsls	r4, r2, #8
 8004daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
 8004db6:	68b8      	ldr	r0, [r7, #8]
 8004db8:	68f9      	ldr	r1, [r7, #12]
 8004dba:	1900      	adds	r0, r0, r4
 8004dbc:	4169      	adcs	r1, r5
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	603b      	str	r3, [r7, #0]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	607b      	str	r3, [r7, #4]
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f7fb fb4c 	bl	8000468 <__aeabi_uldivmod>
 8004dd0:	0002      	movs	r2, r0
 8004dd2:	000b      	movs	r3, r1
 8004dd4:	0013      	movs	r3, r2
 8004dd6:	633b      	str	r3, [r7, #48]	@ 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dda:	23c0      	movs	r3, #192	@ 0xc0
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d309      	bcc.n	8004df6 <UART_SetConfig+0x4be>
 8004de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de4:	2380      	movs	r3, #128	@ 0x80
 8004de6:	035b      	lsls	r3, r3, #13
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d204      	bcs.n	8004df6 <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df2:	60da      	str	r2, [r3, #12]
 8004df4:	e006      	b.n	8004e04 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004df6:	231a      	movs	r3, #26
 8004df8:	2220      	movs	r2, #32
 8004dfa:	189b      	adds	r3, r3, r2
 8004dfc:	19db      	adds	r3, r3, r7
 8004dfe:	2201      	movs	r2, #1
 8004e00:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004e02:	e0d0      	b.n	8004fa6 <UART_SetConfig+0x66e>
 8004e04:	e0cf      	b.n	8004fa6 <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	69da      	ldr	r2, [r3, #28]
 8004e0a:	2380      	movs	r3, #128	@ 0x80
 8004e0c:	021b      	lsls	r3, r3, #8
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d000      	beq.n	8004e14 <UART_SetConfig+0x4dc>
 8004e12:	e070      	b.n	8004ef6 <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004e14:	231b      	movs	r3, #27
 8004e16:	2220      	movs	r2, #32
 8004e18:	189b      	adds	r3, r3, r2
 8004e1a:	19db      	adds	r3, r3, r7
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d015      	beq.n	8004e4e <UART_SetConfig+0x516>
 8004e22:	dc18      	bgt.n	8004e56 <UART_SetConfig+0x51e>
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d00d      	beq.n	8004e44 <UART_SetConfig+0x50c>
 8004e28:	dc15      	bgt.n	8004e56 <UART_SetConfig+0x51e>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d002      	beq.n	8004e34 <UART_SetConfig+0x4fc>
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d005      	beq.n	8004e3e <UART_SetConfig+0x506>
 8004e32:	e010      	b.n	8004e56 <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e34:	f7fe f8d2 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 8004e38:	0003      	movs	r3, r0
 8004e3a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e3c:	e014      	b.n	8004e68 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e3e:	4b67      	ldr	r3, [pc, #412]	@ (8004fdc <UART_SetConfig+0x6a4>)
 8004e40:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e42:	e011      	b.n	8004e68 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e44:	f7fe f83e 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8004e48:	0003      	movs	r3, r0
 8004e4a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e4c:	e00c      	b.n	8004e68 <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4e:	2380      	movs	r3, #128	@ 0x80
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004e54:	e008      	b.n	8004e68 <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004e5a:	231a      	movs	r3, #26
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	189b      	adds	r3, r3, r2
 8004e60:	19db      	adds	r3, r3, r7
 8004e62:	2201      	movs	r2, #1
 8004e64:	701a      	strb	r2, [r3, #0]
        break;
 8004e66:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d100      	bne.n	8004e70 <UART_SetConfig+0x538>
 8004e6e:	e09a      	b.n	8004fa6 <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e74:	4b5a      	ldr	r3, [pc, #360]	@ (8004fe0 <UART_SetConfig+0x6a8>)
 8004e76:	0052      	lsls	r2, r2, #1
 8004e78:	5ad3      	ldrh	r3, [r2, r3]
 8004e7a:	0019      	movs	r1, r3
 8004e7c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004e7e:	f7fb f943 	bl	8000108 <__udivsi3>
 8004e82:	0003      	movs	r3, r0
 8004e84:	005a      	lsls	r2, r3, #1
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	085b      	lsrs	r3, r3, #1
 8004e8c:	18d2      	adds	r2, r2, r3
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	0019      	movs	r1, r3
 8004e94:	0010      	movs	r0, r2
 8004e96:	f7fb f937 	bl	8000108 <__udivsi3>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ea0:	2b0f      	cmp	r3, #15
 8004ea2:	d921      	bls.n	8004ee8 <UART_SetConfig+0x5b0>
 8004ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ea6:	2380      	movs	r3, #128	@ 0x80
 8004ea8:	025b      	lsls	r3, r3, #9
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d21c      	bcs.n	8004ee8 <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	200e      	movs	r0, #14
 8004eb4:	2420      	movs	r4, #32
 8004eb6:	1903      	adds	r3, r0, r4
 8004eb8:	19db      	adds	r3, r3, r7
 8004eba:	210f      	movs	r1, #15
 8004ebc:	438a      	bics	r2, r1
 8004ebe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec2:	085b      	lsrs	r3, r3, #1
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	2207      	movs	r2, #7
 8004ec8:	4013      	ands	r3, r2
 8004eca:	b299      	uxth	r1, r3
 8004ecc:	1903      	adds	r3, r0, r4
 8004ece:	19db      	adds	r3, r3, r7
 8004ed0:	1902      	adds	r2, r0, r4
 8004ed2:	19d2      	adds	r2, r2, r7
 8004ed4:	8812      	ldrh	r2, [r2, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	1902      	adds	r2, r0, r4
 8004ee0:	19d2      	adds	r2, r2, r7
 8004ee2:	8812      	ldrh	r2, [r2, #0]
 8004ee4:	60da      	str	r2, [r3, #12]
 8004ee6:	e05e      	b.n	8004fa6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004ee8:	231a      	movs	r3, #26
 8004eea:	2220      	movs	r2, #32
 8004eec:	189b      	adds	r3, r3, r2
 8004eee:	19db      	adds	r3, r3, r7
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e057      	b.n	8004fa6 <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ef6:	231b      	movs	r3, #27
 8004ef8:	2220      	movs	r2, #32
 8004efa:	189b      	adds	r3, r3, r2
 8004efc:	19db      	adds	r3, r3, r7
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	d015      	beq.n	8004f30 <UART_SetConfig+0x5f8>
 8004f04:	dc18      	bgt.n	8004f38 <UART_SetConfig+0x600>
 8004f06:	2b04      	cmp	r3, #4
 8004f08:	d00d      	beq.n	8004f26 <UART_SetConfig+0x5ee>
 8004f0a:	dc15      	bgt.n	8004f38 <UART_SetConfig+0x600>
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <UART_SetConfig+0x5de>
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d005      	beq.n	8004f20 <UART_SetConfig+0x5e8>
 8004f14:	e010      	b.n	8004f38 <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f16:	f7fe f861 	bl	8002fdc <HAL_RCC_GetPCLK1Freq>
 8004f1a:	0003      	movs	r3, r0
 8004f1c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f1e:	e014      	b.n	8004f4a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f20:	4b2e      	ldr	r3, [pc, #184]	@ (8004fdc <UART_SetConfig+0x6a4>)
 8004f22:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f24:	e011      	b.n	8004f4a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f26:	f7fd ffcd 	bl	8002ec4 <HAL_RCC_GetSysClockFreq>
 8004f2a:	0003      	movs	r3, r0
 8004f2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f2e:	e00c      	b.n	8004f4a <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f30:	2380      	movs	r3, #128	@ 0x80
 8004f32:	021b      	lsls	r3, r3, #8
 8004f34:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8004f36:	e008      	b.n	8004f4a <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	637b      	str	r3, [r7, #52]	@ 0x34
        ret = HAL_ERROR;
 8004f3c:	231a      	movs	r3, #26
 8004f3e:	2220      	movs	r2, #32
 8004f40:	189b      	adds	r3, r3, r2
 8004f42:	19db      	adds	r3, r3, r7
 8004f44:	2201      	movs	r2, #1
 8004f46:	701a      	strb	r2, [r3, #0]
        break;
 8004f48:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004f4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d02a      	beq.n	8004fa6 <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f52:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f54:	4b22      	ldr	r3, [pc, #136]	@ (8004fe0 <UART_SetConfig+0x6a8>)
 8004f56:	0052      	lsls	r2, r2, #1
 8004f58:	5ad3      	ldrh	r3, [r2, r3]
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004f5e:	f7fb f8d3 	bl	8000108 <__udivsi3>
 8004f62:	0003      	movs	r3, r0
 8004f64:	001a      	movs	r2, r3
 8004f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	085b      	lsrs	r3, r3, #1
 8004f6c:	18d2      	adds	r2, r2, r3
 8004f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	0019      	movs	r1, r3
 8004f74:	0010      	movs	r0, r2
 8004f76:	f7fb f8c7 	bl	8000108 <__udivsi3>
 8004f7a:	0003      	movs	r3, r0
 8004f7c:	633b      	str	r3, [r7, #48]	@ 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f80:	2b0f      	cmp	r3, #15
 8004f82:	d90a      	bls.n	8004f9a <UART_SetConfig+0x662>
 8004f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f86:	2380      	movs	r3, #128	@ 0x80
 8004f88:	025b      	lsls	r3, r3, #9
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d205      	bcs.n	8004f9a <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60da      	str	r2, [r3, #12]
 8004f98:	e005      	b.n	8004fa6 <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004f9a:	231a      	movs	r3, #26
 8004f9c:	2220      	movs	r2, #32
 8004f9e:	189b      	adds	r3, r3, r2
 8004fa0:	19db      	adds	r3, r3, r7
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	226a      	movs	r2, #106	@ 0x6a
 8004faa:	2101      	movs	r1, #1
 8004fac:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb0:	2268      	movs	r2, #104	@ 0x68
 8004fb2:	2101      	movs	r1, #1
 8004fb4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	2200      	movs	r2, #0
 8004fba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004fc2:	231a      	movs	r3, #26
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	189b      	adds	r3, r3, r2
 8004fc8:	19db      	adds	r3, r3, r7
 8004fca:	781b      	ldrb	r3, [r3, #0]
}
 8004fcc:	0018      	movs	r0, r3
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	b010      	add	sp, #64	@ 0x40
 8004fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8004fd4:	40008000 	.word	0x40008000
 8004fd8:	40008400 	.word	0x40008400
 8004fdc:	00f42400 	.word	0x00f42400
 8004fe0:	080095e8 	.word	0x080095e8

08004fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff0:	2208      	movs	r2, #8
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d00b      	beq.n	800500e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4a4a      	ldr	r2, [pc, #296]	@ (8005128 <UART_AdvFeatureConfig+0x144>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	0019      	movs	r1, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005012:	2201      	movs	r2, #1
 8005014:	4013      	ands	r3, r2
 8005016:	d00b      	beq.n	8005030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4a43      	ldr	r2, [pc, #268]	@ (800512c <UART_AdvFeatureConfig+0x148>)
 8005020:	4013      	ands	r3, r2
 8005022:	0019      	movs	r1, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005034:	2202      	movs	r2, #2
 8005036:	4013      	ands	r3, r2
 8005038:	d00b      	beq.n	8005052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	4a3b      	ldr	r2, [pc, #236]	@ (8005130 <UART_AdvFeatureConfig+0x14c>)
 8005042:	4013      	ands	r3, r2
 8005044:	0019      	movs	r1, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	2204      	movs	r2, #4
 8005058:	4013      	ands	r3, r2
 800505a:	d00b      	beq.n	8005074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4a34      	ldr	r2, [pc, #208]	@ (8005134 <UART_AdvFeatureConfig+0x150>)
 8005064:	4013      	ands	r3, r2
 8005066:	0019      	movs	r1, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005078:	2210      	movs	r2, #16
 800507a:	4013      	ands	r3, r2
 800507c:	d00b      	beq.n	8005096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4a2c      	ldr	r2, [pc, #176]	@ (8005138 <UART_AdvFeatureConfig+0x154>)
 8005086:	4013      	ands	r3, r2
 8005088:	0019      	movs	r1, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509a:	2220      	movs	r2, #32
 800509c:	4013      	ands	r3, r2
 800509e:	d00b      	beq.n	80050b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	4a25      	ldr	r2, [pc, #148]	@ (800513c <UART_AdvFeatureConfig+0x158>)
 80050a8:	4013      	ands	r3, r2
 80050aa:	0019      	movs	r1, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050bc:	2240      	movs	r2, #64	@ 0x40
 80050be:	4013      	ands	r3, r2
 80050c0:	d01d      	beq.n	80050fe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005140 <UART_AdvFeatureConfig+0x15c>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	0019      	movs	r1, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050de:	2380      	movs	r3, #128	@ 0x80
 80050e0:	035b      	lsls	r3, r3, #13
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d10b      	bne.n	80050fe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	4a15      	ldr	r2, [pc, #84]	@ (8005144 <UART_AdvFeatureConfig+0x160>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	0019      	movs	r1, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005102:	2280      	movs	r2, #128	@ 0x80
 8005104:	4013      	ands	r3, r2
 8005106:	d00b      	beq.n	8005120 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4a0e      	ldr	r2, [pc, #56]	@ (8005148 <UART_AdvFeatureConfig+0x164>)
 8005110:	4013      	ands	r3, r2
 8005112:	0019      	movs	r1, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	605a      	str	r2, [r3, #4]
  }
}
 8005120:	46c0      	nop			@ (mov r8, r8)
 8005122:	46bd      	mov	sp, r7
 8005124:	b002      	add	sp, #8
 8005126:	bd80      	pop	{r7, pc}
 8005128:	ffff7fff 	.word	0xffff7fff
 800512c:	fffdffff 	.word	0xfffdffff
 8005130:	fffeffff 	.word	0xfffeffff
 8005134:	fffbffff 	.word	0xfffbffff
 8005138:	ffffefff 	.word	0xffffefff
 800513c:	ffffdfff 	.word	0xffffdfff
 8005140:	ffefffff 	.word	0xffefffff
 8005144:	ff9fffff 	.word	0xff9fffff
 8005148:	fff7ffff 	.word	0xfff7ffff

0800514c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b092      	sub	sp, #72	@ 0x48
 8005150:	af02      	add	r7, sp, #8
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2290      	movs	r2, #144	@ 0x90
 8005158:	2100      	movs	r1, #0
 800515a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800515c:	f7fc feae 	bl	8001ebc <HAL_GetTick>
 8005160:	0003      	movs	r3, r0
 8005162:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	2208      	movs	r2, #8
 800516c:	4013      	ands	r3, r2
 800516e:	2b08      	cmp	r3, #8
 8005170:	d12d      	bne.n	80051ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005174:	2280      	movs	r2, #128	@ 0x80
 8005176:	0391      	lsls	r1, r2, #14
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4a47      	ldr	r2, [pc, #284]	@ (8005298 <UART_CheckIdleState+0x14c>)
 800517c:	9200      	str	r2, [sp, #0]
 800517e:	2200      	movs	r2, #0
 8005180:	f000 f88e 	bl	80052a0 <UART_WaitOnFlagUntilTimeout>
 8005184:	1e03      	subs	r3, r0, #0
 8005186:	d022      	beq.n	80051ce <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005188:	f3ef 8310 	mrs	r3, PRIMASK
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005190:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005192:	2301      	movs	r3, #1
 8005194:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005198:	f383 8810 	msr	PRIMASK, r3
}
 800519c:	46c0      	nop			@ (mov r8, r8)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2180      	movs	r1, #128	@ 0x80
 80051aa:	438a      	bics	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b4:	f383 8810 	msr	PRIMASK, r3
}
 80051b8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2288      	movs	r2, #136	@ 0x88
 80051be:	2120      	movs	r1, #32
 80051c0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2284      	movs	r2, #132	@ 0x84
 80051c6:	2100      	movs	r1, #0
 80051c8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e060      	b.n	8005290 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2204      	movs	r2, #4
 80051d6:	4013      	ands	r3, r2
 80051d8:	2b04      	cmp	r3, #4
 80051da:	d146      	bne.n	800526a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051de:	2280      	movs	r2, #128	@ 0x80
 80051e0:	03d1      	lsls	r1, r2, #15
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	4a2c      	ldr	r2, [pc, #176]	@ (8005298 <UART_CheckIdleState+0x14c>)
 80051e6:	9200      	str	r2, [sp, #0]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f000 f859 	bl	80052a0 <UART_WaitOnFlagUntilTimeout>
 80051ee:	1e03      	subs	r3, r0, #0
 80051f0:	d03b      	beq.n	800526a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051f2:	f3ef 8310 	mrs	r3, PRIMASK
 80051f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80051f8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80051fc:	2301      	movs	r3, #1
 80051fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	f383 8810 	msr	PRIMASK, r3
}
 8005206:	46c0      	nop			@ (mov r8, r8)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4922      	ldr	r1, [pc, #136]	@ (800529c <UART_CheckIdleState+0x150>)
 8005214:	400a      	ands	r2, r1
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800521a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f383 8810 	msr	PRIMASK, r3
}
 8005222:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005224:	f3ef 8310 	mrs	r3, PRIMASK
 8005228:	61bb      	str	r3, [r7, #24]
  return(result);
 800522a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522c:	633b      	str	r3, [r7, #48]	@ 0x30
 800522e:	2301      	movs	r3, #1
 8005230:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f383 8810 	msr	PRIMASK, r3
}
 8005238:	46c0      	nop			@ (mov r8, r8)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2101      	movs	r1, #1
 8005246:	438a      	bics	r2, r1
 8005248:	609a      	str	r2, [r3, #8]
 800524a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f383 8810 	msr	PRIMASK, r3
}
 8005254:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	228c      	movs	r2, #140	@ 0x8c
 800525a:	2120      	movs	r1, #32
 800525c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2284      	movs	r2, #132	@ 0x84
 8005262:	2100      	movs	r1, #0
 8005264:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e012      	b.n	8005290 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2288      	movs	r2, #136	@ 0x88
 800526e:	2120      	movs	r1, #32
 8005270:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	228c      	movs	r2, #140	@ 0x8c
 8005276:	2120      	movs	r1, #32
 8005278:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2284      	movs	r2, #132	@ 0x84
 800528a:	2100      	movs	r1, #0
 800528c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	0018      	movs	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	b010      	add	sp, #64	@ 0x40
 8005296:	bd80      	pop	{r7, pc}
 8005298:	01ffffff 	.word	0x01ffffff
 800529c:	fffffedf 	.word	0xfffffedf

080052a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	1dfb      	adds	r3, r7, #7
 80052ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b0:	e051      	b.n	8005356 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	3301      	adds	r3, #1
 80052b6:	d04e      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b8:	f7fc fe00 	bl	8001ebc <HAL_GetTick>
 80052bc:	0002      	movs	r2, r0
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d302      	bcc.n	80052ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e051      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2204      	movs	r2, #4
 80052da:	4013      	ands	r3, r2
 80052dc:	d03b      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0xb6>
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	2b80      	cmp	r3, #128	@ 0x80
 80052e2:	d038      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0xb6>
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2b40      	cmp	r3, #64	@ 0x40
 80052e8:	d035      	beq.n	8005356 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	2208      	movs	r2, #8
 80052f2:	4013      	ands	r3, r2
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d111      	bne.n	800531c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2208      	movs	r2, #8
 80052fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	0018      	movs	r0, r3
 8005304:	f000 f960 	bl	80055c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2290      	movs	r2, #144	@ 0x90
 800530c:	2108      	movs	r1, #8
 800530e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2284      	movs	r2, #132	@ 0x84
 8005314:	2100      	movs	r1, #0
 8005316:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e02c      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69da      	ldr	r2, [r3, #28]
 8005322:	2380      	movs	r3, #128	@ 0x80
 8005324:	011b      	lsls	r3, r3, #4
 8005326:	401a      	ands	r2, r3
 8005328:	2380      	movs	r3, #128	@ 0x80
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	429a      	cmp	r2, r3
 800532e:	d112      	bne.n	8005356 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2280      	movs	r2, #128	@ 0x80
 8005336:	0112      	lsls	r2, r2, #4
 8005338:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	0018      	movs	r0, r3
 800533e:	f000 f943 	bl	80055c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2290      	movs	r2, #144	@ 0x90
 8005346:	2120      	movs	r1, #32
 8005348:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2284      	movs	r2, #132	@ 0x84
 800534e:	2100      	movs	r1, #0
 8005350:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e00f      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	4013      	ands	r3, r2
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	425a      	negs	r2, r3
 8005366:	4153      	adcs	r3, r2
 8005368:	b2db      	uxtb	r3, r3
 800536a:	001a      	movs	r2, r3
 800536c:	1dfb      	adds	r3, r7, #7
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d09e      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	0018      	movs	r0, r3
 8005378:	46bd      	mov	sp, r7
 800537a:	b004      	add	sp, #16
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b098      	sub	sp, #96	@ 0x60
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	1dbb      	adds	r3, r7, #6
 800538c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	1dba      	adds	r2, r7, #6
 8005398:	215c      	movs	r1, #92	@ 0x5c
 800539a:	8812      	ldrh	r2, [r2, #0]
 800539c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	1dba      	adds	r2, r7, #6
 80053a2:	215e      	movs	r1, #94	@ 0x5e
 80053a4:	8812      	ldrh	r2, [r2, #0]
 80053a6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	2380      	movs	r3, #128	@ 0x80
 80053b4:	015b      	lsls	r3, r3, #5
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d10d      	bne.n	80053d6 <UART_Start_Receive_IT+0x56>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d104      	bne.n	80053cc <UART_Start_Receive_IT+0x4c>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2260      	movs	r2, #96	@ 0x60
 80053c6:	497b      	ldr	r1, [pc, #492]	@ (80055b4 <UART_Start_Receive_IT+0x234>)
 80053c8:	5299      	strh	r1, [r3, r2]
 80053ca:	e02e      	b.n	800542a <UART_Start_Receive_IT+0xaa>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2260      	movs	r2, #96	@ 0x60
 80053d0:	21ff      	movs	r1, #255	@ 0xff
 80053d2:	5299      	strh	r1, [r3, r2]
 80053d4:	e029      	b.n	800542a <UART_Start_Receive_IT+0xaa>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10d      	bne.n	80053fa <UART_Start_Receive_IT+0x7a>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <UART_Start_Receive_IT+0x70>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2260      	movs	r2, #96	@ 0x60
 80053ea:	21ff      	movs	r1, #255	@ 0xff
 80053ec:	5299      	strh	r1, [r3, r2]
 80053ee:	e01c      	b.n	800542a <UART_Start_Receive_IT+0xaa>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2260      	movs	r2, #96	@ 0x60
 80053f4:	217f      	movs	r1, #127	@ 0x7f
 80053f6:	5299      	strh	r1, [r3, r2]
 80053f8:	e017      	b.n	800542a <UART_Start_Receive_IT+0xaa>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689a      	ldr	r2, [r3, #8]
 80053fe:	2380      	movs	r3, #128	@ 0x80
 8005400:	055b      	lsls	r3, r3, #21
 8005402:	429a      	cmp	r2, r3
 8005404:	d10d      	bne.n	8005422 <UART_Start_Receive_IT+0xa2>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d104      	bne.n	8005418 <UART_Start_Receive_IT+0x98>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2260      	movs	r2, #96	@ 0x60
 8005412:	217f      	movs	r1, #127	@ 0x7f
 8005414:	5299      	strh	r1, [r3, r2]
 8005416:	e008      	b.n	800542a <UART_Start_Receive_IT+0xaa>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2260      	movs	r2, #96	@ 0x60
 800541c:	213f      	movs	r1, #63	@ 0x3f
 800541e:	5299      	strh	r1, [r3, r2]
 8005420:	e003      	b.n	800542a <UART_Start_Receive_IT+0xaa>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2260      	movs	r2, #96	@ 0x60
 8005426:	2100      	movs	r1, #0
 8005428:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2290      	movs	r2, #144	@ 0x90
 800542e:	2100      	movs	r1, #0
 8005430:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	228c      	movs	r2, #140	@ 0x8c
 8005436:	2122      	movs	r1, #34	@ 0x22
 8005438:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800543a:	f3ef 8310 	mrs	r3, PRIMASK
 800543e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8005440:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005442:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005444:	2301      	movs	r3, #1
 8005446:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800544a:	f383 8810 	msr	PRIMASK, r3
}
 800544e:	46c0      	nop			@ (mov r8, r8)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2101      	movs	r1, #1
 800545c:	430a      	orrs	r2, r1
 800545e:	609a      	str	r2, [r3, #8]
 8005460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005462:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005464:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005466:	f383 8810 	msr	PRIMASK, r3
}
 800546a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005470:	2380      	movs	r3, #128	@ 0x80
 8005472:	059b      	lsls	r3, r3, #22
 8005474:	429a      	cmp	r2, r3
 8005476:	d150      	bne.n	800551a <UART_Start_Receive_IT+0x19a>
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2268      	movs	r2, #104	@ 0x68
 800547c:	5a9b      	ldrh	r3, [r3, r2]
 800547e:	1dba      	adds	r2, r7, #6
 8005480:	8812      	ldrh	r2, [r2, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d349      	bcc.n	800551a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689a      	ldr	r2, [r3, #8]
 800548a:	2380      	movs	r3, #128	@ 0x80
 800548c:	015b      	lsls	r3, r3, #5
 800548e:	429a      	cmp	r2, r3
 8005490:	d107      	bne.n	80054a2 <UART_Start_Receive_IT+0x122>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d103      	bne.n	80054a2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a46      	ldr	r2, [pc, #280]	@ (80055b8 <UART_Start_Receive_IT+0x238>)
 800549e:	675a      	str	r2, [r3, #116]	@ 0x74
 80054a0:	e002      	b.n	80054a8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a45      	ldr	r2, [pc, #276]	@ (80055bc <UART_Start_Receive_IT+0x23c>)
 80054a6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d019      	beq.n	80054e4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b0:	f3ef 8310 	mrs	r3, PRIMASK
 80054b4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80054b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054ba:	2301      	movs	r3, #1
 80054bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c0:	f383 8810 	msr	PRIMASK, r3
}
 80054c4:	46c0      	nop			@ (mov r8, r8)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2180      	movs	r1, #128	@ 0x80
 80054d2:	0049      	lsls	r1, r1, #1
 80054d4:	430a      	orrs	r2, r1
 80054d6:	601a      	str	r2, [r3, #0]
 80054d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054de:	f383 8810 	msr	PRIMASK, r3
}
 80054e2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e4:	f3ef 8310 	mrs	r3, PRIMASK
 80054e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80054ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80054ee:	2301      	movs	r3, #1
 80054f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054f4:	f383 8810 	msr	PRIMASK, r3
}
 80054f8:	46c0      	nop			@ (mov r8, r8)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2180      	movs	r1, #128	@ 0x80
 8005506:	0549      	lsls	r1, r1, #21
 8005508:	430a      	orrs	r2, r1
 800550a:	609a      	str	r2, [r3, #8]
 800550c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800550e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005512:	f383 8810 	msr	PRIMASK, r3
}
 8005516:	46c0      	nop			@ (mov r8, r8)
 8005518:	e047      	b.n	80055aa <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	2380      	movs	r3, #128	@ 0x80
 8005520:	015b      	lsls	r3, r3, #5
 8005522:	429a      	cmp	r2, r3
 8005524:	d107      	bne.n	8005536 <UART_Start_Receive_IT+0x1b6>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	4a23      	ldr	r2, [pc, #140]	@ (80055c0 <UART_Start_Receive_IT+0x240>)
 8005532:	675a      	str	r2, [r3, #116]	@ 0x74
 8005534:	e002      	b.n	800553c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	4a22      	ldr	r2, [pc, #136]	@ (80055c4 <UART_Start_Receive_IT+0x244>)
 800553a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d019      	beq.n	8005578 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005544:	f3ef 8310 	mrs	r3, PRIMASK
 8005548:	61fb      	str	r3, [r7, #28]
  return(result);
 800554a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800554c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800554e:	2301      	movs	r3, #1
 8005550:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	f383 8810 	msr	PRIMASK, r3
}
 8005558:	46c0      	nop			@ (mov r8, r8)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2190      	movs	r1, #144	@ 0x90
 8005566:	0049      	lsls	r1, r1, #1
 8005568:	430a      	orrs	r2, r1
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800556e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	f383 8810 	msr	PRIMASK, r3
}
 8005576:	e018      	b.n	80055aa <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005578:	f3ef 8310 	mrs	r3, PRIMASK
 800557c:	613b      	str	r3, [r7, #16]
  return(result);
 800557e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005580:	653b      	str	r3, [r7, #80]	@ 0x50
 8005582:	2301      	movs	r3, #1
 8005584:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f383 8810 	msr	PRIMASK, r3
}
 800558c:	46c0      	nop			@ (mov r8, r8)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2120      	movs	r1, #32
 800559a:	430a      	orrs	r2, r1
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055a0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f383 8810 	msr	PRIMASK, r3
}
 80055a8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	0018      	movs	r0, r3
 80055ae:	46bd      	mov	sp, r7
 80055b0:	b018      	add	sp, #96	@ 0x60
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	000001ff 	.word	0x000001ff
 80055b8:	08005e11 	.word	0x08005e11
 80055bc:	08005ac5 	.word	0x08005ac5
 80055c0:	080058f1 	.word	0x080058f1
 80055c4:	0800571d 	.word	0x0800571d

080055c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b08e      	sub	sp, #56	@ 0x38
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055d0:	f3ef 8310 	mrs	r3, PRIMASK
 80055d4:	617b      	str	r3, [r7, #20]
  return(result);
 80055d6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055da:	2301      	movs	r3, #1
 80055dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f383 8810 	msr	PRIMASK, r3
}
 80055e4:	46c0      	nop			@ (mov r8, r8)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4926      	ldr	r1, [pc, #152]	@ (800568c <UART_EndRxTransfer+0xc4>)
 80055f2:	400a      	ands	r2, r1
 80055f4:	601a      	str	r2, [r3, #0]
 80055f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	f383 8810 	msr	PRIMASK, r3
}
 8005600:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005602:	f3ef 8310 	mrs	r3, PRIMASK
 8005606:	623b      	str	r3, [r7, #32]
  return(result);
 8005608:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800560a:	633b      	str	r3, [r7, #48]	@ 0x30
 800560c:	2301      	movs	r3, #1
 800560e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005612:	f383 8810 	msr	PRIMASK, r3
}
 8005616:	46c0      	nop			@ (mov r8, r8)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	491b      	ldr	r1, [pc, #108]	@ (8005690 <UART_EndRxTransfer+0xc8>)
 8005624:	400a      	ands	r2, r1
 8005626:	609a      	str	r2, [r3, #8]
 8005628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800562a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800562c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562e:	f383 8810 	msr	PRIMASK, r3
}
 8005632:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005638:	2b01      	cmp	r3, #1
 800563a:	d118      	bne.n	800566e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800563c:	f3ef 8310 	mrs	r3, PRIMASK
 8005640:	60bb      	str	r3, [r7, #8]
  return(result);
 8005642:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005646:	2301      	movs	r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f383 8810 	msr	PRIMASK, r3
}
 8005650:	46c0      	nop			@ (mov r8, r8)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2110      	movs	r1, #16
 800565e:	438a      	bics	r2, r1
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	f383 8810 	msr	PRIMASK, r3
}
 800566c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	228c      	movs	r2, #140	@ 0x8c
 8005672:	2120      	movs	r1, #32
 8005674:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005682:	46c0      	nop			@ (mov r8, r8)
 8005684:	46bd      	mov	sp, r7
 8005686:	b00e      	add	sp, #56	@ 0x38
 8005688:	bd80      	pop	{r7, pc}
 800568a:	46c0      	nop			@ (mov r8, r8)
 800568c:	fffffedf 	.word	0xfffffedf
 8005690:	effffffe 	.word	0xeffffffe

08005694 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	225e      	movs	r2, #94	@ 0x5e
 80056a6:	2100      	movs	r1, #0
 80056a8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2256      	movs	r2, #86	@ 0x56
 80056ae:	2100      	movs	r1, #0
 80056b0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	0018      	movs	r0, r3
 80056b6:	f7ff f92b 	bl	8004910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ba:	46c0      	nop			@ (mov r8, r8)
 80056bc:	46bd      	mov	sp, r7
 80056be:	b004      	add	sp, #16
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b086      	sub	sp, #24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ca:	f3ef 8310 	mrs	r3, PRIMASK
 80056ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80056d0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056d2:	617b      	str	r3, [r7, #20]
 80056d4:	2301      	movs	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	46c0      	nop			@ (mov r8, r8)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2140      	movs	r1, #64	@ 0x40
 80056ec:	438a      	bics	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f383 8810 	msr	PRIMASK, r3
}
 80056fa:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2288      	movs	r2, #136	@ 0x88
 8005700:	2120      	movs	r1, #32
 8005702:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	0018      	movs	r0, r3
 800570e:	f7ff f8f7 	bl	8004900 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005712:	46c0      	nop			@ (mov r8, r8)
 8005714:	46bd      	mov	sp, r7
 8005716:	b006      	add	sp, #24
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b094      	sub	sp, #80	@ 0x50
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005724:	204e      	movs	r0, #78	@ 0x4e
 8005726:	183b      	adds	r3, r7, r0
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	2160      	movs	r1, #96	@ 0x60
 800572c:	5a52      	ldrh	r2, [r2, r1]
 800572e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	228c      	movs	r2, #140	@ 0x8c
 8005734:	589b      	ldr	r3, [r3, r2]
 8005736:	2b22      	cmp	r3, #34	@ 0x22
 8005738:	d000      	beq.n	800573c <UART_RxISR_8BIT+0x20>
 800573a:	e0c4      	b.n	80058c6 <UART_RxISR_8BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005742:	214c      	movs	r1, #76	@ 0x4c
 8005744:	187b      	adds	r3, r7, r1
 8005746:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005748:	187b      	adds	r3, r7, r1
 800574a:	881b      	ldrh	r3, [r3, #0]
 800574c:	b2da      	uxtb	r2, r3
 800574e:	183b      	adds	r3, r7, r0
 8005750:	881b      	ldrh	r3, [r3, #0]
 8005752:	b2d9      	uxtb	r1, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005758:	400a      	ands	r2, r1
 800575a:	b2d2      	uxtb	r2, r2
 800575c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	225e      	movs	r2, #94	@ 0x5e
 800576c:	5a9b      	ldrh	r3, [r3, r2]
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b299      	uxth	r1, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	225e      	movs	r2, #94	@ 0x5e
 8005778:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	225e      	movs	r2, #94	@ 0x5e
 800577e:	5a9b      	ldrh	r3, [r3, r2]
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d000      	beq.n	8005788 <UART_RxISR_8BIT+0x6c>
 8005786:	e0a6      	b.n	80058d6 <UART_RxISR_8BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005788:	f3ef 8310 	mrs	r3, PRIMASK
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005790:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005792:	2301      	movs	r3, #1
 8005794:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005798:	f383 8810 	msr	PRIMASK, r3
}
 800579c:	46c0      	nop			@ (mov r8, r8)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	494d      	ldr	r1, [pc, #308]	@ (80058e0 <UART_RxISR_8BIT+0x1c4>)
 80057aa:	400a      	ands	r2, r1
 80057ac:	601a      	str	r2, [r3, #0]
 80057ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b4:	f383 8810 	msr	PRIMASK, r3
}
 80057b8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057ba:	f3ef 8310 	mrs	r3, PRIMASK
 80057be:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80057c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057c4:	2301      	movs	r3, #1
 80057c6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ca:	f383 8810 	msr	PRIMASK, r3
}
 80057ce:	46c0      	nop			@ (mov r8, r8)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2101      	movs	r1, #1
 80057dc:	438a      	bics	r2, r1
 80057de:	609a      	str	r2, [r3, #8]
 80057e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057e2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e6:	f383 8810 	msr	PRIMASK, r3
}
 80057ea:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	228c      	movs	r2, #140	@ 0x8c
 80057f0:	2120      	movs	r1, #32
 80057f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a37      	ldr	r2, [pc, #220]	@ (80058e4 <UART_RxISR_8BIT+0x1c8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d024      	beq.n	8005854 <UART_RxISR_8BIT+0x138>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a36      	ldr	r2, [pc, #216]	@ (80058e8 <UART_RxISR_8BIT+0x1cc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d01f      	beq.n	8005854 <UART_RxISR_8BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	2380      	movs	r3, #128	@ 0x80
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	4013      	ands	r3, r2
 8005820:	d018      	beq.n	8005854 <UART_RxISR_8BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005822:	f3ef 8310 	mrs	r3, PRIMASK
 8005826:	61bb      	str	r3, [r7, #24]
  return(result);
 8005828:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800582a:	643b      	str	r3, [r7, #64]	@ 0x40
 800582c:	2301      	movs	r3, #1
 800582e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f383 8810 	msr	PRIMASK, r3
}
 8005836:	46c0      	nop			@ (mov r8, r8)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	492a      	ldr	r1, [pc, #168]	@ (80058ec <UART_RxISR_8BIT+0x1d0>)
 8005844:	400a      	ands	r2, r1
 8005846:	601a      	str	r2, [r3, #0]
 8005848:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800584a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	f383 8810 	msr	PRIMASK, r3
}
 8005852:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005858:	2b01      	cmp	r3, #1
 800585a:	d12f      	bne.n	80058bc <UART_RxISR_8BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005862:	f3ef 8310 	mrs	r3, PRIMASK
 8005866:	60fb      	str	r3, [r7, #12]
  return(result);
 8005868:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800586a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800586c:	2301      	movs	r3, #1
 800586e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	f383 8810 	msr	PRIMASK, r3
}
 8005876:	46c0      	nop			@ (mov r8, r8)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2110      	movs	r1, #16
 8005884:	438a      	bics	r2, r1
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800588a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f383 8810 	msr	PRIMASK, r3
}
 8005892:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	2210      	movs	r2, #16
 800589c:	4013      	ands	r3, r2
 800589e:	2b10      	cmp	r3, #16
 80058a0:	d103      	bne.n	80058aa <UART_RxISR_8BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2210      	movs	r2, #16
 80058a8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	225c      	movs	r2, #92	@ 0x5c
 80058ae:	5a9a      	ldrh	r2, [r3, r2]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	0011      	movs	r1, r2
 80058b4:	0018      	movs	r0, r3
 80058b6:	f7ff f833 	bl	8004920 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058ba:	e00c      	b.n	80058d6 <UART_RxISR_8BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	0018      	movs	r0, r3
 80058c0:	f003 fcba 	bl	8009238 <HAL_UART_RxCpltCallback>
}
 80058c4:	e007      	b.n	80058d6 <UART_RxISR_8BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	699a      	ldr	r2, [r3, #24]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2108      	movs	r1, #8
 80058d2:	430a      	orrs	r2, r1
 80058d4:	619a      	str	r2, [r3, #24]
}
 80058d6:	46c0      	nop			@ (mov r8, r8)
 80058d8:	46bd      	mov	sp, r7
 80058da:	b014      	add	sp, #80	@ 0x50
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	46c0      	nop			@ (mov r8, r8)
 80058e0:	fffffedf 	.word	0xfffffedf
 80058e4:	40008000 	.word	0x40008000
 80058e8:	40008400 	.word	0x40008400
 80058ec:	fbffffff 	.word	0xfbffffff

080058f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b094      	sub	sp, #80	@ 0x50
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058f8:	204e      	movs	r0, #78	@ 0x4e
 80058fa:	183b      	adds	r3, r7, r0
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	2160      	movs	r1, #96	@ 0x60
 8005900:	5a52      	ldrh	r2, [r2, r1]
 8005902:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	228c      	movs	r2, #140	@ 0x8c
 8005908:	589b      	ldr	r3, [r3, r2]
 800590a:	2b22      	cmp	r3, #34	@ 0x22
 800590c:	d000      	beq.n	8005910 <UART_RxISR_16BIT+0x20>
 800590e:	e0c4      	b.n	8005a9a <UART_RxISR_16BIT+0x1aa>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005916:	214c      	movs	r1, #76	@ 0x4c
 8005918:	187b      	adds	r3, r7, r1
 800591a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005920:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005922:	187b      	adds	r3, r7, r1
 8005924:	183a      	adds	r2, r7, r0
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	8812      	ldrh	r2, [r2, #0]
 800592a:	4013      	ands	r3, r2
 800592c:	b29a      	uxth	r2, r3
 800592e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005930:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005936:	1c9a      	adds	r2, r3, #2
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	225e      	movs	r2, #94	@ 0x5e
 8005940:	5a9b      	ldrh	r3, [r3, r2]
 8005942:	b29b      	uxth	r3, r3
 8005944:	3b01      	subs	r3, #1
 8005946:	b299      	uxth	r1, r3
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	225e      	movs	r2, #94	@ 0x5e
 800594c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	225e      	movs	r2, #94	@ 0x5e
 8005952:	5a9b      	ldrh	r3, [r3, r2]
 8005954:	b29b      	uxth	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d000      	beq.n	800595c <UART_RxISR_16BIT+0x6c>
 800595a:	e0a6      	b.n	8005aaa <UART_RxISR_16BIT+0x1ba>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800595c:	f3ef 8310 	mrs	r3, PRIMASK
 8005960:	623b      	str	r3, [r7, #32]
  return(result);
 8005962:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005964:	647b      	str	r3, [r7, #68]	@ 0x44
 8005966:	2301      	movs	r3, #1
 8005968:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596c:	f383 8810 	msr	PRIMASK, r3
}
 8005970:	46c0      	nop			@ (mov r8, r8)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	494d      	ldr	r1, [pc, #308]	@ (8005ab4 <UART_RxISR_16BIT+0x1c4>)
 800597e:	400a      	ands	r2, r1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005984:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005988:	f383 8810 	msr	PRIMASK, r3
}
 800598c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800598e:	f3ef 8310 	mrs	r3, PRIMASK
 8005992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005996:	643b      	str	r3, [r7, #64]	@ 0x40
 8005998:	2301      	movs	r3, #1
 800599a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800599c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599e:	f383 8810 	msr	PRIMASK, r3
}
 80059a2:	46c0      	nop			@ (mov r8, r8)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2101      	movs	r1, #1
 80059b0:	438a      	bics	r2, r1
 80059b2:	609a      	str	r2, [r3, #8]
 80059b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ba:	f383 8810 	msr	PRIMASK, r3
}
 80059be:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	228c      	movs	r2, #140	@ 0x8c
 80059c4:	2120      	movs	r1, #32
 80059c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a37      	ldr	r2, [pc, #220]	@ (8005ab8 <UART_RxISR_16BIT+0x1c8>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d024      	beq.n	8005a28 <UART_RxISR_16BIT+0x138>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a36      	ldr	r2, [pc, #216]	@ (8005abc <UART_RxISR_16BIT+0x1cc>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d01f      	beq.n	8005a28 <UART_RxISR_16BIT+0x138>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	2380      	movs	r3, #128	@ 0x80
 80059f0:	041b      	lsls	r3, r3, #16
 80059f2:	4013      	ands	r3, r2
 80059f4:	d018      	beq.n	8005a28 <UART_RxISR_16BIT+0x138>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f6:	f3ef 8310 	mrs	r3, PRIMASK
 80059fa:	617b      	str	r3, [r7, #20]
  return(result);
 80059fc:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a00:	2301      	movs	r3, #1
 8005a02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	f383 8810 	msr	PRIMASK, r3
}
 8005a0a:	46c0      	nop			@ (mov r8, r8)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	492a      	ldr	r1, [pc, #168]	@ (8005ac0 <UART_RxISR_16BIT+0x1d0>)
 8005a18:	400a      	ands	r2, r1
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f383 8810 	msr	PRIMASK, r3
}
 8005a26:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d12f      	bne.n	8005a90 <UART_RxISR_16BIT+0x1a0>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a36:	f3ef 8310 	mrs	r3, PRIMASK
 8005a3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a3c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a40:	2301      	movs	r3, #1
 8005a42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f383 8810 	msr	PRIMASK, r3
}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2110      	movs	r1, #16
 8005a58:	438a      	bics	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	f383 8810 	msr	PRIMASK, r3
}
 8005a66:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	2210      	movs	r2, #16
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	d103      	bne.n	8005a7e <UART_RxISR_16BIT+0x18e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2210      	movs	r2, #16
 8005a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	225c      	movs	r2, #92	@ 0x5c
 8005a82:	5a9a      	ldrh	r2, [r3, r2]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	0011      	movs	r1, r2
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f7fe ff49 	bl	8004920 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a8e:	e00c      	b.n	8005aaa <UART_RxISR_16BIT+0x1ba>
        HAL_UART_RxCpltCallback(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	0018      	movs	r0, r3
 8005a94:	f003 fbd0 	bl	8009238 <HAL_UART_RxCpltCallback>
}
 8005a98:	e007      	b.n	8005aaa <UART_RxISR_16BIT+0x1ba>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	699a      	ldr	r2, [r3, #24]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2108      	movs	r1, #8
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	619a      	str	r2, [r3, #24]
}
 8005aaa:	46c0      	nop			@ (mov r8, r8)
 8005aac:	46bd      	mov	sp, r7
 8005aae:	b014      	add	sp, #80	@ 0x50
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	46c0      	nop			@ (mov r8, r8)
 8005ab4:	fffffedf 	.word	0xfffffedf
 8005ab8:	40008000 	.word	0x40008000
 8005abc:	40008400 	.word	0x40008400
 8005ac0:	fbffffff 	.word	0xfbffffff

08005ac4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b0a0      	sub	sp, #128	@ 0x80
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005acc:	237a      	movs	r3, #122	@ 0x7a
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	2160      	movs	r1, #96	@ 0x60
 8005ad4:	5a52      	ldrh	r2, [r2, r1]
 8005ad6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	228c      	movs	r2, #140	@ 0x8c
 8005af4:	589b      	ldr	r3, [r3, r2]
 8005af6:	2b22      	cmp	r3, #34	@ 0x22
 8005af8:	d000      	beq.n	8005afc <UART_RxISR_8BIT_FIFOEN+0x38>
 8005afa:	e16f      	b.n	8005ddc <UART_RxISR_8BIT_FIFOEN+0x318>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005afc:	236e      	movs	r3, #110	@ 0x6e
 8005afe:	18fb      	adds	r3, r7, r3
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	2168      	movs	r1, #104	@ 0x68
 8005b04:	5a52      	ldrh	r2, [r2, r1]
 8005b06:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b08:	e116      	b.n	8005d38 <UART_RxISR_8BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b10:	216c      	movs	r1, #108	@ 0x6c
 8005b12:	187b      	adds	r3, r7, r1
 8005b14:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b16:	187b      	adds	r3, r7, r1
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	237a      	movs	r3, #122	@ 0x7a
 8005b1e:	18fb      	adds	r3, r7, r3
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b2d9      	uxtb	r1, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b28:	400a      	ands	r2, r1
 8005b2a:	b2d2      	uxtb	r2, r2
 8005b2c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	225e      	movs	r2, #94	@ 0x5e
 8005b3c:	5a9b      	ldrh	r3, [r3, r2]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b299      	uxth	r1, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	225e      	movs	r2, #94	@ 0x5e
 8005b48:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	69db      	ldr	r3, [r3, #28]
 8005b50:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b54:	2207      	movs	r2, #7
 8005b56:	4013      	ands	r3, r2
 8005b58:	d049      	beq.n	8005bee <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	4013      	ands	r3, r2
 8005b60:	d010      	beq.n	8005b84 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005b62:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005b64:	2380      	movs	r3, #128	@ 0x80
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d00b      	beq.n	8005b84 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2201      	movs	r2, #1
 8005b72:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2290      	movs	r2, #144	@ 0x90
 8005b78:	589b      	ldr	r3, [r3, r2]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2190      	movs	r1, #144	@ 0x90
 8005b82:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b86:	2202      	movs	r2, #2
 8005b88:	4013      	ands	r3, r2
 8005b8a:	d00f      	beq.n	8005bac <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005b8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b8e:	2201      	movs	r2, #1
 8005b90:	4013      	ands	r3, r2
 8005b92:	d00b      	beq.n	8005bac <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2290      	movs	r2, #144	@ 0x90
 8005ba0:	589b      	ldr	r3, [r3, r2]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2190      	movs	r1, #144	@ 0x90
 8005baa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bae:	2204      	movs	r2, #4
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	d00f      	beq.n	8005bd4 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005bb4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d00b      	beq.n	8005bd4 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	2204      	movs	r2, #4
 8005bc2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2290      	movs	r2, #144	@ 0x90
 8005bc8:	589b      	ldr	r3, [r3, r2]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	431a      	orrs	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2190      	movs	r1, #144	@ 0x90
 8005bd2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2290      	movs	r2, #144	@ 0x90
 8005bd8:	589b      	ldr	r3, [r3, r2]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d007      	beq.n	8005bee <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	0018      	movs	r0, r3
 8005be2:	f7fe fe95 	bl	8004910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2290      	movs	r2, #144	@ 0x90
 8005bea:	2100      	movs	r1, #0
 8005bec:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	225e      	movs	r2, #94	@ 0x5e
 8005bf2:	5a9b      	ldrh	r3, [r3, r2]
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d000      	beq.n	8005bfc <UART_RxISR_8BIT_FIFOEN+0x138>
 8005bfa:	e09d      	b.n	8005d38 <UART_RxISR_8BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8005c00:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c06:	2301      	movs	r3, #1
 8005c08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0c:	f383 8810 	msr	PRIMASK, r3
}
 8005c10:	46c0      	nop			@ (mov r8, r8)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4975      	ldr	r1, [pc, #468]	@ (8005df4 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8005c1e:	400a      	ands	r2, r1
 8005c20:	601a      	str	r2, [r3, #0]
 8005c22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c24:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c28:	f383 8810 	msr	PRIMASK, r3
}
 8005c2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c2e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c32:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005c34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c36:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c38:	2301      	movs	r3, #1
 8005c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c3e:	f383 8810 	msr	PRIMASK, r3
}
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689a      	ldr	r2, [r3, #8]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	496a      	ldr	r1, [pc, #424]	@ (8005df8 <UART_RxISR_8BIT_FIFOEN+0x334>)
 8005c50:	400a      	ands	r2, r1
 8005c52:	609a      	str	r2, [r3, #8]
 8005c54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c5a:	f383 8810 	msr	PRIMASK, r3
}
 8005c5e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	228c      	movs	r2, #140	@ 0x8c
 8005c64:	2120      	movs	r1, #32
 8005c66:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a60      	ldr	r2, [pc, #384]	@ (8005dfc <UART_RxISR_8BIT_FIFOEN+0x338>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d024      	beq.n	8005cc8 <UART_RxISR_8BIT_FIFOEN+0x204>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a5f      	ldr	r2, [pc, #380]	@ (8005e00 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d01f      	beq.n	8005cc8 <UART_RxISR_8BIT_FIFOEN+0x204>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685a      	ldr	r2, [r3, #4]
 8005c8e:	2380      	movs	r3, #128	@ 0x80
 8005c90:	041b      	lsls	r3, r3, #16
 8005c92:	4013      	ands	r3, r2
 8005c94:	d018      	beq.n	8005cc8 <UART_RxISR_8BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c96:	f3ef 8310 	mrs	r3, PRIMASK
 8005c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c9e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca6:	f383 8810 	msr	PRIMASK, r3
}
 8005caa:	46c0      	nop			@ (mov r8, r8)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4953      	ldr	r1, [pc, #332]	@ (8005e04 <UART_RxISR_8BIT_FIFOEN+0x340>)
 8005cb8:	400a      	ands	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005cbe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc2:	f383 8810 	msr	PRIMASK, r3
}
 8005cc6:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d12f      	bne.n	8005d30 <UART_RxISR_8BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cda:	623b      	str	r3, [r7, #32]
  return(result);
 8005cdc:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cde:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	f383 8810 	msr	PRIMASK, r3
}
 8005cea:	46c0      	nop			@ (mov r8, r8)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2110      	movs	r1, #16
 8005cf8:	438a      	bics	r2, r1
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d02:	f383 8810 	msr	PRIMASK, r3
}
 8005d06:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	2210      	movs	r2, #16
 8005d10:	4013      	ands	r3, r2
 8005d12:	2b10      	cmp	r3, #16
 8005d14:	d103      	bne.n	8005d1e <UART_RxISR_8BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2210      	movs	r2, #16
 8005d1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	225c      	movs	r2, #92	@ 0x5c
 8005d22:	5a9a      	ldrh	r2, [r3, r2]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	0011      	movs	r1, r2
 8005d28:	0018      	movs	r0, r3
 8005d2a:	f7fe fdf9 	bl	8004920 <HAL_UARTEx_RxEventCallback>
 8005d2e:	e003      	b.n	8005d38 <UART_RxISR_8BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	0018      	movs	r0, r3
 8005d34:	f003 fa80 	bl	8009238 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d38:	236e      	movs	r3, #110	@ 0x6e
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d004      	beq.n	8005d4c <UART_RxISR_8BIT_FIFOEN+0x288>
 8005d42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d44:	2220      	movs	r2, #32
 8005d46:	4013      	ands	r3, r2
 8005d48:	d000      	beq.n	8005d4c <UART_RxISR_8BIT_FIFOEN+0x288>
 8005d4a:	e6de      	b.n	8005b0a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005d4c:	205a      	movs	r0, #90	@ 0x5a
 8005d4e:	183b      	adds	r3, r7, r0
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	215e      	movs	r1, #94	@ 0x5e
 8005d54:	5a52      	ldrh	r2, [r2, r1]
 8005d56:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d58:	0001      	movs	r1, r0
 8005d5a:	187b      	adds	r3, r7, r1
 8005d5c:	881b      	ldrh	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d044      	beq.n	8005dec <UART_RxISR_8BIT_FIFOEN+0x328>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2268      	movs	r2, #104	@ 0x68
 8005d66:	5a9b      	ldrh	r3, [r3, r2]
 8005d68:	187a      	adds	r2, r7, r1
 8005d6a:	8812      	ldrh	r2, [r2, #0]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d23d      	bcs.n	8005dec <UART_RxISR_8BIT_FIFOEN+0x328>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d70:	f3ef 8310 	mrs	r3, PRIMASK
 8005d74:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d76:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d78:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f383 8810 	msr	PRIMASK, r3
}
 8005d84:	46c0      	nop			@ (mov r8, r8)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	491d      	ldr	r1, [pc, #116]	@ (8005e08 <UART_RxISR_8BIT_FIFOEN+0x344>)
 8005d92:	400a      	ands	r2, r1
 8005d94:	609a      	str	r2, [r3, #8]
 8005d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f383 8810 	msr	PRIMASK, r3
}
 8005da0:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a19      	ldr	r2, [pc, #100]	@ (8005e0c <UART_RxISR_8BIT_FIFOEN+0x348>)
 8005da6:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005da8:	f3ef 8310 	mrs	r3, PRIMASK
 8005dac:	617b      	str	r3, [r7, #20]
  return(result);
 8005dae:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005db0:	653b      	str	r3, [r7, #80]	@ 0x50
 8005db2:	2301      	movs	r3, #1
 8005db4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	f383 8810 	msr	PRIMASK, r3
}
 8005dbc:	46c0      	nop			@ (mov r8, r8)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2120      	movs	r1, #32
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	f383 8810 	msr	PRIMASK, r3
}
 8005dd8:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dda:	e007      	b.n	8005dec <UART_RxISR_8BIT_FIFOEN+0x328>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	699a      	ldr	r2, [r3, #24]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2108      	movs	r1, #8
 8005de8:	430a      	orrs	r2, r1
 8005dea:	619a      	str	r2, [r3, #24]
}
 8005dec:	46c0      	nop			@ (mov r8, r8)
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b020      	add	sp, #128	@ 0x80
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	fffffeff 	.word	0xfffffeff
 8005df8:	effffffe 	.word	0xeffffffe
 8005dfc:	40008000 	.word	0x40008000
 8005e00:	40008400 	.word	0x40008400
 8005e04:	fbffffff 	.word	0xfbffffff
 8005e08:	efffffff 	.word	0xefffffff
 8005e0c:	0800571d 	.word	0x0800571d

08005e10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b0a2      	sub	sp, #136	@ 0x88
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005e18:	2382      	movs	r3, #130	@ 0x82
 8005e1a:	18fb      	adds	r3, r7, r3
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	2160      	movs	r1, #96	@ 0x60
 8005e20:	5a52      	ldrh	r2, [r2, r1]
 8005e22:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	69db      	ldr	r3, [r3, #28]
 8005e2a:	2284      	movs	r2, #132	@ 0x84
 8005e2c:	18ba      	adds	r2, r7, r2
 8005e2e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	228c      	movs	r2, #140	@ 0x8c
 8005e44:	589b      	ldr	r3, [r3, r2]
 8005e46:	2b22      	cmp	r3, #34	@ 0x22
 8005e48:	d000      	beq.n	8005e4c <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005e4a:	e179      	b.n	8006140 <UART_RxISR_16BIT_FIFOEN+0x330>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005e4c:	2376      	movs	r3, #118	@ 0x76
 8005e4e:	18fb      	adds	r3, r7, r3
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	2168      	movs	r1, #104	@ 0x68
 8005e54:	5a52      	ldrh	r2, [r2, r1]
 8005e56:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e58:	e11e      	b.n	8006098 <UART_RxISR_16BIT_FIFOEN+0x288>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e60:	2174      	movs	r1, #116	@ 0x74
 8005e62:	187b      	adds	r3, r7, r1
 8005e64:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e6a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005e6c:	187b      	adds	r3, r7, r1
 8005e6e:	2282      	movs	r2, #130	@ 0x82
 8005e70:	18ba      	adds	r2, r7, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	8812      	ldrh	r2, [r2, #0]
 8005e76:	4013      	ands	r3, r2
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e7c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e82:	1c9a      	adds	r2, r3, #2
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	225e      	movs	r2, #94	@ 0x5e
 8005e8c:	5a9b      	ldrh	r3, [r3, r2]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b299      	uxth	r1, r3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	225e      	movs	r2, #94	@ 0x5e
 8005e98:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	69db      	ldr	r3, [r3, #28]
 8005ea0:	2184      	movs	r1, #132	@ 0x84
 8005ea2:	187a      	adds	r2, r7, r1
 8005ea4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ea6:	187b      	adds	r3, r7, r1
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2207      	movs	r2, #7
 8005eac:	4013      	ands	r3, r2
 8005eae:	d04e      	beq.n	8005f4e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005eb0:	187b      	adds	r3, r7, r1
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	d010      	beq.n	8005edc <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005eba:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005ebc:	2380      	movs	r3, #128	@ 0x80
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d00b      	beq.n	8005edc <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2290      	movs	r2, #144	@ 0x90
 8005ed0:	589b      	ldr	r3, [r3, r2]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2190      	movs	r1, #144	@ 0x90
 8005eda:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005edc:	2384      	movs	r3, #132	@ 0x84
 8005ede:	18fb      	adds	r3, r7, r3
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d00f      	beq.n	8005f08 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eea:	2201      	movs	r2, #1
 8005eec:	4013      	ands	r3, r2
 8005eee:	d00b      	beq.n	8005f08 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2202      	movs	r2, #2
 8005ef6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2290      	movs	r2, #144	@ 0x90
 8005efc:	589b      	ldr	r3, [r3, r2]
 8005efe:	2204      	movs	r2, #4
 8005f00:	431a      	orrs	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2190      	movs	r1, #144	@ 0x90
 8005f06:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f08:	2384      	movs	r3, #132	@ 0x84
 8005f0a:	18fb      	adds	r3, r7, r3
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2204      	movs	r2, #4
 8005f10:	4013      	ands	r3, r2
 8005f12:	d00f      	beq.n	8005f34 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005f14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005f16:	2201      	movs	r2, #1
 8005f18:	4013      	ands	r3, r2
 8005f1a:	d00b      	beq.n	8005f34 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2204      	movs	r2, #4
 8005f22:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2290      	movs	r2, #144	@ 0x90
 8005f28:	589b      	ldr	r3, [r3, r2]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	431a      	orrs	r2, r3
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2190      	movs	r1, #144	@ 0x90
 8005f32:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2290      	movs	r2, #144	@ 0x90
 8005f38:	589b      	ldr	r3, [r3, r2]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d007      	beq.n	8005f4e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	0018      	movs	r0, r3
 8005f42:	f7fe fce5 	bl	8004910 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2290      	movs	r2, #144	@ 0x90
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	225e      	movs	r2, #94	@ 0x5e
 8005f52:	5a9b      	ldrh	r3, [r3, r2]
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d000      	beq.n	8005f5c <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005f5a:	e09d      	b.n	8006098 <UART_RxISR_16BIT_FIFOEN+0x288>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f5c:	f3ef 8310 	mrs	r3, PRIMASK
 8005f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005f62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f64:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f66:	2301      	movs	r3, #1
 8005f68:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f6c:	f383 8810 	msr	PRIMASK, r3
}
 8005f70:	46c0      	nop			@ (mov r8, r8)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4976      	ldr	r1, [pc, #472]	@ (8006158 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8005f7e:	400a      	ands	r2, r1
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f84:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f88:	f383 8810 	msr	PRIMASK, r3
}
 8005f8c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f92:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005f94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f98:	2301      	movs	r3, #1
 8005f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f9e:	f383 8810 	msr	PRIMASK, r3
}
 8005fa2:	46c0      	nop			@ (mov r8, r8)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	496b      	ldr	r1, [pc, #428]	@ (800615c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8005fb0:	400a      	ands	r2, r1
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005fb6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fba:	f383 8810 	msr	PRIMASK, r3
}
 8005fbe:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	228c      	movs	r2, #140	@ 0x8c
 8005fc4:	2120      	movs	r1, #32
 8005fc6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a61      	ldr	r2, [pc, #388]	@ (8006160 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d024      	beq.n	8006028 <UART_RxISR_16BIT_FIFOEN+0x218>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a60      	ldr	r2, [pc, #384]	@ (8006164 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d01f      	beq.n	8006028 <UART_RxISR_16BIT_FIFOEN+0x218>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	2380      	movs	r3, #128	@ 0x80
 8005ff0:	041b      	lsls	r3, r3, #16
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	d018      	beq.n	8006028 <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8005ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ffe:	667b      	str	r3, [r7, #100]	@ 0x64
 8006000:	2301      	movs	r3, #1
 8006002:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006006:	f383 8810 	msr	PRIMASK, r3
}
 800600a:	46c0      	nop			@ (mov r8, r8)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4954      	ldr	r1, [pc, #336]	@ (8006168 <UART_RxISR_16BIT_FIFOEN+0x358>)
 8006018:	400a      	ands	r2, r1
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800601e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006022:	f383 8810 	msr	PRIMASK, r3
}
 8006026:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800602c:	2b01      	cmp	r3, #1
 800602e:	d12f      	bne.n	8006090 <UART_RxISR_16BIT_FIFOEN+0x280>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006036:	f3ef 8310 	mrs	r3, PRIMASK
 800603a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800603e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006040:	2301      	movs	r3, #1
 8006042:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006046:	f383 8810 	msr	PRIMASK, r3
}
 800604a:	46c0      	nop			@ (mov r8, r8)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2110      	movs	r1, #16
 8006058:	438a      	bics	r2, r1
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800605e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006062:	f383 8810 	msr	PRIMASK, r3
}
 8006066:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	2210      	movs	r2, #16
 8006070:	4013      	ands	r3, r2
 8006072:	2b10      	cmp	r3, #16
 8006074:	d103      	bne.n	800607e <UART_RxISR_16BIT_FIFOEN+0x26e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2210      	movs	r2, #16
 800607c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	225c      	movs	r2, #92	@ 0x5c
 8006082:	5a9a      	ldrh	r2, [r3, r2]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	0011      	movs	r1, r2
 8006088:	0018      	movs	r0, r3
 800608a:	f7fe fc49 	bl	8004920 <HAL_UARTEx_RxEventCallback>
 800608e:	e003      	b.n	8006098 <UART_RxISR_16BIT_FIFOEN+0x288>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	0018      	movs	r0, r3
 8006094:	f003 f8d0 	bl	8009238 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006098:	2376      	movs	r3, #118	@ 0x76
 800609a:	18fb      	adds	r3, r7, r3
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d006      	beq.n	80060b0 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80060a2:	2384      	movs	r3, #132	@ 0x84
 80060a4:	18fb      	adds	r3, r7, r3
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2220      	movs	r2, #32
 80060aa:	4013      	ands	r3, r2
 80060ac:	d000      	beq.n	80060b0 <UART_RxISR_16BIT_FIFOEN+0x2a0>
 80060ae:	e6d4      	b.n	8005e5a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80060b0:	205e      	movs	r0, #94	@ 0x5e
 80060b2:	183b      	adds	r3, r7, r0
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	215e      	movs	r1, #94	@ 0x5e
 80060b8:	5a52      	ldrh	r2, [r2, r1]
 80060ba:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80060bc:	0001      	movs	r1, r0
 80060be:	187b      	adds	r3, r7, r1
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d044      	beq.n	8006150 <UART_RxISR_16BIT_FIFOEN+0x340>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2268      	movs	r2, #104	@ 0x68
 80060ca:	5a9b      	ldrh	r3, [r3, r2]
 80060cc:	187a      	adds	r2, r7, r1
 80060ce:	8812      	ldrh	r2, [r2, #0]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d23d      	bcs.n	8006150 <UART_RxISR_16BIT_FIFOEN+0x340>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060d4:	f3ef 8310 	mrs	r3, PRIMASK
 80060d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80060da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80060dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80060de:	2301      	movs	r3, #1
 80060e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f383 8810 	msr	PRIMASK, r3
}
 80060e8:	46c0      	nop			@ (mov r8, r8)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	491d      	ldr	r1, [pc, #116]	@ (800616c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 80060f6:	400a      	ands	r2, r1
 80060f8:	609a      	str	r2, [r3, #8]
 80060fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f383 8810 	msr	PRIMASK, r3
}
 8006104:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a19      	ldr	r2, [pc, #100]	@ (8006170 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800610a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800610c:	f3ef 8310 	mrs	r3, PRIMASK
 8006110:	61bb      	str	r3, [r7, #24]
  return(result);
 8006112:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006114:	657b      	str	r3, [r7, #84]	@ 0x54
 8006116:	2301      	movs	r3, #1
 8006118:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	f383 8810 	msr	PRIMASK, r3
}
 8006120:	46c0      	nop			@ (mov r8, r8)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2120      	movs	r1, #32
 800612e:	430a      	orrs	r2, r1
 8006130:	601a      	str	r2, [r3, #0]
 8006132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006134:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	f383 8810 	msr	PRIMASK, r3
}
 800613c:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800613e:	e007      	b.n	8006150 <UART_RxISR_16BIT_FIFOEN+0x340>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2108      	movs	r1, #8
 800614c:	430a      	orrs	r2, r1
 800614e:	619a      	str	r2, [r3, #24]
}
 8006150:	46c0      	nop			@ (mov r8, r8)
 8006152:	46bd      	mov	sp, r7
 8006154:	b022      	add	sp, #136	@ 0x88
 8006156:	bd80      	pop	{r7, pc}
 8006158:	fffffeff 	.word	0xfffffeff
 800615c:	effffffe 	.word	0xeffffffe
 8006160:	40008000 	.word	0x40008000
 8006164:	40008400 	.word	0x40008400
 8006168:	fbffffff 	.word	0xfbffffff
 800616c:	efffffff 	.word	0xefffffff
 8006170:	080058f1 	.word	0x080058f1

08006174 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800617c:	46c0      	nop			@ (mov r8, r8)
 800617e:	46bd      	mov	sp, r7
 8006180:	b002      	add	sp, #8
 8006182:	bd80      	pop	{r7, pc}

08006184 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800618c:	46c0      	nop			@ (mov r8, r8)
 800618e:	46bd      	mov	sp, r7
 8006190:	b002      	add	sp, #8
 8006192:	bd80      	pop	{r7, pc}

08006194 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800619c:	46c0      	nop			@ (mov r8, r8)
 800619e:	46bd      	mov	sp, r7
 80061a0:	b002      	add	sp, #8
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2284      	movs	r2, #132	@ 0x84
 80061b0:	5c9b      	ldrb	r3, [r3, r2]
 80061b2:	2b01      	cmp	r3, #1
 80061b4:	d101      	bne.n	80061ba <HAL_UARTEx_DisableFifoMode+0x16>
 80061b6:	2302      	movs	r3, #2
 80061b8:	e027      	b.n	800620a <HAL_UARTEx_DisableFifoMode+0x66>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2284      	movs	r2, #132	@ 0x84
 80061be:	2101      	movs	r1, #1
 80061c0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2288      	movs	r2, #136	@ 0x88
 80061c6:	2124      	movs	r1, #36	@ 0x24
 80061c8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2101      	movs	r1, #1
 80061de:	438a      	bics	r2, r1
 80061e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	4a0b      	ldr	r2, [pc, #44]	@ (8006214 <HAL_UARTEx_DisableFifoMode+0x70>)
 80061e6:	4013      	ands	r3, r2
 80061e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2288      	movs	r2, #136	@ 0x88
 80061fc:	2120      	movs	r1, #32
 80061fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2284      	movs	r2, #132	@ 0x84
 8006204:	2100      	movs	r1, #0
 8006206:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006208:	2300      	movs	r3, #0
}
 800620a:	0018      	movs	r0, r3
 800620c:	46bd      	mov	sp, r7
 800620e:	b004      	add	sp, #16
 8006210:	bd80      	pop	{r7, pc}
 8006212:	46c0      	nop			@ (mov r8, r8)
 8006214:	dfffffff 	.word	0xdfffffff

08006218 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2284      	movs	r2, #132	@ 0x84
 8006226:	5c9b      	ldrb	r3, [r3, r2]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800622c:	2302      	movs	r3, #2
 800622e:	e02e      	b.n	800628e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2284      	movs	r2, #132	@ 0x84
 8006234:	2101      	movs	r1, #1
 8006236:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2288      	movs	r2, #136	@ 0x88
 800623c:	2124      	movs	r1, #36	@ 0x24
 800623e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2101      	movs	r1, #1
 8006254:	438a      	bics	r2, r1
 8006256:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	08d9      	lsrs	r1, r3, #3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	683a      	ldr	r2, [r7, #0]
 8006268:	430a      	orrs	r2, r1
 800626a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	0018      	movs	r0, r3
 8006270:	f000 f854 	bl	800631c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2288      	movs	r2, #136	@ 0x88
 8006280:	2120      	movs	r1, #32
 8006282:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2284      	movs	r2, #132	@ 0x84
 8006288:	2100      	movs	r1, #0
 800628a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	0018      	movs	r0, r3
 8006290:	46bd      	mov	sp, r7
 8006292:	b004      	add	sp, #16
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2284      	movs	r2, #132	@ 0x84
 80062a6:	5c9b      	ldrb	r3, [r3, r2]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d101      	bne.n	80062b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062ac:	2302      	movs	r3, #2
 80062ae:	e02f      	b.n	8006310 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2284      	movs	r2, #132	@ 0x84
 80062b4:	2101      	movs	r1, #1
 80062b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2288      	movs	r2, #136	@ 0x88
 80062bc:	2124      	movs	r1, #36	@ 0x24
 80062be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2101      	movs	r1, #1
 80062d4:	438a      	bics	r2, r1
 80062d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	4a0e      	ldr	r2, [pc, #56]	@ (8006318 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	0019      	movs	r1, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	0018      	movs	r0, r3
 80062f2:	f000 f813 	bl	800631c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2288      	movs	r2, #136	@ 0x88
 8006302:	2120      	movs	r1, #32
 8006304:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2284      	movs	r2, #132	@ 0x84
 800630a:	2100      	movs	r1, #0
 800630c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	0018      	movs	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	b004      	add	sp, #16
 8006316:	bd80      	pop	{r7, pc}
 8006318:	f1ffffff 	.word	0xf1ffffff

0800631c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800631c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006328:	2b00      	cmp	r3, #0
 800632a:	d108      	bne.n	800633e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	226a      	movs	r2, #106	@ 0x6a
 8006330:	2101      	movs	r1, #1
 8006332:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2268      	movs	r2, #104	@ 0x68
 8006338:	2101      	movs	r1, #1
 800633a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800633c:	e043      	b.n	80063c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800633e:	260f      	movs	r6, #15
 8006340:	19bb      	adds	r3, r7, r6
 8006342:	2208      	movs	r2, #8
 8006344:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006346:	200e      	movs	r0, #14
 8006348:	183b      	adds	r3, r7, r0
 800634a:	2208      	movs	r2, #8
 800634c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	0e5b      	lsrs	r3, r3, #25
 8006356:	b2da      	uxtb	r2, r3
 8006358:	240d      	movs	r4, #13
 800635a:	193b      	adds	r3, r7, r4
 800635c:	2107      	movs	r1, #7
 800635e:	400a      	ands	r2, r1
 8006360:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	0f5b      	lsrs	r3, r3, #29
 800636a:	b2da      	uxtb	r2, r3
 800636c:	250c      	movs	r5, #12
 800636e:	197b      	adds	r3, r7, r5
 8006370:	2107      	movs	r1, #7
 8006372:	400a      	ands	r2, r1
 8006374:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006376:	183b      	adds	r3, r7, r0
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	197a      	adds	r2, r7, r5
 800637c:	7812      	ldrb	r2, [r2, #0]
 800637e:	4914      	ldr	r1, [pc, #80]	@ (80063d0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006380:	5c8a      	ldrb	r2, [r1, r2]
 8006382:	435a      	muls	r2, r3
 8006384:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006386:	197b      	adds	r3, r7, r5
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	4a12      	ldr	r2, [pc, #72]	@ (80063d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800638c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800638e:	0019      	movs	r1, r3
 8006390:	f7f9 ff44 	bl	800021c <__divsi3>
 8006394:	0003      	movs	r3, r0
 8006396:	b299      	uxth	r1, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	226a      	movs	r2, #106	@ 0x6a
 800639c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800639e:	19bb      	adds	r3, r7, r6
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	193a      	adds	r2, r7, r4
 80063a4:	7812      	ldrb	r2, [r2, #0]
 80063a6:	490a      	ldr	r1, [pc, #40]	@ (80063d0 <UARTEx_SetNbDataToProcess+0xb4>)
 80063a8:	5c8a      	ldrb	r2, [r1, r2]
 80063aa:	435a      	muls	r2, r3
 80063ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80063ae:	193b      	adds	r3, r7, r4
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	4a08      	ldr	r2, [pc, #32]	@ (80063d4 <UARTEx_SetNbDataToProcess+0xb8>)
 80063b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063b6:	0019      	movs	r1, r3
 80063b8:	f7f9 ff30 	bl	800021c <__divsi3>
 80063bc:	0003      	movs	r3, r0
 80063be:	b299      	uxth	r1, r3
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2268      	movs	r2, #104	@ 0x68
 80063c4:	5299      	strh	r1, [r3, r2]
}
 80063c6:	46c0      	nop			@ (mov r8, r8)
 80063c8:	46bd      	mov	sp, r7
 80063ca:	b005      	add	sp, #20
 80063cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ce:	46c0      	nop			@ (mov r8, r8)
 80063d0:	08009600 	.word	0x08009600
 80063d4:	08009608 	.word	0x08009608

080063d8 <fan_set_percent>:
#define T_OFF         38.0f   // tắt khi xuống dưới
#define DUTY_MIN      20.0f   // tối thiểu để quạt chắc chắn quay (4-wire ≥20%)
#define SLEW_PER_CALL 5.0f    // tối đa đổi 5% mỗi lần gọi (gọi ~100 ms/lần)
#define SPINUP_MS     300U    // bơm 100% lúc mới bật để khởi động
static inline void fan_set_percent(uint8_t pct)
{
 80063d8:	b590      	push	{r4, r7, lr}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	0002      	movs	r2, r0
 80063e0:	1dfb      	adds	r3, r7, #7
 80063e2:	701a      	strb	r2, [r3, #0]
    if (!pwmfan) return;
 80063e4:	4b1d      	ldr	r3, [pc, #116]	@ (800645c <fan_set_percent+0x84>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d032      	beq.n	8006452 <fan_set_percent+0x7a>
    if (pct > 100) pct = 100;
 80063ec:	1dfb      	adds	r3, r7, #7
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b64      	cmp	r3, #100	@ 0x64
 80063f2:	d902      	bls.n	80063fa <fan_set_percent+0x22>
 80063f4:	1dfb      	adds	r3, r7, #7
 80063f6:	2264      	movs	r2, #100	@ 0x64
 80063f8:	701a      	strb	r2, [r3, #0]
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(pwmfan);
 80063fa:	4b18      	ldr	r3, [pc, #96]	@ (800645c <fan_set_percent+0x84>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006402:	60bb      	str	r3, [r7, #8]
    uint32_t ccr = (uint32_t)lroundf(((float)pct * (arr + 1U)) / 100.0f);
 8006404:	1dfb      	adds	r3, r7, #7
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	0018      	movs	r0, r3
 800640a:	f7fb f8b7 	bl	800157c <__aeabi_ui2f>
 800640e:	1c04      	adds	r4, r0, #0
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	3301      	adds	r3, #1
 8006414:	0018      	movs	r0, r3
 8006416:	f7fb f8b1 	bl	800157c <__aeabi_ui2f>
 800641a:	1c03      	adds	r3, r0, #0
 800641c:	1c19      	adds	r1, r3, #0
 800641e:	1c20      	adds	r0, r4, #0
 8006420:	f7fa fcce 	bl	8000dc0 <__aeabi_fmul>
 8006424:	1c03      	adds	r3, r0, #0
 8006426:	490e      	ldr	r1, [pc, #56]	@ (8006460 <fan_set_percent+0x88>)
 8006428:	1c18      	adds	r0, r3, #0
 800642a:	f7fa fafb 	bl	8000a24 <__aeabi_fdiv>
 800642e:	1c03      	adds	r3, r0, #0
 8006430:	1c18      	adds	r0, r3, #0
 8006432:	f003 f80c 	bl	800944e <lroundf>
 8006436:	0003      	movs	r3, r0
 8006438:	60fb      	str	r3, [r7, #12]
    if (ccr > arr) ccr = arr;
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	429a      	cmp	r2, r3
 8006440:	d901      	bls.n	8006446 <fan_set_percent+0x6e>
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	60fb      	str	r3, [r7, #12]
    __HAL_TIM_SET_COMPARE(pwmfan, TIM_CHANNEL_4, ccr);
 8006446:	4b05      	ldr	r3, [pc, #20]	@ (800645c <fan_set_percent+0x84>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006450:	e000      	b.n	8006454 <fan_set_percent+0x7c>
    if (!pwmfan) return;
 8006452:	46c0      	nop			@ (mov r8, r8)
}
 8006454:	46bd      	mov	sp, r7
 8006456:	b005      	add	sp, #20
 8006458:	bd90      	pop	{r4, r7, pc}
 800645a:	46c0      	nop			@ (mov r8, r8)
 800645c:	200001a8 	.word	0x200001a8
 8006460:	42c80000 	.word	0x42c80000

08006464 <clampf>:

static inline float clampf(float x, float lo, float hi)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
    return (x < lo) ? lo : (x > hi) ? hi : x;
 8006470:	68b9      	ldr	r1, [r7, #8]
 8006472:	68f8      	ldr	r0, [r7, #12]
 8006474:	f7f9 ffd0 	bl	8000418 <__aeabi_fcmplt>
 8006478:	1e03      	subs	r3, r0, #0
 800647a:	d001      	beq.n	8006480 <clampf+0x1c>
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	e008      	b.n	8006492 <clampf+0x2e>
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f7f9 ffdc 	bl	8000440 <__aeabi_fcmpgt>
 8006488:	1e03      	subs	r3, r0, #0
 800648a:	d001      	beq.n	8006490 <clampf+0x2c>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	e000      	b.n	8006492 <clampf+0x2e>
 8006490:	68fb      	ldr	r3, [r7, #12]
}
 8006492:	1c18      	adds	r0, r3, #0
 8006494:	46bd      	mov	sp, r7
 8006496:	b004      	add	sp, #16
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <fan_ctrl_limit>:
uint8_t fan_ctrl_limit(float tempC)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
    static float duty = 0.0f;
    static uint8_t fan_on = 0;
    static uint32_t spin_until = 0;

    if (!fan_on)
 80064a4:	4b3e      	ldr	r3, [pc, #248]	@ (80065a0 <fan_ctrl_limit+0x104>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d111      	bne.n	80064d0 <fan_ctrl_limit+0x34>
    {
        if (tempC >= T_ON)
 80064ac:	493d      	ldr	r1, [pc, #244]	@ (80065a4 <fan_ctrl_limit+0x108>)
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7f9 ffd0 	bl	8000454 <__aeabi_fcmpge>
 80064b4:	1e03      	subs	r3, r0, #0
 80064b6:	d014      	beq.n	80064e2 <fan_ctrl_limit+0x46>
        {
            fan_on = 1;
 80064b8:	4b39      	ldr	r3, [pc, #228]	@ (80065a0 <fan_ctrl_limit+0x104>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	701a      	strb	r2, [r3, #0]
            spin_until = HAL_GetTick() + SPINUP_MS;
 80064be:	f7fb fcfd 	bl	8001ebc <HAL_GetTick>
 80064c2:	0003      	movs	r3, r0
 80064c4:	332d      	adds	r3, #45	@ 0x2d
 80064c6:	33ff      	adds	r3, #255	@ 0xff
 80064c8:	001a      	movs	r2, r3
 80064ca:	4b37      	ldr	r3, [pc, #220]	@ (80065a8 <fan_ctrl_limit+0x10c>)
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e008      	b.n	80064e2 <fan_ctrl_limit+0x46>
        }
    }
    else
	{
    	if (tempC <= T_OFF) fan_on = 0;
 80064d0:	4936      	ldr	r1, [pc, #216]	@ (80065ac <fan_ctrl_limit+0x110>)
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7f9 ffaa 	bl	800042c <__aeabi_fcmple>
 80064d8:	1e03      	subs	r3, r0, #0
 80064da:	d002      	beq.n	80064e2 <fan_ctrl_limit+0x46>
 80064dc:	4b30      	ldr	r3, [pc, #192]	@ (80065a0 <fan_ctrl_limit+0x104>)
 80064de:	2200      	movs	r2, #0
 80064e0:	701a      	strb	r2, [r3, #0]
	}


    float target;
    if (!fan_on)
 80064e2:	4b2f      	ldr	r3, [pc, #188]	@ (80065a0 <fan_ctrl_limit+0x104>)
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d102      	bne.n	80064f0 <fan_ctrl_limit+0x54>
    {
        target = 0.0f;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]
 80064ee:	e024      	b.n	800653a <fan_ctrl_limit+0x9e>
    }
    else if (HAL_GetTick() < spin_until)
 80064f0:	f7fb fce4 	bl	8001ebc <HAL_GetTick>
 80064f4:	0002      	movs	r2, r0
 80064f6:	4b2c      	ldr	r3, [pc, #176]	@ (80065a8 <fan_ctrl_limit+0x10c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d202      	bcs.n	8006504 <fan_ctrl_limit+0x68>
    {
        target = 100.0f;                    // spin-up
 80064fe:	4b2c      	ldr	r3, [pc, #176]	@ (80065b0 <fan_ctrl_limit+0x114>)
 8006500:	617b      	str	r3, [r7, #20]
 8006502:	e01a      	b.n	800653a <fan_ctrl_limit+0x9e>
    }
    else if (tempC >= T_LIMIT)
 8006504:	492b      	ldr	r1, [pc, #172]	@ (80065b4 <fan_ctrl_limit+0x118>)
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7f9 ffa4 	bl	8000454 <__aeabi_fcmpge>
 800650c:	1e03      	subs	r3, r0, #0
 800650e:	d002      	beq.n	8006516 <fan_ctrl_limit+0x7a>
    {
        target = 100.0f;                    // chạm ngưỡng → full
 8006510:	4b27      	ldr	r3, [pc, #156]	@ (80065b0 <fan_ctrl_limit+0x114>)
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e011      	b.n	800653a <fan_ctrl_limit+0x9e>
    }
    else
    {
        const float slope = (100.0f - DUTY_MIN) / (T_LIMIT - T_ON);
 8006516:	4b28      	ldr	r3, [pc, #160]	@ (80065b8 <fan_ctrl_limit+0x11c>)
 8006518:	60fb      	str	r3, [r7, #12]
        target = DUTY_MIN + slope * (tempC - T_ON);
 800651a:	4922      	ldr	r1, [pc, #136]	@ (80065a4 <fan_ctrl_limit+0x108>)
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f7fa fda9 	bl	8001074 <__aeabi_fsub>
 8006522:	1c03      	adds	r3, r0, #0
 8006524:	68f9      	ldr	r1, [r7, #12]
 8006526:	1c18      	adds	r0, r3, #0
 8006528:	f7fa fc4a 	bl	8000dc0 <__aeabi_fmul>
 800652c:	1c03      	adds	r3, r0, #0
 800652e:	4923      	ldr	r1, [pc, #140]	@ (80065bc <fan_ctrl_limit+0x120>)
 8006530:	1c18      	adds	r0, r3, #0
 8006532:	f7fa f885 	bl	8000640 <__aeabi_fadd>
 8006536:	1c03      	adds	r3, r0, #0
 8006538:	617b      	str	r3, [r7, #20]
    }

    float step = target - duty;             // slew-rate
 800653a:	4b21      	ldr	r3, [pc, #132]	@ (80065c0 <fan_ctrl_limit+0x124>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	1c19      	adds	r1, r3, #0
 8006540:	6978      	ldr	r0, [r7, #20]
 8006542:	f7fa fd97 	bl	8001074 <__aeabi_fsub>
 8006546:	1c03      	adds	r3, r0, #0
 8006548:	613b      	str	r3, [r7, #16]
    if (step >  SLEW_PER_CALL) step =  SLEW_PER_CALL;
 800654a:	491e      	ldr	r1, [pc, #120]	@ (80065c4 <fan_ctrl_limit+0x128>)
 800654c:	6938      	ldr	r0, [r7, #16]
 800654e:	f7f9 ff77 	bl	8000440 <__aeabi_fcmpgt>
 8006552:	1e03      	subs	r3, r0, #0
 8006554:	d001      	beq.n	800655a <fan_ctrl_limit+0xbe>
 8006556:	4b1b      	ldr	r3, [pc, #108]	@ (80065c4 <fan_ctrl_limit+0x128>)
 8006558:	613b      	str	r3, [r7, #16]
    if (step < -SLEW_PER_CALL) step = -SLEW_PER_CALL;
 800655a:	491b      	ldr	r1, [pc, #108]	@ (80065c8 <fan_ctrl_limit+0x12c>)
 800655c:	6938      	ldr	r0, [r7, #16]
 800655e:	f7f9 ff5b 	bl	8000418 <__aeabi_fcmplt>
 8006562:	1e03      	subs	r3, r0, #0
 8006564:	d001      	beq.n	800656a <fan_ctrl_limit+0xce>
 8006566:	4b18      	ldr	r3, [pc, #96]	@ (80065c8 <fan_ctrl_limit+0x12c>)
 8006568:	613b      	str	r3, [r7, #16]
    duty = clampf(duty + step, 0.0f, 100.0f);
 800656a:	4b15      	ldr	r3, [pc, #84]	@ (80065c0 <fan_ctrl_limit+0x124>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6939      	ldr	r1, [r7, #16]
 8006570:	1c18      	adds	r0, r3, #0
 8006572:	f7fa f865 	bl	8000640 <__aeabi_fadd>
 8006576:	1c03      	adds	r3, r0, #0
 8006578:	1c18      	adds	r0, r3, #0
 800657a:	4a0d      	ldr	r2, [pc, #52]	@ (80065b0 <fan_ctrl_limit+0x114>)
 800657c:	2300      	movs	r3, #0
 800657e:	1c19      	adds	r1, r3, #0
 8006580:	f7ff ff70 	bl	8006464 <clampf>
 8006584:	1c02      	adds	r2, r0, #0
 8006586:	4b0e      	ldr	r3, [pc, #56]	@ (80065c0 <fan_ctrl_limit+0x124>)
 8006588:	601a      	str	r2, [r3, #0]

    return (uint8_t)lroundf(duty);
 800658a:	4b0d      	ldr	r3, [pc, #52]	@ (80065c0 <fan_ctrl_limit+0x124>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	1c18      	adds	r0, r3, #0
 8006590:	f002 ff5d 	bl	800944e <lroundf>
 8006594:	0003      	movs	r3, r0
 8006596:	b2db      	uxtb	r3, r3
}
 8006598:	0018      	movs	r0, r3
 800659a:	46bd      	mov	sp, r7
 800659c:	b006      	add	sp, #24
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	2000032c 	.word	0x2000032c
 80065a4:	42200000 	.word	0x42200000
 80065a8:	20000330 	.word	0x20000330
 80065ac:	42180000 	.word	0x42180000
 80065b0:	42c80000 	.word	0x42c80000
 80065b4:	425c0000 	.word	0x425c0000
 80065b8:	40aaaaab 	.word	0x40aaaaab
 80065bc:	41a00000 	.word	0x41a00000
 80065c0:	20000334 	.word	0x20000334
 80065c4:	40a00000 	.word	0x40a00000
 80065c8:	c0a00000 	.word	0xc0a00000

080065cc <fan_controller_init>:
void fan_controller_init(TIM_HandleTypeDef* tim3)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
	pwmfan = tim3;
 80065d4:	4b07      	ldr	r3, [pc, #28]	@ (80065f4 <fan_controller_init+0x28>)
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	601a      	str	r2, [r3, #0]
	mavlink_init_tbf();
 80065da:	f001 f9de 	bl	800799a <mavlink_init_tbf>
	HAL_TIM_PWM_Start(pwmfan, TIM_CHANNEL_4);
 80065de:	4b05      	ldr	r3, [pc, #20]	@ (80065f4 <fan_controller_init+0x28>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	210c      	movs	r1, #12
 80065e4:	0018      	movs	r0, r3
 80065e6:	f7fc ffc3 	bl	8003570 <HAL_TIM_PWM_Start>
}
 80065ea:	46c0      	nop			@ (mov r8, r8)
 80065ec:	46bd      	mov	sp, r7
 80065ee:	b002      	add	sp, #8
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	46c0      	nop			@ (mov r8, r8)
 80065f4:	200001a8 	.word	0x200001a8

080065f8 <fan_controller_process>:

void fan_controller_process(void)
{
 80065f8:	b590      	push	{r4, r7, lr}
 80065fa:	b083      	sub	sp, #12
 80065fc:	af00      	add	r7, sp, #0
	mavlink_process_tbf(&pPID);
 80065fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006630 <fan_controller_process+0x38>)
 8006600:	0018      	movs	r0, r3
 8006602:	f001 f99d 	bl	8007940 <mavlink_process_tbf>
    float tempC = pPID.char_infor.temperature;
 8006606:	4a0a      	ldr	r2, [pc, #40]	@ (8006630 <fan_controller_process+0x38>)
 8006608:	239e      	movs	r3, #158	@ 0x9e
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	58d3      	ldr	r3, [r2, r3]
 800660e:	607b      	str	r3, [r7, #4]

    uint8_t duty_pct = fan_ctrl_limit(tempC);
 8006610:	1cfc      	adds	r4, r7, #3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	1c18      	adds	r0, r3, #0
 8006616:	f7ff ff41 	bl	800649c <fan_ctrl_limit>
 800661a:	0003      	movs	r3, r0
 800661c:	7023      	strb	r3, [r4, #0]
    fan_set_percent(duty_pct);
 800661e:	1cfb      	adds	r3, r7, #3
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	0018      	movs	r0, r3
 8006624:	f7ff fed8 	bl	80063d8 <fan_set_percent>
}
 8006628:	46c0      	nop			@ (mov r8, r8)
 800662a:	46bd      	mov	sp, r7
 800662c:	b003      	add	sp, #12
 800662e:	bd90      	pop	{r4, r7, pc}
 8006630:	200001ac 	.word	0x200001ac

08006634 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	0002      	movs	r2, r0
 800663c:	6039      	str	r1, [r7, #0]
 800663e:	1dfb      	adds	r3, r7, #7
 8006640:	701a      	strb	r2, [r3, #0]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b2d9      	uxtb	r1, r3
 8006648:	200f      	movs	r0, #15
 800664a:	183b      	adds	r3, r7, r0
 800664c:	1dfa      	adds	r2, r7, #7
 800664e:	7812      	ldrb	r2, [r2, #0]
 8006650:	404a      	eors	r2, r1
 8006652:	701a      	strb	r2, [r3, #0]
        tmp ^= (tmp<<4);
 8006654:	0001      	movs	r1, r0
 8006656:	187b      	adds	r3, r7, r1
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	b25b      	sxtb	r3, r3
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	b25a      	sxtb	r2, r3
 8006660:	187b      	adds	r3, r7, r1
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	b25b      	sxtb	r3, r3
 8006666:	4053      	eors	r3, r2
 8006668:	b25a      	sxtb	r2, r3
 800666a:	187b      	adds	r3, r7, r1
 800666c:	701a      	strb	r2, [r3, #0]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	0a1b      	lsrs	r3, r3, #8
 8006674:	b29b      	uxth	r3, r3
 8006676:	b21a      	sxth	r2, r3
 8006678:	187b      	adds	r3, r7, r1
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	b21b      	sxth	r3, r3
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	b21b      	sxth	r3, r3
 8006682:	4053      	eors	r3, r2
 8006684:	b21a      	sxth	r2, r3
 8006686:	187b      	adds	r3, r7, r1
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	b21b      	sxth	r3, r3
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	b21b      	sxth	r3, r3
 8006690:	4053      	eors	r3, r2
 8006692:	b21a      	sxth	r2, r3
 8006694:	187b      	adds	r3, r7, r1
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	091b      	lsrs	r3, r3, #4
 800669a:	b2db      	uxtb	r3, r3
 800669c:	b21b      	sxth	r3, r3
 800669e:	4053      	eors	r3, r2
 80066a0:	b21b      	sxth	r3, r3
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	801a      	strh	r2, [r3, #0]
}
 80066a8:	46c0      	nop			@ (mov r8, r8)
 80066aa:	46bd      	mov	sp, r7
 80066ac:	b004      	add	sp, #16
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b082      	sub	sp, #8
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	4252      	negs	r2, r2
 80066be:	801a      	strh	r2, [r3, #0]
}
 80066c0:	46c0      	nop			@ (mov r8, r8)
 80066c2:	46bd      	mov	sp, r7
 80066c4:	b002      	add	sp, #8
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a0d      	ldr	r2, [pc, #52]	@ (8006714 <mavlink_sha256_init+0x4c>)
 80066e0:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a0c      	ldr	r2, [pc, #48]	@ (8006718 <mavlink_sha256_init+0x50>)
 80066e6:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a0c      	ldr	r2, [pc, #48]	@ (800671c <mavlink_sha256_init+0x54>)
 80066ec:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a0b      	ldr	r2, [pc, #44]	@ (8006720 <mavlink_sha256_init+0x58>)
 80066f2:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a0b      	ldr	r2, [pc, #44]	@ (8006724 <mavlink_sha256_init+0x5c>)
 80066f8:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006728 <mavlink_sha256_init+0x60>)
 80066fe:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a0a      	ldr	r2, [pc, #40]	@ (800672c <mavlink_sha256_init+0x64>)
 8006704:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a09      	ldr	r2, [pc, #36]	@ (8006730 <mavlink_sha256_init+0x68>)
 800670a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800670c:	46c0      	nop			@ (mov r8, r8)
 800670e:	46bd      	mov	sp, r7
 8006710:	b002      	add	sp, #8
 8006712:	bd80      	pop	{r7, pc}
 8006714:	6a09e667 	.word	0x6a09e667
 8006718:	bb67ae85 	.word	0xbb67ae85
 800671c:	3c6ef372 	.word	0x3c6ef372
 8006720:	a54ff53a 	.word	0xa54ff53a
 8006724:	510e527f 	.word	0x510e527f
 8006728:	9b05688c 	.word	0x9b05688c
 800672c:	1f83d9ab 	.word	0x1f83d9ab
 8006730:	5be0cd19 	.word	0x5be0cd19

08006734 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8006734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006736:	b0cf      	sub	sp, #316	@ 0x13c
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	6039      	str	r1, [r7, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	229a      	movs	r2, #154	@ 0x9a
 8006744:	0052      	lsls	r2, r2, #1
 8006746:	18ba      	adds	r2, r7, r2
 8006748:	6013      	str	r3, [r2, #0]
    BB = m->counter[1];
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	2298      	movs	r2, #152	@ 0x98
 8006750:	0052      	lsls	r2, r2, #1
 8006752:	18ba      	adds	r2, r7, r2
 8006754:	6013      	str	r3, [r2, #0]
    CC = m->counter[2];
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	2296      	movs	r2, #150	@ 0x96
 800675c:	0052      	lsls	r2, r2, #1
 800675e:	18ba      	adds	r2, r7, r2
 8006760:	6013      	str	r3, [r2, #0]
    DD = m->counter[3];
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	2294      	movs	r2, #148	@ 0x94
 8006768:	0052      	lsls	r2, r2, #1
 800676a:	18ba      	adds	r2, r7, r2
 800676c:	6013      	str	r3, [r2, #0]
    EE = m->counter[4];
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	2292      	movs	r2, #146	@ 0x92
 8006774:	0052      	lsls	r2, r2, #1
 8006776:	18ba      	adds	r2, r7, r2
 8006778:	6013      	str	r3, [r2, #0]
    FF = m->counter[5];
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	2290      	movs	r2, #144	@ 0x90
 8006780:	0052      	lsls	r2, r2, #1
 8006782:	18ba      	adds	r2, r7, r2
 8006784:	6013      	str	r3, [r2, #0]
    GG = m->counter[6];
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	228e      	movs	r2, #142	@ 0x8e
 800678c:	0052      	lsls	r2, r2, #1
 800678e:	18ba      	adds	r2, r7, r2
 8006790:	6013      	str	r3, [r2, #0]
    HH = m->counter[7];
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006796:	228c      	movs	r2, #140	@ 0x8c
 8006798:	0052      	lsls	r2, r2, #1
 800679a:	18ba      	adds	r2, r7, r2
 800679c:	6013      	str	r3, [r2, #0]

    for (i = 0; i < 16; ++i)
 800679e:	2300      	movs	r3, #0
 80067a0:	228a      	movs	r2, #138	@ 0x8a
 80067a2:	0052      	lsls	r2, r2, #1
 80067a4:	18ba      	adds	r2, r7, r2
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	e015      	b.n	80067d6 <mavlink_sha256_calc+0xa2>
	data[i] = in[i];
 80067aa:	208a      	movs	r0, #138	@ 0x8a
 80067ac:	0040      	lsls	r0, r0, #1
 80067ae:	183b      	adds	r3, r7, r0
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	683a      	ldr	r2, [r7, #0]
 80067b6:	18d3      	adds	r3, r2, r3
 80067b8:	6819      	ldr	r1, [r3, #0]
 80067ba:	4bc1      	ldr	r3, [pc, #772]	@ (8006ac0 <mavlink_sha256_calc+0x38c>)
 80067bc:	229c      	movs	r2, #156	@ 0x9c
 80067be:	0052      	lsls	r2, r2, #1
 80067c0:	189b      	adds	r3, r3, r2
 80067c2:	19db      	adds	r3, r3, r7
 80067c4:	183a      	adds	r2, r7, r0
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	0092      	lsls	r2, r2, #2
 80067ca:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 16; ++i)
 80067cc:	183b      	adds	r3, r7, r0
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	183a      	adds	r2, r7, r0
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	228a      	movs	r2, #138	@ 0x8a
 80067d8:	0052      	lsls	r2, r2, #1
 80067da:	18bb      	adds	r3, r7, r2
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b0f      	cmp	r3, #15
 80067e0:	dde3      	ble.n	80067aa <mavlink_sha256_calc+0x76>
    for (i = 16; i < 64; ++i)
 80067e2:	2310      	movs	r3, #16
 80067e4:	18ba      	adds	r2, r7, r2
 80067e6:	6013      	str	r3, [r2, #0]
 80067e8:	e067      	b.n	80068ba <mavlink_sha256_calc+0x186>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80067ea:	248a      	movs	r4, #138	@ 0x8a
 80067ec:	0064      	lsls	r4, r4, #1
 80067ee:	193b      	adds	r3, r7, r4
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	1e9a      	subs	r2, r3, #2
 80067f4:	4bb2      	ldr	r3, [pc, #712]	@ (8006ac0 <mavlink_sha256_calc+0x38c>)
 80067f6:	259c      	movs	r5, #156	@ 0x9c
 80067f8:	006d      	lsls	r5, r5, #1
 80067fa:	195b      	adds	r3, r3, r5
 80067fc:	19db      	adds	r3, r3, r7
 80067fe:	0092      	lsls	r2, r2, #2
 8006800:	58d3      	ldr	r3, [r2, r3]
 8006802:	2211      	movs	r2, #17
 8006804:	41d3      	rors	r3, r2
 8006806:	001a      	movs	r2, r3
 8006808:	193b      	adds	r3, r7, r4
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	1e99      	subs	r1, r3, #2
 800680e:	4bac      	ldr	r3, [pc, #688]	@ (8006ac0 <mavlink_sha256_calc+0x38c>)
 8006810:	195b      	adds	r3, r3, r5
 8006812:	19db      	adds	r3, r3, r7
 8006814:	0089      	lsls	r1, r1, #2
 8006816:	58cb      	ldr	r3, [r1, r3]
 8006818:	2113      	movs	r1, #19
 800681a:	41cb      	rors	r3, r1
 800681c:	405a      	eors	r2, r3
 800681e:	193b      	adds	r3, r7, r4
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	1e99      	subs	r1, r3, #2
 8006824:	4ba6      	ldr	r3, [pc, #664]	@ (8006ac0 <mavlink_sha256_calc+0x38c>)
 8006826:	195b      	adds	r3, r3, r5
 8006828:	19db      	adds	r3, r3, r7
 800682a:	0089      	lsls	r1, r1, #2
 800682c:	58cb      	ldr	r3, [r1, r3]
 800682e:	0a9b      	lsrs	r3, r3, #10
 8006830:	405a      	eors	r2, r3
 8006832:	193b      	adds	r3, r7, r4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	1fd9      	subs	r1, r3, #7
 8006838:	4ba1      	ldr	r3, [pc, #644]	@ (8006ac0 <mavlink_sha256_calc+0x38c>)
 800683a:	195b      	adds	r3, r3, r5
 800683c:	19db      	adds	r3, r3, r7
 800683e:	0089      	lsls	r1, r1, #2
 8006840:	58cb      	ldr	r3, [r1, r3]
 8006842:	18d2      	adds	r2, r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8006844:	193b      	adds	r3, r7, r4
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	3b0f      	subs	r3, #15
 800684a:	0019      	movs	r1, r3
 800684c:	4b9c      	ldr	r3, [pc, #624]	@ (8006ac0 <mavlink_sha256_calc+0x38c>)
 800684e:	195b      	adds	r3, r3, r5
 8006850:	19db      	adds	r3, r3, r7
 8006852:	0089      	lsls	r1, r1, #2
 8006854:	58cb      	ldr	r3, [r1, r3]
 8006856:	2107      	movs	r1, #7
 8006858:	41cb      	rors	r3, r1
 800685a:	0019      	movs	r1, r3
 800685c:	193b      	adds	r3, r7, r4
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3b0f      	subs	r3, #15
 8006862:	0018      	movs	r0, r3
 8006864:	4b96      	ldr	r3, [pc, #600]	@ (8006ac0 <mavlink_sha256_calc+0x38c>)
 8006866:	195b      	adds	r3, r3, r5
 8006868:	19db      	adds	r3, r3, r7
 800686a:	0080      	lsls	r0, r0, #2
 800686c:	58c3      	ldr	r3, [r0, r3]
 800686e:	2012      	movs	r0, #18
 8006870:	41c3      	rors	r3, r0
 8006872:	4059      	eors	r1, r3
 8006874:	193b      	adds	r3, r7, r4
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3b0f      	subs	r3, #15
 800687a:	0018      	movs	r0, r3
 800687c:	4b90      	ldr	r3, [pc, #576]	@ (8006ac0 <mavlink_sha256_calc+0x38c>)
 800687e:	195b      	adds	r3, r3, r5
 8006880:	19db      	adds	r3, r3, r7
 8006882:	0080      	lsls	r0, r0, #2
 8006884:	58c3      	ldr	r3, [r0, r3]
 8006886:	08db      	lsrs	r3, r3, #3
 8006888:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 800688a:	18d2      	adds	r2, r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 800688c:	0020      	movs	r0, r4
 800688e:	183b      	adds	r3, r7, r0
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3b10      	subs	r3, #16
 8006894:	0019      	movs	r1, r3
 8006896:	4b8a      	ldr	r3, [pc, #552]	@ (8006ac0 <mavlink_sha256_calc+0x38c>)
 8006898:	195b      	adds	r3, r3, r5
 800689a:	19db      	adds	r3, r3, r7
 800689c:	0089      	lsls	r1, r1, #2
 800689e:	58cb      	ldr	r3, [r1, r3]
 80068a0:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 80068a2:	4b87      	ldr	r3, [pc, #540]	@ (8006ac0 <mavlink_sha256_calc+0x38c>)
 80068a4:	195b      	adds	r3, r3, r5
 80068a6:	19db      	adds	r3, r3, r7
 80068a8:	183a      	adds	r2, r7, r0
 80068aa:	6812      	ldr	r2, [r2, #0]
 80068ac:	0092      	lsls	r2, r2, #2
 80068ae:	50d1      	str	r1, [r2, r3]
    for (i = 16; i < 64; ++i)
 80068b0:	183b      	adds	r3, r7, r0
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	3301      	adds	r3, #1
 80068b6:	183a      	adds	r2, r7, r0
 80068b8:	6013      	str	r3, [r2, #0]
 80068ba:	228a      	movs	r2, #138	@ 0x8a
 80068bc:	0052      	lsls	r2, r2, #1
 80068be:	18bb      	adds	r3, r7, r2
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80068c4:	dd91      	ble.n	80067ea <mavlink_sha256_calc+0xb6>

    for (i = 0; i < 64; i++) {
 80068c6:	2300      	movs	r3, #0
 80068c8:	18ba      	adds	r2, r7, r2
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	e0a4      	b.n	8006a18 <mavlink_sha256_calc+0x2e4>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 80068ce:	2492      	movs	r4, #146	@ 0x92
 80068d0:	0064      	lsls	r4, r4, #1
 80068d2:	193b      	adds	r3, r7, r4
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2206      	movs	r2, #6
 80068d8:	41d3      	rors	r3, r2
 80068da:	001a      	movs	r2, r3
 80068dc:	193b      	adds	r3, r7, r4
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	210b      	movs	r1, #11
 80068e2:	41cb      	rors	r3, r1
 80068e4:	405a      	eors	r2, r3
 80068e6:	193b      	adds	r3, r7, r4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2119      	movs	r1, #25
 80068ec:	41cb      	rors	r3, r1
 80068ee:	405a      	eors	r2, r3
 80068f0:	238c      	movs	r3, #140	@ 0x8c
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	18f8      	adds	r0, r7, r3
 80068f6:	6803      	ldr	r3, [r0, #0]
 80068f8:	18d2      	adds	r2, r2, r3
 80068fa:	1938      	adds	r0, r7, r4
 80068fc:	6803      	ldr	r3, [r0, #0]
 80068fe:	2190      	movs	r1, #144	@ 0x90
 8006900:	0049      	lsls	r1, r1, #1
 8006902:	1878      	adds	r0, r7, r1
 8006904:	6801      	ldr	r1, [r0, #0]
 8006906:	4019      	ands	r1, r3
 8006908:	1938      	adds	r0, r7, r4
 800690a:	6803      	ldr	r3, [r0, #0]
 800690c:	43db      	mvns	r3, r3
 800690e:	208e      	movs	r0, #142	@ 0x8e
 8006910:	0040      	lsls	r0, r0, #1
 8006912:	183d      	adds	r5, r7, r0
 8006914:	6828      	ldr	r0, [r5, #0]
 8006916:	4003      	ands	r3, r0
 8006918:	404b      	eors	r3, r1
 800691a:	18d2      	adds	r2, r2, r3
 800691c:	4b69      	ldr	r3, [pc, #420]	@ (8006ac4 <mavlink_sha256_calc+0x390>)
 800691e:	268a      	movs	r6, #138	@ 0x8a
 8006920:	0076      	lsls	r6, r6, #1
 8006922:	19bd      	adds	r5, r7, r6
 8006924:	6829      	ldr	r1, [r5, #0]
 8006926:	0089      	lsls	r1, r1, #2
 8006928:	58cb      	ldr	r3, [r1, r3]
 800692a:	18d2      	adds	r2, r2, r3
 800692c:	4b64      	ldr	r3, [pc, #400]	@ (8006ac0 <mavlink_sha256_calc+0x38c>)
 800692e:	259c      	movs	r5, #156	@ 0x9c
 8006930:	006d      	lsls	r5, r5, #1
 8006932:	195d      	adds	r5, r3, r5
 8006934:	19eb      	adds	r3, r5, r7
 8006936:	19bd      	adds	r5, r7, r6
 8006938:	6829      	ldr	r1, [r5, #0]
 800693a:	0089      	lsls	r1, r1, #2
 800693c:	58cb      	ldr	r3, [r1, r3]
 800693e:	18d3      	adds	r3, r2, r3
 8006940:	2288      	movs	r2, #136	@ 0x88
 8006942:	0052      	lsls	r2, r2, #1
 8006944:	18bd      	adds	r5, r7, r2
 8006946:	602b      	str	r3, [r5, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8006948:	259a      	movs	r5, #154	@ 0x9a
 800694a:	006d      	lsls	r5, r5, #1
 800694c:	197a      	adds	r2, r7, r5
 800694e:	6813      	ldr	r3, [r2, #0]
 8006950:	2202      	movs	r2, #2
 8006952:	41d3      	rors	r3, r2
 8006954:	001a      	movs	r2, r3
 8006956:	1978      	adds	r0, r7, r5
 8006958:	6803      	ldr	r3, [r0, #0]
 800695a:	210d      	movs	r1, #13
 800695c:	41cb      	rors	r3, r1
 800695e:	405a      	eors	r2, r3
 8006960:	1978      	adds	r0, r7, r5
 8006962:	6803      	ldr	r3, [r0, #0]
 8006964:	2116      	movs	r1, #22
 8006966:	41cb      	rors	r3, r1
 8006968:	405a      	eors	r2, r3
 800696a:	2098      	movs	r0, #152	@ 0x98
 800696c:	0040      	lsls	r0, r0, #1
 800696e:	183b      	adds	r3, r7, r0
 8006970:	6819      	ldr	r1, [r3, #0]
 8006972:	2396      	movs	r3, #150	@ 0x96
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	18fb      	adds	r3, r7, r3
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	404b      	eors	r3, r1
 800697c:	1979      	adds	r1, r7, r5
 800697e:	6809      	ldr	r1, [r1, #0]
 8006980:	4019      	ands	r1, r3
 8006982:	183b      	adds	r3, r7, r0
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2096      	movs	r0, #150	@ 0x96
 8006988:	0040      	lsls	r0, r0, #1
 800698a:	1838      	adds	r0, r7, r0
 800698c:	6800      	ldr	r0, [r0, #0]
 800698e:	4003      	ands	r3, r0
 8006990:	404b      	eors	r3, r1
 8006992:	18d3      	adds	r3, r2, r3
 8006994:	2286      	movs	r2, #134	@ 0x86
 8006996:	0052      	lsls	r2, r2, #1
 8006998:	18ba      	adds	r2, r7, r2
 800699a:	6013      	str	r3, [r2, #0]
			     
	HH = GG;
 800699c:	238e      	movs	r3, #142	@ 0x8e
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	001a      	movs	r2, r3
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	218c      	movs	r1, #140	@ 0x8c
 80069a8:	0049      	lsls	r1, r1, #1
 80069aa:	1879      	adds	r1, r7, r1
 80069ac:	600b      	str	r3, [r1, #0]
	GG = FF;
 80069ae:	2190      	movs	r1, #144	@ 0x90
 80069b0:	0049      	lsls	r1, r1, #1
 80069b2:	187b      	adds	r3, r7, r1
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	18ba      	adds	r2, r7, r2
 80069b8:	6013      	str	r3, [r2, #0]
	FF = EE;
 80069ba:	193b      	adds	r3, r7, r4
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	1879      	adds	r1, r7, r1
 80069c0:	600b      	str	r3, [r1, #0]
	EE = DD + T1;
 80069c2:	2394      	movs	r3, #148	@ 0x94
 80069c4:	005b      	lsls	r3, r3, #1
 80069c6:	0018      	movs	r0, r3
 80069c8:	18fb      	adds	r3, r7, r3
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	2188      	movs	r1, #136	@ 0x88
 80069ce:	0049      	lsls	r1, r1, #1
 80069d0:	187b      	adds	r3, r7, r1
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	18d3      	adds	r3, r2, r3
 80069d6:	193c      	adds	r4, r7, r4
 80069d8:	6023      	str	r3, [r4, #0]
	DD = CC;
 80069da:	2296      	movs	r2, #150	@ 0x96
 80069dc:	0052      	lsls	r2, r2, #1
 80069de:	18bc      	adds	r4, r7, r2
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	0004      	movs	r4, r0
 80069e4:	193c      	adds	r4, r7, r4
 80069e6:	6023      	str	r3, [r4, #0]
	CC = BB;
 80069e8:	2098      	movs	r0, #152	@ 0x98
 80069ea:	0040      	lsls	r0, r0, #1
 80069ec:	183c      	adds	r4, r7, r0
 80069ee:	6823      	ldr	r3, [r4, #0]
 80069f0:	18bc      	adds	r4, r7, r2
 80069f2:	6023      	str	r3, [r4, #0]
	BB = AA;
 80069f4:	197c      	adds	r4, r7, r5
 80069f6:	6823      	ldr	r3, [r4, #0]
 80069f8:	1838      	adds	r0, r7, r0
 80069fa:	6003      	str	r3, [r0, #0]
	AA = T1 + T2;
 80069fc:	1879      	adds	r1, r7, r1
 80069fe:	680a      	ldr	r2, [r1, #0]
 8006a00:	2386      	movs	r3, #134	@ 0x86
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	18fb      	adds	r3, r7, r3
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	18d3      	adds	r3, r2, r3
 8006a0a:	197a      	adds	r2, r7, r5
 8006a0c:	6013      	str	r3, [r2, #0]
    for (i = 0; i < 64; i++) {
 8006a0e:	19bb      	adds	r3, r7, r6
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3301      	adds	r3, #1
 8006a14:	19ba      	adds	r2, r7, r6
 8006a16:	6013      	str	r3, [r2, #0]
 8006a18:	238a      	movs	r3, #138	@ 0x8a
 8006a1a:	005b      	lsls	r3, r3, #1
 8006a1c:	18fb      	adds	r3, r7, r3
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2b3f      	cmp	r3, #63	@ 0x3f
 8006a22:	dc00      	bgt.n	8006a26 <mavlink_sha256_calc+0x2f2>
 8006a24:	e753      	b.n	80068ce <mavlink_sha256_calc+0x19a>
    }

    m->counter[0] += AA;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689a      	ldr	r2, [r3, #8]
 8006a2a:	239a      	movs	r3, #154	@ 0x9a
 8006a2c:	005b      	lsls	r3, r3, #1
 8006a2e:	18fb      	adds	r3, r7, r3
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	18d2      	adds	r2, r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	2398      	movs	r3, #152	@ 0x98
 8006a3e:	005b      	lsls	r3, r3, #1
 8006a40:	18fb      	adds	r3, r7, r3
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	18d2      	adds	r2, r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	691a      	ldr	r2, [r3, #16]
 8006a4e:	2396      	movs	r3, #150	@ 0x96
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	18fb      	adds	r3, r7, r3
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	18d2      	adds	r2, r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	695a      	ldr	r2, [r3, #20]
 8006a60:	2394      	movs	r3, #148	@ 0x94
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	18fb      	adds	r3, r7, r3
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	18d2      	adds	r2, r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699a      	ldr	r2, [r3, #24]
 8006a72:	2392      	movs	r3, #146	@ 0x92
 8006a74:	005b      	lsls	r3, r3, #1
 8006a76:	18fb      	adds	r3, r7, r3
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	18d2      	adds	r2, r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	69da      	ldr	r2, [r3, #28]
 8006a84:	2390      	movs	r3, #144	@ 0x90
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	18d2      	adds	r2, r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1a      	ldr	r2, [r3, #32]
 8006a96:	238e      	movs	r3, #142	@ 0x8e
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	18fb      	adds	r3, r7, r3
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	18d2      	adds	r2, r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006aa8:	238c      	movs	r3, #140	@ 0x8c
 8006aaa:	005b      	lsls	r3, r3, #1
 8006aac:	18fb      	adds	r3, r7, r3
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	18d2      	adds	r2, r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006ab6:	46c0      	nop			@ (mov r8, r8)
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	b04f      	add	sp, #316	@ 0x13c
 8006abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006abe:	46c0      	nop			@ (mov r8, r8)
 8006ac0:	fffffed4 	.word	0xfffffed4
 8006ac4:	08009610 	.word	0x08009610

08006ac8 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b09c      	sub	sp, #112	@ 0x70
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t old_sz = m->sz[0];
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	18d2      	adds	r2, r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d904      	bls.n	8006b00 <mavlink_sha256_update+0x38>
	++m->sz[1];
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 8006b00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b02:	08db      	lsrs	r3, r3, #3
 8006b04:	223f      	movs	r2, #63	@ 0x3f
 8006b06:	4013      	ands	r3, r2
 8006b08:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8006b0a:	e058      	b.n	8006bbe <mavlink_sha256_update+0xf6>
	uint32_t l = 64 - offset;
 8006b0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b0e:	2240      	movs	r2, #64	@ 0x40
 8006b10:	1ad3      	subs	r3, r2, r3
 8006b12:	667b      	str	r3, [r7, #100]	@ 0x64
        if (len < l) {
 8006b14:	687a      	ldr	r2, [r7, #4]
 8006b16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d201      	bcs.n	8006b20 <mavlink_sha256_update+0x58>
            l = len;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	667b      	str	r3, [r7, #100]	@ 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3328      	adds	r3, #40	@ 0x28
 8006b24:	001a      	movs	r2, r3
 8006b26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b28:	18d3      	adds	r3, r2, r3
 8006b2a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006b2c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006b2e:	0018      	movs	r0, r3
 8006b30:	f002 fc84 	bl	800943c <memcpy>
	offset += l;
 8006b34:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006b36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b38:	18d3      	adds	r3, r2, r3
 8006b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
	p += l;
 8006b3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006b3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b40:	18d3      	adds	r3, r2, r3
 8006b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
	len -= l;
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 8006b4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b4e:	2b40      	cmp	r3, #64	@ 0x40
 8006b50:	d135      	bne.n	8006bbe <mavlink_sha256_update+0xf6>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3328      	adds	r3, #40	@ 0x28
 8006b56:	65bb      	str	r3, [r7, #88]	@ 0x58
	    for (i = 0; i < 16; i++){
 8006b58:	2300      	movs	r3, #0
 8006b5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b5c:	e023      	b.n	8006ba6 <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 8006b5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006b64:	18d3      	adds	r3, r2, r3
 8006b66:	657b      	str	r3, [r7, #84]	@ 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8006b68:	2310      	movs	r3, #16
 8006b6a:	18fa      	adds	r2, r7, r3
 8006b6c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	18d3      	adds	r3, r2, r3
 8006b72:	653b      	str	r3, [r7, #80]	@ 0x50
                p2[0] = p1[3];
 8006b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b76:	3303      	adds	r3, #3
 8006b78:	781a      	ldrb	r2, [r3, #0]
 8006b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b7c:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 8006b7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b80:	1c9a      	adds	r2, r3, #2
 8006b82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b84:	3301      	adds	r3, #1
 8006b86:	7812      	ldrb	r2, [r2, #0]
 8006b88:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 8006b8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b90:	3302      	adds	r3, #2
 8006b92:	7812      	ldrb	r2, [r2, #0]
 8006b94:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8006b96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b98:	3303      	adds	r3, #3
 8006b9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b9c:	7812      	ldrb	r2, [r2, #0]
 8006b9e:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8006ba0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ba6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ba8:	2b0f      	cmp	r3, #15
 8006baa:	ddd8      	ble.n	8006b5e <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 8006bac:	2310      	movs	r3, #16
 8006bae:	18fa      	adds	r2, r7, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	0011      	movs	r1, r2
 8006bb4:	0018      	movs	r0, r3
 8006bb6:	f7ff fdbd 	bl	8006734 <mavlink_sha256_calc>
	    offset = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1a3      	bne.n	8006b0c <mavlink_sha256_update+0x44>
	}
    }
}
 8006bc4:	46c0      	nop			@ (mov r8, r8)
 8006bc6:	46c0      	nop			@ (mov r8, r8)
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	b01c      	add	sp, #112	@ 0x70
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 8006bce:	b590      	push	{r4, r7, lr}
 8006bd0:	b099      	sub	sp, #100	@ 0x64
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	08db      	lsrs	r3, r3, #3
 8006bde:	223f      	movs	r2, #63	@ 0x3f
 8006be0:	4013      	ands	r3, r2
 8006be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 8006be4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006be6:	2277      	movs	r2, #119	@ 0x77
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	223f      	movs	r2, #63	@ 0x3f
 8006bec:	4013      	ands	r3, r2
 8006bee:	3301      	adds	r3, #1
 8006bf0:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	657b      	str	r3, [r7, #84]	@ 0x54
    
    *zeros = 0x80;
 8006bf8:	240c      	movs	r4, #12
 8006bfa:	193b      	adds	r3, r7, r4
 8006bfc:	2280      	movs	r2, #128	@ 0x80
 8006bfe:	701a      	strb	r2, [r3, #0]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 8006c00:	193b      	adds	r3, r7, r4
 8006c02:	3301      	adds	r3, #1
 8006c04:	2247      	movs	r2, #71	@ 0x47
 8006c06:	2100      	movs	r1, #0
 8006c08:	0018      	movs	r0, r3
 8006c0a:	f002 fbeb 	bl	80093e4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c14:	3307      	adds	r3, #7
 8006c16:	b2d1      	uxtb	r1, r2
 8006c18:	0020      	movs	r0, r4
 8006c1a:	183a      	adds	r2, r7, r0
 8006c1c:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	0a1a      	lsrs	r2, r3, #8
 8006c24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c26:	3306      	adds	r3, #6
 8006c28:	b2d1      	uxtb	r1, r2
 8006c2a:	183a      	adds	r2, r7, r0
 8006c2c:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	0c1a      	lsrs	r2, r3, #16
 8006c34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c36:	3305      	adds	r3, #5
 8006c38:	b2d1      	uxtb	r1, r2
 8006c3a:	183a      	adds	r2, r7, r0
 8006c3c:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	0e1a      	lsrs	r2, r3, #24
 8006c44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c46:	3304      	adds	r3, #4
 8006c48:	b2d1      	uxtb	r1, r2
 8006c4a:	183a      	adds	r2, r7, r0
 8006c4c:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685a      	ldr	r2, [r3, #4]
 8006c52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c54:	3303      	adds	r3, #3
 8006c56:	b2d1      	uxtb	r1, r2
 8006c58:	183a      	adds	r2, r7, r0
 8006c5a:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	0a1a      	lsrs	r2, r3, #8
 8006c62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c64:	3302      	adds	r3, #2
 8006c66:	b2d1      	uxtb	r1, r2
 8006c68:	183a      	adds	r2, r7, r0
 8006c6a:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	0c1a      	lsrs	r2, r3, #16
 8006c72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c74:	3301      	adds	r3, #1
 8006c76:	b2d1      	uxtb	r1, r2
 8006c78:	183a      	adds	r2, r7, r0
 8006c7a:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	0e1b      	lsrs	r3, r3, #24
 8006c82:	b2d9      	uxtb	r1, r3
 8006c84:	183a      	adds	r2, r7, r0
 8006c86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c88:	18d3      	adds	r3, r2, r3
 8006c8a:	1c0a      	adds	r2, r1, #0
 8006c8c:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 8006c8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c90:	3308      	adds	r3, #8
 8006c92:	001a      	movs	r2, r3
 8006c94:	1839      	adds	r1, r7, r0
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	0018      	movs	r0, r3
 8006c9a:	f7ff ff15 	bl	8006ac8 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 8006c9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ca0:	78da      	ldrb	r2, [r3, #3]
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006cac:	7892      	ldrb	r2, [r2, #2]
 8006cae:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006cb6:	7852      	ldrb	r2, [r2, #1]
 8006cb8:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	3303      	adds	r3, #3
 8006cbe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006cc0:	7812      	ldrb	r2, [r2, #0]
 8006cc2:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006cca:	79d2      	ldrb	r2, [r2, #7]
 8006ccc:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	3305      	adds	r3, #5
 8006cd2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006cd4:	7992      	ldrb	r2, [r2, #6]
 8006cd6:	701a      	strb	r2, [r3, #0]
}
 8006cd8:	46c0      	nop			@ (mov r8, r8)
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	b019      	add	sp, #100	@ 0x64
 8006cde:	bd90      	pop	{r4, r7, pc}

08006ce0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	0002      	movs	r2, r0
 8006ce8:	1dfb      	adds	r3, r7, #7
 8006cea:	701a      	strb	r2, [r3, #0]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 8006cec:	1dfb      	adds	r3, r7, #7
 8006cee:	781a      	ldrb	r2, [r3, #0]
 8006cf0:	0013      	movs	r3, r2
 8006cf2:	005b      	lsls	r3, r3, #1
 8006cf4:	189b      	adds	r3, r3, r2
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	4a02      	ldr	r2, [pc, #8]	@ (8006d04 <mavlink_get_channel_status+0x24>)
 8006cfa:	189b      	adds	r3, r3, r2
}
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	b002      	add	sp, #8
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	200007c4 	.word	0x200007c4

08006d08 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	0002      	movs	r2, r0
 8006d10:	1dfb      	adds	r3, r7, #7
 8006d12:	701a      	strb	r2, [r3, #0]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 8006d14:	1dfb      	adds	r3, r7, #7
 8006d16:	781a      	ldrb	r2, [r3, #0]
 8006d18:	0013      	movs	r3, r2
 8006d1a:	005b      	lsls	r3, r3, #1
 8006d1c:	189b      	adds	r3, r3, r2
 8006d1e:	015b      	lsls	r3, r3, #5
 8006d20:	189b      	adds	r3, r3, r2
 8006d22:	009a      	lsls	r2, r3, #2
 8006d24:	1ad2      	subs	r2, r2, r3
 8006d26:	4b03      	ldr	r3, [pc, #12]	@ (8006d34 <mavlink_get_channel_buffer+0x2c>)
 8006d28:	18d3      	adds	r3, r2, r3
}
 8006d2a:	0018      	movs	r0, r3
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	b002      	add	sp, #8
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	46c0      	nop			@ (mov r8, r8)
 8006d34:	20000338 	.word	0x20000338

08006d38 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8006d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d3a:	b0ab      	sub	sp, #172	@ 0xac
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <mavlink_signature_check+0x16>
		return true;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e147      	b.n	8006fde <mavlink_signature_check+0x2a6>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	3302      	adds	r3, #2
 8006d52:	26a0      	movs	r6, #160	@ 0xa0
 8006d54:	19ba      	adds	r2, r7, r6
 8006d56:	6013      	str	r3, [r2, #0]
	const uint8_t *psig = msg->signature;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	3317      	adds	r3, #23
 8006d5c:	33ff      	adds	r3, #255	@ 0xff
 8006d5e:	259c      	movs	r5, #156	@ 0x9c
 8006d60:	197a      	adds	r2, r7, r5
 8006d62:	6013      	str	r3, [r2, #0]
        const uint8_t *incoming_signature = psig+7;
 8006d64:	197b      	adds	r3, r7, r5
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3307      	adds	r3, #7
 8006d6a:	2298      	movs	r2, #152	@ 0x98
 8006d6c:	18b9      	adds	r1, r7, r2
 8006d6e:	600b      	str	r3, [r1, #0]
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8006d70:	242c      	movs	r4, #44	@ 0x2c
 8006d72:	193b      	adds	r3, r7, r4
 8006d74:	0018      	movs	r0, r3
 8006d76:	f7ff fca7 	bl	80066c8 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	3310      	adds	r3, #16
 8006d7e:	0019      	movs	r1, r3
 8006d80:	193b      	adds	r3, r7, r4
 8006d82:	2220      	movs	r2, #32
 8006d84:	0018      	movs	r0, r3
 8006d86:	f7ff fe9f 	bl	8006ac8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 8006d8a:	19bb      	adds	r3, r7, r6
 8006d8c:	6819      	ldr	r1, [r3, #0]
 8006d8e:	193b      	adds	r3, r7, r4
 8006d90:	220a      	movs	r2, #10
 8006d92:	0018      	movs	r0, r3
 8006d94:	f7ff fe98 	bl	8006ac8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	330c      	adds	r3, #12
 8006d9c:	0019      	movs	r1, r3
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	78db      	ldrb	r3, [r3, #3]
 8006da2:	001a      	movs	r2, r3
 8006da4:	193b      	adds	r3, r7, r4
 8006da6:	0018      	movs	r0, r3
 8006da8:	f7ff fe8e 	bl	8006ac8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3315      	adds	r3, #21
 8006db0:	33ff      	adds	r3, #255	@ 0xff
 8006db2:	0019      	movs	r1, r3
 8006db4:	193b      	adds	r3, r7, r4
 8006db6:	2202      	movs	r2, #2
 8006db8:	0018      	movs	r0, r3
 8006dba:	f7ff fe85 	bl	8006ac8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 8006dbe:	197b      	adds	r3, r7, r5
 8006dc0:	6819      	ldr	r1, [r3, #0]
 8006dc2:	193b      	adds	r3, r7, r4
 8006dc4:	2207      	movs	r2, #7
 8006dc6:	0018      	movs	r0, r3
 8006dc8:	f7ff fe7e 	bl	8006ac8 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 8006dcc:	2524      	movs	r5, #36	@ 0x24
 8006dce:	197a      	adds	r2, r7, r5
 8006dd0:	193b      	adds	r3, r7, r4
 8006dd2:	0011      	movs	r1, r2
 8006dd4:	0018      	movs	r0, r3
 8006dd6:	f7ff fefa 	bl	8006bce <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 8006dda:	2298      	movs	r2, #152	@ 0x98
 8006ddc:	18bb      	adds	r3, r7, r2
 8006dde:	6819      	ldr	r1, [r3, #0]
 8006de0:	197b      	adds	r3, r7, r5
 8006de2:	2206      	movs	r2, #6
 8006de4:	0018      	movs	r0, r3
 8006de6:	f002 faef 	bl	80093c8 <memcmp>
 8006dea:	1e03      	subs	r3, r0, #0
 8006dec:	d005      	beq.n	8006dfa <mavlink_signature_check+0xc2>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2234      	movs	r2, #52	@ 0x34
 8006df2:	2102      	movs	r1, #2
 8006df4:	5499      	strb	r1, [r3, r2]
		return false;
 8006df6:	2300      	movs	r3, #0
 8006df8:	e0f1      	b.n	8006fde <mavlink_signature_check+0x2a6>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 8006dfa:	2397      	movs	r3, #151	@ 0x97
 8006dfc:	18fb      	adds	r3, r7, r3
 8006dfe:	219c      	movs	r1, #156	@ 0x9c
 8006e00:	187a      	adds	r2, r7, r1
 8006e02:	6812      	ldr	r2, [r2, #0]
 8006e04:	7812      	ldrb	r2, [r2, #0]
 8006e06:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = 0;
 8006e08:	2200      	movs	r2, #0
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61ba      	str	r2, [r7, #24]
 8006e0e:	61fb      	str	r3, [r7, #28]
	memcpy(tstamp.t8, psig+1, 6);
 8006e10:	187b      	adds	r3, r7, r1
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	1c59      	adds	r1, r3, #1
 8006e16:	2318      	movs	r3, #24
 8006e18:	18fb      	adds	r3, r7, r3
 8006e1a:	2206      	movs	r2, #6
 8006e1c:	0018      	movs	r0, r3
 8006e1e:	f002 fb0d 	bl	800943c <memcpy>

	if (signing_streams == NULL) {
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d105      	bne.n	8006e34 <mavlink_signature_check+0xfc>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2234      	movs	r2, #52	@ 0x34
 8006e2c:	2103      	movs	r1, #3
 8006e2e:	5499      	strb	r1, [r3, r2]
                return false;
 8006e30:	2300      	movs	r3, #0
 8006e32:	e0d4      	b.n	8006fde <mavlink_signature_check+0x2a6>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8006e34:	23a6      	movs	r3, #166	@ 0xa6
 8006e36:	18fb      	adds	r3, r7, r3
 8006e38:	2200      	movs	r2, #0
 8006e3a:	801a      	strh	r2, [r3, #0]
 8006e3c:	e02e      	b.n	8006e9c <mavlink_signature_check+0x164>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	79d9      	ldrb	r1, [r3, #7]
 8006e42:	24a6      	movs	r4, #166	@ 0xa6
 8006e44:	193b      	adds	r3, r7, r4
 8006e46:	881a      	ldrh	r2, [r3, #0]
 8006e48:	68b8      	ldr	r0, [r7, #8]
 8006e4a:	0013      	movs	r3, r2
 8006e4c:	00db      	lsls	r3, r3, #3
 8006e4e:	189b      	adds	r3, r3, r2
 8006e50:	18c3      	adds	r3, r0, r3
 8006e52:	3303      	adds	r3, #3
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	4299      	cmp	r1, r3
 8006e58:	d11a      	bne.n	8006e90 <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	7a19      	ldrb	r1, [r3, #8]
 8006e5e:	193b      	adds	r3, r7, r4
 8006e60:	881a      	ldrh	r2, [r3, #0]
 8006e62:	68b8      	ldr	r0, [r7, #8]
 8006e64:	0013      	movs	r3, r2
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	189b      	adds	r3, r3, r2
 8006e6a:	18c3      	adds	r3, r0, r3
 8006e6c:	3304      	adds	r3, #4
 8006e6e:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8006e70:	4299      	cmp	r1, r3
 8006e72:	d10d      	bne.n	8006e90 <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 8006e74:	193b      	adds	r3, r7, r4
 8006e76:	881a      	ldrh	r2, [r3, #0]
 8006e78:	68b9      	ldr	r1, [r7, #8]
 8006e7a:	0013      	movs	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	189b      	adds	r3, r3, r2
 8006e80:	18cb      	adds	r3, r1, r3
 8006e82:	3302      	adds	r3, #2
 8006e84:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8006e86:	2297      	movs	r2, #151	@ 0x97
 8006e88:	18ba      	adds	r2, r7, r2
 8006e8a:	7812      	ldrb	r2, [r2, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d00d      	beq.n	8006eac <mavlink_signature_check+0x174>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8006e90:	21a6      	movs	r1, #166	@ 0xa6
 8006e92:	187b      	adds	r3, r7, r1
 8006e94:	881a      	ldrh	r2, [r3, #0]
 8006e96:	187b      	adds	r3, r7, r1
 8006e98:	3201      	adds	r2, #1
 8006e9a:	801a      	strh	r2, [r3, #0]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	22a6      	movs	r2, #166	@ 0xa6
 8006ea2:	18ba      	adds	r2, r7, r2
 8006ea4:	8812      	ldrh	r2, [r2, #0]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d3c9      	bcc.n	8006e3e <mavlink_signature_check+0x106>
 8006eaa:	e000      	b.n	8006eae <mavlink_signature_check+0x176>
			break;
 8006eac:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (i == signing_streams->num_signing_streams) {
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	22a6      	movs	r2, #166	@ 0xa6
 8006eb4:	18ba      	adds	r2, r7, r2
 8006eb6:	8812      	ldrh	r2, [r2, #0]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d149      	bne.n	8006f50 <mavlink_signature_check+0x218>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	881b      	ldrh	r3, [r3, #0]
 8006ec0:	2b0f      	cmp	r3, #15
 8006ec2:	d905      	bls.n	8006ed0 <mavlink_signature_check+0x198>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2234      	movs	r2, #52	@ 0x34
 8006ec8:	2104      	movs	r1, #4
 8006eca:	5499      	strb	r1, [r3, r2]
                        return false;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e086      	b.n	8006fde <mavlink_signature_check+0x2a6>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	4844      	ldr	r0, [pc, #272]	@ (8006fe8 <mavlink_signature_check+0x2b0>)
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	1812      	adds	r2, r2, r0
 8006eda:	414b      	adcs	r3, r1
 8006edc:	68f9      	ldr	r1, [r7, #12]
 8006ede:	6888      	ldr	r0, [r1, #8]
 8006ee0:	68c9      	ldr	r1, [r1, #12]
 8006ee2:	4299      	cmp	r1, r3
 8006ee4:	d802      	bhi.n	8006eec <mavlink_signature_check+0x1b4>
 8006ee6:	d107      	bne.n	8006ef8 <mavlink_signature_check+0x1c0>
 8006ee8:	4290      	cmp	r0, r2
 8006eea:	d905      	bls.n	8006ef8 <mavlink_signature_check+0x1c0>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2234      	movs	r2, #52	@ 0x34
 8006ef0:	2105      	movs	r1, #5
 8006ef2:	5499      	strb	r1, [r3, r2]
                        return false;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e072      	b.n	8006fde <mavlink_signature_check+0x2a6>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 8006ef8:	24a6      	movs	r4, #166	@ 0xa6
 8006efa:	193b      	adds	r3, r7, r4
 8006efc:	881a      	ldrh	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	79d8      	ldrb	r0, [r3, #7]
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	0013      	movs	r3, r2
 8006f06:	00db      	lsls	r3, r3, #3
 8006f08:	189b      	adds	r3, r3, r2
 8006f0a:	18cb      	adds	r3, r1, r3
 8006f0c:	3303      	adds	r3, #3
 8006f0e:	1c02      	adds	r2, r0, #0
 8006f10:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 8006f12:	193b      	adds	r3, r7, r4
 8006f14:	881a      	ldrh	r2, [r3, #0]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	7a18      	ldrb	r0, [r3, #8]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	0013      	movs	r3, r2
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	189b      	adds	r3, r3, r2
 8006f22:	18cb      	adds	r3, r1, r3
 8006f24:	3304      	adds	r3, #4
 8006f26:	1c02      	adds	r2, r0, #0
 8006f28:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 8006f2a:	193b      	adds	r3, r7, r4
 8006f2c:	881a      	ldrh	r2, [r3, #0]
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	0013      	movs	r3, r2
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	189b      	adds	r3, r3, r2
 8006f36:	18cb      	adds	r3, r1, r3
 8006f38:	3302      	adds	r3, #2
 8006f3a:	2297      	movs	r2, #151	@ 0x97
 8006f3c:	18ba      	adds	r2, r7, r2
 8006f3e:	7812      	ldrb	r2, [r2, #0]
 8006f40:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	3301      	adds	r3, #1
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	801a      	strh	r2, [r3, #0]
 8006f4e:	e021      	b.n	8006f94 <mavlink_signature_check+0x25c>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8006f50:	2200      	movs	r2, #0
 8006f52:	2300      	movs	r3, #0
 8006f54:	613a      	str	r2, [r7, #16]
 8006f56:	617b      	str	r3, [r7, #20]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8006f58:	23a6      	movs	r3, #166	@ 0xa6
 8006f5a:	18fb      	adds	r3, r7, r3
 8006f5c:	881a      	ldrh	r2, [r3, #0]
 8006f5e:	0013      	movs	r3, r2
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	189b      	adds	r3, r3, r2
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	18d3      	adds	r3, r2, r3
 8006f68:	1d59      	adds	r1, r3, #5
 8006f6a:	2310      	movs	r3, #16
 8006f6c:	18fb      	adds	r3, r7, r3
 8006f6e:	2206      	movs	r2, #6
 8006f70:	0018      	movs	r0, r3
 8006f72:	f002 fa63 	bl	800943c <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8006f76:	69b8      	ldr	r0, [r7, #24]
 8006f78:	69f9      	ldr	r1, [r7, #28]
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	4299      	cmp	r1, r3
 8006f80:	d808      	bhi.n	8006f94 <mavlink_signature_check+0x25c>
 8006f82:	d101      	bne.n	8006f88 <mavlink_signature_check+0x250>
 8006f84:	4290      	cmp	r0, r2
 8006f86:	d805      	bhi.n	8006f94 <mavlink_signature_check+0x25c>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2234      	movs	r2, #52	@ 0x34
 8006f8c:	2106      	movs	r1, #6
 8006f8e:	5499      	strb	r1, [r3, r2]
                        return false;
 8006f90:	2300      	movs	r3, #0
 8006f92:	e024      	b.n	8006fde <mavlink_signature_check+0x2a6>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8006f94:	23a6      	movs	r3, #166	@ 0xa6
 8006f96:	18fb      	adds	r3, r7, r3
 8006f98:	881a      	ldrh	r2, [r3, #0]
 8006f9a:	0013      	movs	r3, r2
 8006f9c:	00db      	lsls	r3, r3, #3
 8006f9e:	189b      	adds	r3, r3, r2
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	18d3      	adds	r3, r2, r3
 8006fa4:	1d58      	adds	r0, r3, #5
 8006fa6:	239c      	movs	r3, #156	@ 0x9c
 8006fa8:	18fb      	adds	r3, r7, r3
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	3301      	adds	r3, #1
 8006fae:	2206      	movs	r2, #6
 8006fb0:	0019      	movs	r1, r3
 8006fb2:	f002 fa43 	bl	800943c <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8006fb6:	69b8      	ldr	r0, [r7, #24]
 8006fb8:	69f9      	ldr	r1, [r7, #28]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	68db      	ldr	r3, [r3, #12]
 8006fc0:	4299      	cmp	r1, r3
 8006fc2:	d802      	bhi.n	8006fca <mavlink_signature_check+0x292>
 8006fc4:	d106      	bne.n	8006fd4 <mavlink_signature_check+0x29c>
 8006fc6:	4290      	cmp	r0, r2
 8006fc8:	d904      	bls.n	8006fd4 <mavlink_signature_check+0x29c>
		signing->timestamp = tstamp.t64;
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	68f9      	ldr	r1, [r7, #12]
 8006fd0:	608a      	str	r2, [r1, #8]
 8006fd2:	60cb      	str	r3, [r1, #12]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2234      	movs	r2, #52	@ 0x34
 8006fd8:	2101      	movs	r1, #1
 8006fda:	5499      	strb	r1, [r3, r2]
        return true;
 8006fdc:	2301      	movs	r3, #1
}
 8006fde:	0018      	movs	r0, r3
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	b02b      	add	sp, #172	@ 0xac
 8006fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fe6:	46c0      	nop			@ (mov r8, r8)
 8006fe8:	005b8d80 	.word	0x005b8d80

08006fec <_mav_parse_error>:
{
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
}

static inline void _mav_parse_error(mavlink_status_t *status)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	789b      	ldrb	r3, [r3, #2]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	709a      	strb	r2, [r3, #2]
}
 8007000:	46c0      	nop			@ (mov r8, r8)
 8007002:	46bd      	mov	sp, r7
 8007004:	b002      	add	sp, #8
 8007006:	bd80      	pop	{r7, pc}

08007008 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 8007008:	b590      	push	{r4, r7, lr}
 800700a:	b085      	sub	sp, #20
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 8007010:	210e      	movs	r1, #14
 8007012:	187b      	adds	r3, r7, r1
 8007014:	2200      	movs	r2, #0
 8007016:	801a      	strh	r2, [r3, #0]
	crc_init(&crcTmp);
 8007018:	000c      	movs	r4, r1
 800701a:	187b      	adds	r3, r7, r1
 800701c:	0018      	movs	r0, r3
 800701e:	f7ff fb47 	bl	80066b0 <crc_init>
	msg->checksum = crcTmp;
 8007022:	193b      	adds	r3, r7, r4
 8007024:	881a      	ldrh	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	21ff      	movs	r1, #255	@ 0xff
 800702a:	4011      	ands	r1, r2
 800702c:	000c      	movs	r4, r1
 800702e:	7819      	ldrb	r1, [r3, #0]
 8007030:	2000      	movs	r0, #0
 8007032:	4001      	ands	r1, r0
 8007034:	1c08      	adds	r0, r1, #0
 8007036:	1c21      	adds	r1, r4, #0
 8007038:	4301      	orrs	r1, r0
 800703a:	7019      	strb	r1, [r3, #0]
 800703c:	0a12      	lsrs	r2, r2, #8
 800703e:	b290      	uxth	r0, r2
 8007040:	785a      	ldrb	r2, [r3, #1]
 8007042:	2100      	movs	r1, #0
 8007044:	400a      	ands	r2, r1
 8007046:	1c11      	adds	r1, r2, #0
 8007048:	1c02      	adds	r2, r0, #0
 800704a:	430a      	orrs	r2, r1
 800704c:	705a      	strb	r2, [r3, #1]
}
 800704e:	46c0      	nop			@ (mov r8, r8)
 8007050:	46bd      	mov	sp, r7
 8007052:	b005      	add	sp, #20
 8007054:	bd90      	pop	{r4, r7, pc}

08007056 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8007056:	b590      	push	{r4, r7, lr}
 8007058:	b085      	sub	sp, #20
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	000a      	movs	r2, r1
 8007060:	1cfb      	adds	r3, r7, #3
 8007062:	701a      	strb	r2, [r3, #0]
	uint16_t checksum = msg->checksum;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	781a      	ldrb	r2, [r3, #0]
 8007068:	785b      	ldrb	r3, [r3, #1]
 800706a:	021b      	lsls	r3, r3, #8
 800706c:	4313      	orrs	r3, r2
 800706e:	b29a      	uxth	r2, r3
 8007070:	240e      	movs	r4, #14
 8007072:	193b      	adds	r3, r7, r4
 8007074:	801a      	strh	r2, [r3, #0]
	crc_accumulate(c, &checksum);
 8007076:	193a      	adds	r2, r7, r4
 8007078:	1cfb      	adds	r3, r7, #3
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	0011      	movs	r1, r2
 800707e:	0018      	movs	r0, r3
 8007080:	f7ff fad8 	bl	8006634 <crc_accumulate>
	msg->checksum = checksum;
 8007084:	193b      	adds	r3, r7, r4
 8007086:	881a      	ldrh	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	21ff      	movs	r1, #255	@ 0xff
 800708c:	4011      	ands	r1, r2
 800708e:	000c      	movs	r4, r1
 8007090:	7819      	ldrb	r1, [r3, #0]
 8007092:	2000      	movs	r0, #0
 8007094:	4001      	ands	r1, r0
 8007096:	1c08      	adds	r0, r1, #0
 8007098:	1c21      	adds	r1, r4, #0
 800709a:	4301      	orrs	r1, r0
 800709c:	7019      	strb	r1, [r3, #0]
 800709e:	0a12      	lsrs	r2, r2, #8
 80070a0:	b290      	uxth	r0, r2
 80070a2:	785a      	ldrb	r2, [r3, #1]
 80070a4:	2100      	movs	r1, #0
 80070a6:	400a      	ands	r2, r1
 80070a8:	1c11      	adds	r1, r2, #0
 80070aa:	1c02      	adds	r2, r0, #0
 80070ac:	430a      	orrs	r2, r1
 80070ae:	705a      	strb	r2, [r3, #1]
}
 80070b0:	46c0      	nop			@ (mov r8, r8)
 80070b2:	46bd      	mov	sp, r7
 80070b4:	b005      	add	sp, #20
 80070b6:	bd90      	pop	{r4, r7, pc}

080070b8 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b086      	sub	sp, #24
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 80070c0:	2300      	movs	r3, #0
 80070c2:	617b      	str	r3, [r7, #20]
 80070c4:	23e7      	movs	r3, #231	@ 0xe7
 80070c6:	613b      	str	r3, [r7, #16]
        while (low < high) {
 80070c8:	e023      	b.n	8007112 <mavlink_get_msg_entry+0x5a>
            uint32_t mid = (low+1+high)/2;
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	18d3      	adds	r3, r2, r3
 80070d0:	3301      	adds	r3, #1
 80070d2:	085b      	lsrs	r3, r3, #1
 80070d4:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80070d6:	491c      	ldr	r1, [pc, #112]	@ (8007148 <mavlink_get_msg_entry+0x90>)
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	0013      	movs	r3, r2
 80070dc:	005b      	lsls	r3, r3, #1
 80070de:	189b      	adds	r3, r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	585b      	ldr	r3, [r3, r1]
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d203      	bcs.n	80070f2 <mavlink_get_msg_entry+0x3a>
                high = mid-1;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	613b      	str	r3, [r7, #16]
                continue;
 80070f0:	e00f      	b.n	8007112 <mavlink_get_msg_entry+0x5a>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80070f2:	4915      	ldr	r1, [pc, #84]	@ (8007148 <mavlink_get_msg_entry+0x90>)
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	0013      	movs	r3, r2
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	189b      	adds	r3, r3, r2
 80070fc:	009b      	lsls	r3, r3, #2
 80070fe:	585b      	ldr	r3, [r3, r1]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	429a      	cmp	r2, r3
 8007104:	d902      	bls.n	800710c <mavlink_get_msg_entry+0x54>
                low = mid;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	617b      	str	r3, [r7, #20]
                continue;
 800710a:	e002      	b.n	8007112 <mavlink_get_msg_entry+0x5a>
            }
            low = mid;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	617b      	str	r3, [r7, #20]
            break;
 8007110:	e003      	b.n	800711a <mavlink_get_msg_entry+0x62>
        while (low < high) {
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	429a      	cmp	r2, r3
 8007118:	d3d7      	bcc.n	80070ca <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 800711a:	490b      	ldr	r1, [pc, #44]	@ (8007148 <mavlink_get_msg_entry+0x90>)
 800711c:	697a      	ldr	r2, [r7, #20]
 800711e:	0013      	movs	r3, r2
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	189b      	adds	r3, r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	585b      	ldr	r3, [r3, r1]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	429a      	cmp	r2, r3
 800712c:	d001      	beq.n	8007132 <mavlink_get_msg_entry+0x7a>
            // msgid is not in the table
            return NULL;
 800712e:	2300      	movs	r3, #0
 8007130:	e006      	b.n	8007140 <mavlink_get_msg_entry+0x88>
        }
        return &mavlink_message_crcs[low];
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	0013      	movs	r3, r2
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	189b      	adds	r3, r3, r2
 800713a:	009b      	lsls	r3, r3, #2
 800713c:	4a02      	ldr	r2, [pc, #8]	@ (8007148 <mavlink_get_msg_entry+0x90>)
 800713e:	189b      	adds	r3, r3, r2
}
 8007140:	0018      	movs	r0, r3
 8007142:	46bd      	mov	sp, r7
 8007144:	b006      	add	sp, #24
 8007146:	bd80      	pop	{r7, pc}
 8007148:	08009750 	.word	0x08009750

0800714c <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 800714c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800714e:	b089      	sub	sp, #36	@ 0x24
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	603b      	str	r3, [r7, #0]
 8007158:	1dfb      	adds	r3, r7, #7
 800715a:	701a      	strb	r2, [r3, #0]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	2200      	movs	r2, #0
 8007160:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	78db      	ldrb	r3, [r3, #3]
 8007166:	2b0f      	cmp	r3, #15
 8007168:	d900      	bls.n	800716c <mavlink_frame_char_buffer+0x20>
 800716a:	e2dd      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
 800716c:	009a      	lsls	r2, r3, #2
 800716e:	4be4      	ldr	r3, [pc, #912]	@ (8007500 <mavlink_frame_char_buffer+0x3b4>)
 8007170:	18d3      	adds	r3, r2, r3
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	469f      	mov	pc, r3
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8007176:	1dfb      	adds	r3, r7, #7
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2bfd      	cmp	r3, #253	@ 0xfd
 800717c:	d115      	bne.n	80071aa <mavlink_frame_char_buffer+0x5e>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2202      	movs	r2, #2
 8007182:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2200      	movs	r2, #0
 8007188:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	1dfa      	adds	r2, r7, #7
 800718e:	7812      	ldrb	r2, [r2, #0]
 8007190:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	7b1b      	ldrb	r3, [r3, #12]
 8007196:	2201      	movs	r2, #1
 8007198:	4393      	bics	r3, r2
 800719a:	b2da      	uxtb	r2, r3
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	0018      	movs	r0, r3
 80071a4:	f7ff ff30 	bl	8007008 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 80071a8:	e2b5      	b.n	8007716 <mavlink_frame_char_buffer+0x5ca>
		} else if (c == MAVLINK_STX_MAVLINK1)
 80071aa:	1dfb      	adds	r3, r7, #7
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	2bfe      	cmp	r3, #254	@ 0xfe
 80071b0:	d000      	beq.n	80071b4 <mavlink_frame_char_buffer+0x68>
 80071b2:	e2b0      	b.n	8007716 <mavlink_frame_char_buffer+0x5ca>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	2202      	movs	r2, #2
 80071b8:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2200      	movs	r2, #0
 80071be:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	1dfa      	adds	r2, r7, #7
 80071c4:	7812      	ldrb	r2, [r2, #0]
 80071c6:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	7b1b      	ldrb	r3, [r3, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	4313      	orrs	r3, r2
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	0018      	movs	r0, r3
 80071da:	f7ff ff15 	bl	8007008 <mavlink_start_checksum>
		break;
 80071de:	e29a      	b.n	8007716 <mavlink_frame_char_buffer+0x5ca>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d010      	beq.n	800720a <mavlink_frame_char_buffer+0xbe>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	785b      	ldrb	r3, [r3, #1]
 80071ec:	3301      	adds	r3, #1
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	0018      	movs	r0, r3
 80071f8:	f7ff fef8 	bl	8006fec <_mav_parse_error>
			status->msg_received = 0;
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	2201      	movs	r2, #1
 8007206:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 8007208:	e28e      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
			rxmsg->len = c;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	1dfa      	adds	r2, r7, #7
 800720e:	7812      	ldrb	r2, [r2, #0]
 8007210:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	2200      	movs	r2, #0
 8007216:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 8007218:	1dfb      	adds	r3, r7, #7
 800721a:	781a      	ldrb	r2, [r3, #0]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	0011      	movs	r1, r2
 8007220:	0018      	movs	r0, r3
 8007222:	f7ff ff18 	bl	8007056 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	7b1b      	ldrb	r3, [r3, #12]
 800722a:	001a      	movs	r2, r3
 800722c:	2301      	movs	r3, #1
 800722e:	4013      	ands	r3, r2
 8007230:	d009      	beq.n	8007246 <mavlink_frame_char_buffer+0xfa>
                            rxmsg->incompat_flags = 0;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2200      	movs	r2, #0
 800723c:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	2205      	movs	r2, #5
 8007242:	70da      	strb	r2, [r3, #3]
		break;
 8007244:	e270      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2203      	movs	r2, #3
 800724a:	70da      	strb	r2, [r3, #3]
		break;
 800724c:	e26c      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	1dfa      	adds	r2, r7, #7
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	791b      	ldrb	r3, [r3, #4]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d90a      	bls.n	8007274 <mavlink_frame_char_buffer+0x128>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	0018      	movs	r0, r3
 8007262:	f7ff fec3 	bl	8006fec <_mav_parse_error>
			status->msg_received = 0;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2200      	movs	r2, #0
 800726a:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	2201      	movs	r2, #1
 8007270:	70da      	strb	r2, [r3, #3]
			break;
 8007272:	e259      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
		}
		mavlink_update_checksum(rxmsg, c);
 8007274:	1dfb      	adds	r3, r7, #7
 8007276:	781a      	ldrb	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	0011      	movs	r1, r2
 800727c:	0018      	movs	r0, r3
 800727e:	f7ff feea 	bl	8007056 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	2204      	movs	r2, #4
 8007286:	70da      	strb	r2, [r3, #3]
		break;
 8007288:	e24e      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	1dfa      	adds	r2, r7, #7
 800728e:	7812      	ldrb	r2, [r2, #0]
 8007290:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8007292:	1dfb      	adds	r3, r7, #7
 8007294:	781a      	ldrb	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	0011      	movs	r1, r2
 800729a:	0018      	movs	r0, r3
 800729c:	f7ff fedb 	bl	8007056 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	2205      	movs	r2, #5
 80072a4:	70da      	strb	r2, [r3, #3]
		break;
 80072a6:	e23f      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	1dfa      	adds	r2, r7, #7
 80072ac:	7812      	ldrb	r2, [r2, #0]
 80072ae:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 80072b0:	1dfb      	adds	r3, r7, #7
 80072b2:	781a      	ldrb	r2, [r3, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	0011      	movs	r1, r2
 80072b8:	0018      	movs	r0, r3
 80072ba:	f7ff fecc 	bl	8007056 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	2206      	movs	r2, #6
 80072c2:	70da      	strb	r2, [r3, #3]
		break;
 80072c4:	e230      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	1dfa      	adds	r2, r7, #7
 80072ca:	7812      	ldrb	r2, [r2, #0]
 80072cc:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 80072ce:	1dfb      	adds	r3, r7, #7
 80072d0:	781a      	ldrb	r2, [r3, #0]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	0011      	movs	r1, r2
 80072d6:	0018      	movs	r0, r3
 80072d8:	f7ff febd 	bl	8007056 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2207      	movs	r2, #7
 80072e0:	70da      	strb	r2, [r3, #3]
		break;
 80072e2:	e221      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	1dfa      	adds	r2, r7, #7
 80072e8:	7812      	ldrb	r2, [r2, #0]
 80072ea:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 80072ec:	1dfb      	adds	r3, r7, #7
 80072ee:	781a      	ldrb	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	0011      	movs	r1, r2
 80072f4:	0018      	movs	r0, r3
 80072f6:	f7ff feae 	bl	8007056 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2208      	movs	r2, #8
 80072fe:	70da      	strb	r2, [r3, #3]
		break;
 8007300:	e212      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 8007302:	1dfb      	adds	r3, r7, #7
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	0a1b      	lsrs	r3, r3, #8
 800730a:	68fa      	ldr	r2, [r7, #12]
 800730c:	2109      	movs	r1, #9
 800730e:	20ff      	movs	r0, #255	@ 0xff
 8007310:	4018      	ands	r0, r3
 8007312:	0005      	movs	r5, r0
 8007314:	5c50      	ldrb	r0, [r2, r1]
 8007316:	2400      	movs	r4, #0
 8007318:	4020      	ands	r0, r4
 800731a:	1c04      	adds	r4, r0, #0
 800731c:	1c28      	adds	r0, r5, #0
 800731e:	4320      	orrs	r0, r4
 8007320:	5450      	strb	r0, [r2, r1]
 8007322:	0a18      	lsrs	r0, r3, #8
 8007324:	24ff      	movs	r4, #255	@ 0xff
 8007326:	4020      	ands	r0, r4
 8007328:	0006      	movs	r6, r0
 800732a:	1850      	adds	r0, r2, r1
 800732c:	7844      	ldrb	r4, [r0, #1]
 800732e:	2500      	movs	r5, #0
 8007330:	402c      	ands	r4, r5
 8007332:	1c25      	adds	r5, r4, #0
 8007334:	1c34      	adds	r4, r6, #0
 8007336:	432c      	orrs	r4, r5
 8007338:	7044      	strb	r4, [r0, #1]
 800733a:	0c1b      	lsrs	r3, r3, #16
 800733c:	20ff      	movs	r0, #255	@ 0xff
 800733e:	4018      	ands	r0, r3
 8007340:	1853      	adds	r3, r2, r1
 8007342:	789a      	ldrb	r2, [r3, #2]
 8007344:	2100      	movs	r1, #0
 8007346:	400a      	ands	r2, r1
 8007348:	1c11      	adds	r1, r2, #0
 800734a:	1c02      	adds	r2, r0, #0
 800734c:	430a      	orrs	r2, r1
 800734e:	709a      	strb	r2, [r3, #2]
		mavlink_update_checksum(rxmsg, c);
 8007350:	1dfb      	adds	r3, r7, #7
 8007352:	781a      	ldrb	r2, [r3, #0]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	0011      	movs	r1, r2
 8007358:	0018      	movs	r0, r3
 800735a:	f7ff fe7c 	bl	8007056 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	7b1b      	ldrb	r3, [r3, #12]
 8007362:	001a      	movs	r2, r3
 8007364:	2301      	movs	r3, #1
 8007366:	4013      	ands	r3, r2
 8007368:	d00b      	beq.n	8007382 <mavlink_frame_char_buffer+0x236>
			if(rxmsg->len > 0) {
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	78db      	ldrb	r3, [r3, #3]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d003      	beq.n	800737a <mavlink_frame_char_buffer+0x22e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	220b      	movs	r2, #11
 8007376:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8007378:	e1d6      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	220c      	movs	r2, #12
 800737e:	70da      	strb	r2, [r3, #3]
		break;
 8007380:	e1d2      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	2209      	movs	r2, #9
 8007386:	70da      	strb	r2, [r3, #3]
		break;
 8007388:	e1ce      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= ((uint32_t)c)<<8;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	7a5a      	ldrb	r2, [r3, #9]
 800738e:	7a99      	ldrb	r1, [r3, #10]
 8007390:	0209      	lsls	r1, r1, #8
 8007392:	430a      	orrs	r2, r1
 8007394:	7adb      	ldrb	r3, [r3, #11]
 8007396:	041b      	lsls	r3, r3, #16
 8007398:	4313      	orrs	r3, r2
 800739a:	001a      	movs	r2, r3
 800739c:	1dfb      	adds	r3, r7, #7
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	4313      	orrs	r3, r2
 80073a4:	021b      	lsls	r3, r3, #8
 80073a6:	0a19      	lsrs	r1, r3, #8
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2209      	movs	r2, #9
 80073ac:	20ff      	movs	r0, #255	@ 0xff
 80073ae:	4008      	ands	r0, r1
 80073b0:	0005      	movs	r5, r0
 80073b2:	5c98      	ldrb	r0, [r3, r2]
 80073b4:	2400      	movs	r4, #0
 80073b6:	4020      	ands	r0, r4
 80073b8:	1c04      	adds	r4, r0, #0
 80073ba:	1c28      	adds	r0, r5, #0
 80073bc:	4320      	orrs	r0, r4
 80073be:	5498      	strb	r0, [r3, r2]
 80073c0:	0a08      	lsrs	r0, r1, #8
 80073c2:	24ff      	movs	r4, #255	@ 0xff
 80073c4:	4020      	ands	r0, r4
 80073c6:	0006      	movs	r6, r0
 80073c8:	1898      	adds	r0, r3, r2
 80073ca:	7844      	ldrb	r4, [r0, #1]
 80073cc:	2500      	movs	r5, #0
 80073ce:	402c      	ands	r4, r5
 80073d0:	1c25      	adds	r5, r4, #0
 80073d2:	1c34      	adds	r4, r6, #0
 80073d4:	432c      	orrs	r4, r5
 80073d6:	7044      	strb	r4, [r0, #1]
 80073d8:	0c09      	lsrs	r1, r1, #16
 80073da:	20ff      	movs	r0, #255	@ 0xff
 80073dc:	4008      	ands	r0, r1
 80073de:	189b      	adds	r3, r3, r2
 80073e0:	789a      	ldrb	r2, [r3, #2]
 80073e2:	2100      	movs	r1, #0
 80073e4:	400a      	ands	r2, r1
 80073e6:	1c11      	adds	r1, r2, #0
 80073e8:	1c02      	adds	r2, r0, #0
 80073ea:	430a      	orrs	r2, r1
 80073ec:	709a      	strb	r2, [r3, #2]
		mavlink_update_checksum(rxmsg, c);
 80073ee:	1dfb      	adds	r3, r7, #7
 80073f0:	781a      	ldrb	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	0011      	movs	r1, r2
 80073f6:	0018      	movs	r0, r3
 80073f8:	f7ff fe2d 	bl	8007056 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	220a      	movs	r2, #10
 8007400:	70da      	strb	r2, [r3, #3]
		break;
 8007402:	e191      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	7a5a      	ldrb	r2, [r3, #9]
 8007408:	7a99      	ldrb	r1, [r3, #10]
 800740a:	0209      	lsls	r1, r1, #8
 800740c:	430a      	orrs	r2, r1
 800740e:	7adb      	ldrb	r3, [r3, #11]
 8007410:	041b      	lsls	r3, r3, #16
 8007412:	4313      	orrs	r3, r2
 8007414:	001a      	movs	r2, r3
 8007416:	1dfb      	adds	r3, r7, #7
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	041b      	lsls	r3, r3, #16
 800741c:	4313      	orrs	r3, r2
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	0a19      	lsrs	r1, r3, #8
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2209      	movs	r2, #9
 8007426:	20ff      	movs	r0, #255	@ 0xff
 8007428:	4008      	ands	r0, r1
 800742a:	0005      	movs	r5, r0
 800742c:	5c98      	ldrb	r0, [r3, r2]
 800742e:	2400      	movs	r4, #0
 8007430:	4020      	ands	r0, r4
 8007432:	1c04      	adds	r4, r0, #0
 8007434:	1c28      	adds	r0, r5, #0
 8007436:	4320      	orrs	r0, r4
 8007438:	5498      	strb	r0, [r3, r2]
 800743a:	0a08      	lsrs	r0, r1, #8
 800743c:	24ff      	movs	r4, #255	@ 0xff
 800743e:	4020      	ands	r0, r4
 8007440:	0006      	movs	r6, r0
 8007442:	1898      	adds	r0, r3, r2
 8007444:	7844      	ldrb	r4, [r0, #1]
 8007446:	2500      	movs	r5, #0
 8007448:	402c      	ands	r4, r5
 800744a:	1c25      	adds	r5, r4, #0
 800744c:	1c34      	adds	r4, r6, #0
 800744e:	432c      	orrs	r4, r5
 8007450:	7044      	strb	r4, [r0, #1]
 8007452:	0c09      	lsrs	r1, r1, #16
 8007454:	20ff      	movs	r0, #255	@ 0xff
 8007456:	4008      	ands	r0, r1
 8007458:	189b      	adds	r3, r3, r2
 800745a:	789a      	ldrb	r2, [r3, #2]
 800745c:	2100      	movs	r1, #0
 800745e:	400a      	ands	r2, r1
 8007460:	1c11      	adds	r1, r2, #0
 8007462:	1c02      	adds	r2, r0, #0
 8007464:	430a      	orrs	r2, r1
 8007466:	709a      	strb	r2, [r3, #2]
		mavlink_update_checksum(rxmsg, c);
 8007468:	1dfb      	adds	r3, r7, #7
 800746a:	781a      	ldrb	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	0011      	movs	r1, r2
 8007470:	0018      	movs	r0, r3
 8007472:	f7ff fdf0 	bl	8007056 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	78db      	ldrb	r3, [r3, #3]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <mavlink_frame_char_buffer+0x33a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	220b      	movs	r2, #11
 8007482:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8007484:	e150      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	220c      	movs	r2, #12
 800748a:	70da      	strb	r2, [r3, #3]
		break;
 800748c:	e14c      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	330c      	adds	r3, #12
 8007492:	001a      	movs	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	791b      	ldrb	r3, [r3, #4]
 8007498:	1c59      	adds	r1, r3, #1
 800749a:	b2c8      	uxtb	r0, r1
 800749c:	68b9      	ldr	r1, [r7, #8]
 800749e:	7108      	strb	r0, [r1, #4]
 80074a0:	18d3      	adds	r3, r2, r3
 80074a2:	1dfa      	adds	r2, r7, #7
 80074a4:	7812      	ldrb	r2, [r2, #0]
 80074a6:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 80074a8:	1dfb      	adds	r3, r7, #7
 80074aa:	781a      	ldrb	r2, [r3, #0]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	0011      	movs	r1, r2
 80074b0:	0018      	movs	r0, r3
 80074b2:	f7ff fdd0 	bl	8007056 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	791a      	ldrb	r2, [r3, #4]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	78db      	ldrb	r3, [r3, #3]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d000      	beq.n	80074c4 <mavlink_frame_char_buffer+0x378>
 80074c2:	e12a      	b.n	800771a <mavlink_frame_char_buffer+0x5ce>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	220c      	movs	r2, #12
 80074c8:	70da      	strb	r2, [r3, #3]
		}
		break;
 80074ca:	e126      	b.n	800771a <mavlink_frame_char_buffer+0x5ce>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	7a5a      	ldrb	r2, [r3, #9]
 80074d0:	7a99      	ldrb	r1, [r3, #10]
 80074d2:	0209      	lsls	r1, r1, #8
 80074d4:	430a      	orrs	r2, r1
 80074d6:	7adb      	ldrb	r3, [r3, #11]
 80074d8:	041b      	lsls	r3, r3, #16
 80074da:	4313      	orrs	r3, r2
 80074dc:	0018      	movs	r0, r3
 80074de:	f7ff fdeb 	bl	80070b8 <mavlink_get_msg_entry>
 80074e2:	0003      	movs	r3, r0
 80074e4:	61bb      	str	r3, [r7, #24]
		if (e == NULL) {
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10b      	bne.n	8007504 <mavlink_frame_char_buffer+0x3b8>
			// Message not found in CRC_EXTRA table.
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	220e      	movs	r2, #14
 80074f0:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	1df9      	adds	r1, r7, #7
 80074f6:	238a      	movs	r3, #138	@ 0x8a
 80074f8:	005b      	lsls	r3, r3, #1
 80074fa:	7809      	ldrb	r1, [r1, #0]
 80074fc:	54d1      	strb	r1, [r2, r3]
			// zero-fill the packet to cope with short incoming packets
				if (e && status->packet_idx < e->max_msg_len) {
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
			}
		}
		break;
 80074fe:	e10e      	b.n	800771e <mavlink_frame_char_buffer+0x5d2>
 8007500:	08009710 	.word	0x08009710
			uint8_t crc_extra = e->crc_extra;
 8007504:	2117      	movs	r1, #23
 8007506:	187b      	adds	r3, r7, r1
 8007508:	69ba      	ldr	r2, [r7, #24]
 800750a:	7912      	ldrb	r2, [r2, #4]
 800750c:	701a      	strb	r2, [r3, #0]
			mavlink_update_checksum(rxmsg, crc_extra);
 800750e:	187b      	adds	r3, r7, r1
 8007510:	781a      	ldrb	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	0011      	movs	r1, r2
 8007516:	0018      	movs	r0, r3
 8007518:	f7ff fd9d 	bl	8007056 <mavlink_update_checksum>
			if (c != (rxmsg->checksum & 0xFF)) {
 800751c:	1dfb      	adds	r3, r7, #7
 800751e:	781a      	ldrb	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	7819      	ldrb	r1, [r3, #0]
 8007524:	785b      	ldrb	r3, [r3, #1]
 8007526:	021b      	lsls	r3, r3, #8
 8007528:	430b      	orrs	r3, r1
 800752a:	b29b      	uxth	r3, r3
 800752c:	0019      	movs	r1, r3
 800752e:	23ff      	movs	r3, #255	@ 0xff
 8007530:	400b      	ands	r3, r1
 8007532:	429a      	cmp	r2, r3
 8007534:	d003      	beq.n	800753e <mavlink_frame_char_buffer+0x3f2>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	220e      	movs	r2, #14
 800753a:	70da      	strb	r2, [r3, #3]
 800753c:	e002      	b.n	8007544 <mavlink_frame_char_buffer+0x3f8>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	220d      	movs	r2, #13
 8007542:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	1df9      	adds	r1, r7, #7
 8007548:	238a      	movs	r3, #138	@ 0x8a
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	7809      	ldrb	r1, [r1, #0]
 800754e:	54d1      	strb	r1, [r2, r3]
				if (e && status->packet_idx < e->max_msg_len) {
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d100      	bne.n	8007558 <mavlink_frame_char_buffer+0x40c>
 8007556:	e0e2      	b.n	800771e <mavlink_frame_char_buffer+0x5d2>
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	791a      	ldrb	r2, [r3, #4]
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	799b      	ldrb	r3, [r3, #6]
 8007560:	429a      	cmp	r2, r3
 8007562:	d300      	bcc.n	8007566 <mavlink_frame_char_buffer+0x41a>
 8007564:	e0db      	b.n	800771e <mavlink_frame_char_buffer+0x5d2>
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	330c      	adds	r3, #12
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	7912      	ldrb	r2, [r2, #4]
 800756e:	1898      	adds	r0, r3, r2
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	799b      	ldrb	r3, [r3, #6]
 8007574:	001a      	movs	r2, r3
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	791b      	ldrb	r3, [r3, #4]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	001a      	movs	r2, r3
 800757e:	2100      	movs	r1, #0
 8007580:	f001 ff30 	bl	80093e4 <memset>
		break;
 8007584:	e0cb      	b.n	800771e <mavlink_frame_char_buffer+0x5d2>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	78db      	ldrb	r3, [r3, #3]
 800758a:	2b0e      	cmp	r3, #14
 800758c:	d00c      	beq.n	80075a8 <mavlink_frame_char_buffer+0x45c>
 800758e:	1dfb      	adds	r3, r7, #7
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	7819      	ldrb	r1, [r3, #0]
 8007598:	785b      	ldrb	r3, [r3, #1]
 800759a:	021b      	lsls	r3, r3, #8
 800759c:	430b      	orrs	r3, r1
 800759e:	b29b      	uxth	r3, r3
 80075a0:	0a1b      	lsrs	r3, r3, #8
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d003      	beq.n	80075b0 <mavlink_frame_char_buffer+0x464>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	2202      	movs	r2, #2
 80075ac:	701a      	strb	r2, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <mavlink_frame_char_buffer+0x46a>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2201      	movs	r2, #1
 80075b4:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	1df9      	adds	r1, r7, #7
 80075ba:	2316      	movs	r3, #22
 80075bc:	33ff      	adds	r3, #255	@ 0xff
 80075be:	7809      	ldrb	r1, [r1, #0]
 80075c0:	54d1      	strb	r1, [r2, r3]

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	791b      	ldrb	r3, [r3, #4]
 80075c6:	001a      	movs	r2, r3
 80075c8:	2301      	movs	r3, #1
 80075ca:	4013      	ands	r3, r2
 80075cc:	d00e      	beq.n	80075ec <mavlink_frame_char_buffer+0x4a0>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	220f      	movs	r2, #15
 80075d2:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	220d      	movs	r2, #13
 80075d8:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d100      	bne.n	80075e4 <mavlink_frame_char_buffer+0x498>
 80075e2:	e09e      	b.n	8007722 <mavlink_frame_char_buffer+0x5d6>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2200      	movs	r2, #0
 80075e8:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 80075ea:	e09a      	b.n	8007722 <mavlink_frame_char_buffer+0x5d6>
			if (status->signing &&
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d021      	beq.n	8007638 <mavlink_frame_char_buffer+0x4ec>
			   	(status->signing->accept_unsigned_callback == NULL ||
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (status->signing &&
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d015      	beq.n	800762a <mavlink_frame_char_buffer+0x4de>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	691b      	ldr	r3, [r3, #16]
 8007602:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	7a59      	ldrb	r1, [r3, #9]
 8007608:	7a98      	ldrb	r0, [r3, #10]
 800760a:	0200      	lsls	r0, r0, #8
 800760c:	4301      	orrs	r1, r0
 800760e:	7adb      	ldrb	r3, [r3, #11]
 8007610:	041b      	lsls	r3, r3, #16
 8007612:	430b      	orrs	r3, r1
 8007614:	0019      	movs	r1, r3
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	0018      	movs	r0, r3
 800761a:	4790      	blx	r2
 800761c:	0003      	movs	r3, r0
 800761e:	001a      	movs	r2, r3
 8007620:	2301      	movs	r3, #1
 8007622:	4053      	eors	r3, r2
 8007624:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8007626:	2b00      	cmp	r3, #0
 8007628:	d006      	beq.n	8007638 <mavlink_frame_char_buffer+0x4ec>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	2b02      	cmp	r3, #2
 8007630:	d002      	beq.n	8007638 <mavlink_frame_char_buffer+0x4ec>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2203      	movs	r2, #3
 8007636:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2201      	movs	r2, #1
 800763c:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d100      	bne.n	8007646 <mavlink_frame_char_buffer+0x4fa>
 8007644:	e06d      	b.n	8007722 <mavlink_frame_char_buffer+0x5d6>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8007646:	2324      	movs	r3, #36	@ 0x24
 8007648:	33ff      	adds	r3, #255	@ 0xff
 800764a:	001a      	movs	r2, r3
 800764c:	68f9      	ldr	r1, [r7, #12]
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	0018      	movs	r0, r3
 8007652:	f001 fef3 	bl	800943c <memcpy>
		break;
 8007656:	e064      	b.n	8007722 <mavlink_frame_char_buffer+0x5d6>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	7b5b      	ldrb	r3, [r3, #13]
 800765c:	001a      	movs	r2, r3
 800765e:	230d      	movs	r3, #13
 8007660:	1a9a      	subs	r2, r3, r2
 8007662:	68f9      	ldr	r1, [r7, #12]
 8007664:	238b      	movs	r3, #139	@ 0x8b
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	188a      	adds	r2, r1, r2
 800766a:	18d3      	adds	r3, r2, r3
 800766c:	1dfa      	adds	r2, r7, #7
 800766e:	7812      	ldrb	r2, [r2, #0]
 8007670:	701a      	strb	r2, [r3, #0]
		status->signature_wait--;
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	7b5b      	ldrb	r3, [r3, #13]
 8007676:	3b01      	subs	r3, #1
 8007678:	b2da      	uxtb	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	7b5b      	ldrb	r3, [r3, #13]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d14f      	bne.n	8007726 <mavlink_frame_char_buffer+0x5da>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	6918      	ldr	r0, [r3, #16]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	251f      	movs	r5, #31
 8007690:	197c      	adds	r4, r7, r5
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	0019      	movs	r1, r3
 8007696:	f7ff fb4f 	bl	8006d38 <mavlink_signature_check>
 800769a:	0003      	movs	r3, r0
 800769c:	7023      	strb	r3, [r4, #0]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 800769e:	002c      	movs	r4, r5
 80076a0:	193b      	adds	r3, r7, r4
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	2201      	movs	r2, #1
 80076a6:	4053      	eors	r3, r2
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d018      	beq.n	80076e0 <mavlink_frame_char_buffer+0x594>
			   	(status->signing->accept_unsigned_callback &&
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (!sig_ok &&
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d013      	beq.n	80076e0 <mavlink_frame_char_buffer+0x594>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	7a59      	ldrb	r1, [r3, #9]
 80076c2:	7a98      	ldrb	r0, [r3, #10]
 80076c4:	0200      	lsls	r0, r0, #8
 80076c6:	4301      	orrs	r1, r0
 80076c8:	7adb      	ldrb	r3, [r3, #11]
 80076ca:	041b      	lsls	r3, r3, #16
 80076cc:	430b      	orrs	r3, r1
 80076ce:	0019      	movs	r1, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	0018      	movs	r0, r3
 80076d4:	4790      	blx	r2
 80076d6:	1e03      	subs	r3, r0, #0
			   	(status->signing->accept_unsigned_callback &&
 80076d8:	d002      	beq.n	80076e0 <mavlink_frame_char_buffer+0x594>
				// accepted via application level override
				sig_ok = true;
 80076da:	193b      	adds	r3, r7, r4
 80076dc:	2201      	movs	r2, #1
 80076de:	701a      	strb	r2, [r3, #0]
			}
			if (sig_ok) {
 80076e0:	231f      	movs	r3, #31
 80076e2:	18fb      	adds	r3, r7, r3
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <mavlink_frame_char_buffer+0x5a6>
				status->msg_received = MAVLINK_FRAMING_OK;
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2201      	movs	r2, #1
 80076ee:	701a      	strb	r2, [r3, #0]
 80076f0:	e002      	b.n	80076f8 <mavlink_frame_char_buffer+0x5ac>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2203      	movs	r2, #3
 80076f6:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2201      	movs	r2, #1
 80076fc:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d010      	beq.n	8007726 <mavlink_frame_char_buffer+0x5da>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8007704:	2324      	movs	r3, #36	@ 0x24
 8007706:	33ff      	adds	r3, #255	@ 0xff
 8007708:	001a      	movs	r2, r3
 800770a:	68f9      	ldr	r1, [r7, #12]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	0018      	movs	r0, r3
 8007710:	f001 fe94 	bl	800943c <memcpy>
			}
		}
		break;
 8007714:	e007      	b.n	8007726 <mavlink_frame_char_buffer+0x5da>
		break;
 8007716:	46c0      	nop			@ (mov r8, r8)
 8007718:	e006      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
		break;
 800771a:	46c0      	nop			@ (mov r8, r8)
 800771c:	e004      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
		break;
 800771e:	46c0      	nop			@ (mov r8, r8)
 8007720:	e002      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
		break;
 8007722:	46c0      	nop			@ (mov r8, r8)
 8007724:	e000      	b.n	8007728 <mavlink_frame_char_buffer+0x5dc>
		break;
 8007726:	46c0      	nop			@ (mov r8, r8)
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d110      	bne.n	8007752 <mavlink_frame_char_buffer+0x606>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	799a      	ldrb	r2, [r3, #6]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	891b      	ldrh	r3, [r3, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d102      	bne.n	8007746 <mavlink_frame_char_buffer+0x5fa>
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2200      	movs	r2, #0
 8007744:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	891b      	ldrh	r3, [r3, #8]
 800774a:	3301      	adds	r3, #1
 800774c:	b29a      	uxth	r2, r3
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <mavlink_frame_char_buffer+0x614>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	78da      	ldrb	r2, [r3, #3]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8007760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007762:	2b00      	cmp	r3, #0
 8007764:	d01a      	beq.n	800779c <mavlink_frame_char_buffer+0x650>
           r_mavlink_status->parse_state = status->parse_state;
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	78da      	ldrb	r2, [r3, #3]
 800776a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800776c:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	791a      	ldrb	r2, [r3, #4]
 8007772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007774:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	795b      	ldrb	r3, [r3, #5]
 800777a:	3301      	adds	r3, #1
 800777c:	b2da      	uxtb	r2, r3
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	891a      	ldrh	r2, [r3, #8]
 8007786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007788:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	789b      	ldrb	r3, [r3, #2]
 800778e:	001a      	movs	r2, r3
 8007790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007792:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	7b1a      	ldrb	r2, [r3, #12]
 8007798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779a:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2200      	movs	r2, #0
 80077a0:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d125      	bne.n	80077f6 <mavlink_frame_char_buffer+0x6aa>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d022      	beq.n	80077f6 <mavlink_frame_char_buffer+0x6aa>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	238a      	movs	r3, #138	@ 0x8a
 80077b4:	005b      	lsls	r3, r3, #1
 80077b6:	5cd3      	ldrb	r3, [r2, r3]
 80077b8:	b21a      	sxth	r2, r3
 80077ba:	68f9      	ldr	r1, [r7, #12]
 80077bc:	2316      	movs	r3, #22
 80077be:	33ff      	adds	r3, #255	@ 0xff
 80077c0:	5ccb      	ldrb	r3, [r1, r3]
 80077c2:	b21b      	sxth	r3, r3
 80077c4:	021b      	lsls	r3, r3, #8
 80077c6:	b21b      	sxth	r3, r3
 80077c8:	4313      	orrs	r3, r2
 80077ca:	b21b      	sxth	r3, r3
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	21ff      	movs	r1, #255	@ 0xff
 80077d2:	4011      	ands	r1, r2
 80077d4:	000c      	movs	r4, r1
 80077d6:	7819      	ldrb	r1, [r3, #0]
 80077d8:	2000      	movs	r0, #0
 80077da:	4001      	ands	r1, r0
 80077dc:	1c08      	adds	r0, r1, #0
 80077de:	1c21      	adds	r1, r4, #0
 80077e0:	4301      	orrs	r1, r0
 80077e2:	7019      	strb	r1, [r3, #0]
 80077e4:	0a12      	lsrs	r2, r2, #8
 80077e6:	b290      	uxth	r0, r2
 80077e8:	785a      	ldrb	r2, [r3, #1]
 80077ea:	2100      	movs	r1, #0
 80077ec:	400a      	ands	r2, r1
 80077ee:	1c11      	adds	r1, r2, #0
 80077f0:	1c02      	adds	r2, r0, #0
 80077f2:	430a      	orrs	r2, r1
 80077f4:	705a      	strb	r2, [r3, #1]
            }
	}

	return status->msg_received;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	781b      	ldrb	r3, [r3, #0]
}
 80077fa:	0018      	movs	r0, r3
 80077fc:	46bd      	mov	sp, r7
 80077fe:	b009      	add	sp, #36	@ 0x24
 8007800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007802:	46c0      	nop			@ (mov r8, r8)

08007804 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8007804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007806:	b087      	sub	sp, #28
 8007808:	af02      	add	r7, sp, #8
 800780a:	60ba      	str	r2, [r7, #8]
 800780c:	607b      	str	r3, [r7, #4]
 800780e:	240f      	movs	r4, #15
 8007810:	193b      	adds	r3, r7, r4
 8007812:	1c02      	adds	r2, r0, #0
 8007814:	701a      	strb	r2, [r3, #0]
 8007816:	260e      	movs	r6, #14
 8007818:	19bb      	adds	r3, r7, r6
 800781a:	1c0a      	adds	r2, r1, #0
 800781c:	701a      	strb	r2, [r3, #0]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 800781e:	0025      	movs	r5, r4
 8007820:	193b      	adds	r3, r7, r4
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	0018      	movs	r0, r3
 8007826:	f7ff fa6f 	bl	8006d08 <mavlink_get_channel_buffer>
 800782a:	0004      	movs	r4, r0
 800782c:	197b      	adds	r3, r7, r5
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	0018      	movs	r0, r3
 8007832:	f7ff fa55 	bl	8006ce0 <mavlink_get_channel_status>
 8007836:	68b9      	ldr	r1, [r7, #8]
 8007838:	19bb      	adds	r3, r7, r6
 800783a:	781a      	ldrb	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	000b      	movs	r3, r1
 8007842:	0001      	movs	r1, r0
 8007844:	0020      	movs	r0, r4
 8007846:	f7ff fc81 	bl	800714c <mavlink_frame_char_buffer>
 800784a:	0003      	movs	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 800784c:	0018      	movs	r0, r3
 800784e:	46bd      	mov	sp, r7
 8007850:	b005      	add	sp, #20
 8007852:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007854 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8007854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007856:	b089      	sub	sp, #36	@ 0x24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60ba      	str	r2, [r7, #8]
 800785c:	607b      	str	r3, [r7, #4]
 800785e:	230f      	movs	r3, #15
 8007860:	18fb      	adds	r3, r7, r3
 8007862:	1c02      	adds	r2, r0, #0
 8007864:	701a      	strb	r2, [r3, #0]
 8007866:	200e      	movs	r0, #14
 8007868:	183b      	adds	r3, r7, r0
 800786a:	1c0a      	adds	r2, r1, #0
 800786c:	701a      	strb	r2, [r3, #0]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 800786e:	261f      	movs	r6, #31
 8007870:	19bc      	adds	r4, r7, r6
 8007872:	687d      	ldr	r5, [r7, #4]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	183b      	adds	r3, r7, r0
 8007878:	7819      	ldrb	r1, [r3, #0]
 800787a:	230f      	movs	r3, #15
 800787c:	18fb      	adds	r3, r7, r3
 800787e:	7818      	ldrb	r0, [r3, #0]
 8007880:	002b      	movs	r3, r5
 8007882:	f7ff ffbf 	bl	8007804 <mavlink_frame_char>
 8007886:	0003      	movs	r3, r0
 8007888:	7023      	strb	r3, [r4, #0]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 800788a:	19bb      	adds	r3, r7, r6
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	2b02      	cmp	r3, #2
 8007890:	d003      	beq.n	800789a <mavlink_parse_char+0x46>
 8007892:	19bb      	adds	r3, r7, r6
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	2b03      	cmp	r3, #3
 8007898:	d129      	bne.n	80078ee <mavlink_parse_char+0x9a>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 800789a:	240f      	movs	r4, #15
 800789c:	193b      	adds	r3, r7, r4
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	0018      	movs	r0, r3
 80078a2:	f7ff fa31 	bl	8006d08 <mavlink_get_channel_buffer>
 80078a6:	0003      	movs	r3, r0
 80078a8:	61bb      	str	r3, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 80078aa:	193b      	adds	r3, r7, r4
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	0018      	movs	r0, r3
 80078b0:	f7ff fa16 	bl	8006ce0 <mavlink_get_channel_status>
 80078b4:	0003      	movs	r3, r0
 80078b6:	617b      	str	r3, [r7, #20]
	    _mav_parse_error(status);
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	0018      	movs	r0, r3
 80078bc:	f7ff fb96 	bl	8006fec <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2200      	movs	r2, #0
 80078c4:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2201      	movs	r2, #1
 80078ca:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 80078cc:	230e      	movs	r3, #14
 80078ce:	18fb      	adds	r3, r7, r3
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	2bfd      	cmp	r3, #253	@ 0xfd
 80078d4:	d109      	bne.n	80078ea <mavlink_parse_char+0x96>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2202      	movs	r2, #2
 80078da:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	2200      	movs	r2, #0
 80078e0:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	0018      	movs	r0, r3
 80078e6:	f7ff fb8f 	bl	8007008 <mavlink_start_checksum>
	    }
	    return 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	e002      	b.n	80078f4 <mavlink_parse_char+0xa0>
    }
    return msg_received;
 80078ee:	231f      	movs	r3, #31
 80078f0:	18fb      	adds	r3, r7, r3
 80078f2:	781b      	ldrb	r3, [r3, #0]
}
 80078f4:	0018      	movs	r0, r3
 80078f6:	46bd      	mov	sp, r7
 80078f8:	b009      	add	sp, #36	@ 0x24
 80078fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080078fc <mavlink_msg_chargingdock_bms_decode>:
 *
 * @param msg The message to decode
 * @param chargingdock_bms C-struct to decode the message contents into
 */
static inline void mavlink_msg_chargingdock_bms_decode(const mavlink_message_t* msg, mavlink_chargingdock_bms_t* chargingdock_bms)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b084      	sub	sp, #16
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
    mavlink_msg_chargingdock_bms_get_name(msg, chargingdock_bms->name);
    chargingdock_bms->SOC = mavlink_msg_chargingdock_bms_get_SOC(msg);
    chargingdock_bms->FullCharge = mavlink_msg_chargingdock_bms_get_FullCharge(msg);
    chargingdock_bms->TurnOffPower = mavlink_msg_chargingdock_bms_get_TurnOffPower(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_chargingdock_bms_LEN? msg->len : MAVLINK_MSG_ID_chargingdock_bms_LEN;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	78db      	ldrb	r3, [r3, #3]
 800790a:	220f      	movs	r2, #15
 800790c:	18ba      	adds	r2, r7, r2
 800790e:	b2d9      	uxtb	r1, r3
 8007910:	2944      	cmp	r1, #68	@ 0x44
 8007912:	d900      	bls.n	8007916 <mavlink_msg_chargingdock_bms_decode+0x1a>
 8007914:	2344      	movs	r3, #68	@ 0x44
 8007916:	7013      	strb	r3, [r2, #0]
        memset(chargingdock_bms, 0, MAVLINK_MSG_ID_chargingdock_bms_LEN);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	2244      	movs	r2, #68	@ 0x44
 800791c:	2100      	movs	r1, #0
 800791e:	0018      	movs	r0, r3
 8007920:	f001 fd60 	bl	80093e4 <memset>
    memcpy(chargingdock_bms, _MAV_PAYLOAD(msg), len);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	330c      	adds	r3, #12
 8007928:	0019      	movs	r1, r3
 800792a:	230f      	movs	r3, #15
 800792c:	18fb      	adds	r3, r7, r3
 800792e:	781a      	ldrb	r2, [r3, #0]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	0018      	movs	r0, r3
 8007934:	f001 fd82 	bl	800943c <memcpy>
#endif
}
 8007938:	46c0      	nop			@ (mov r8, r8)
 800793a:	46bd      	mov	sp, r7
 800793c:	b004      	add	sp, #16
 800793e:	bd80      	pop	{r7, pc}

08007940 <mavlink_process_tbf>:

#include "uart_irq.h"


void mavlink_process_tbf(mavlink_from_tobufi_t* char_infor)
{
 8007940:	b5b0      	push	{r4, r5, r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	if(uart_available_tobufi() > 0)
 8007948:	f001 fcda 	bl	8009300 <uart_available_tobufi>
 800794c:	1e03      	subs	r3, r0, #0
 800794e:	d020      	beq.n	8007992 <mavlink_process_tbf+0x52>
	{
		uint8_t read_data = uart_read_tobufi();
 8007950:	250f      	movs	r5, #15
 8007952:	197c      	adds	r4, r7, r5
 8007954:	f001 fcf2 	bl	800933c <uart_read_tobufi>
 8007958:	0003      	movs	r3, r0
 800795a:	7023      	strb	r3, [r4, #0]
		if (mavlink_parse_char(MAVLINK_COMM_1, read_data, &char_infor->rx_msg, &char_infor->status))
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	3325      	adds	r3, #37	@ 0x25
 8007962:	33ff      	adds	r3, #255	@ 0xff
 8007964:	0018      	movs	r0, r3
 8007966:	197b      	adds	r3, r7, r5
 8007968:	7819      	ldrb	r1, [r3, #0]
 800796a:	0003      	movs	r3, r0
 800796c:	2001      	movs	r0, #1
 800796e:	f7ff ff71 	bl	8007854 <mavlink_parse_char>
 8007972:	1e03      	subs	r3, r0, #0
 8007974:	d00d      	beq.n	8007992 <mavlink_process_tbf+0x52>
		{
			switch(char_infor->rx_msg.msgid)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	0a1b      	lsrs	r3, r3, #8
 800797c:	2bc8      	cmp	r3, #200	@ 0xc8
 800797e:	d108      	bne.n	8007992 <mavlink_process_tbf+0x52>
			{
				case MAVLINK_MSG_ID_chargingdock_bms:
				{
					mavlink_msg_chargingdock_bms_decode(&char_infor->rx_msg, &char_infor->char_infor);
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	333d      	adds	r3, #61	@ 0x3d
 8007986:	33ff      	adds	r3, #255	@ 0xff
 8007988:	0019      	movs	r1, r3
 800798a:	0010      	movs	r0, r2
 800798c:	f7ff ffb6 	bl	80078fc <mavlink_msg_chargingdock_bms_decode>
					break;
 8007990:	46c0      	nop			@ (mov r8, r8)
				}
			}
		}
	}
}
 8007992:	46c0      	nop			@ (mov r8, r8)
 8007994:	46bd      	mov	sp, r7
 8007996:	b004      	add	sp, #16
 8007998:	bdb0      	pop	{r4, r5, r7, pc}

0800799a <mavlink_init_tbf>:

void mavlink_init_tbf(void)
{
 800799a:	b580      	push	{r7, lr}
 800799c:	af00      	add	r7, sp, #0
	uart_init_tobufi();
 800799e:	f001 fcf9 	bl	8009394 <uart_init_tobufi>
}
 80079a2:	46c0      	nop			@ (mov r8, r8)
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <pulse_in_period>:
#define CRITICAL_HALF_PERIOD_MS 200   // -> 50% duty, 400 ms full period
/* USER CODE END PD */
/* ---------- Helpers ---------- */
// Helper: compute ON window in a repeating period
static inline uint8_t pulse_in_period(uint32_t now, uint32_t t0, uint16_t period_ms, uint16_t on_ms)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	0019      	movs	r1, r3
 80079b4:	1dbb      	adds	r3, r7, #6
 80079b6:	801a      	strh	r2, [r3, #0]
 80079b8:	1d3b      	adds	r3, r7, #4
 80079ba:	1c0a      	adds	r2, r1, #0
 80079bc:	801a      	strh	r2, [r3, #0]
    uint32_t phase = (now - t0) % period_ms; // unsigned math -> overflow-safe
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	1ad2      	subs	r2, r2, r3
 80079c4:	1dbb      	adds	r3, r7, #6
 80079c6:	881b      	ldrh	r3, [r3, #0]
 80079c8:	0019      	movs	r1, r3
 80079ca:	0010      	movs	r0, r2
 80079cc:	f7f8 fc22 	bl	8000214 <__aeabi_uidivmod>
 80079d0:	000b      	movs	r3, r1
 80079d2:	617b      	str	r3, [r7, #20]
    return (phase < on_ms) ? 1u : 0u;
 80079d4:	1d3b      	adds	r3, r7, #4
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d201      	bcs.n	80079e2 <pulse_in_period+0x3a>
 80079de:	2301      	movs	r3, #1
 80079e0:	e000      	b.n	80079e4 <pulse_in_period+0x3c>
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	0018      	movs	r0, r3
 80079e6:	46bd      	mov	sp, r7
 80079e8:	b006      	add	sp, #24
 80079ea:	bd80      	pop	{r7, pc}

080079ec <set_pin_if_changed>:

// Helper: write only when a pin actually needs to change
static inline void set_pin_if_changed(GPIO_TypeDef *port, uint16_t pin, uint8_t on, uint8_t *cached)
{
 80079ec:	b5b0      	push	{r4, r5, r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	0008      	movs	r0, r1
 80079f6:	0011      	movs	r1, r2
 80079f8:	607b      	str	r3, [r7, #4]
 80079fa:	250a      	movs	r5, #10
 80079fc:	197b      	adds	r3, r7, r5
 80079fe:	1c02      	adds	r2, r0, #0
 8007a00:	801a      	strh	r2, [r3, #0]
 8007a02:	2409      	movs	r4, #9
 8007a04:	193b      	adds	r3, r7, r4
 8007a06:	1c0a      	adds	r2, r1, #0
 8007a08:	701a      	strb	r2, [r3, #0]
    if (on != *cached)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	781b      	ldrb	r3, [r3, #0]
 8007a0e:	193a      	adds	r2, r7, r4
 8007a10:	7812      	ldrb	r2, [r2, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d00f      	beq.n	8007a36 <set_pin_if_changed+0x4a>
    {
        HAL_GPIO_WritePin(port, pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007a16:	193b      	adds	r3, r7, r4
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	1e5a      	subs	r2, r3, #1
 8007a1c:	4193      	sbcs	r3, r2
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	001a      	movs	r2, r3
 8007a22:	197b      	adds	r3, r7, r5
 8007a24:	8819      	ldrh	r1, [r3, #0]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	0018      	movs	r0, r3
 8007a2a:	f7fa fd79 	bl	8002520 <HAL_GPIO_WritePin>
        *cached = on;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	193a      	adds	r2, r7, r4
 8007a32:	7812      	ldrb	r2, [r2, #0]
 8007a34:	701a      	strb	r2, [r3, #0]
    }
}
 8007a36:	46c0      	nop			@ (mov r8, r8)
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	b004      	add	sp, #16
 8007a3c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007a40 <update_leds_by_mav_state>:

static void update_leds_by_mav_state(uint8_t state, uint32_t now)
{
 8007a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	0002      	movs	r2, r0
 8007a48:	6039      	str	r1, [r7, #0]
 8007a4a:	1dfb      	adds	r3, r7, #7
 8007a4c:	701a      	strb	r2, [r3, #0]

    // Track when we entered the current state to restart patterns cleanly
    static uint8_t  last_state      = 0xFF;
    static uint32_t state_t0        = 0;

    if (state != last_state)
 8007a4e:	4b91      	ldr	r3, [pc, #580]	@ (8007c94 <update_leds_by_mav_state+0x254>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	1dfa      	adds	r2, r7, #7
 8007a54:	7812      	ldrb	r2, [r2, #0]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d006      	beq.n	8007a68 <update_leds_by_mav_state+0x28>
    {
        last_state = state;
 8007a5a:	4b8e      	ldr	r3, [pc, #568]	@ (8007c94 <update_leds_by_mav_state+0x254>)
 8007a5c:	1dfa      	adds	r2, r7, #7
 8007a5e:	7812      	ldrb	r2, [r2, #0]
 8007a60:	701a      	strb	r2, [r3, #0]
        state_t0   = now;
 8007a62:	4b8d      	ldr	r3, [pc, #564]	@ (8007c98 <update_leds_by_mav_state+0x258>)
 8007a64:	683a      	ldr	r2, [r7, #0]
 8007a66:	601a      	str	r2, [r3, #0]
    }

    // Front LEDs: constant according to your original logic
    set_pin_if_changed(gpio, LED_FRONT_GEAR_GREEN_Pin, 1, &last_front_green);
 8007a68:	4b8c      	ldr	r3, [pc, #560]	@ (8007c9c <update_leds_by_mav_state+0x25c>)
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	4b8c      	ldr	r3, [pc, #560]	@ (8007ca0 <update_leds_by_mav_state+0x260>)
 8007a6e:	2280      	movs	r2, #128	@ 0x80
 8007a70:	0151      	lsls	r1, r2, #5
 8007a72:	2201      	movs	r2, #1
 8007a74:	f7ff ffba 	bl	80079ec <set_pin_if_changed>
    set_pin_if_changed(gpio, LED_FRONT_GEAR_RED_Pin,   0, &last_front_red);
 8007a78:	4b88      	ldr	r3, [pc, #544]	@ (8007c9c <update_leds_by_mav_state+0x25c>)
 8007a7a:	6818      	ldr	r0, [r3, #0]
 8007a7c:	4b89      	ldr	r3, [pc, #548]	@ (8007ca4 <update_leds_by_mav_state+0x264>)
 8007a7e:	2280      	movs	r2, #128	@ 0x80
 8007a80:	0111      	lsls	r1, r2, #4
 8007a82:	2200      	movs	r2, #0
 8007a84:	f7ff ffb2 	bl	80079ec <set_pin_if_changed>

    // Compute desired rear LED states for this frame
    uint8_t rg = last_rear_green;  // default: keep previous if we don't handle the state
 8007a88:	2317      	movs	r3, #23
 8007a8a:	18fb      	adds	r3, r7, r3
 8007a8c:	4a86      	ldr	r2, [pc, #536]	@ (8007ca8 <update_leds_by_mav_state+0x268>)
 8007a8e:	7812      	ldrb	r2, [r2, #0]
 8007a90:	701a      	strb	r2, [r3, #0]
    uint8_t rr = last_rear_red;
 8007a92:	2316      	movs	r3, #22
 8007a94:	18fb      	adds	r3, r7, r3
 8007a96:	4a85      	ldr	r2, [pc, #532]	@ (8007cac <update_leds_by_mav_state+0x26c>)
 8007a98:	7812      	ldrb	r2, [r2, #0]
 8007a9a:	701a      	strb	r2, [r3, #0]
    /* ---------- OVERRIDE: DISARM + TILT ---------- */
    do {
        static uint8_t tilt_override_last = 0;

        const uint8_t is_armed = (pLED.hb.base_mode & MAV_MODE_FLAG_SAFETY_ARMED) ? 1 : 0;
 8007a9c:	4a84      	ldr	r2, [pc, #528]	@ (8007cb0 <update_leds_by_mav_state+0x270>)
 8007a9e:	23a1      	movs	r3, #161	@ 0xa1
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	5cd2      	ldrb	r2, [r2, r3]
 8007aa4:	2315      	movs	r3, #21
 8007aa6:	18fb      	adds	r3, r7, r3
 8007aa8:	09d2      	lsrs	r2, r2, #7
 8007aaa:	701a      	strb	r2, [r3, #0]

        const uint8_t att_fresh = (pLED.att_last_ms != 0) && ((now - pLED.att_last_ms) <= ATT_VALID_MS);
 8007aac:	4a80      	ldr	r2, [pc, #512]	@ (8007cb0 <update_leds_by_mav_state+0x270>)
 8007aae:	23b2      	movs	r3, #178	@ 0xb2
 8007ab0:	005b      	lsls	r3, r3, #1
 8007ab2:	58d3      	ldr	r3, [r2, r3]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <update_leds_by_mav_state+0x90>
 8007ab8:	4a7d      	ldr	r2, [pc, #500]	@ (8007cb0 <update_leds_by_mav_state+0x270>)
 8007aba:	23b2      	movs	r3, #178	@ 0xb2
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	58d3      	ldr	r3, [r2, r3]
 8007ac0:	683a      	ldr	r2, [r7, #0]
 8007ac2:	1ad2      	subs	r2, r2, r3
 8007ac4:	23fa      	movs	r3, #250	@ 0xfa
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d801      	bhi.n	8007ad0 <update_leds_by_mav_state+0x90>
 8007acc:	2201      	movs	r2, #1
 8007ace:	e000      	b.n	8007ad2 <update_leds_by_mav_state+0x92>
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	2114      	movs	r1, #20
 8007ad4:	187b      	adds	r3, r7, r1
 8007ad6:	701a      	strb	r2, [r3, #0]

        const float tilt_thresh_rad = DISARM_TILT_DEG * (float)M_PI / 180.0f;
 8007ad8:	4b76      	ldr	r3, [pc, #472]	@ (8007cb4 <update_leds_by_mav_state+0x274>)
 8007ada:	613b      	str	r3, [r7, #16]
        const uint8_t is_tilted = (att_fresh &&
                                  (fabsf(pLED.att.roll)  > tilt_thresh_rad ||
                                   fabsf(pLED.att.pitch) > tilt_thresh_rad)) ? 1 : 0;
 8007adc:	187b      	adds	r3, r7, r1
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d019      	beq.n	8007b18 <update_leds_by_mav_state+0xd8>
                                  (fabsf(pLED.att.roll)  > tilt_thresh_rad ||
 8007ae4:	4a72      	ldr	r2, [pc, #456]	@ (8007cb0 <update_leds_by_mav_state+0x270>)
 8007ae6:	23a6      	movs	r3, #166	@ 0xa6
 8007ae8:	005b      	lsls	r3, r3, #1
 8007aea:	58d3      	ldr	r3, [r2, r3]
 8007aec:	005b      	lsls	r3, r3, #1
 8007aee:	085b      	lsrs	r3, r3, #1
                                   fabsf(pLED.att.pitch) > tilt_thresh_rad)) ? 1 : 0;
 8007af0:	1c19      	adds	r1, r3, #0
 8007af2:	6938      	ldr	r0, [r7, #16]
 8007af4:	f7f8 fc90 	bl	8000418 <__aeabi_fcmplt>
 8007af8:	1e03      	subs	r3, r0, #0
 8007afa:	d10b      	bne.n	8007b14 <update_leds_by_mav_state+0xd4>
 8007afc:	4a6c      	ldr	r2, [pc, #432]	@ (8007cb0 <update_leds_by_mav_state+0x270>)
 8007afe:	23a8      	movs	r3, #168	@ 0xa8
 8007b00:	005b      	lsls	r3, r3, #1
 8007b02:	58d3      	ldr	r3, [r2, r3]
 8007b04:	005b      	lsls	r3, r3, #1
 8007b06:	085b      	lsrs	r3, r3, #1
                                  (fabsf(pLED.att.roll)  > tilt_thresh_rad ||
 8007b08:	1c19      	adds	r1, r3, #0
 8007b0a:	6938      	ldr	r0, [r7, #16]
 8007b0c:	f7f8 fc84 	bl	8000418 <__aeabi_fcmplt>
 8007b10:	1e03      	subs	r3, r0, #0
 8007b12:	d001      	beq.n	8007b18 <update_leds_by_mav_state+0xd8>
                                   fabsf(pLED.att.pitch) > tilt_thresh_rad)) ? 1 : 0;
 8007b14:	2201      	movs	r2, #1
 8007b16:	e000      	b.n	8007b1a <update_leds_by_mav_state+0xda>
 8007b18:	2200      	movs	r2, #0
        const uint8_t is_tilted = (att_fresh &&
 8007b1a:	210f      	movs	r1, #15
 8007b1c:	187b      	adds	r3, r7, r1
 8007b1e:	701a      	strb	r2, [r3, #0]

        const uint8_t tilt_override = (!is_armed && is_tilted) ? 1 : 0;
 8007b20:	2315      	movs	r3, #21
 8007b22:	18fb      	adds	r3, r7, r3
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d105      	bne.n	8007b36 <update_leds_by_mav_state+0xf6>
 8007b2a:	187b      	adds	r3, r7, r1
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d001      	beq.n	8007b36 <update_leds_by_mav_state+0xf6>
 8007b32:	2201      	movs	r2, #1
 8007b34:	e000      	b.n	8007b38 <update_leds_by_mav_state+0xf8>
 8007b36:	2200      	movs	r2, #0
 8007b38:	210e      	movs	r1, #14
 8007b3a:	187b      	adds	r3, r7, r1
 8007b3c:	701a      	strb	r2, [r3, #0]

        if (tilt_override != tilt_override_last)
 8007b3e:	4b5e      	ldr	r3, [pc, #376]	@ (8007cb8 <update_leds_by_mav_state+0x278>)
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	187a      	adds	r2, r7, r1
 8007b44:	7812      	ldrb	r2, [r2, #0]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d006      	beq.n	8007b58 <update_leds_by_mav_state+0x118>
        {
            state_t0 = now;
 8007b4a:	4b53      	ldr	r3, [pc, #332]	@ (8007c98 <update_leds_by_mav_state+0x258>)
 8007b4c:	683a      	ldr	r2, [r7, #0]
 8007b4e:	601a      	str	r2, [r3, #0]
            tilt_override_last = tilt_override;
 8007b50:	4b59      	ldr	r3, [pc, #356]	@ (8007cb8 <update_leds_by_mav_state+0x278>)
 8007b52:	187a      	adds	r2, r7, r1
 8007b54:	7812      	ldrb	r2, [r2, #0]
 8007b56:	701a      	strb	r2, [r3, #0]
        }

        if (tilt_override)
 8007b58:	230e      	movs	r3, #14
 8007b5a:	18fb      	adds	r3, r7, r3
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d023      	beq.n	8007baa <update_leds_by_mav_state+0x16a>
        {
            rg = 0;
 8007b62:	2517      	movs	r5, #23
 8007b64:	197b      	adds	r3, r7, r5
 8007b66:	2200      	movs	r2, #0
 8007b68:	701a      	strb	r2, [r3, #0]
            rr = pulse_in_period(now, state_t0, 2 * CRITICAL_HALF_PERIOD_MS, CRITICAL_HALF_PERIOD_MS);
 8007b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8007c98 <update_leds_by_mav_state+0x258>)
 8007b6c:	6819      	ldr	r1, [r3, #0]
 8007b6e:	2616      	movs	r6, #22
 8007b70:	19bc      	adds	r4, r7, r6
 8007b72:	23c8      	movs	r3, #200	@ 0xc8
 8007b74:	005a      	lsls	r2, r3, #1
 8007b76:	6838      	ldr	r0, [r7, #0]
 8007b78:	23c8      	movs	r3, #200	@ 0xc8
 8007b7a:	f7ff ff15 	bl	80079a8 <pulse_in_period>
 8007b7e:	0003      	movs	r3, r0
 8007b80:	7023      	strb	r3, [r4, #0]
            set_pin_if_changed(gpio, LED_REAR_GEAR_GREEN_Pin, rg, &last_rear_green);
 8007b82:	4b46      	ldr	r3, [pc, #280]	@ (8007c9c <update_leds_by_mav_state+0x25c>)
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	4c48      	ldr	r4, [pc, #288]	@ (8007ca8 <update_leds_by_mav_state+0x268>)
 8007b88:	197b      	adds	r3, r7, r5
 8007b8a:	781a      	ldrb	r2, [r3, #0]
 8007b8c:	2380      	movs	r3, #128	@ 0x80
 8007b8e:	00d9      	lsls	r1, r3, #3
 8007b90:	0023      	movs	r3, r4
 8007b92:	f7ff ff2b 	bl	80079ec <set_pin_if_changed>
            set_pin_if_changed(gpio, LED_REAR_GEAR_RED_Pin,   rr, &last_rear_red);
 8007b96:	4b41      	ldr	r3, [pc, #260]	@ (8007c9c <update_leds_by_mav_state+0x25c>)
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	4944      	ldr	r1, [pc, #272]	@ (8007cac <update_leds_by_mav_state+0x26c>)
 8007b9c:	19bb      	adds	r3, r7, r6
 8007b9e:	781a      	ldrb	r2, [r3, #0]
 8007ba0:	000b      	movs	r3, r1
 8007ba2:	2104      	movs	r1, #4
 8007ba4:	f7ff ff22 	bl	80079ec <set_pin_if_changed>
            return;
 8007ba8:	e071      	b.n	8007c8e <update_leds_by_mav_state+0x24e>
        }
    } while (0);
    /* --------------------------------------------- */
    switch (state)
 8007baa:	1dfb      	adds	r3, r7, #7
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b04      	cmp	r3, #4
 8007bb0:	d028      	beq.n	8007c04 <update_leds_by_mav_state+0x1c4>
 8007bb2:	dc42      	bgt.n	8007c3a <update_leds_by_mav_state+0x1fa>
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d002      	beq.n	8007bbe <update_leds_by_mav_state+0x17e>
 8007bb8:	2b03      	cmp	r3, #3
 8007bba:	d013      	beq.n	8007be4 <update_leds_by_mav_state+0x1a4>
 8007bbc:	e03d      	b.n	8007c3a <update_leds_by_mav_state+0x1fa>
    {
		case MAV_STATE_UNINIT:
		{
			// Both rear blink together at 300 ms on/off (3.33 Hz)
			rg = rr = pulse_in_period(now, state_t0, 2 * UNINIT_HALF_PERIOD_MS, UNINIT_HALF_PERIOD_MS);
 8007bbe:	4b36      	ldr	r3, [pc, #216]	@ (8007c98 <update_leds_by_mav_state+0x258>)
 8007bc0:	6819      	ldr	r1, [r3, #0]
 8007bc2:	2516      	movs	r5, #22
 8007bc4:	197c      	adds	r4, r7, r5
 8007bc6:	2396      	movs	r3, #150	@ 0x96
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	2296      	movs	r2, #150	@ 0x96
 8007bcc:	0092      	lsls	r2, r2, #2
 8007bce:	6838      	ldr	r0, [r7, #0]
 8007bd0:	f7ff feea 	bl	80079a8 <pulse_in_period>
 8007bd4:	0003      	movs	r3, r0
 8007bd6:	7023      	strb	r3, [r4, #0]
 8007bd8:	2317      	movs	r3, #23
 8007bda:	18fb      	adds	r3, r7, r3
 8007bdc:	197a      	adds	r2, r7, r5
 8007bde:	7812      	ldrb	r2, [r2, #0]
 8007be0:	701a      	strb	r2, [r3, #0]
			break;
 8007be2:	e03f      	b.n	8007c64 <update_leds_by_mav_state+0x224>
		}
		case MAV_STATE_STANDBY:
		{
			// Short green pulse (50 ms) every 1050 ms, red off
			rg = pulse_in_period(now, state_t0, STANDBY_PERIOD_MS, STANDBY_ON_MS);
 8007be4:	4b2c      	ldr	r3, [pc, #176]	@ (8007c98 <update_leds_by_mav_state+0x258>)
 8007be6:	6819      	ldr	r1, [r3, #0]
 8007be8:	2317      	movs	r3, #23
 8007bea:	18fc      	adds	r4, r7, r3
 8007bec:	4a33      	ldr	r2, [pc, #204]	@ (8007cbc <update_leds_by_mav_state+0x27c>)
 8007bee:	6838      	ldr	r0, [r7, #0]
 8007bf0:	2332      	movs	r3, #50	@ 0x32
 8007bf2:	f7ff fed9 	bl	80079a8 <pulse_in_period>
 8007bf6:	0003      	movs	r3, r0
 8007bf8:	7023      	strb	r3, [r4, #0]
			rr = 0;
 8007bfa:	2316      	movs	r3, #22
 8007bfc:	18fb      	adds	r3, r7, r3
 8007bfe:	2200      	movs	r2, #0
 8007c00:	701a      	strb	r2, [r3, #0]
			break;
 8007c02:	e02f      	b.n	8007c64 <update_leds_by_mav_state+0x224>
		}
		case MAV_STATE_ACTIVE:
		{
			// Alternate green/red every 300 ms
			uint8_t first_half = pulse_in_period(now, state_t0, 2 * ACTIVE_HALF_PERIOD_MS, ACTIVE_HALF_PERIOD_MS);
 8007c04:	4b24      	ldr	r3, [pc, #144]	@ (8007c98 <update_leds_by_mav_state+0x258>)
 8007c06:	6819      	ldr	r1, [r3, #0]
 8007c08:	250d      	movs	r5, #13
 8007c0a:	197c      	adds	r4, r7, r5
 8007c0c:	23fa      	movs	r3, #250	@ 0xfa
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	22fa      	movs	r2, #250	@ 0xfa
 8007c12:	0092      	lsls	r2, r2, #2
 8007c14:	6838      	ldr	r0, [r7, #0]
 8007c16:	f7ff fec7 	bl	80079a8 <pulse_in_period>
 8007c1a:	0003      	movs	r3, r0
 8007c1c:	7023      	strb	r3, [r4, #0]
			rg = first_half;
 8007c1e:	2317      	movs	r3, #23
 8007c20:	18fb      	adds	r3, r7, r3
 8007c22:	197a      	adds	r2, r7, r5
 8007c24:	7812      	ldrb	r2, [r2, #0]
 8007c26:	701a      	strb	r2, [r3, #0]
			rr = !first_half;
 8007c28:	197b      	adds	r3, r7, r5
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	425a      	negs	r2, r3
 8007c2e:	4153      	adcs	r3, r2
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	2316      	movs	r3, #22
 8007c34:	18fb      	adds	r3, r7, r3
 8007c36:	701a      	strb	r2, [r3, #0]
			break;
 8007c38:	e014      	b.n	8007c64 <update_leds_by_mav_state+0x224>
		}
		default:
			if (state >= MAV_STATE_CRITICAL)
 8007c3a:	1dfb      	adds	r3, r7, #7
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	2b04      	cmp	r3, #4
 8007c40:	d90f      	bls.n	8007c62 <update_leds_by_mav_state+0x222>
			{
				// Red blinks at 5 Hz (200 ms on/off), green off
				rg = 0;
 8007c42:	2317      	movs	r3, #23
 8007c44:	18fb      	adds	r3, r7, r3
 8007c46:	2200      	movs	r2, #0
 8007c48:	701a      	strb	r2, [r3, #0]
				rr = pulse_in_period(now, state_t0, 2 * CRITICAL_HALF_PERIOD_MS, CRITICAL_HALF_PERIOD_MS);
 8007c4a:	4b13      	ldr	r3, [pc, #76]	@ (8007c98 <update_leds_by_mav_state+0x258>)
 8007c4c:	6819      	ldr	r1, [r3, #0]
 8007c4e:	2316      	movs	r3, #22
 8007c50:	18fc      	adds	r4, r7, r3
 8007c52:	23c8      	movs	r3, #200	@ 0xc8
 8007c54:	005a      	lsls	r2, r3, #1
 8007c56:	6838      	ldr	r0, [r7, #0]
 8007c58:	23c8      	movs	r3, #200	@ 0xc8
 8007c5a:	f7ff fea5 	bl	80079a8 <pulse_in_period>
 8007c5e:	0003      	movs	r3, r0
 8007c60:	7023      	strb	r3, [r4, #0]
			}
			// else: leave rear LEDs as they were (matches your original 'default' behavior)
			break;
 8007c62:	46c0      	nop			@ (mov r8, r8)
    }

    // Push rear outputs (only if they changed)
    set_pin_if_changed(gpio, LED_REAR_GEAR_GREEN_Pin, rg, &last_rear_green);
 8007c64:	4b0d      	ldr	r3, [pc, #52]	@ (8007c9c <update_leds_by_mav_state+0x25c>)
 8007c66:	6818      	ldr	r0, [r3, #0]
 8007c68:	4c0f      	ldr	r4, [pc, #60]	@ (8007ca8 <update_leds_by_mav_state+0x268>)
 8007c6a:	2317      	movs	r3, #23
 8007c6c:	18fb      	adds	r3, r7, r3
 8007c6e:	781a      	ldrb	r2, [r3, #0]
 8007c70:	2380      	movs	r3, #128	@ 0x80
 8007c72:	00d9      	lsls	r1, r3, #3
 8007c74:	0023      	movs	r3, r4
 8007c76:	f7ff feb9 	bl	80079ec <set_pin_if_changed>
    set_pin_if_changed(gpio, LED_REAR_GEAR_RED_Pin,   rr, &last_rear_red);
 8007c7a:	4b08      	ldr	r3, [pc, #32]	@ (8007c9c <update_leds_by_mav_state+0x25c>)
 8007c7c:	6818      	ldr	r0, [r3, #0]
 8007c7e:	490b      	ldr	r1, [pc, #44]	@ (8007cac <update_leds_by_mav_state+0x26c>)
 8007c80:	2316      	movs	r3, #22
 8007c82:	18fb      	adds	r3, r7, r3
 8007c84:	781a      	ldrb	r2, [r3, #0]
 8007c86:	000b      	movs	r3, r1
 8007c88:	2104      	movs	r1, #4
 8007c8a:	f7ff feaf 	bl	80079ec <set_pin_if_changed>
}
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	b007      	add	sp, #28
 8007c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c94:	20000009 	.word	0x20000009
 8007c98:	20000990 	.word	0x20000990
 8007c9c:	2000098c 	.word	0x2000098c
 8007ca0:	2000000a 	.word	0x2000000a
 8007ca4:	2000000b 	.word	0x2000000b
 8007ca8:	2000000c 	.word	0x2000000c
 8007cac:	2000000d 	.word	0x2000000d
 8007cb0:	20000824 	.word	0x20000824
 8007cb4:	3f32b8c3 	.word	0x3f32b8c3
 8007cb8:	20000994 	.word	0x20000994
 8007cbc:	0000041a 	.word	0x0000041a

08007cc0 <led_process>:


void led_process(void)
{
 8007cc0:	b5b0      	push	{r4, r5, r7, lr}
 8007cc2:	af00      	add	r7, sp, #0
	mavlink_process(&pLED, HAL_GetTick());
 8007cc4:	f7fa f8fa 	bl	8001ebc <HAL_GetTick>
 8007cc8:	0002      	movs	r2, r0
 8007cca:	4b09      	ldr	r3, [pc, #36]	@ (8007cf0 <led_process+0x30>)
 8007ccc:	0011      	movs	r1, r2
 8007cce:	0018      	movs	r0, r3
 8007cd0:	f001 f9c8 	bl	8009064 <mavlink_process>
	update_leds_by_mav_state(pLED.hb.system_status, HAL_GetTick());
 8007cd4:	4a06      	ldr	r2, [pc, #24]	@ (8007cf0 <led_process+0x30>)
 8007cd6:	2344      	movs	r3, #68	@ 0x44
 8007cd8:	33ff      	adds	r3, #255	@ 0xff
 8007cda:	5cd4      	ldrb	r4, [r2, r3]
 8007cdc:	f7fa f8ee 	bl	8001ebc <HAL_GetTick>
 8007ce0:	0003      	movs	r3, r0
 8007ce2:	0019      	movs	r1, r3
 8007ce4:	0020      	movs	r0, r4
 8007ce6:	f7ff feab 	bl	8007a40 <update_leds_by_mav_state>
}
 8007cea:	46c0      	nop			@ (mov r8, r8)
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bdb0      	pop	{r4, r5, r7, pc}
 8007cf0:	20000824 	.word	0x20000824

08007cf4 <led_controller_init>:

void led_controller_init(GPIO_TypeDef* gpio_x)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
	gpio = gpio_x;
 8007cfc:	4b04      	ldr	r3, [pc, #16]	@ (8007d10 <led_controller_init+0x1c>)
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	601a      	str	r2, [r3, #0]
	mavlink_init();
 8007d02:	f001 f9ed 	bl	80090e0 <mavlink_init>
}
 8007d06:	46c0      	nop			@ (mov r8, r8)
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	b002      	add	sp, #8
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	46c0      	nop			@ (mov r8, r8)
 8007d10:	2000098c 	.word	0x2000098c

08007d14 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	0002      	movs	r2, r0
 8007d1c:	6039      	str	r1, [r7, #0]
 8007d1e:	1dfb      	adds	r3, r7, #7
 8007d20:	701a      	strb	r2, [r3, #0]
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	b2d9      	uxtb	r1, r3
 8007d28:	200f      	movs	r0, #15
 8007d2a:	183b      	adds	r3, r7, r0
 8007d2c:	1dfa      	adds	r2, r7, #7
 8007d2e:	7812      	ldrb	r2, [r2, #0]
 8007d30:	404a      	eors	r2, r1
 8007d32:	701a      	strb	r2, [r3, #0]
        tmp ^= (tmp<<4);
 8007d34:	0001      	movs	r1, r0
 8007d36:	187b      	adds	r3, r7, r1
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	b25b      	sxtb	r3, r3
 8007d3c:	011b      	lsls	r3, r3, #4
 8007d3e:	b25a      	sxtb	r2, r3
 8007d40:	187b      	adds	r3, r7, r1
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	b25b      	sxtb	r3, r3
 8007d46:	4053      	eors	r3, r2
 8007d48:	b25a      	sxtb	r2, r3
 8007d4a:	187b      	adds	r3, r7, r1
 8007d4c:	701a      	strb	r2, [r3, #0]
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	881b      	ldrh	r3, [r3, #0]
 8007d52:	0a1b      	lsrs	r3, r3, #8
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	b21a      	sxth	r2, r3
 8007d58:	187b      	adds	r3, r7, r1
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	b21b      	sxth	r3, r3
 8007d5e:	021b      	lsls	r3, r3, #8
 8007d60:	b21b      	sxth	r3, r3
 8007d62:	4053      	eors	r3, r2
 8007d64:	b21a      	sxth	r2, r3
 8007d66:	187b      	adds	r3, r7, r1
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	b21b      	sxth	r3, r3
 8007d6c:	00db      	lsls	r3, r3, #3
 8007d6e:	b21b      	sxth	r3, r3
 8007d70:	4053      	eors	r3, r2
 8007d72:	b21a      	sxth	r2, r3
 8007d74:	187b      	adds	r3, r7, r1
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	091b      	lsrs	r3, r3, #4
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	b21b      	sxth	r3, r3
 8007d7e:	4053      	eors	r3, r2
 8007d80:	b21b      	sxth	r3, r3
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	801a      	strh	r2, [r3, #0]
}
 8007d88:	46c0      	nop			@ (mov r8, r8)
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	b004      	add	sp, #16
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <crc_init>:
 * @brief Initialize the buffer for the MCRF4XX CRC16
 *
 * @param crcAccum the 16 bit MCRF4XX CRC16
 */
static inline void crc_init(uint16_t* crcAccum)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
        *crcAccum = X25_INIT_CRC;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	4252      	negs	r2, r2
 8007d9e:	801a      	strh	r2, [r3, #0]
}
 8007da0:	46c0      	nop			@ (mov r8, r8)
 8007da2:	46bd      	mov	sp, r7
 8007da4:	b002      	add	sp, #8
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <mavlink_sha256_init>:
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
    0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
};

MAVLINK_HELPER void mavlink_sha256_init(mavlink_sha256_ctx *m)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b082      	sub	sp, #8
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
    m->sz[0] = 0;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	601a      	str	r2, [r3, #0]
    m->sz[1] = 0;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	605a      	str	r2, [r3, #4]
    m->counter[0] = 0x6a09e667;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8007df4 <mavlink_sha256_init+0x4c>)
 8007dc0:	609a      	str	r2, [r3, #8]
    m->counter[1] = 0xbb67ae85;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a0c      	ldr	r2, [pc, #48]	@ (8007df8 <mavlink_sha256_init+0x50>)
 8007dc6:	60da      	str	r2, [r3, #12]
    m->counter[2] = 0x3c6ef372;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a0c      	ldr	r2, [pc, #48]	@ (8007dfc <mavlink_sha256_init+0x54>)
 8007dcc:	611a      	str	r2, [r3, #16]
    m->counter[3] = 0xa54ff53a;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a0b      	ldr	r2, [pc, #44]	@ (8007e00 <mavlink_sha256_init+0x58>)
 8007dd2:	615a      	str	r2, [r3, #20]
    m->counter[4] = 0x510e527f;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a0b      	ldr	r2, [pc, #44]	@ (8007e04 <mavlink_sha256_init+0x5c>)
 8007dd8:	619a      	str	r2, [r3, #24]
    m->counter[5] = 0x9b05688c;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8007e08 <mavlink_sha256_init+0x60>)
 8007dde:	61da      	str	r2, [r3, #28]
    m->counter[6] = 0x1f83d9ab;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a0a      	ldr	r2, [pc, #40]	@ (8007e0c <mavlink_sha256_init+0x64>)
 8007de4:	621a      	str	r2, [r3, #32]
    m->counter[7] = 0x5be0cd19;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a09      	ldr	r2, [pc, #36]	@ (8007e10 <mavlink_sha256_init+0x68>)
 8007dea:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007dec:	46c0      	nop			@ (mov r8, r8)
 8007dee:	46bd      	mov	sp, r7
 8007df0:	b002      	add	sp, #8
 8007df2:	bd80      	pop	{r7, pc}
 8007df4:	6a09e667 	.word	0x6a09e667
 8007df8:	bb67ae85 	.word	0xbb67ae85
 8007dfc:	3c6ef372 	.word	0x3c6ef372
 8007e00:	a54ff53a 	.word	0xa54ff53a
 8007e04:	510e527f 	.word	0x510e527f
 8007e08:	9b05688c 	.word	0x9b05688c
 8007e0c:	1f83d9ab 	.word	0x1f83d9ab
 8007e10:	5be0cd19 	.word	0x5be0cd19

08007e14 <mavlink_sha256_calc>:

static inline void mavlink_sha256_calc(mavlink_sha256_ctx *m, uint32_t *in)
{
 8007e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e16:	b0cf      	sub	sp, #316	@ 0x13c
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	6039      	str	r1, [r7, #0]
    uint32_t AA, BB, CC, DD, EE, FF, GG, HH;
    uint32_t data[64];
    int i;

    AA = m->counter[0];
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	229a      	movs	r2, #154	@ 0x9a
 8007e24:	0052      	lsls	r2, r2, #1
 8007e26:	18ba      	adds	r2, r7, r2
 8007e28:	6013      	str	r3, [r2, #0]
    BB = m->counter[1];
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	2298      	movs	r2, #152	@ 0x98
 8007e30:	0052      	lsls	r2, r2, #1
 8007e32:	18ba      	adds	r2, r7, r2
 8007e34:	6013      	str	r3, [r2, #0]
    CC = m->counter[2];
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	691b      	ldr	r3, [r3, #16]
 8007e3a:	2296      	movs	r2, #150	@ 0x96
 8007e3c:	0052      	lsls	r2, r2, #1
 8007e3e:	18ba      	adds	r2, r7, r2
 8007e40:	6013      	str	r3, [r2, #0]
    DD = m->counter[3];
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	2294      	movs	r2, #148	@ 0x94
 8007e48:	0052      	lsls	r2, r2, #1
 8007e4a:	18ba      	adds	r2, r7, r2
 8007e4c:	6013      	str	r3, [r2, #0]
    EE = m->counter[4];
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	2292      	movs	r2, #146	@ 0x92
 8007e54:	0052      	lsls	r2, r2, #1
 8007e56:	18ba      	adds	r2, r7, r2
 8007e58:	6013      	str	r3, [r2, #0]
    FF = m->counter[5];
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69db      	ldr	r3, [r3, #28]
 8007e5e:	2290      	movs	r2, #144	@ 0x90
 8007e60:	0052      	lsls	r2, r2, #1
 8007e62:	18ba      	adds	r2, r7, r2
 8007e64:	6013      	str	r3, [r2, #0]
    GG = m->counter[6];
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a1b      	ldr	r3, [r3, #32]
 8007e6a:	228e      	movs	r2, #142	@ 0x8e
 8007e6c:	0052      	lsls	r2, r2, #1
 8007e6e:	18ba      	adds	r2, r7, r2
 8007e70:	6013      	str	r3, [r2, #0]
    HH = m->counter[7];
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e76:	228c      	movs	r2, #140	@ 0x8c
 8007e78:	0052      	lsls	r2, r2, #1
 8007e7a:	18ba      	adds	r2, r7, r2
 8007e7c:	6013      	str	r3, [r2, #0]

    for (i = 0; i < 16; ++i)
 8007e7e:	2300      	movs	r3, #0
 8007e80:	228a      	movs	r2, #138	@ 0x8a
 8007e82:	0052      	lsls	r2, r2, #1
 8007e84:	18ba      	adds	r2, r7, r2
 8007e86:	6013      	str	r3, [r2, #0]
 8007e88:	e015      	b.n	8007eb6 <mavlink_sha256_calc+0xa2>
	data[i] = in[i];
 8007e8a:	208a      	movs	r0, #138	@ 0x8a
 8007e8c:	0040      	lsls	r0, r0, #1
 8007e8e:	183b      	adds	r3, r7, r0
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	683a      	ldr	r2, [r7, #0]
 8007e96:	18d3      	adds	r3, r2, r3
 8007e98:	6819      	ldr	r1, [r3, #0]
 8007e9a:	4bc1      	ldr	r3, [pc, #772]	@ (80081a0 <mavlink_sha256_calc+0x38c>)
 8007e9c:	229c      	movs	r2, #156	@ 0x9c
 8007e9e:	0052      	lsls	r2, r2, #1
 8007ea0:	189b      	adds	r3, r3, r2
 8007ea2:	19db      	adds	r3, r3, r7
 8007ea4:	183a      	adds	r2, r7, r0
 8007ea6:	6812      	ldr	r2, [r2, #0]
 8007ea8:	0092      	lsls	r2, r2, #2
 8007eaa:	50d1      	str	r1, [r2, r3]
    for (i = 0; i < 16; ++i)
 8007eac:	183b      	adds	r3, r7, r0
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	183a      	adds	r2, r7, r0
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	228a      	movs	r2, #138	@ 0x8a
 8007eb8:	0052      	lsls	r2, r2, #1
 8007eba:	18bb      	adds	r3, r7, r2
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b0f      	cmp	r3, #15
 8007ec0:	dde3      	ble.n	8007e8a <mavlink_sha256_calc+0x76>
    for (i = 16; i < 64; ++i)
 8007ec2:	2310      	movs	r3, #16
 8007ec4:	18ba      	adds	r2, r7, r2
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	e067      	b.n	8007f9a <mavlink_sha256_calc+0x186>
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8007eca:	248a      	movs	r4, #138	@ 0x8a
 8007ecc:	0064      	lsls	r4, r4, #1
 8007ece:	193b      	adds	r3, r7, r4
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	1e9a      	subs	r2, r3, #2
 8007ed4:	4bb2      	ldr	r3, [pc, #712]	@ (80081a0 <mavlink_sha256_calc+0x38c>)
 8007ed6:	259c      	movs	r5, #156	@ 0x9c
 8007ed8:	006d      	lsls	r5, r5, #1
 8007eda:	195b      	adds	r3, r3, r5
 8007edc:	19db      	adds	r3, r3, r7
 8007ede:	0092      	lsls	r2, r2, #2
 8007ee0:	58d3      	ldr	r3, [r2, r3]
 8007ee2:	2211      	movs	r2, #17
 8007ee4:	41d3      	rors	r3, r2
 8007ee6:	001a      	movs	r2, r3
 8007ee8:	193b      	adds	r3, r7, r4
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	1e99      	subs	r1, r3, #2
 8007eee:	4bac      	ldr	r3, [pc, #688]	@ (80081a0 <mavlink_sha256_calc+0x38c>)
 8007ef0:	195b      	adds	r3, r3, r5
 8007ef2:	19db      	adds	r3, r3, r7
 8007ef4:	0089      	lsls	r1, r1, #2
 8007ef6:	58cb      	ldr	r3, [r1, r3]
 8007ef8:	2113      	movs	r1, #19
 8007efa:	41cb      	rors	r3, r1
 8007efc:	405a      	eors	r2, r3
 8007efe:	193b      	adds	r3, r7, r4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	1e99      	subs	r1, r3, #2
 8007f04:	4ba6      	ldr	r3, [pc, #664]	@ (80081a0 <mavlink_sha256_calc+0x38c>)
 8007f06:	195b      	adds	r3, r3, r5
 8007f08:	19db      	adds	r3, r3, r7
 8007f0a:	0089      	lsls	r1, r1, #2
 8007f0c:	58cb      	ldr	r3, [r1, r3]
 8007f0e:	0a9b      	lsrs	r3, r3, #10
 8007f10:	405a      	eors	r2, r3
 8007f12:	193b      	adds	r3, r7, r4
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	1fd9      	subs	r1, r3, #7
 8007f18:	4ba1      	ldr	r3, [pc, #644]	@ (80081a0 <mavlink_sha256_calc+0x38c>)
 8007f1a:	195b      	adds	r3, r3, r5
 8007f1c:	19db      	adds	r3, r3, r7
 8007f1e:	0089      	lsls	r1, r1, #2
 8007f20:	58cb      	ldr	r3, [r1, r3]
 8007f22:	18d2      	adds	r2, r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8007f24:	193b      	adds	r3, r7, r4
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	3b0f      	subs	r3, #15
 8007f2a:	0019      	movs	r1, r3
 8007f2c:	4b9c      	ldr	r3, [pc, #624]	@ (80081a0 <mavlink_sha256_calc+0x38c>)
 8007f2e:	195b      	adds	r3, r3, r5
 8007f30:	19db      	adds	r3, r3, r7
 8007f32:	0089      	lsls	r1, r1, #2
 8007f34:	58cb      	ldr	r3, [r1, r3]
 8007f36:	2107      	movs	r1, #7
 8007f38:	41cb      	rors	r3, r1
 8007f3a:	0019      	movs	r1, r3
 8007f3c:	193b      	adds	r3, r7, r4
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	3b0f      	subs	r3, #15
 8007f42:	0018      	movs	r0, r3
 8007f44:	4b96      	ldr	r3, [pc, #600]	@ (80081a0 <mavlink_sha256_calc+0x38c>)
 8007f46:	195b      	adds	r3, r3, r5
 8007f48:	19db      	adds	r3, r3, r7
 8007f4a:	0080      	lsls	r0, r0, #2
 8007f4c:	58c3      	ldr	r3, [r0, r3]
 8007f4e:	2012      	movs	r0, #18
 8007f50:	41c3      	rors	r3, r0
 8007f52:	4059      	eors	r1, r3
 8007f54:	193b      	adds	r3, r7, r4
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	3b0f      	subs	r3, #15
 8007f5a:	0018      	movs	r0, r3
 8007f5c:	4b90      	ldr	r3, [pc, #576]	@ (80081a0 <mavlink_sha256_calc+0x38c>)
 8007f5e:	195b      	adds	r3, r3, r5
 8007f60:	19db      	adds	r3, r3, r7
 8007f62:	0080      	lsls	r0, r0, #2
 8007f64:	58c3      	ldr	r3, [r0, r3]
 8007f66:	08db      	lsrs	r3, r3, #3
 8007f68:	404b      	eors	r3, r1
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8007f6a:	18d2      	adds	r2, r2, r3
	    sigma0(data[i-15]) + data[i - 16];
 8007f6c:	0020      	movs	r0, r4
 8007f6e:	183b      	adds	r3, r7, r0
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	3b10      	subs	r3, #16
 8007f74:	0019      	movs	r1, r3
 8007f76:	4b8a      	ldr	r3, [pc, #552]	@ (80081a0 <mavlink_sha256_calc+0x38c>)
 8007f78:	195b      	adds	r3, r3, r5
 8007f7a:	19db      	adds	r3, r3, r7
 8007f7c:	0089      	lsls	r1, r1, #2
 8007f7e:	58cb      	ldr	r3, [r1, r3]
 8007f80:	18d1      	adds	r1, r2, r3
	data[i] = sigma1(data[i-2]) + data[i-7] + 
 8007f82:	4b87      	ldr	r3, [pc, #540]	@ (80081a0 <mavlink_sha256_calc+0x38c>)
 8007f84:	195b      	adds	r3, r3, r5
 8007f86:	19db      	adds	r3, r3, r7
 8007f88:	183a      	adds	r2, r7, r0
 8007f8a:	6812      	ldr	r2, [r2, #0]
 8007f8c:	0092      	lsls	r2, r2, #2
 8007f8e:	50d1      	str	r1, [r2, r3]
    for (i = 16; i < 64; ++i)
 8007f90:	183b      	adds	r3, r7, r0
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3301      	adds	r3, #1
 8007f96:	183a      	adds	r2, r7, r0
 8007f98:	6013      	str	r3, [r2, #0]
 8007f9a:	228a      	movs	r2, #138	@ 0x8a
 8007f9c:	0052      	lsls	r2, r2, #1
 8007f9e:	18bb      	adds	r3, r7, r2
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8007fa4:	dd91      	ble.n	8007eca <mavlink_sha256_calc+0xb6>

    for (i = 0; i < 64; i++) {
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	18ba      	adds	r2, r7, r2
 8007faa:	6013      	str	r3, [r2, #0]
 8007fac:	e0a4      	b.n	80080f8 <mavlink_sha256_calc+0x2e4>
	uint32_t T1, T2;

	T1 = HH + Sigma1(EE) + Ch(EE, FF, GG) + mavlink_sha256_constant_256[i] + data[i];
 8007fae:	2492      	movs	r4, #146	@ 0x92
 8007fb0:	0064      	lsls	r4, r4, #1
 8007fb2:	193b      	adds	r3, r7, r4
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2206      	movs	r2, #6
 8007fb8:	41d3      	rors	r3, r2
 8007fba:	001a      	movs	r2, r3
 8007fbc:	193b      	adds	r3, r7, r4
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	210b      	movs	r1, #11
 8007fc2:	41cb      	rors	r3, r1
 8007fc4:	405a      	eors	r2, r3
 8007fc6:	193b      	adds	r3, r7, r4
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2119      	movs	r1, #25
 8007fcc:	41cb      	rors	r3, r1
 8007fce:	405a      	eors	r2, r3
 8007fd0:	238c      	movs	r3, #140	@ 0x8c
 8007fd2:	005b      	lsls	r3, r3, #1
 8007fd4:	18f8      	adds	r0, r7, r3
 8007fd6:	6803      	ldr	r3, [r0, #0]
 8007fd8:	18d2      	adds	r2, r2, r3
 8007fda:	1938      	adds	r0, r7, r4
 8007fdc:	6803      	ldr	r3, [r0, #0]
 8007fde:	2190      	movs	r1, #144	@ 0x90
 8007fe0:	0049      	lsls	r1, r1, #1
 8007fe2:	1878      	adds	r0, r7, r1
 8007fe4:	6801      	ldr	r1, [r0, #0]
 8007fe6:	4019      	ands	r1, r3
 8007fe8:	1938      	adds	r0, r7, r4
 8007fea:	6803      	ldr	r3, [r0, #0]
 8007fec:	43db      	mvns	r3, r3
 8007fee:	208e      	movs	r0, #142	@ 0x8e
 8007ff0:	0040      	lsls	r0, r0, #1
 8007ff2:	183d      	adds	r5, r7, r0
 8007ff4:	6828      	ldr	r0, [r5, #0]
 8007ff6:	4003      	ands	r3, r0
 8007ff8:	404b      	eors	r3, r1
 8007ffa:	18d2      	adds	r2, r2, r3
 8007ffc:	4b69      	ldr	r3, [pc, #420]	@ (80081a4 <mavlink_sha256_calc+0x390>)
 8007ffe:	268a      	movs	r6, #138	@ 0x8a
 8008000:	0076      	lsls	r6, r6, #1
 8008002:	19bd      	adds	r5, r7, r6
 8008004:	6829      	ldr	r1, [r5, #0]
 8008006:	0089      	lsls	r1, r1, #2
 8008008:	58cb      	ldr	r3, [r1, r3]
 800800a:	18d2      	adds	r2, r2, r3
 800800c:	4b64      	ldr	r3, [pc, #400]	@ (80081a0 <mavlink_sha256_calc+0x38c>)
 800800e:	259c      	movs	r5, #156	@ 0x9c
 8008010:	006d      	lsls	r5, r5, #1
 8008012:	195d      	adds	r5, r3, r5
 8008014:	19eb      	adds	r3, r5, r7
 8008016:	19bd      	adds	r5, r7, r6
 8008018:	6829      	ldr	r1, [r5, #0]
 800801a:	0089      	lsls	r1, r1, #2
 800801c:	58cb      	ldr	r3, [r1, r3]
 800801e:	18d3      	adds	r3, r2, r3
 8008020:	2288      	movs	r2, #136	@ 0x88
 8008022:	0052      	lsls	r2, r2, #1
 8008024:	18bd      	adds	r5, r7, r2
 8008026:	602b      	str	r3, [r5, #0]
	T2 = Sigma0(AA) + Maj(AA,BB,CC);
 8008028:	259a      	movs	r5, #154	@ 0x9a
 800802a:	006d      	lsls	r5, r5, #1
 800802c:	197a      	adds	r2, r7, r5
 800802e:	6813      	ldr	r3, [r2, #0]
 8008030:	2202      	movs	r2, #2
 8008032:	41d3      	rors	r3, r2
 8008034:	001a      	movs	r2, r3
 8008036:	1978      	adds	r0, r7, r5
 8008038:	6803      	ldr	r3, [r0, #0]
 800803a:	210d      	movs	r1, #13
 800803c:	41cb      	rors	r3, r1
 800803e:	405a      	eors	r2, r3
 8008040:	1978      	adds	r0, r7, r5
 8008042:	6803      	ldr	r3, [r0, #0]
 8008044:	2116      	movs	r1, #22
 8008046:	41cb      	rors	r3, r1
 8008048:	405a      	eors	r2, r3
 800804a:	2098      	movs	r0, #152	@ 0x98
 800804c:	0040      	lsls	r0, r0, #1
 800804e:	183b      	adds	r3, r7, r0
 8008050:	6819      	ldr	r1, [r3, #0]
 8008052:	2396      	movs	r3, #150	@ 0x96
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	18fb      	adds	r3, r7, r3
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	404b      	eors	r3, r1
 800805c:	1979      	adds	r1, r7, r5
 800805e:	6809      	ldr	r1, [r1, #0]
 8008060:	4019      	ands	r1, r3
 8008062:	183b      	adds	r3, r7, r0
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2096      	movs	r0, #150	@ 0x96
 8008068:	0040      	lsls	r0, r0, #1
 800806a:	1838      	adds	r0, r7, r0
 800806c:	6800      	ldr	r0, [r0, #0]
 800806e:	4003      	ands	r3, r0
 8008070:	404b      	eors	r3, r1
 8008072:	18d3      	adds	r3, r2, r3
 8008074:	2286      	movs	r2, #134	@ 0x86
 8008076:	0052      	lsls	r2, r2, #1
 8008078:	18ba      	adds	r2, r7, r2
 800807a:	6013      	str	r3, [r2, #0]
			     
	HH = GG;
 800807c:	238e      	movs	r3, #142	@ 0x8e
 800807e:	005b      	lsls	r3, r3, #1
 8008080:	001a      	movs	r2, r3
 8008082:	18fb      	adds	r3, r7, r3
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	218c      	movs	r1, #140	@ 0x8c
 8008088:	0049      	lsls	r1, r1, #1
 800808a:	1879      	adds	r1, r7, r1
 800808c:	600b      	str	r3, [r1, #0]
	GG = FF;
 800808e:	2190      	movs	r1, #144	@ 0x90
 8008090:	0049      	lsls	r1, r1, #1
 8008092:	187b      	adds	r3, r7, r1
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	18ba      	adds	r2, r7, r2
 8008098:	6013      	str	r3, [r2, #0]
	FF = EE;
 800809a:	193b      	adds	r3, r7, r4
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	1879      	adds	r1, r7, r1
 80080a0:	600b      	str	r3, [r1, #0]
	EE = DD + T1;
 80080a2:	2394      	movs	r3, #148	@ 0x94
 80080a4:	005b      	lsls	r3, r3, #1
 80080a6:	0018      	movs	r0, r3
 80080a8:	18fb      	adds	r3, r7, r3
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	2188      	movs	r1, #136	@ 0x88
 80080ae:	0049      	lsls	r1, r1, #1
 80080b0:	187b      	adds	r3, r7, r1
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	18d3      	adds	r3, r2, r3
 80080b6:	193c      	adds	r4, r7, r4
 80080b8:	6023      	str	r3, [r4, #0]
	DD = CC;
 80080ba:	2296      	movs	r2, #150	@ 0x96
 80080bc:	0052      	lsls	r2, r2, #1
 80080be:	18bc      	adds	r4, r7, r2
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	0004      	movs	r4, r0
 80080c4:	193c      	adds	r4, r7, r4
 80080c6:	6023      	str	r3, [r4, #0]
	CC = BB;
 80080c8:	2098      	movs	r0, #152	@ 0x98
 80080ca:	0040      	lsls	r0, r0, #1
 80080cc:	183c      	adds	r4, r7, r0
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	18bc      	adds	r4, r7, r2
 80080d2:	6023      	str	r3, [r4, #0]
	BB = AA;
 80080d4:	197c      	adds	r4, r7, r5
 80080d6:	6823      	ldr	r3, [r4, #0]
 80080d8:	1838      	adds	r0, r7, r0
 80080da:	6003      	str	r3, [r0, #0]
	AA = T1 + T2;
 80080dc:	1879      	adds	r1, r7, r1
 80080de:	680a      	ldr	r2, [r1, #0]
 80080e0:	2386      	movs	r3, #134	@ 0x86
 80080e2:	005b      	lsls	r3, r3, #1
 80080e4:	18fb      	adds	r3, r7, r3
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	18d3      	adds	r3, r2, r3
 80080ea:	197a      	adds	r2, r7, r5
 80080ec:	6013      	str	r3, [r2, #0]
    for (i = 0; i < 64; i++) {
 80080ee:	19bb      	adds	r3, r7, r6
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	3301      	adds	r3, #1
 80080f4:	19ba      	adds	r2, r7, r6
 80080f6:	6013      	str	r3, [r2, #0]
 80080f8:	238a      	movs	r3, #138	@ 0x8a
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	18fb      	adds	r3, r7, r3
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b3f      	cmp	r3, #63	@ 0x3f
 8008102:	dc00      	bgt.n	8008106 <mavlink_sha256_calc+0x2f2>
 8008104:	e753      	b.n	8007fae <mavlink_sha256_calc+0x19a>
    }

    m->counter[0] += AA;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	689a      	ldr	r2, [r3, #8]
 800810a:	239a      	movs	r3, #154	@ 0x9a
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	18fb      	adds	r3, r7, r3
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	18d2      	adds	r2, r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	609a      	str	r2, [r3, #8]
    m->counter[1] += BB;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68da      	ldr	r2, [r3, #12]
 800811c:	2398      	movs	r3, #152	@ 0x98
 800811e:	005b      	lsls	r3, r3, #1
 8008120:	18fb      	adds	r3, r7, r3
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	18d2      	adds	r2, r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	60da      	str	r2, [r3, #12]
    m->counter[2] += CC;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691a      	ldr	r2, [r3, #16]
 800812e:	2396      	movs	r3, #150	@ 0x96
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	18fb      	adds	r3, r7, r3
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	18d2      	adds	r2, r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	611a      	str	r2, [r3, #16]
    m->counter[3] += DD;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	695a      	ldr	r2, [r3, #20]
 8008140:	2394      	movs	r3, #148	@ 0x94
 8008142:	005b      	lsls	r3, r3, #1
 8008144:	18fb      	adds	r3, r7, r3
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	18d2      	adds	r2, r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	615a      	str	r2, [r3, #20]
    m->counter[4] += EE;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699a      	ldr	r2, [r3, #24]
 8008152:	2392      	movs	r3, #146	@ 0x92
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	18fb      	adds	r3, r7, r3
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	18d2      	adds	r2, r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	619a      	str	r2, [r3, #24]
    m->counter[5] += FF;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	69da      	ldr	r2, [r3, #28]
 8008164:	2390      	movs	r3, #144	@ 0x90
 8008166:	005b      	lsls	r3, r3, #1
 8008168:	18fb      	adds	r3, r7, r3
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	18d2      	adds	r2, r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	61da      	str	r2, [r3, #28]
    m->counter[6] += GG;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a1a      	ldr	r2, [r3, #32]
 8008176:	238e      	movs	r3, #142	@ 0x8e
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	18fb      	adds	r3, r7, r3
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	18d2      	adds	r2, r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	621a      	str	r2, [r3, #32]
    m->counter[7] += HH;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008188:	238c      	movs	r3, #140	@ 0x8c
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	18fb      	adds	r3, r7, r3
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	18d2      	adds	r2, r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008196:	46c0      	nop			@ (mov r8, r8)
 8008198:	46bd      	mov	sp, r7
 800819a:	b04f      	add	sp, #316	@ 0x13c
 800819c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800819e:	46c0      	nop			@ (mov r8, r8)
 80081a0:	fffffed4 	.word	0xfffffed4
 80081a4:	0800a230 	.word	0x0800a230

080081a8 <mavlink_sha256_update>:

MAVLINK_HELPER void mavlink_sha256_update(mavlink_sha256_ctx *m, const void *v, uint32_t len)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b09c      	sub	sp, #112	@ 0x70
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
    const unsigned char *p = (const unsigned char *)v;
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    uint32_t old_sz = m->sz[0];
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    uint32_t offset;

    m->sz[0] += len * 8;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	00db      	lsls	r3, r3, #3
 80081c6:	18d2      	adds	r2, r2, r3
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	601a      	str	r2, [r3, #0]
    if (m->sz[0] < old_sz)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d904      	bls.n	80081e0 <mavlink_sha256_update+0x38>
	++m->sz[1];
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	1c5a      	adds	r2, r3, #1
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	605a      	str	r2, [r3, #4]
    offset = (old_sz / 8) % 64;
 80081e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80081e2:	08db      	lsrs	r3, r3, #3
 80081e4:	223f      	movs	r2, #63	@ 0x3f
 80081e6:	4013      	ands	r3, r2
 80081e8:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 80081ea:	e058      	b.n	800829e <mavlink_sha256_update+0xf6>
	uint32_t l = 64 - offset;
 80081ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081ee:	2240      	movs	r2, #64	@ 0x40
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	667b      	str	r3, [r7, #100]	@ 0x64
        if (len < l) {
 80081f4:	687a      	ldr	r2, [r7, #4]
 80081f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d201      	bcs.n	8008200 <mavlink_sha256_update+0x58>
            l = len;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	667b      	str	r3, [r7, #100]	@ 0x64
        }
	memcpy(m->u.save_bytes + offset, p, l);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3328      	adds	r3, #40	@ 0x28
 8008204:	001a      	movs	r2, r3
 8008206:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008208:	18d3      	adds	r3, r2, r3
 800820a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800820c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800820e:	0018      	movs	r0, r3
 8008210:	f001 f914 	bl	800943c <memcpy>
	offset += l;
 8008214:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008216:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008218:	18d3      	adds	r3, r2, r3
 800821a:	66bb      	str	r3, [r7, #104]	@ 0x68
	p += l;
 800821c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800821e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008220:	18d3      	adds	r3, r2, r3
 8008222:	66fb      	str	r3, [r7, #108]	@ 0x6c
	len -= l;
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	607b      	str	r3, [r7, #4]
	if(offset == 64){
 800822c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800822e:	2b40      	cmp	r3, #64	@ 0x40
 8008230:	d135      	bne.n	800829e <mavlink_sha256_update+0xf6>
	    int i;
	    uint32_t current[16];
	    const uint32_t *u = m->u.save_u32;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3328      	adds	r3, #40	@ 0x28
 8008236:	65bb      	str	r3, [r7, #88]	@ 0x58
	    for (i = 0; i < 16; i++){
 8008238:	2300      	movs	r3, #0
 800823a:	663b      	str	r3, [r7, #96]	@ 0x60
 800823c:	e023      	b.n	8008286 <mavlink_sha256_update+0xde>
                const uint8_t *p1 = (const uint8_t *)&u[i];
 800823e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008244:	18d3      	adds	r3, r2, r3
 8008246:	657b      	str	r3, [r7, #84]	@ 0x54
                uint8_t *p2 = (uint8_t *)&current[i];
 8008248:	2310      	movs	r3, #16
 800824a:	18fa      	adds	r2, r7, r3
 800824c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	18d3      	adds	r3, r2, r3
 8008252:	653b      	str	r3, [r7, #80]	@ 0x50
                p2[0] = p1[3];
 8008254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008256:	3303      	adds	r3, #3
 8008258:	781a      	ldrb	r2, [r3, #0]
 800825a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800825c:	701a      	strb	r2, [r3, #0]
                p2[1] = p1[2];
 800825e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008260:	1c9a      	adds	r2, r3, #2
 8008262:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008264:	3301      	adds	r3, #1
 8008266:	7812      	ldrb	r2, [r2, #0]
 8008268:	701a      	strb	r2, [r3, #0]
                p2[2] = p1[1];
 800826a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800826c:	1c5a      	adds	r2, r3, #1
 800826e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008270:	3302      	adds	r3, #2
 8008272:	7812      	ldrb	r2, [r2, #0]
 8008274:	701a      	strb	r2, [r3, #0]
                p2[3] = p1[0];
 8008276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008278:	3303      	adds	r3, #3
 800827a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800827c:	7812      	ldrb	r2, [r2, #0]
 800827e:	701a      	strb	r2, [r3, #0]
	    for (i = 0; i < 16; i++){
 8008280:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008282:	3301      	adds	r3, #1
 8008284:	663b      	str	r3, [r7, #96]	@ 0x60
 8008286:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008288:	2b0f      	cmp	r3, #15
 800828a:	ddd8      	ble.n	800823e <mavlink_sha256_update+0x96>
	    }
	    mavlink_sha256_calc(m, current);
 800828c:	2310      	movs	r3, #16
 800828e:	18fa      	adds	r2, r7, r3
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	0011      	movs	r1, r2
 8008294:	0018      	movs	r0, r3
 8008296:	f7ff fdbd 	bl	8007e14 <mavlink_sha256_calc>
	    offset = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	66bb      	str	r3, [r7, #104]	@ 0x68
    while(len > 0){
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1a3      	bne.n	80081ec <mavlink_sha256_update+0x44>
	}
    }
}
 80082a4:	46c0      	nop			@ (mov r8, r8)
 80082a6:	46c0      	nop			@ (mov r8, r8)
 80082a8:	46bd      	mov	sp, r7
 80082aa:	b01c      	add	sp, #112	@ 0x70
 80082ac:	bd80      	pop	{r7, pc}

080082ae <mavlink_sha256_final_48>:

/*
  get first 48 bits of final sha256 hash
 */
MAVLINK_HELPER void mavlink_sha256_final_48(mavlink_sha256_ctx *m, uint8_t result[6])
{
 80082ae:	b590      	push	{r4, r7, lr}
 80082b0:	b099      	sub	sp, #100	@ 0x64
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
 80082b6:	6039      	str	r1, [r7, #0]
    unsigned char zeros[72];
    unsigned offset = (m->sz[0] / 8) % 64;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	08db      	lsrs	r3, r3, #3
 80082be:	223f      	movs	r2, #63	@ 0x3f
 80082c0:	4013      	ands	r3, r2
 80082c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    unsigned int dstart = (120 - offset - 1) % 64 + 1;
 80082c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082c6:	2277      	movs	r2, #119	@ 0x77
 80082c8:	1ad3      	subs	r3, r2, r3
 80082ca:	223f      	movs	r2, #63	@ 0x3f
 80082cc:	4013      	ands	r3, r2
 80082ce:	3301      	adds	r3, #1
 80082d0:	65bb      	str	r3, [r7, #88]	@ 0x58
    uint8_t *p = (uint8_t *)&m->counter[0];
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	3308      	adds	r3, #8
 80082d6:	657b      	str	r3, [r7, #84]	@ 0x54
    
    *zeros = 0x80;
 80082d8:	240c      	movs	r4, #12
 80082da:	193b      	adds	r3, r7, r4
 80082dc:	2280      	movs	r2, #128	@ 0x80
 80082de:	701a      	strb	r2, [r3, #0]
    memset (zeros + 1, 0, sizeof(zeros) - 1);
 80082e0:	193b      	adds	r3, r7, r4
 80082e2:	3301      	adds	r3, #1
 80082e4:	2247      	movs	r2, #71	@ 0x47
 80082e6:	2100      	movs	r1, #0
 80082e8:	0018      	movs	r0, r3
 80082ea:	f001 f87b 	bl	80093e4 <memset>
    zeros[dstart+7] = (m->sz[0] >> 0) & 0xff;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082f4:	3307      	adds	r3, #7
 80082f6:	b2d1      	uxtb	r1, r2
 80082f8:	0020      	movs	r0, r4
 80082fa:	183a      	adds	r2, r7, r0
 80082fc:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+6] = (m->sz[0] >> 8) & 0xff;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	0a1a      	lsrs	r2, r3, #8
 8008304:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008306:	3306      	adds	r3, #6
 8008308:	b2d1      	uxtb	r1, r2
 800830a:	183a      	adds	r2, r7, r0
 800830c:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+5] = (m->sz[0] >> 16) & 0xff;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	0c1a      	lsrs	r2, r3, #16
 8008314:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008316:	3305      	adds	r3, #5
 8008318:	b2d1      	uxtb	r1, r2
 800831a:	183a      	adds	r2, r7, r0
 800831c:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+4] = (m->sz[0] >> 24) & 0xff;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	0e1a      	lsrs	r2, r3, #24
 8008324:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008326:	3304      	adds	r3, #4
 8008328:	b2d1      	uxtb	r1, r2
 800832a:	183a      	adds	r2, r7, r0
 800832c:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+3] = (m->sz[1] >> 0) & 0xff;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	685a      	ldr	r2, [r3, #4]
 8008332:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008334:	3303      	adds	r3, #3
 8008336:	b2d1      	uxtb	r1, r2
 8008338:	183a      	adds	r2, r7, r0
 800833a:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+2] = (m->sz[1] >> 8) & 0xff;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	0a1a      	lsrs	r2, r3, #8
 8008342:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008344:	3302      	adds	r3, #2
 8008346:	b2d1      	uxtb	r1, r2
 8008348:	183a      	adds	r2, r7, r0
 800834a:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+1] = (m->sz[1] >> 16) & 0xff;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	0c1a      	lsrs	r2, r3, #16
 8008352:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008354:	3301      	adds	r3, #1
 8008356:	b2d1      	uxtb	r1, r2
 8008358:	183a      	adds	r2, r7, r0
 800835a:	54d1      	strb	r1, [r2, r3]
    zeros[dstart+0] = (m->sz[1] >> 24) & 0xff;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	0e1b      	lsrs	r3, r3, #24
 8008362:	b2d9      	uxtb	r1, r3
 8008364:	183a      	adds	r2, r7, r0
 8008366:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008368:	18d3      	adds	r3, r2, r3
 800836a:	1c0a      	adds	r2, r1, #0
 800836c:	701a      	strb	r2, [r3, #0]

    mavlink_sha256_update(m, zeros, dstart + 8);
 800836e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008370:	3308      	adds	r3, #8
 8008372:	001a      	movs	r2, r3
 8008374:	1839      	adds	r1, r7, r0
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	0018      	movs	r0, r3
 800837a:	f7ff ff15 	bl	80081a8 <mavlink_sha256_update>

    // this ordering makes the result consistent with taking the first
    // 6 bytes of more conventional sha256 functions. It assumes
    // little-endian ordering of m->counter
    result[0] = p[3];
 800837e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008380:	78da      	ldrb	r2, [r3, #3]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	701a      	strb	r2, [r3, #0]
    result[1] = p[2];
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	3301      	adds	r3, #1
 800838a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800838c:	7892      	ldrb	r2, [r2, #2]
 800838e:	701a      	strb	r2, [r3, #0]
    result[2] = p[1];
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	3302      	adds	r3, #2
 8008394:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008396:	7852      	ldrb	r2, [r2, #1]
 8008398:	701a      	strb	r2, [r3, #0]
    result[3] = p[0];
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	3303      	adds	r3, #3
 800839e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083a0:	7812      	ldrb	r2, [r2, #0]
 80083a2:	701a      	strb	r2, [r3, #0]
    result[4] = p[7];
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	3304      	adds	r3, #4
 80083a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083aa:	79d2      	ldrb	r2, [r2, #7]
 80083ac:	701a      	strb	r2, [r3, #0]
    result[5] = p[6];
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	3305      	adds	r3, #5
 80083b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80083b4:	7992      	ldrb	r2, [r2, #6]
 80083b6:	701a      	strb	r2, [r3, #0]
}
 80083b8:	46c0      	nop			@ (mov r8, r8)
 80083ba:	46bd      	mov	sp, r7
 80083bc:	b019      	add	sp, #100	@ 0x64
 80083be:	bd90      	pop	{r4, r7, pc}

080083c0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	0002      	movs	r2, r0
 80083c8:	1dfb      	adds	r3, r7, #7
 80083ca:	701a      	strb	r2, [r3, #0]
	// No m_mavlink_status array defined in function,
	// has to be defined externally
#else
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_status[chan];
 80083cc:	1dfb      	adds	r3, r7, #7
 80083ce:	781a      	ldrb	r2, [r3, #0]
 80083d0:	0013      	movs	r3, r2
 80083d2:	005b      	lsls	r3, r3, #1
 80083d4:	189b      	adds	r3, r3, r2
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	4a02      	ldr	r2, [pc, #8]	@ (80083e4 <mavlink_get_channel_status+0x24>)
 80083da:	189b      	adds	r3, r3, r2
}
 80083dc:	0018      	movs	r0, r3
 80083de:	46bd      	mov	sp, r7
 80083e0:	b002      	add	sp, #8
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20000e24 	.word	0x20000e24

080083e8 <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	0002      	movs	r2, r0
 80083f0:	1dfb      	adds	r3, r7, #7
 80083f2:	701a      	strb	r2, [r3, #0]
	// No m_mavlink_buffer array defined in function,
	// has to be defined externally
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
 80083f4:	1dfb      	adds	r3, r7, #7
 80083f6:	781a      	ldrb	r2, [r3, #0]
 80083f8:	0013      	movs	r3, r2
 80083fa:	005b      	lsls	r3, r3, #1
 80083fc:	189b      	adds	r3, r3, r2
 80083fe:	015b      	lsls	r3, r3, #5
 8008400:	189b      	adds	r3, r3, r2
 8008402:	009a      	lsls	r2, r3, #2
 8008404:	1ad2      	subs	r2, r2, r3
 8008406:	4b03      	ldr	r3, [pc, #12]	@ (8008414 <mavlink_get_channel_buffer+0x2c>)
 8008408:	18d3      	adds	r3, r2, r3
}
 800840a:	0018      	movs	r0, r3
 800840c:	46bd      	mov	sp, r7
 800840e:	b002      	add	sp, #8
 8008410:	bd80      	pop	{r7, pc}
 8008412:	46c0      	nop			@ (mov r8, r8)
 8008414:	20000998 	.word	0x20000998

08008418 <mavlink_signature_check>:
 * @brief check a signature block for a packet
 */
MAVLINK_HELPER bool mavlink_signature_check(mavlink_signing_t *signing,
					    mavlink_signing_streams_t *signing_streams,
					    const mavlink_message_t *msg)
{
 8008418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800841a:	b0ab      	sub	sp, #172	@ 0xac
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	607a      	str	r2, [r7, #4]
	if (signing == NULL) {
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d101      	bne.n	800842e <mavlink_signature_check+0x16>
		return true;
 800842a:	2301      	movs	r3, #1
 800842c:	e147      	b.n	80086be <mavlink_signature_check+0x2a6>
	}
        const uint8_t *p = (const uint8_t *)&msg->magic;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3302      	adds	r3, #2
 8008432:	26a0      	movs	r6, #160	@ 0xa0
 8008434:	19ba      	adds	r2, r7, r6
 8008436:	6013      	str	r3, [r2, #0]
	const uint8_t *psig = msg->signature;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	3317      	adds	r3, #23
 800843c:	33ff      	adds	r3, #255	@ 0xff
 800843e:	259c      	movs	r5, #156	@ 0x9c
 8008440:	197a      	adds	r2, r7, r5
 8008442:	6013      	str	r3, [r2, #0]
        const uint8_t *incoming_signature = psig+7;
 8008444:	197b      	adds	r3, r7, r5
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	3307      	adds	r3, #7
 800844a:	2298      	movs	r2, #152	@ 0x98
 800844c:	18b9      	adds	r1, r7, r2
 800844e:	600b      	str	r3, [r1, #0]
	mavlink_sha256_ctx ctx;
	uint8_t signature[6];
	uint16_t i;
        
	mavlink_sha256_init(&ctx);
 8008450:	242c      	movs	r4, #44	@ 0x2c
 8008452:	193b      	adds	r3, r7, r4
 8008454:	0018      	movs	r0, r3
 8008456:	f7ff fca7 	bl	8007da8 <mavlink_sha256_init>
	mavlink_sha256_update(&ctx, signing->secret_key, sizeof(signing->secret_key));
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	3310      	adds	r3, #16
 800845e:	0019      	movs	r1, r3
 8008460:	193b      	adds	r3, r7, r4
 8008462:	2220      	movs	r2, #32
 8008464:	0018      	movs	r0, r3
 8008466:	f7ff fe9f 	bl	80081a8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, p, MAVLINK_NUM_HEADER_BYTES);
 800846a:	19bb      	adds	r3, r7, r6
 800846c:	6819      	ldr	r1, [r3, #0]
 800846e:	193b      	adds	r3, r7, r4
 8008470:	220a      	movs	r2, #10
 8008472:	0018      	movs	r0, r3
 8008474:	f7ff fe98 	bl	80081a8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, _MAV_PAYLOAD(msg), msg->len);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	330c      	adds	r3, #12
 800847c:	0019      	movs	r1, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	78db      	ldrb	r3, [r3, #3]
 8008482:	001a      	movs	r2, r3
 8008484:	193b      	adds	r3, r7, r4
 8008486:	0018      	movs	r0, r3
 8008488:	f7ff fe8e 	bl	80081a8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, msg->ck, 2);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	3315      	adds	r3, #21
 8008490:	33ff      	adds	r3, #255	@ 0xff
 8008492:	0019      	movs	r1, r3
 8008494:	193b      	adds	r3, r7, r4
 8008496:	2202      	movs	r2, #2
 8008498:	0018      	movs	r0, r3
 800849a:	f7ff fe85 	bl	80081a8 <mavlink_sha256_update>
	mavlink_sha256_update(&ctx, psig, 1+6);
 800849e:	197b      	adds	r3, r7, r5
 80084a0:	6819      	ldr	r1, [r3, #0]
 80084a2:	193b      	adds	r3, r7, r4
 80084a4:	2207      	movs	r2, #7
 80084a6:	0018      	movs	r0, r3
 80084a8:	f7ff fe7e 	bl	80081a8 <mavlink_sha256_update>
	mavlink_sha256_final_48(&ctx, signature);
 80084ac:	2524      	movs	r5, #36	@ 0x24
 80084ae:	197a      	adds	r2, r7, r5
 80084b0:	193b      	adds	r3, r7, r4
 80084b2:	0011      	movs	r1, r2
 80084b4:	0018      	movs	r0, r3
 80084b6:	f7ff fefa 	bl	80082ae <mavlink_sha256_final_48>
        if (memcmp(signature, incoming_signature, 6) != 0) {
 80084ba:	2298      	movs	r2, #152	@ 0x98
 80084bc:	18bb      	adds	r3, r7, r2
 80084be:	6819      	ldr	r1, [r3, #0]
 80084c0:	197b      	adds	r3, r7, r5
 80084c2:	2206      	movs	r2, #6
 80084c4:	0018      	movs	r0, r3
 80084c6:	f000 ff7f 	bl	80093c8 <memcmp>
 80084ca:	1e03      	subs	r3, r0, #0
 80084cc:	d005      	beq.n	80084da <mavlink_signature_check+0xc2>
                signing->last_status = MAVLINK_SIGNING_STATUS_BAD_SIGNATURE;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2234      	movs	r2, #52	@ 0x34
 80084d2:	2102      	movs	r1, #2
 80084d4:	5499      	strb	r1, [r3, r2]
		return false;
 80084d6:	2300      	movs	r3, #0
 80084d8:	e0f1      	b.n	80086be <mavlink_signature_check+0x2a6>
	// now check timestamp
	union tstamp {
	    uint64_t t64;
	    uint8_t t8[8];
	} tstamp;
	uint8_t link_id = psig[0];
 80084da:	2397      	movs	r3, #151	@ 0x97
 80084dc:	18fb      	adds	r3, r7, r3
 80084de:	219c      	movs	r1, #156	@ 0x9c
 80084e0:	187a      	adds	r2, r7, r1
 80084e2:	6812      	ldr	r2, [r2, #0]
 80084e4:	7812      	ldrb	r2, [r2, #0]
 80084e6:	701a      	strb	r2, [r3, #0]
	tstamp.t64 = 0;
 80084e8:	2200      	movs	r2, #0
 80084ea:	2300      	movs	r3, #0
 80084ec:	61ba      	str	r2, [r7, #24]
 80084ee:	61fb      	str	r3, [r7, #28]
	memcpy(tstamp.t8, psig+1, 6);
 80084f0:	187b      	adds	r3, r7, r1
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	1c59      	adds	r1, r3, #1
 80084f6:	2318      	movs	r3, #24
 80084f8:	18fb      	adds	r3, r7, r3
 80084fa:	2206      	movs	r2, #6
 80084fc:	0018      	movs	r0, r3
 80084fe:	f000 ff9d 	bl	800943c <memcpy>

	if (signing_streams == NULL) {
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d105      	bne.n	8008514 <mavlink_signature_check+0xfc>
                signing->last_status = MAVLINK_SIGNING_STATUS_NO_STREAMS;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2234      	movs	r2, #52	@ 0x34
 800850c:	2103      	movs	r1, #3
 800850e:	5499      	strb	r1, [r3, r2]
                return false;
 8008510:	2300      	movs	r3, #0
 8008512:	e0d4      	b.n	80086be <mavlink_signature_check+0x2a6>
	}
	
	// find stream
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8008514:	23a6      	movs	r3, #166	@ 0xa6
 8008516:	18fb      	adds	r3, r7, r3
 8008518:	2200      	movs	r2, #0
 800851a:	801a      	strh	r2, [r3, #0]
 800851c:	e02e      	b.n	800857c <mavlink_signature_check+0x164>
		if (msg->sysid == signing_streams->stream[i].sysid &&
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	79d9      	ldrb	r1, [r3, #7]
 8008522:	24a6      	movs	r4, #166	@ 0xa6
 8008524:	193b      	adds	r3, r7, r4
 8008526:	881a      	ldrh	r2, [r3, #0]
 8008528:	68b8      	ldr	r0, [r7, #8]
 800852a:	0013      	movs	r3, r2
 800852c:	00db      	lsls	r3, r3, #3
 800852e:	189b      	adds	r3, r3, r2
 8008530:	18c3      	adds	r3, r0, r3
 8008532:	3303      	adds	r3, #3
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	4299      	cmp	r1, r3
 8008538:	d11a      	bne.n	8008570 <mavlink_signature_check+0x158>
		    msg->compid == signing_streams->stream[i].compid &&
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	7a19      	ldrb	r1, [r3, #8]
 800853e:	193b      	adds	r3, r7, r4
 8008540:	881a      	ldrh	r2, [r3, #0]
 8008542:	68b8      	ldr	r0, [r7, #8]
 8008544:	0013      	movs	r3, r2
 8008546:	00db      	lsls	r3, r3, #3
 8008548:	189b      	adds	r3, r3, r2
 800854a:	18c3      	adds	r3, r0, r3
 800854c:	3304      	adds	r3, #4
 800854e:	781b      	ldrb	r3, [r3, #0]
		if (msg->sysid == signing_streams->stream[i].sysid &&
 8008550:	4299      	cmp	r1, r3
 8008552:	d10d      	bne.n	8008570 <mavlink_signature_check+0x158>
		    link_id == signing_streams->stream[i].link_id) {
 8008554:	193b      	adds	r3, r7, r4
 8008556:	881a      	ldrh	r2, [r3, #0]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	0013      	movs	r3, r2
 800855c:	00db      	lsls	r3, r3, #3
 800855e:	189b      	adds	r3, r3, r2
 8008560:	18cb      	adds	r3, r1, r3
 8008562:	3302      	adds	r3, #2
 8008564:	781b      	ldrb	r3, [r3, #0]
		    msg->compid == signing_streams->stream[i].compid &&
 8008566:	2297      	movs	r2, #151	@ 0x97
 8008568:	18ba      	adds	r2, r7, r2
 800856a:	7812      	ldrb	r2, [r2, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d00d      	beq.n	800858c <mavlink_signature_check+0x174>
	for (i=0; i<signing_streams->num_signing_streams; i++) {
 8008570:	21a6      	movs	r1, #166	@ 0xa6
 8008572:	187b      	adds	r3, r7, r1
 8008574:	881a      	ldrh	r2, [r3, #0]
 8008576:	187b      	adds	r3, r7, r1
 8008578:	3201      	adds	r2, #1
 800857a:	801a      	strh	r2, [r3, #0]
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	881b      	ldrh	r3, [r3, #0]
 8008580:	22a6      	movs	r2, #166	@ 0xa6
 8008582:	18ba      	adds	r2, r7, r2
 8008584:	8812      	ldrh	r2, [r2, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d3c9      	bcc.n	800851e <mavlink_signature_check+0x106>
 800858a:	e000      	b.n	800858e <mavlink_signature_check+0x176>
			break;
 800858c:	46c0      	nop			@ (mov r8, r8)
		}
	}
	if (i == signing_streams->num_signing_streams) {
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	881b      	ldrh	r3, [r3, #0]
 8008592:	22a6      	movs	r2, #166	@ 0xa6
 8008594:	18ba      	adds	r2, r7, r2
 8008596:	8812      	ldrh	r2, [r2, #0]
 8008598:	429a      	cmp	r2, r3
 800859a:	d149      	bne.n	8008630 <mavlink_signature_check+0x218>
		if (signing_streams->num_signing_streams >= MAVLINK_MAX_SIGNING_STREAMS) {
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	881b      	ldrh	r3, [r3, #0]
 80085a0:	2b0f      	cmp	r3, #15
 80085a2:	d905      	bls.n	80085b0 <mavlink_signature_check+0x198>
			// over max number of streams
                        signing->last_status = MAVLINK_SIGNING_STATUS_TOO_MANY_STREAMS;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2234      	movs	r2, #52	@ 0x34
 80085a8:	2104      	movs	r1, #4
 80085aa:	5499      	strb	r1, [r3, r2]
                        return false;
 80085ac:	2300      	movs	r3, #0
 80085ae:	e086      	b.n	80086be <mavlink_signature_check+0x2a6>
		}
		// new stream. Only accept if timestamp is not more than 1 minute old
		if (tstamp.t64 + 6000*1000UL < signing->timestamp) {
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	4844      	ldr	r0, [pc, #272]	@ (80086c8 <mavlink_signature_check+0x2b0>)
 80085b6:	2100      	movs	r1, #0
 80085b8:	1812      	adds	r2, r2, r0
 80085ba:	414b      	adcs	r3, r1
 80085bc:	68f9      	ldr	r1, [r7, #12]
 80085be:	6888      	ldr	r0, [r1, #8]
 80085c0:	68c9      	ldr	r1, [r1, #12]
 80085c2:	4299      	cmp	r1, r3
 80085c4:	d802      	bhi.n	80085cc <mavlink_signature_check+0x1b4>
 80085c6:	d107      	bne.n	80085d8 <mavlink_signature_check+0x1c0>
 80085c8:	4290      	cmp	r0, r2
 80085ca:	d905      	bls.n	80085d8 <mavlink_signature_check+0x1c0>
                        signing->last_status = MAVLINK_SIGNING_STATUS_OLD_TIMESTAMP;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2234      	movs	r2, #52	@ 0x34
 80085d0:	2105      	movs	r1, #5
 80085d2:	5499      	strb	r1, [r3, r2]
                        return false;
 80085d4:	2300      	movs	r3, #0
 80085d6:	e072      	b.n	80086be <mavlink_signature_check+0x2a6>
		}
		// add new stream
		signing_streams->stream[i].sysid = msg->sysid;
 80085d8:	24a6      	movs	r4, #166	@ 0xa6
 80085da:	193b      	adds	r3, r7, r4
 80085dc:	881a      	ldrh	r2, [r3, #0]
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	79d8      	ldrb	r0, [r3, #7]
 80085e2:	68b9      	ldr	r1, [r7, #8]
 80085e4:	0013      	movs	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	189b      	adds	r3, r3, r2
 80085ea:	18cb      	adds	r3, r1, r3
 80085ec:	3303      	adds	r3, #3
 80085ee:	1c02      	adds	r2, r0, #0
 80085f0:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].compid = msg->compid;
 80085f2:	193b      	adds	r3, r7, r4
 80085f4:	881a      	ldrh	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	7a18      	ldrb	r0, [r3, #8]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	0013      	movs	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	189b      	adds	r3, r3, r2
 8008602:	18cb      	adds	r3, r1, r3
 8008604:	3304      	adds	r3, #4
 8008606:	1c02      	adds	r2, r0, #0
 8008608:	701a      	strb	r2, [r3, #0]
		signing_streams->stream[i].link_id = link_id;
 800860a:	193b      	adds	r3, r7, r4
 800860c:	881a      	ldrh	r2, [r3, #0]
 800860e:	68b9      	ldr	r1, [r7, #8]
 8008610:	0013      	movs	r3, r2
 8008612:	00db      	lsls	r3, r3, #3
 8008614:	189b      	adds	r3, r3, r2
 8008616:	18cb      	adds	r3, r1, r3
 8008618:	3302      	adds	r3, #2
 800861a:	2297      	movs	r2, #151	@ 0x97
 800861c:	18ba      	adds	r2, r7, r2
 800861e:	7812      	ldrb	r2, [r2, #0]
 8008620:	701a      	strb	r2, [r3, #0]
		signing_streams->num_signing_streams++;
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	881b      	ldrh	r3, [r3, #0]
 8008626:	3301      	adds	r3, #1
 8008628:	b29a      	uxth	r2, r3
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	801a      	strh	r2, [r3, #0]
 800862e:	e021      	b.n	8008674 <mavlink_signature_check+0x25c>
	} else {
		union tstamp last_tstamp;
		last_tstamp.t64 = 0;
 8008630:	2200      	movs	r2, #0
 8008632:	2300      	movs	r3, #0
 8008634:	613a      	str	r2, [r7, #16]
 8008636:	617b      	str	r3, [r7, #20]
		memcpy(last_tstamp.t8, signing_streams->stream[i].timestamp_bytes, 6);
 8008638:	23a6      	movs	r3, #166	@ 0xa6
 800863a:	18fb      	adds	r3, r7, r3
 800863c:	881a      	ldrh	r2, [r3, #0]
 800863e:	0013      	movs	r3, r2
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	189b      	adds	r3, r3, r2
 8008644:	68ba      	ldr	r2, [r7, #8]
 8008646:	18d3      	adds	r3, r2, r3
 8008648:	1d59      	adds	r1, r3, #5
 800864a:	2310      	movs	r3, #16
 800864c:	18fb      	adds	r3, r7, r3
 800864e:	2206      	movs	r2, #6
 8008650:	0018      	movs	r0, r3
 8008652:	f000 fef3 	bl	800943c <memcpy>
		if (tstamp.t64 <= last_tstamp.t64) {
 8008656:	69b8      	ldr	r0, [r7, #24]
 8008658:	69f9      	ldr	r1, [r7, #28]
 800865a:	693a      	ldr	r2, [r7, #16]
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	4299      	cmp	r1, r3
 8008660:	d808      	bhi.n	8008674 <mavlink_signature_check+0x25c>
 8008662:	d101      	bne.n	8008668 <mavlink_signature_check+0x250>
 8008664:	4290      	cmp	r0, r2
 8008666:	d805      	bhi.n	8008674 <mavlink_signature_check+0x25c>
			// repeating old timestamp
                        signing->last_status = MAVLINK_SIGNING_STATUS_REPLAY;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2234      	movs	r2, #52	@ 0x34
 800866c:	2106      	movs	r1, #6
 800866e:	5499      	strb	r1, [r3, r2]
                        return false;
 8008670:	2300      	movs	r3, #0
 8008672:	e024      	b.n	80086be <mavlink_signature_check+0x2a6>
		}
	}

	// remember last timestamp
	memcpy(signing_streams->stream[i].timestamp_bytes, psig+1, 6);
 8008674:	23a6      	movs	r3, #166	@ 0xa6
 8008676:	18fb      	adds	r3, r7, r3
 8008678:	881a      	ldrh	r2, [r3, #0]
 800867a:	0013      	movs	r3, r2
 800867c:	00db      	lsls	r3, r3, #3
 800867e:	189b      	adds	r3, r3, r2
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	18d3      	adds	r3, r2, r3
 8008684:	1d58      	adds	r0, r3, #5
 8008686:	239c      	movs	r3, #156	@ 0x9c
 8008688:	18fb      	adds	r3, r7, r3
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3301      	adds	r3, #1
 800868e:	2206      	movs	r2, #6
 8008690:	0019      	movs	r1, r3
 8008692:	f000 fed3 	bl	800943c <memcpy>

	// our next timestamp must be at least this timestamp
	if (tstamp.t64 > signing->timestamp) {
 8008696:	69b8      	ldr	r0, [r7, #24]
 8008698:	69f9      	ldr	r1, [r7, #28]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	689a      	ldr	r2, [r3, #8]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	4299      	cmp	r1, r3
 80086a2:	d802      	bhi.n	80086aa <mavlink_signature_check+0x292>
 80086a4:	d106      	bne.n	80086b4 <mavlink_signature_check+0x29c>
 80086a6:	4290      	cmp	r0, r2
 80086a8:	d904      	bls.n	80086b4 <mavlink_signature_check+0x29c>
		signing->timestamp = tstamp.t64;
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	69fb      	ldr	r3, [r7, #28]
 80086ae:	68f9      	ldr	r1, [r7, #12]
 80086b0:	608a      	str	r2, [r1, #8]
 80086b2:	60cb      	str	r3, [r1, #12]
	}
        signing->last_status = MAVLINK_SIGNING_STATUS_OK;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2234      	movs	r2, #52	@ 0x34
 80086b8:	2101      	movs	r1, #1
 80086ba:	5499      	strb	r1, [r3, r2]
        return true;
 80086bc:	2301      	movs	r3, #1
}
 80086be:	0018      	movs	r0, r3
 80086c0:	46bd      	mov	sp, r7
 80086c2:	b02b      	add	sp, #172	@ 0xac
 80086c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086c6:	46c0      	nop			@ (mov r8, r8)
 80086c8:	005b8d80 	.word	0x005b8d80

080086cc <_mav_parse_error>:
{
    return mavlink_finalize_message_chan(msg, system_id, component_id, MAVLINK_COMM_0, min_length, length, crc_extra);
}

static inline void _mav_parse_error(mavlink_status_t *status)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
    status->parse_error++;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	789b      	ldrb	r3, [r3, #2]
 80086d8:	3301      	adds	r3, #1
 80086da:	b2da      	uxtb	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	709a      	strb	r2, [r3, #2]
}
 80086e0:	46c0      	nop			@ (mov r8, r8)
 80086e2:	46bd      	mov	sp, r7
 80086e4:	b002      	add	sp, #8
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
 80086e8:	b590      	push	{r4, r7, lr}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
	uint16_t crcTmp = 0;
 80086f0:	210e      	movs	r1, #14
 80086f2:	187b      	adds	r3, r7, r1
 80086f4:	2200      	movs	r2, #0
 80086f6:	801a      	strh	r2, [r3, #0]
	crc_init(&crcTmp);
 80086f8:	000c      	movs	r4, r1
 80086fa:	187b      	adds	r3, r7, r1
 80086fc:	0018      	movs	r0, r3
 80086fe:	f7ff fb47 	bl	8007d90 <crc_init>
	msg->checksum = crcTmp;
 8008702:	193b      	adds	r3, r7, r4
 8008704:	881a      	ldrh	r2, [r3, #0]
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	21ff      	movs	r1, #255	@ 0xff
 800870a:	4011      	ands	r1, r2
 800870c:	000c      	movs	r4, r1
 800870e:	7819      	ldrb	r1, [r3, #0]
 8008710:	2000      	movs	r0, #0
 8008712:	4001      	ands	r1, r0
 8008714:	1c08      	adds	r0, r1, #0
 8008716:	1c21      	adds	r1, r4, #0
 8008718:	4301      	orrs	r1, r0
 800871a:	7019      	strb	r1, [r3, #0]
 800871c:	0a12      	lsrs	r2, r2, #8
 800871e:	b290      	uxth	r0, r2
 8008720:	785a      	ldrb	r2, [r3, #1]
 8008722:	2100      	movs	r1, #0
 8008724:	400a      	ands	r2, r1
 8008726:	1c11      	adds	r1, r2, #0
 8008728:	1c02      	adds	r2, r0, #0
 800872a:	430a      	orrs	r2, r1
 800872c:	705a      	strb	r2, [r3, #1]
}
 800872e:	46c0      	nop			@ (mov r8, r8)
 8008730:	46bd      	mov	sp, r7
 8008732:	b005      	add	sp, #20
 8008734:	bd90      	pop	{r4, r7, pc}

08008736 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
 8008736:	b590      	push	{r4, r7, lr}
 8008738:	b085      	sub	sp, #20
 800873a:	af00      	add	r7, sp, #0
 800873c:	6078      	str	r0, [r7, #4]
 800873e:	000a      	movs	r2, r1
 8008740:	1cfb      	adds	r3, r7, #3
 8008742:	701a      	strb	r2, [r3, #0]
	uint16_t checksum = msg->checksum;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	781a      	ldrb	r2, [r3, #0]
 8008748:	785b      	ldrb	r3, [r3, #1]
 800874a:	021b      	lsls	r3, r3, #8
 800874c:	4313      	orrs	r3, r2
 800874e:	b29a      	uxth	r2, r3
 8008750:	240e      	movs	r4, #14
 8008752:	193b      	adds	r3, r7, r4
 8008754:	801a      	strh	r2, [r3, #0]
	crc_accumulate(c, &checksum);
 8008756:	193a      	adds	r2, r7, r4
 8008758:	1cfb      	adds	r3, r7, #3
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	0011      	movs	r1, r2
 800875e:	0018      	movs	r0, r3
 8008760:	f7ff fad8 	bl	8007d14 <crc_accumulate>
	msg->checksum = checksum;
 8008764:	193b      	adds	r3, r7, r4
 8008766:	881a      	ldrh	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	21ff      	movs	r1, #255	@ 0xff
 800876c:	4011      	ands	r1, r2
 800876e:	000c      	movs	r4, r1
 8008770:	7819      	ldrb	r1, [r3, #0]
 8008772:	2000      	movs	r0, #0
 8008774:	4001      	ands	r1, r0
 8008776:	1c08      	adds	r0, r1, #0
 8008778:	1c21      	adds	r1, r4, #0
 800877a:	4301      	orrs	r1, r0
 800877c:	7019      	strb	r1, [r3, #0]
 800877e:	0a12      	lsrs	r2, r2, #8
 8008780:	b290      	uxth	r0, r2
 8008782:	785a      	ldrb	r2, [r3, #1]
 8008784:	2100      	movs	r1, #0
 8008786:	400a      	ands	r2, r1
 8008788:	1c11      	adds	r1, r2, #0
 800878a:	1c02      	adds	r2, r0, #0
 800878c:	430a      	orrs	r2, r1
 800878e:	705a      	strb	r2, [r3, #1]
}
 8008790:	46c0      	nop			@ (mov r8, r8)
 8008792:	46bd      	mov	sp, r7
 8008794:	b005      	add	sp, #20
 8008796:	bd90      	pop	{r4, r7, pc}

08008798 <mavlink_get_msg_entry>:
/*
  return the crc_entry value for a msgid
*/
#ifndef MAVLINK_GET_MSG_ENTRY
MAVLINK_HELPER const mavlink_msg_entry_t *mavlink_get_msg_entry(uint32_t msgid)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
	static const mavlink_msg_entry_t mavlink_message_crcs[] = MAVLINK_MESSAGE_CRCS;
        /*
	  use a bisection search to find the right entry. A perfect hash may be better
	  Note that this assumes the table is sorted by msgid
	*/
        uint32_t low=0, high=sizeof(mavlink_message_crcs)/sizeof(mavlink_message_crcs[0]) - 1;
 80087a0:	2300      	movs	r3, #0
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	23e7      	movs	r3, #231	@ 0xe7
 80087a6:	613b      	str	r3, [r7, #16]
        while (low < high) {
 80087a8:	e023      	b.n	80087f2 <mavlink_get_msg_entry+0x5a>
            uint32_t mid = (low+1+high)/2;
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	18d3      	adds	r3, r2, r3
 80087b0:	3301      	adds	r3, #1
 80087b2:	085b      	lsrs	r3, r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]
            if (msgid < mavlink_message_crcs[mid].msgid) {
 80087b6:	491c      	ldr	r1, [pc, #112]	@ (8008828 <mavlink_get_msg_entry+0x90>)
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	0013      	movs	r3, r2
 80087bc:	005b      	lsls	r3, r3, #1
 80087be:	189b      	adds	r3, r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	585b      	ldr	r3, [r3, r1]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d203      	bcs.n	80087d2 <mavlink_get_msg_entry+0x3a>
                high = mid-1;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	613b      	str	r3, [r7, #16]
                continue;
 80087d0:	e00f      	b.n	80087f2 <mavlink_get_msg_entry+0x5a>
            }
            if (msgid > mavlink_message_crcs[mid].msgid) {
 80087d2:	4915      	ldr	r1, [pc, #84]	@ (8008828 <mavlink_get_msg_entry+0x90>)
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	0013      	movs	r3, r2
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	189b      	adds	r3, r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	585b      	ldr	r3, [r3, r1]
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d902      	bls.n	80087ec <mavlink_get_msg_entry+0x54>
                low = mid;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	617b      	str	r3, [r7, #20]
                continue;
 80087ea:	e002      	b.n	80087f2 <mavlink_get_msg_entry+0x5a>
            }
            low = mid;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	617b      	str	r3, [r7, #20]
            break;
 80087f0:	e003      	b.n	80087fa <mavlink_get_msg_entry+0x62>
        while (low < high) {
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d3d7      	bcc.n	80087aa <mavlink_get_msg_entry+0x12>
        }
        if (mavlink_message_crcs[low].msgid != msgid) {
 80087fa:	490b      	ldr	r1, [pc, #44]	@ (8008828 <mavlink_get_msg_entry+0x90>)
 80087fc:	697a      	ldr	r2, [r7, #20]
 80087fe:	0013      	movs	r3, r2
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	189b      	adds	r3, r3, r2
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	585b      	ldr	r3, [r3, r1]
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	429a      	cmp	r2, r3
 800880c:	d001      	beq.n	8008812 <mavlink_get_msg_entry+0x7a>
            // msgid is not in the table
            return NULL;
 800880e:	2300      	movs	r3, #0
 8008810:	e006      	b.n	8008820 <mavlink_get_msg_entry+0x88>
        }
        return &mavlink_message_crcs[low];
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	0013      	movs	r3, r2
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	189b      	adds	r3, r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4a02      	ldr	r2, [pc, #8]	@ (8008828 <mavlink_get_msg_entry+0x90>)
 800881e:	189b      	adds	r3, r3, r2
}
 8008820:	0018      	movs	r0, r3
 8008822:	46bd      	mov	sp, r7
 8008824:	b006      	add	sp, #24
 8008826:	bd80      	pop	{r7, pc}
 8008828:	0800a370 	.word	0x0800a370

0800882c <mavlink_frame_char_buffer>:
MAVLINK_HELPER uint8_t mavlink_frame_char_buffer(mavlink_message_t* rxmsg, 
                                                 mavlink_status_t* status,
                                                 uint8_t c, 
                                                 mavlink_message_t* r_message, 
                                                 mavlink_status_t* r_mavlink_status)
{
 800882c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800882e:	b089      	sub	sp, #36	@ 0x24
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	1dfb      	adds	r3, r7, #7
 800883a:	701a      	strb	r2, [r3, #0]

	status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]

	switch (status->parse_state)
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	78db      	ldrb	r3, [r3, #3]
 8008846:	2b0f      	cmp	r3, #15
 8008848:	d900      	bls.n	800884c <mavlink_frame_char_buffer+0x20>
 800884a:	e2dd      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
 800884c:	009a      	lsls	r2, r3, #2
 800884e:	4be4      	ldr	r3, [pc, #912]	@ (8008be0 <mavlink_frame_char_buffer+0x3b4>)
 8008850:	18d3      	adds	r3, r2, r3
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	469f      	mov	pc, r3
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
 8008856:	1dfb      	adds	r3, r7, #7
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	2bfd      	cmp	r3, #253	@ 0xfd
 800885c:	d115      	bne.n	800888a <mavlink_frame_char_buffer+0x5e>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2202      	movs	r2, #2
 8008862:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2200      	movs	r2, #0
 8008868:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	1dfa      	adds	r2, r7, #7
 800886e:	7812      	ldrb	r2, [r2, #0]
 8008870:	709a      	strb	r2, [r3, #2]
                        status->flags &= ~MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	7b1b      	ldrb	r3, [r3, #12]
 8008876:	2201      	movs	r2, #1
 8008878:	4393      	bics	r3, r2
 800887a:	b2da      	uxtb	r2, r3
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	0018      	movs	r0, r3
 8008884:	f7ff ff30 	bl	80086e8 <mavlink_start_checksum>
			rxmsg->len = 0;
			rxmsg->magic = c;
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
			mavlink_start_checksum(rxmsg);
		}
		break;
 8008888:	e2b5      	b.n	8008df6 <mavlink_frame_char_buffer+0x5ca>
		} else if (c == MAVLINK_STX_MAVLINK1)
 800888a:	1dfb      	adds	r3, r7, #7
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2bfe      	cmp	r3, #254	@ 0xfe
 8008890:	d000      	beq.n	8008894 <mavlink_frame_char_buffer+0x68>
 8008892:	e2b0      	b.n	8008df6 <mavlink_frame_char_buffer+0x5ca>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2202      	movs	r2, #2
 8008898:	70da      	strb	r2, [r3, #3]
			rxmsg->len = 0;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	70da      	strb	r2, [r3, #3]
			rxmsg->magic = c;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	1dfa      	adds	r2, r7, #7
 80088a4:	7812      	ldrb	r2, [r2, #0]
 80088a6:	709a      	strb	r2, [r3, #2]
                        status->flags |= MAVLINK_STATUS_FLAG_IN_MAVLINK1;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	7b1b      	ldrb	r3, [r3, #12]
 80088ac:	2201      	movs	r2, #1
 80088ae:	4313      	orrs	r3, r2
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	731a      	strb	r2, [r3, #12]
			mavlink_start_checksum(rxmsg);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	0018      	movs	r0, r3
 80088ba:	f7ff ff15 	bl	80086e8 <mavlink_start_checksum>
		break;
 80088be:	e29a      	b.n	8008df6 <mavlink_frame_char_buffer+0x5ca>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	781b      	ldrb	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d010      	beq.n	80088ea <mavlink_frame_char_buffer+0xbe>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	785b      	ldrb	r3, [r3, #1]
 80088cc:	3301      	adds	r3, #1
 80088ce:	b2da      	uxtb	r2, r3
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	705a      	strb	r2, [r3, #1]
			_mav_parse_error(status);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	0018      	movs	r0, r3
 80088d8:	f7ff fef8 	bl	80086cc <_mav_parse_error>
			status->msg_received = 0;
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2200      	movs	r2, #0
 80088e0:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	2201      	movs	r2, #1
 80088e6:	70da      	strb	r2, [r3, #3]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
                        } else {
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
                        }
		}
		break;
 80088e8:	e28e      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
			rxmsg->len = c;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	1dfa      	adds	r2, r7, #7
 80088ee:	7812      	ldrb	r2, [r2, #0]
 80088f0:	70da      	strb	r2, [r3, #3]
			status->packet_idx = 0;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	2200      	movs	r2, #0
 80088f6:	711a      	strb	r2, [r3, #4]
			mavlink_update_checksum(rxmsg, c);
 80088f8:	1dfb      	adds	r3, r7, #7
 80088fa:	781a      	ldrb	r2, [r3, #0]
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	0011      	movs	r1, r2
 8008900:	0018      	movs	r0, r3
 8008902:	f7ff ff18 	bl	8008736 <mavlink_update_checksum>
                        if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	7b1b      	ldrb	r3, [r3, #12]
 800890a:	001a      	movs	r2, r3
 800890c:	2301      	movs	r3, #1
 800890e:	4013      	ands	r3, r2
 8008910:	d009      	beq.n	8008926 <mavlink_frame_char_buffer+0xfa>
                            rxmsg->incompat_flags = 0;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	2200      	movs	r2, #0
 8008916:	711a      	strb	r2, [r3, #4]
                            rxmsg->compat_flags = 0;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	715a      	strb	r2, [r3, #5]
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	2205      	movs	r2, #5
 8008922:	70da      	strb	r2, [r3, #3]
		break;
 8008924:	e270      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
                            status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2203      	movs	r2, #3
 800892a:	70da      	strb	r2, [r3, #3]
		break;
 800892c:	e26c      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->incompat_flags = c;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	1dfa      	adds	r2, r7, #7
 8008932:	7812      	ldrb	r2, [r2, #0]
 8008934:	711a      	strb	r2, [r3, #4]
		if ((rxmsg->incompat_flags & ~MAVLINK_IFLAG_MASK) != 0) {
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	791b      	ldrb	r3, [r3, #4]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d90a      	bls.n	8008954 <mavlink_frame_char_buffer+0x128>
			// message includes an incompatible feature flag
			_mav_parse_error(status);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	0018      	movs	r0, r3
 8008942:	f7ff fec3 	bl	80086cc <_mav_parse_error>
			status->msg_received = 0;
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2200      	movs	r2, #0
 800894a:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2201      	movs	r2, #1
 8008950:	70da      	strb	r2, [r3, #3]
			break;
 8008952:	e259      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
		}
		mavlink_update_checksum(rxmsg, c);
 8008954:	1dfb      	adds	r3, r7, #7
 8008956:	781a      	ldrb	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	0011      	movs	r1, r2
 800895c:	0018      	movs	r0, r3
 800895e:	f7ff feea 	bl	8008736 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS;
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	2204      	movs	r2, #4
 8008966:	70da      	strb	r2, [r3, #3]
		break;
 8008968:	e24e      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_INCOMPAT_FLAGS:
		rxmsg->compat_flags = c;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	1dfa      	adds	r2, r7, #7
 800896e:	7812      	ldrb	r2, [r2, #0]
 8008970:	715a      	strb	r2, [r3, #5]
		mavlink_update_checksum(rxmsg, c);
 8008972:	1dfb      	adds	r3, r7, #7
 8008974:	781a      	ldrb	r2, [r3, #0]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	0011      	movs	r1, r2
 800897a:	0018      	movs	r0, r3
 800897c:	f7ff fedb 	bl	8008736 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS;
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2205      	movs	r2, #5
 8008984:	70da      	strb	r2, [r3, #3]
		break;
 8008986:	e23f      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_COMPAT_FLAGS:
		rxmsg->seq = c;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	1dfa      	adds	r2, r7, #7
 800898c:	7812      	ldrb	r2, [r2, #0]
 800898e:	719a      	strb	r2, [r3, #6]
		mavlink_update_checksum(rxmsg, c);
 8008990:	1dfb      	adds	r3, r7, #7
 8008992:	781a      	ldrb	r2, [r3, #0]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	0011      	movs	r1, r2
 8008998:	0018      	movs	r0, r3
 800899a:	f7ff fecc 	bl	8008736 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2206      	movs	r2, #6
 80089a2:	70da      	strb	r2, [r3, #3]
		break;
 80089a4:	e230      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
                
	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	1dfa      	adds	r2, r7, #7
 80089aa:	7812      	ldrb	r2, [r2, #0]
 80089ac:	71da      	strb	r2, [r3, #7]
		mavlink_update_checksum(rxmsg, c);
 80089ae:	1dfb      	adds	r3, r7, #7
 80089b0:	781a      	ldrb	r2, [r3, #0]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	0011      	movs	r1, r2
 80089b6:	0018      	movs	r0, r3
 80089b8:	f7ff febd 	bl	8008736 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2207      	movs	r2, #7
 80089c0:	70da      	strb	r2, [r3, #3]
		break;
 80089c2:	e221      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	1dfa      	adds	r2, r7, #7
 80089c8:	7812      	ldrb	r2, [r2, #0]
 80089ca:	721a      	strb	r2, [r3, #8]
		mavlink_update_checksum(rxmsg, c);
 80089cc:	1dfb      	adds	r3, r7, #7
 80089ce:	781a      	ldrb	r2, [r3, #0]
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	0011      	movs	r1, r2
 80089d4:	0018      	movs	r0, r3
 80089d6:	f7ff feae 	bl	8008736 <mavlink_update_checksum>
                status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	2208      	movs	r2, #8
 80089de:	70da      	strb	r2, [r3, #3]
		break;
 80089e0:	e212      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_COMPID:
		rxmsg->msgid = c;
 80089e2:	1dfb      	adds	r3, r7, #7
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	021b      	lsls	r3, r3, #8
 80089e8:	0a1b      	lsrs	r3, r3, #8
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	2109      	movs	r1, #9
 80089ee:	20ff      	movs	r0, #255	@ 0xff
 80089f0:	4018      	ands	r0, r3
 80089f2:	0005      	movs	r5, r0
 80089f4:	5c50      	ldrb	r0, [r2, r1]
 80089f6:	2400      	movs	r4, #0
 80089f8:	4020      	ands	r0, r4
 80089fa:	1c04      	adds	r4, r0, #0
 80089fc:	1c28      	adds	r0, r5, #0
 80089fe:	4320      	orrs	r0, r4
 8008a00:	5450      	strb	r0, [r2, r1]
 8008a02:	0a18      	lsrs	r0, r3, #8
 8008a04:	24ff      	movs	r4, #255	@ 0xff
 8008a06:	4020      	ands	r0, r4
 8008a08:	0006      	movs	r6, r0
 8008a0a:	1850      	adds	r0, r2, r1
 8008a0c:	7844      	ldrb	r4, [r0, #1]
 8008a0e:	2500      	movs	r5, #0
 8008a10:	402c      	ands	r4, r5
 8008a12:	1c25      	adds	r5, r4, #0
 8008a14:	1c34      	adds	r4, r6, #0
 8008a16:	432c      	orrs	r4, r5
 8008a18:	7044      	strb	r4, [r0, #1]
 8008a1a:	0c1b      	lsrs	r3, r3, #16
 8008a1c:	20ff      	movs	r0, #255	@ 0xff
 8008a1e:	4018      	ands	r0, r3
 8008a20:	1853      	adds	r3, r2, r1
 8008a22:	789a      	ldrb	r2, [r3, #2]
 8008a24:	2100      	movs	r1, #0
 8008a26:	400a      	ands	r2, r1
 8008a28:	1c11      	adds	r1, r2, #0
 8008a2a:	1c02      	adds	r2, r0, #0
 8008a2c:	430a      	orrs	r2, r1
 8008a2e:	709a      	strb	r2, [r3, #2]
		mavlink_update_checksum(rxmsg, c);
 8008a30:	1dfb      	adds	r3, r7, #7
 8008a32:	781a      	ldrb	r2, [r3, #0]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	0011      	movs	r1, r2
 8008a38:	0018      	movs	r0, r3
 8008a3a:	f7ff fe7c 	bl	8008736 <mavlink_update_checksum>
		if (status->flags & MAVLINK_STATUS_FLAG_IN_MAVLINK1) {
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	7b1b      	ldrb	r3, [r3, #12]
 8008a42:	001a      	movs	r2, r3
 8008a44:	2301      	movs	r3, #1
 8008a46:	4013      	ands	r3, r2
 8008a48:	d00b      	beq.n	8008a62 <mavlink_frame_char_buffer+0x236>
			if(rxmsg->len > 0) {
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	78db      	ldrb	r3, [r3, #3]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d003      	beq.n	8008a5a <mavlink_frame_char_buffer+0x22e>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	220b      	movs	r2, #11
 8008a56:	70da      	strb	r2, [r3, #3]
			}
#endif
		} else {
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
		}
		break;
 8008a58:	e1d6      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	220c      	movs	r2, #12
 8008a5e:	70da      	strb	r2, [r3, #3]
		break;
 8008a60:	e1d2      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID1;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2209      	movs	r2, #9
 8008a66:	70da      	strb	r2, [r3, #3]
		break;
 8008a68:	e1ce      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_MSGID1:
		rxmsg->msgid |= ((uint32_t)c)<<8;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	7a5a      	ldrb	r2, [r3, #9]
 8008a6e:	7a99      	ldrb	r1, [r3, #10]
 8008a70:	0209      	lsls	r1, r1, #8
 8008a72:	430a      	orrs	r2, r1
 8008a74:	7adb      	ldrb	r3, [r3, #11]
 8008a76:	041b      	lsls	r3, r3, #16
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	001a      	movs	r2, r3
 8008a7c:	1dfb      	adds	r3, r7, #7
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	021b      	lsls	r3, r3, #8
 8008a82:	4313      	orrs	r3, r2
 8008a84:	021b      	lsls	r3, r3, #8
 8008a86:	0a19      	lsrs	r1, r3, #8
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2209      	movs	r2, #9
 8008a8c:	20ff      	movs	r0, #255	@ 0xff
 8008a8e:	4008      	ands	r0, r1
 8008a90:	0005      	movs	r5, r0
 8008a92:	5c98      	ldrb	r0, [r3, r2]
 8008a94:	2400      	movs	r4, #0
 8008a96:	4020      	ands	r0, r4
 8008a98:	1c04      	adds	r4, r0, #0
 8008a9a:	1c28      	adds	r0, r5, #0
 8008a9c:	4320      	orrs	r0, r4
 8008a9e:	5498      	strb	r0, [r3, r2]
 8008aa0:	0a08      	lsrs	r0, r1, #8
 8008aa2:	24ff      	movs	r4, #255	@ 0xff
 8008aa4:	4020      	ands	r0, r4
 8008aa6:	0006      	movs	r6, r0
 8008aa8:	1898      	adds	r0, r3, r2
 8008aaa:	7844      	ldrb	r4, [r0, #1]
 8008aac:	2500      	movs	r5, #0
 8008aae:	402c      	ands	r4, r5
 8008ab0:	1c25      	adds	r5, r4, #0
 8008ab2:	1c34      	adds	r4, r6, #0
 8008ab4:	432c      	orrs	r4, r5
 8008ab6:	7044      	strb	r4, [r0, #1]
 8008ab8:	0c09      	lsrs	r1, r1, #16
 8008aba:	20ff      	movs	r0, #255	@ 0xff
 8008abc:	4008      	ands	r0, r1
 8008abe:	189b      	adds	r3, r3, r2
 8008ac0:	789a      	ldrb	r2, [r3, #2]
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	400a      	ands	r2, r1
 8008ac6:	1c11      	adds	r1, r2, #0
 8008ac8:	1c02      	adds	r2, r0, #0
 8008aca:	430a      	orrs	r2, r1
 8008acc:	709a      	strb	r2, [r3, #2]
		mavlink_update_checksum(rxmsg, c);
 8008ace:	1dfb      	adds	r3, r7, #7
 8008ad0:	781a      	ldrb	r2, [r3, #0]
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	0011      	movs	r1, r2
 8008ad6:	0018      	movs	r0, r3
 8008ad8:	f7ff fe2d 	bl	8008736 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID2;
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	220a      	movs	r2, #10
 8008ae0:	70da      	strb	r2, [r3, #3]
		break;
 8008ae2:	e191      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>

	case MAVLINK_PARSE_STATE_GOT_MSGID2:
		rxmsg->msgid |= ((uint32_t)c)<<16;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	7a5a      	ldrb	r2, [r3, #9]
 8008ae8:	7a99      	ldrb	r1, [r3, #10]
 8008aea:	0209      	lsls	r1, r1, #8
 8008aec:	430a      	orrs	r2, r1
 8008aee:	7adb      	ldrb	r3, [r3, #11]
 8008af0:	041b      	lsls	r3, r3, #16
 8008af2:	4313      	orrs	r3, r2
 8008af4:	001a      	movs	r2, r3
 8008af6:	1dfb      	adds	r3, r7, #7
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	041b      	lsls	r3, r3, #16
 8008afc:	4313      	orrs	r3, r2
 8008afe:	021b      	lsls	r3, r3, #8
 8008b00:	0a19      	lsrs	r1, r3, #8
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2209      	movs	r2, #9
 8008b06:	20ff      	movs	r0, #255	@ 0xff
 8008b08:	4008      	ands	r0, r1
 8008b0a:	0005      	movs	r5, r0
 8008b0c:	5c98      	ldrb	r0, [r3, r2]
 8008b0e:	2400      	movs	r4, #0
 8008b10:	4020      	ands	r0, r4
 8008b12:	1c04      	adds	r4, r0, #0
 8008b14:	1c28      	adds	r0, r5, #0
 8008b16:	4320      	orrs	r0, r4
 8008b18:	5498      	strb	r0, [r3, r2]
 8008b1a:	0a08      	lsrs	r0, r1, #8
 8008b1c:	24ff      	movs	r4, #255	@ 0xff
 8008b1e:	4020      	ands	r0, r4
 8008b20:	0006      	movs	r6, r0
 8008b22:	1898      	adds	r0, r3, r2
 8008b24:	7844      	ldrb	r4, [r0, #1]
 8008b26:	2500      	movs	r5, #0
 8008b28:	402c      	ands	r4, r5
 8008b2a:	1c25      	adds	r5, r4, #0
 8008b2c:	1c34      	adds	r4, r6, #0
 8008b2e:	432c      	orrs	r4, r5
 8008b30:	7044      	strb	r4, [r0, #1]
 8008b32:	0c09      	lsrs	r1, r1, #16
 8008b34:	20ff      	movs	r0, #255	@ 0xff
 8008b36:	4008      	ands	r0, r1
 8008b38:	189b      	adds	r3, r3, r2
 8008b3a:	789a      	ldrb	r2, [r3, #2]
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	400a      	ands	r2, r1
 8008b40:	1c11      	adds	r1, r2, #0
 8008b42:	1c02      	adds	r2, r0, #0
 8008b44:	430a      	orrs	r2, r1
 8008b46:	709a      	strb	r2, [r3, #2]
		mavlink_update_checksum(rxmsg, c);
 8008b48:	1dfb      	adds	r3, r7, #7
 8008b4a:	781a      	ldrb	r2, [r3, #0]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	0011      	movs	r1, r2
 8008b50:	0018      	movs	r0, r3
 8008b52:	f7ff fdf0 	bl	8008736 <mavlink_update_checksum>
		if(rxmsg->len > 0){
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	78db      	ldrb	r3, [r3, #3]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d003      	beq.n	8008b66 <mavlink_frame_char_buffer+0x33a>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID3;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	220b      	movs	r2, #11
 8008b62:	70da      	strb	r2, [r3, #3]
			_mav_parse_error(status);
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			break;
        }
#endif
		break;
 8008b64:	e150      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	220c      	movs	r2, #12
 8008b6a:	70da      	strb	r2, [r3, #3]
		break;
 8008b6c:	e14c      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
                
	case MAVLINK_PARSE_STATE_GOT_MSGID3:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	330c      	adds	r3, #12
 8008b72:	001a      	movs	r2, r3
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	791b      	ldrb	r3, [r3, #4]
 8008b78:	1c59      	adds	r1, r3, #1
 8008b7a:	b2c8      	uxtb	r0, r1
 8008b7c:	68b9      	ldr	r1, [r7, #8]
 8008b7e:	7108      	strb	r0, [r1, #4]
 8008b80:	18d3      	adds	r3, r2, r3
 8008b82:	1dfa      	adds	r2, r7, #7
 8008b84:	7812      	ldrb	r2, [r2, #0]
 8008b86:	701a      	strb	r2, [r3, #0]
		mavlink_update_checksum(rxmsg, c);
 8008b88:	1dfb      	adds	r3, r7, #7
 8008b8a:	781a      	ldrb	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	0011      	movs	r1, r2
 8008b90:	0018      	movs	r0, r3
 8008b92:	f7ff fdd0 	bl	8008736 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	791a      	ldrb	r2, [r3, #4]
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	78db      	ldrb	r3, [r3, #3]
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d000      	beq.n	8008ba4 <mavlink_frame_char_buffer+0x378>
 8008ba2:	e12a      	b.n	8008dfa <mavlink_frame_char_buffer+0x5ce>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	220c      	movs	r2, #12
 8008ba8:	70da      	strb	r2, [r3, #3]
		}
		break;
 8008baa:	e126      	b.n	8008dfa <mavlink_frame_char_buffer+0x5ce>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD: {
		const mavlink_msg_entry_t *e = mavlink_get_msg_entry(rxmsg->msgid);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	7a5a      	ldrb	r2, [r3, #9]
 8008bb0:	7a99      	ldrb	r1, [r3, #10]
 8008bb2:	0209      	lsls	r1, r1, #8
 8008bb4:	430a      	orrs	r2, r1
 8008bb6:	7adb      	ldrb	r3, [r3, #11]
 8008bb8:	041b      	lsls	r3, r3, #16
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f7ff fdeb 	bl	8008798 <mavlink_get_msg_entry>
 8008bc2:	0003      	movs	r3, r0
 8008bc4:	61bb      	str	r3, [r7, #24]
		if (e == NULL) {
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10b      	bne.n	8008be4 <mavlink_frame_char_buffer+0x3b8>
			// Message not found in CRC_EXTRA table.
			status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	220e      	movs	r2, #14
 8008bd0:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	1df9      	adds	r1, r7, #7
 8008bd6:	238a      	movs	r3, #138	@ 0x8a
 8008bd8:	005b      	lsls	r3, r3, #1
 8008bda:	7809      	ldrb	r1, [r1, #0]
 8008bdc:	54d1      	strb	r1, [r2, r3]
			// zero-fill the packet to cope with short incoming packets
				if (e && status->packet_idx < e->max_msg_len) {
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
			}
		}
		break;
 8008bde:	e10e      	b.n	8008dfe <mavlink_frame_char_buffer+0x5d2>
 8008be0:	0800a330 	.word	0x0800a330
			uint8_t crc_extra = e->crc_extra;
 8008be4:	2117      	movs	r1, #23
 8008be6:	187b      	adds	r3, r7, r1
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	7912      	ldrb	r2, [r2, #4]
 8008bec:	701a      	strb	r2, [r3, #0]
			mavlink_update_checksum(rxmsg, crc_extra);
 8008bee:	187b      	adds	r3, r7, r1
 8008bf0:	781a      	ldrb	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	0011      	movs	r1, r2
 8008bf6:	0018      	movs	r0, r3
 8008bf8:	f7ff fd9d 	bl	8008736 <mavlink_update_checksum>
			if (c != (rxmsg->checksum & 0xFF)) {
 8008bfc:	1dfb      	adds	r3, r7, #7
 8008bfe:	781a      	ldrb	r2, [r3, #0]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	7819      	ldrb	r1, [r3, #0]
 8008c04:	785b      	ldrb	r3, [r3, #1]
 8008c06:	021b      	lsls	r3, r3, #8
 8008c08:	430b      	orrs	r3, r1
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	0019      	movs	r1, r3
 8008c0e:	23ff      	movs	r3, #255	@ 0xff
 8008c10:	400b      	ands	r3, r1
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d003      	beq.n	8008c1e <mavlink_frame_char_buffer+0x3f2>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_BAD_CRC1;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	220e      	movs	r2, #14
 8008c1a:	70da      	strb	r2, [r3, #3]
 8008c1c:	e002      	b.n	8008c24 <mavlink_frame_char_buffer+0x3f8>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	220d      	movs	r2, #13
 8008c22:	70da      	strb	r2, [r3, #3]
			rxmsg->ck[0] = c;
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	1df9      	adds	r1, r7, #7
 8008c28:	238a      	movs	r3, #138	@ 0x8a
 8008c2a:	005b      	lsls	r3, r3, #1
 8008c2c:	7809      	ldrb	r1, [r1, #0]
 8008c2e:	54d1      	strb	r1, [r2, r3]
				if (e && status->packet_idx < e->max_msg_len) {
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d100      	bne.n	8008c38 <mavlink_frame_char_buffer+0x40c>
 8008c36:	e0e2      	b.n	8008dfe <mavlink_frame_char_buffer+0x5d2>
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	791a      	ldrb	r2, [r3, #4]
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	799b      	ldrb	r3, [r3, #6]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d300      	bcc.n	8008c46 <mavlink_frame_char_buffer+0x41a>
 8008c44:	e0db      	b.n	8008dfe <mavlink_frame_char_buffer+0x5d2>
					memset(&_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx], 0, e->max_msg_len - status->packet_idx);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	330c      	adds	r3, #12
 8008c4a:	68ba      	ldr	r2, [r7, #8]
 8008c4c:	7912      	ldrb	r2, [r2, #4]
 8008c4e:	1898      	adds	r0, r3, r2
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	799b      	ldrb	r3, [r3, #6]
 8008c54:	001a      	movs	r2, r3
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	791b      	ldrb	r3, [r3, #4]
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	001a      	movs	r2, r3
 8008c5e:	2100      	movs	r1, #0
 8008c60:	f000 fbc0 	bl	80093e4 <memset>
		break;
 8008c64:	e0cb      	b.n	8008dfe <mavlink_frame_char_buffer+0x5d2>
        }

	case MAVLINK_PARSE_STATE_GOT_CRC1:
	case MAVLINK_PARSE_STATE_GOT_BAD_CRC1:
		if (status->parse_state == MAVLINK_PARSE_STATE_GOT_BAD_CRC1 || c != (rxmsg->checksum >> 8)) {
 8008c66:	68bb      	ldr	r3, [r7, #8]
 8008c68:	78db      	ldrb	r3, [r3, #3]
 8008c6a:	2b0e      	cmp	r3, #14
 8008c6c:	d00c      	beq.n	8008c88 <mavlink_frame_char_buffer+0x45c>
 8008c6e:	1dfb      	adds	r3, r7, #7
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	7819      	ldrb	r1, [r3, #0]
 8008c78:	785b      	ldrb	r3, [r3, #1]
 8008c7a:	021b      	lsls	r3, r3, #8
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	0a1b      	lsrs	r3, r3, #8
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d003      	beq.n	8008c90 <mavlink_frame_char_buffer+0x464>
			// got a bad CRC message
			status->msg_received = MAVLINK_FRAMING_BAD_CRC;
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	701a      	strb	r2, [r3, #0]
 8008c8e:	e002      	b.n	8008c96 <mavlink_frame_char_buffer+0x46a>
		} else {
			// Successfully got message
			status->msg_received = MAVLINK_FRAMING_OK;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2201      	movs	r2, #1
 8008c94:	701a      	strb	r2, [r3, #0]
		}
		rxmsg->ck[1] = c;
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	1df9      	adds	r1, r7, #7
 8008c9a:	2316      	movs	r3, #22
 8008c9c:	33ff      	adds	r3, #255	@ 0xff
 8008c9e:	7809      	ldrb	r1, [r1, #0]
 8008ca0:	54d1      	strb	r1, [r2, r3]

		if (rxmsg->incompat_flags & MAVLINK_IFLAG_SIGNED) {
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	791b      	ldrb	r3, [r3, #4]
 8008ca6:	001a      	movs	r2, r3
 8008ca8:	2301      	movs	r3, #1
 8008caa:	4013      	ands	r3, r2
 8008cac:	d00e      	beq.n	8008ccc <mavlink_frame_char_buffer+0x4a0>
			status->parse_state = MAVLINK_PARSE_STATE_SIGNATURE_WAIT;
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	220f      	movs	r2, #15
 8008cb2:	70da      	strb	r2, [r3, #3]
			status->signature_wait = MAVLINK_SIGNATURE_BLOCK_LEN;
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	220d      	movs	r2, #13
 8008cb8:	735a      	strb	r2, [r3, #13]

			// If the CRC is already wrong, don't overwrite msg_received,
			// otherwise we can end up with garbage flagged as valid.
			if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d100      	bne.n	8008cc4 <mavlink_frame_char_buffer+0x498>
 8008cc2:	e09e      	b.n	8008e02 <mavlink_frame_char_buffer+0x5d6>
				status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
			if (r_message != NULL) {
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
			}
		}
		break;
 8008cca:	e09a      	b.n	8008e02 <mavlink_frame_char_buffer+0x5d6>
			if (status->signing &&
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d021      	beq.n	8008d18 <mavlink_frame_char_buffer+0x4ec>
			   	(status->signing->accept_unsigned_callback == NULL ||
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (status->signing &&
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d015      	beq.n	8008d0a <mavlink_frame_char_buffer+0x4de>
			   	 !status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	7a59      	ldrb	r1, [r3, #9]
 8008ce8:	7a98      	ldrb	r0, [r3, #10]
 8008cea:	0200      	lsls	r0, r0, #8
 8008cec:	4301      	orrs	r1, r0
 8008cee:	7adb      	ldrb	r3, [r3, #11]
 8008cf0:	041b      	lsls	r3, r3, #16
 8008cf2:	430b      	orrs	r3, r1
 8008cf4:	0019      	movs	r1, r3
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	0018      	movs	r0, r3
 8008cfa:	4790      	blx	r2
 8008cfc:	0003      	movs	r3, r0
 8008cfe:	001a      	movs	r2, r3
 8008d00:	2301      	movs	r3, #1
 8008d02:	4053      	eors	r3, r2
 8008d04:	b2db      	uxtb	r3, r3
			   	(status->signing->accept_unsigned_callback == NULL ||
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d006      	beq.n	8008d18 <mavlink_frame_char_buffer+0x4ec>
				if (status->msg_received != MAVLINK_FRAMING_BAD_CRC) {
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	d002      	beq.n	8008d18 <mavlink_frame_char_buffer+0x4ec>
					status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2203      	movs	r2, #3
 8008d16:	701a      	strb	r2, [r3, #0]
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	70da      	strb	r2, [r3, #3]
			if (r_message != NULL) {
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d100      	bne.n	8008d26 <mavlink_frame_char_buffer+0x4fa>
 8008d24:	e06d      	b.n	8008e02 <mavlink_frame_char_buffer+0x5d6>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8008d26:	2324      	movs	r3, #36	@ 0x24
 8008d28:	33ff      	adds	r3, #255	@ 0xff
 8008d2a:	001a      	movs	r2, r3
 8008d2c:	68f9      	ldr	r1, [r7, #12]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	0018      	movs	r0, r3
 8008d32:	f000 fb83 	bl	800943c <memcpy>
		break;
 8008d36:	e064      	b.n	8008e02 <mavlink_frame_char_buffer+0x5d6>
	case MAVLINK_PARSE_STATE_SIGNATURE_WAIT:
		rxmsg->signature[MAVLINK_SIGNATURE_BLOCK_LEN-status->signature_wait] = c;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	7b5b      	ldrb	r3, [r3, #13]
 8008d3c:	001a      	movs	r2, r3
 8008d3e:	230d      	movs	r3, #13
 8008d40:	1a9a      	subs	r2, r3, r2
 8008d42:	68f9      	ldr	r1, [r7, #12]
 8008d44:	238b      	movs	r3, #139	@ 0x8b
 8008d46:	005b      	lsls	r3, r3, #1
 8008d48:	188a      	adds	r2, r1, r2
 8008d4a:	18d3      	adds	r3, r2, r3
 8008d4c:	1dfa      	adds	r2, r7, #7
 8008d4e:	7812      	ldrb	r2, [r2, #0]
 8008d50:	701a      	strb	r2, [r3, #0]
		status->signature_wait--;
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	7b5b      	ldrb	r3, [r3, #13]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	735a      	strb	r2, [r3, #13]
		if (status->signature_wait == 0) {
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	7b5b      	ldrb	r3, [r3, #13]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d14f      	bne.n	8008e06 <mavlink_frame_char_buffer+0x5da>
			// we have the whole signature, check it is OK
#ifndef MAVLINK_NO_SIGNATURE_CHECK
			bool sig_ok = mavlink_signature_check(status->signing, status->signing_streams, rxmsg);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	6918      	ldr	r0, [r3, #16]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	695b      	ldr	r3, [r3, #20]
 8008d6e:	251f      	movs	r5, #31
 8008d70:	197c      	adds	r4, r7, r5
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	0019      	movs	r1, r3
 8008d76:	f7ff fb4f 	bl	8008418 <mavlink_signature_check>
 8008d7a:	0003      	movs	r3, r0
 8008d7c:	7023      	strb	r3, [r4, #0]
#else
			bool sig_ok = true;
#endif
			if (!sig_ok &&
 8008d7e:	002c      	movs	r4, r5
 8008d80:	193b      	adds	r3, r7, r4
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2201      	movs	r2, #1
 8008d86:	4053      	eors	r3, r2
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d018      	beq.n	8008dc0 <mavlink_frame_char_buffer+0x594>
			   	(status->signing->accept_unsigned_callback &&
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			if (!sig_ok &&
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d013      	beq.n	8008dc0 <mavlink_frame_char_buffer+0x594>
			   	 status->signing->accept_unsigned_callback(status, rxmsg->msgid))) {
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	7a59      	ldrb	r1, [r3, #9]
 8008da2:	7a98      	ldrb	r0, [r3, #10]
 8008da4:	0200      	lsls	r0, r0, #8
 8008da6:	4301      	orrs	r1, r0
 8008da8:	7adb      	ldrb	r3, [r3, #11]
 8008daa:	041b      	lsls	r3, r3, #16
 8008dac:	430b      	orrs	r3, r1
 8008dae:	0019      	movs	r1, r3
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	0018      	movs	r0, r3
 8008db4:	4790      	blx	r2
 8008db6:	1e03      	subs	r3, r0, #0
			   	(status->signing->accept_unsigned_callback &&
 8008db8:	d002      	beq.n	8008dc0 <mavlink_frame_char_buffer+0x594>
				// accepted via application level override
				sig_ok = true;
 8008dba:	193b      	adds	r3, r7, r4
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	701a      	strb	r2, [r3, #0]
			}
			if (sig_ok) {
 8008dc0:	231f      	movs	r3, #31
 8008dc2:	18fb      	adds	r3, r7, r3
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <mavlink_frame_char_buffer+0x5a6>
				status->msg_received = MAVLINK_FRAMING_OK;
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
 8008dd0:	e002      	b.n	8008dd8 <mavlink_frame_char_buffer+0x5ac>
			} else {
				status->msg_received = MAVLINK_FRAMING_BAD_SIGNATURE;
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	2203      	movs	r2, #3
 8008dd6:	701a      	strb	r2, [r3, #0]
			}
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	70da      	strb	r2, [r3, #3]
			if (r_message !=NULL) {
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d010      	beq.n	8008e06 <mavlink_frame_char_buffer+0x5da>
				memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
 8008de4:	2324      	movs	r3, #36	@ 0x24
 8008de6:	33ff      	adds	r3, #255	@ 0xff
 8008de8:	001a      	movs	r2, r3
 8008dea:	68f9      	ldr	r1, [r7, #12]
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	0018      	movs	r0, r3
 8008df0:	f000 fb24 	bl	800943c <memcpy>
			}
		}
		break;
 8008df4:	e007      	b.n	8008e06 <mavlink_frame_char_buffer+0x5da>
		break;
 8008df6:	46c0      	nop			@ (mov r8, r8)
 8008df8:	e006      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
		break;
 8008dfa:	46c0      	nop			@ (mov r8, r8)
 8008dfc:	e004      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
		break;
 8008dfe:	46c0      	nop			@ (mov r8, r8)
 8008e00:	e002      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
		break;
 8008e02:	46c0      	nop			@ (mov r8, r8)
 8008e04:	e000      	b.n	8008e08 <mavlink_frame_char_buffer+0x5dc>
		break;
 8008e06:	46c0      	nop			@ (mov r8, r8)
	}

	// If a message has been successfully decoded, check index
	if (status->msg_received == MAVLINK_FRAMING_OK)
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d110      	bne.n	8008e32 <mavlink_frame_char_buffer+0x606>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	799a      	ldrb	r2, [r3, #6]
 8008e14:	68bb      	ldr	r3, [r7, #8]
 8008e16:	715a      	strb	r2, [r3, #5]
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	891b      	ldrh	r3, [r3, #8]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d102      	bne.n	8008e26 <mavlink_frame_char_buffer+0x5fa>
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2200      	movs	r2, #0
 8008e24:	815a      	strh	r2, [r3, #10]
		// Count this packet as received
		status->packet_rx_success_count++;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	891b      	ldrh	r3, [r3, #8]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	811a      	strh	r2, [r3, #8]
	}

       if (r_message != NULL) {
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d003      	beq.n	8008e40 <mavlink_frame_char_buffer+0x614>
           r_message->len = rxmsg->len; // Provide visibility on how far we are into current msg
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	78da      	ldrb	r2, [r3, #3]
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	70da      	strb	r2, [r3, #3]
       }
       if (r_mavlink_status != NULL) {	
 8008e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d01a      	beq.n	8008e7c <mavlink_frame_char_buffer+0x650>
           r_mavlink_status->parse_state = status->parse_state;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	78da      	ldrb	r2, [r3, #3]
 8008e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e4c:	70da      	strb	r2, [r3, #3]
           r_mavlink_status->packet_idx = status->packet_idx;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	791a      	ldrb	r2, [r3, #4]
 8008e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e54:	711a      	strb	r2, [r3, #4]
           r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	795b      	ldrb	r3, [r3, #5]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	b2da      	uxtb	r2, r3
 8008e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e60:	715a      	strb	r2, [r3, #5]
           r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	891a      	ldrh	r2, [r3, #8]
 8008e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e68:	811a      	strh	r2, [r3, #8]
           r_mavlink_status->packet_rx_drop_count = status->parse_error;
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	789b      	ldrb	r3, [r3, #2]
 8008e6e:	001a      	movs	r2, r3
 8008e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e72:	815a      	strh	r2, [r3, #10]
           r_mavlink_status->flags = status->flags;
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	7b1a      	ldrb	r2, [r3, #12]
 8008e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e7a:	731a      	strb	r2, [r3, #12]
       }
       status->parse_error = 0;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	709a      	strb	r2, [r3, #2]

	if (status->msg_received == MAVLINK_FRAMING_BAD_CRC) {
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d125      	bne.n	8008ed6 <mavlink_frame_char_buffer+0x6aa>
		  msg CRC with the one on the wire so that if the
		  caller decides to forward the message anyway that
		  mavlink_msg_to_send_buffer() won't overwrite the
		  checksum
		 */
            if (r_message != NULL) {
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d022      	beq.n	8008ed6 <mavlink_frame_char_buffer+0x6aa>
                r_message->checksum = rxmsg->ck[0] | (rxmsg->ck[1]<<8);
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	238a      	movs	r3, #138	@ 0x8a
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	5cd3      	ldrb	r3, [r2, r3]
 8008e98:	b21a      	sxth	r2, r3
 8008e9a:	68f9      	ldr	r1, [r7, #12]
 8008e9c:	2316      	movs	r3, #22
 8008e9e:	33ff      	adds	r3, #255	@ 0xff
 8008ea0:	5ccb      	ldrb	r3, [r1, r3]
 8008ea2:	b21b      	sxth	r3, r3
 8008ea4:	021b      	lsls	r3, r3, #8
 8008ea6:	b21b      	sxth	r3, r3
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	b21b      	sxth	r3, r3
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	21ff      	movs	r1, #255	@ 0xff
 8008eb2:	4011      	ands	r1, r2
 8008eb4:	000c      	movs	r4, r1
 8008eb6:	7819      	ldrb	r1, [r3, #0]
 8008eb8:	2000      	movs	r0, #0
 8008eba:	4001      	ands	r1, r0
 8008ebc:	1c08      	adds	r0, r1, #0
 8008ebe:	1c21      	adds	r1, r4, #0
 8008ec0:	4301      	orrs	r1, r0
 8008ec2:	7019      	strb	r1, [r3, #0]
 8008ec4:	0a12      	lsrs	r2, r2, #8
 8008ec6:	b290      	uxth	r0, r2
 8008ec8:	785a      	ldrb	r2, [r3, #1]
 8008eca:	2100      	movs	r1, #0
 8008ecc:	400a      	ands	r2, r1
 8008ece:	1c11      	adds	r1, r2, #0
 8008ed0:	1c02      	adds	r2, r0, #0
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	705a      	strb	r2, [r3, #1]
            }
	}

	return status->msg_received;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
}
 8008eda:	0018      	movs	r0, r3
 8008edc:	46bd      	mov	sp, r7
 8008ede:	b009      	add	sp, #36	@ 0x24
 8008ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ee2:	46c0      	nop			@ (mov r8, r8)

08008ee4 <mavlink_frame_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_frame_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8008ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af02      	add	r7, sp, #8
 8008eea:	60ba      	str	r2, [r7, #8]
 8008eec:	607b      	str	r3, [r7, #4]
 8008eee:	240f      	movs	r4, #15
 8008ef0:	193b      	adds	r3, r7, r4
 8008ef2:	1c02      	adds	r2, r0, #0
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	260e      	movs	r6, #14
 8008ef8:	19bb      	adds	r3, r7, r6
 8008efa:	1c0a      	adds	r2, r1, #0
 8008efc:	701a      	strb	r2, [r3, #0]
	return mavlink_frame_char_buffer(mavlink_get_channel_buffer(chan),
 8008efe:	0025      	movs	r5, r4
 8008f00:	193b      	adds	r3, r7, r4
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	0018      	movs	r0, r3
 8008f06:	f7ff fa6f 	bl	80083e8 <mavlink_get_channel_buffer>
 8008f0a:	0004      	movs	r4, r0
 8008f0c:	197b      	adds	r3, r7, r5
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	0018      	movs	r0, r3
 8008f12:	f7ff fa55 	bl	80083c0 <mavlink_get_channel_status>
 8008f16:	68b9      	ldr	r1, [r7, #8]
 8008f18:	19bb      	adds	r3, r7, r6
 8008f1a:	781a      	ldrb	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	9300      	str	r3, [sp, #0]
 8008f20:	000b      	movs	r3, r1
 8008f22:	0001      	movs	r1, r0
 8008f24:	0020      	movs	r0, r4
 8008f26:	f7ff fc81 	bl	800882c <mavlink_frame_char_buffer>
 8008f2a:	0003      	movs	r3, r0
					 mavlink_get_channel_status(chan),
					 c,
					 r_message,
					 r_mavlink_status);
}
 8008f2c:	0018      	movs	r0, r3
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	b005      	add	sp, #20
 8008f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008f34 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
 8008f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f36:	b089      	sub	sp, #36	@ 0x24
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	60ba      	str	r2, [r7, #8]
 8008f3c:	607b      	str	r3, [r7, #4]
 8008f3e:	230f      	movs	r3, #15
 8008f40:	18fb      	adds	r3, r7, r3
 8008f42:	1c02      	adds	r2, r0, #0
 8008f44:	701a      	strb	r2, [r3, #0]
 8008f46:	200e      	movs	r0, #14
 8008f48:	183b      	adds	r3, r7, r0
 8008f4a:	1c0a      	adds	r2, r1, #0
 8008f4c:	701a      	strb	r2, [r3, #0]
    uint8_t msg_received = mavlink_frame_char(chan, c, r_message, r_mavlink_status);
 8008f4e:	261f      	movs	r6, #31
 8008f50:	19bc      	adds	r4, r7, r6
 8008f52:	687d      	ldr	r5, [r7, #4]
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	183b      	adds	r3, r7, r0
 8008f58:	7819      	ldrb	r1, [r3, #0]
 8008f5a:	230f      	movs	r3, #15
 8008f5c:	18fb      	adds	r3, r7, r3
 8008f5e:	7818      	ldrb	r0, [r3, #0]
 8008f60:	002b      	movs	r3, r5
 8008f62:	f7ff ffbf 	bl	8008ee4 <mavlink_frame_char>
 8008f66:	0003      	movs	r3, r0
 8008f68:	7023      	strb	r3, [r4, #0]
    if (msg_received == MAVLINK_FRAMING_BAD_CRC ||
 8008f6a:	19bb      	adds	r3, r7, r6
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d003      	beq.n	8008f7a <mavlink_parse_char+0x46>
 8008f72:	19bb      	adds	r3, r7, r6
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	2b03      	cmp	r3, #3
 8008f78:	d129      	bne.n	8008fce <mavlink_parse_char+0x9a>
	msg_received == MAVLINK_FRAMING_BAD_SIGNATURE) {
	    // we got a bad CRC. Treat as a parse failure
	    mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan);
 8008f7a:	240f      	movs	r4, #15
 8008f7c:	193b      	adds	r3, r7, r4
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	0018      	movs	r0, r3
 8008f82:	f7ff fa31 	bl	80083e8 <mavlink_get_channel_buffer>
 8008f86:	0003      	movs	r3, r0
 8008f88:	61bb      	str	r3, [r7, #24]
	    mavlink_status_t* status = mavlink_get_channel_status(chan);
 8008f8a:	193b      	adds	r3, r7, r4
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	0018      	movs	r0, r3
 8008f90:	f7ff fa16 	bl	80083c0 <mavlink_get_channel_status>
 8008f94:	0003      	movs	r3, r0
 8008f96:	617b      	str	r3, [r7, #20]
	    _mav_parse_error(status);
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	0018      	movs	r0, r3
 8008f9c:	f7ff fb96 	bl	80086cc <_mav_parse_error>
	    status->msg_received = MAVLINK_FRAMING_INCOMPLETE;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	701a      	strb	r2, [r3, #0]
	    status->parse_state = MAVLINK_PARSE_STATE_IDLE;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	2201      	movs	r2, #1
 8008faa:	70da      	strb	r2, [r3, #3]
	    if (c == MAVLINK_STX)
 8008fac:	230e      	movs	r3, #14
 8008fae:	18fb      	adds	r3, r7, r3
 8008fb0:	781b      	ldrb	r3, [r3, #0]
 8008fb2:	2bfd      	cmp	r3, #253	@ 0xfd
 8008fb4:	d109      	bne.n	8008fca <mavlink_parse_char+0x96>
	    {
		    status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	70da      	strb	r2, [r3, #3]
		    rxmsg->len = 0;
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	70da      	strb	r2, [r3, #3]
		    mavlink_start_checksum(rxmsg);
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	0018      	movs	r0, r3
 8008fc6:	f7ff fb8f 	bl	80086e8 <mavlink_start_checksum>
	    }
	    return 0;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	e002      	b.n	8008fd4 <mavlink_parse_char+0xa0>
    }
    return msg_received;
 8008fce:	231f      	movs	r3, #31
 8008fd0:	18fb      	adds	r3, r7, r3
 8008fd2:	781b      	ldrb	r3, [r3, #0]
}
 8008fd4:	0018      	movs	r0, r3
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	b009      	add	sp, #36	@ 0x24
 8008fda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008fdc <mavlink_msg_attitude_decode>:
 *
 * @param msg The message to decode
 * @param attitude C-struct to decode the message contents into
 */
static inline void mavlink_msg_attitude_decode(const mavlink_message_t* msg, mavlink_attitude_t* attitude)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
    attitude->yaw = mavlink_msg_attitude_get_yaw(msg);
    attitude->rollspeed = mavlink_msg_attitude_get_rollspeed(msg);
    attitude->pitchspeed = mavlink_msg_attitude_get_pitchspeed(msg);
    attitude->yawspeed = mavlink_msg_attitude_get_yawspeed(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_ATTITUDE_LEN? msg->len : MAVLINK_MSG_ID_ATTITUDE_LEN;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	78db      	ldrb	r3, [r3, #3]
 8008fea:	220f      	movs	r2, #15
 8008fec:	18ba      	adds	r2, r7, r2
 8008fee:	b2d9      	uxtb	r1, r3
 8008ff0:	291c      	cmp	r1, #28
 8008ff2:	d900      	bls.n	8008ff6 <mavlink_msg_attitude_decode+0x1a>
 8008ff4:	231c      	movs	r3, #28
 8008ff6:	7013      	strb	r3, [r2, #0]
        memset(attitude, 0, MAVLINK_MSG_ID_ATTITUDE_LEN);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	221c      	movs	r2, #28
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	0018      	movs	r0, r3
 8009000:	f000 f9f0 	bl	80093e4 <memset>
    memcpy(attitude, _MAV_PAYLOAD(msg), len);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	330c      	adds	r3, #12
 8009008:	0019      	movs	r1, r3
 800900a:	230f      	movs	r3, #15
 800900c:	18fb      	adds	r3, r7, r3
 800900e:	781a      	ldrb	r2, [r3, #0]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	0018      	movs	r0, r3
 8009014:	f000 fa12 	bl	800943c <memcpy>
#endif
}
 8009018:	46c0      	nop			@ (mov r8, r8)
 800901a:	46bd      	mov	sp, r7
 800901c:	b004      	add	sp, #16
 800901e:	bd80      	pop	{r7, pc}

08009020 <mavlink_msg_heartbeat_decode>:
 *
 * @param msg The message to decode
 * @param heartbeat C-struct to decode the message contents into
 */
static inline void mavlink_msg_heartbeat_decode(const mavlink_message_t* msg, mavlink_heartbeat_t* heartbeat)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
    heartbeat->autopilot = mavlink_msg_heartbeat_get_autopilot(msg);
    heartbeat->base_mode = mavlink_msg_heartbeat_get_base_mode(msg);
    heartbeat->system_status = mavlink_msg_heartbeat_get_system_status(msg);
    heartbeat->mavlink_version = mavlink_msg_heartbeat_get_mavlink_version(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_HEARTBEAT_LEN? msg->len : MAVLINK_MSG_ID_HEARTBEAT_LEN;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	78db      	ldrb	r3, [r3, #3]
 800902e:	220f      	movs	r2, #15
 8009030:	18ba      	adds	r2, r7, r2
 8009032:	b2d9      	uxtb	r1, r3
 8009034:	2909      	cmp	r1, #9
 8009036:	d900      	bls.n	800903a <mavlink_msg_heartbeat_decode+0x1a>
 8009038:	2309      	movs	r3, #9
 800903a:	7013      	strb	r3, [r2, #0]
        memset(heartbeat, 0, MAVLINK_MSG_ID_HEARTBEAT_LEN);
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2209      	movs	r2, #9
 8009040:	2100      	movs	r1, #0
 8009042:	0018      	movs	r0, r3
 8009044:	f000 f9ce 	bl	80093e4 <memset>
    memcpy(heartbeat, _MAV_PAYLOAD(msg), len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	330c      	adds	r3, #12
 800904c:	0019      	movs	r1, r3
 800904e:	230f      	movs	r3, #15
 8009050:	18fb      	adds	r3, r7, r3
 8009052:	781a      	ldrb	r2, [r3, #0]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	0018      	movs	r0, r3
 8009058:	f000 f9f0 	bl	800943c <memcpy>
#endif
}
 800905c:	46c0      	nop			@ (mov r8, r8)
 800905e:	46bd      	mov	sp, r7
 8009060:	b004      	add	sp, #16
 8009062:	bd80      	pop	{r7, pc}

08009064 <mavlink_process>:
 */
#include "../LED_CONTROL/mavlink_from_FC.h"

#include "uart_irq.h"
void mavlink_process(mavlink_from_fc_t* mav_fc, uint32_t now)
{
 8009064:	b5b0      	push	{r4, r5, r7, lr}
 8009066:	b084      	sub	sp, #16
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	6039      	str	r1, [r7, #0]
	if(uart_available_fc() > 0)
 800906e:	f000 f93b 	bl	80092e8 <uart_available_fc>
 8009072:	1e03      	subs	r3, r0, #0
 8009074:	d030      	beq.n	80090d8 <mavlink_process+0x74>
	{
		uint8_t read_data = uart_read_fc();
 8009076:	250f      	movs	r5, #15
 8009078:	197c      	adds	r4, r7, r5
 800907a:	f000 f94d 	bl	8009318 <uart_read_fc>
 800907e:	0003      	movs	r3, r0
 8009080:	7023      	strb	r3, [r4, #0]
		if (mavlink_parse_char(MAVLINK_COMM_0, read_data, &mav_fc->rx_msg, &mav_fc->status))
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	3325      	adds	r3, #37	@ 0x25
 8009088:	33ff      	adds	r3, #255	@ 0xff
 800908a:	0018      	movs	r0, r3
 800908c:	197b      	adds	r3, r7, r5
 800908e:	7819      	ldrb	r1, [r3, #0]
 8009090:	0003      	movs	r3, r0
 8009092:	2000      	movs	r0, #0
 8009094:	f7ff ff4e 	bl	8008f34 <mavlink_parse_char>
 8009098:	1e03      	subs	r3, r0, #0
 800909a:	d01d      	beq.n	80090d8 <mavlink_process+0x74>
		{
			switch(mav_fc->rx_msg.msgid)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	0a1b      	lsrs	r3, r3, #8
 80090a2:	d002      	beq.n	80090aa <mavlink_process+0x46>
 80090a4:	2b1e      	cmp	r3, #30
 80090a6:	d009      	beq.n	80090bc <mavlink_process+0x58>
					break;
				}
			}
		}
	}
}
 80090a8:	e016      	b.n	80090d8 <mavlink_process+0x74>
					mavlink_msg_heartbeat_decode(&mav_fc->rx_msg, &mav_fc->hb);
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	333d      	adds	r3, #61	@ 0x3d
 80090b0:	33ff      	adds	r3, #255	@ 0xff
 80090b2:	0019      	movs	r1, r3
 80090b4:	0010      	movs	r0, r2
 80090b6:	f7ff ffb3 	bl	8009020 <mavlink_msg_heartbeat_decode>
					break;
 80090ba:	e00d      	b.n	80090d8 <mavlink_process+0x74>
					mavlink_msg_attitude_decode(&mav_fc->rx_msg, &mav_fc->att);
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	3349      	adds	r3, #73	@ 0x49
 80090c2:	33ff      	adds	r3, #255	@ 0xff
 80090c4:	0019      	movs	r1, r3
 80090c6:	0010      	movs	r0, r2
 80090c8:	f7ff ff88 	bl	8008fdc <mavlink_msg_attitude_decode>
					mav_fc->att_last_ms = now;
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	23b2      	movs	r3, #178	@ 0xb2
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	50d1      	str	r1, [r2, r3]
					break;
 80090d6:	46c0      	nop			@ (mov r8, r8)
}
 80090d8:	46c0      	nop			@ (mov r8, r8)
 80090da:	46bd      	mov	sp, r7
 80090dc:	b004      	add	sp, #16
 80090de:	bdb0      	pop	{r4, r5, r7, pc}

080090e0 <mavlink_init>:
void mavlink_init(void)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	af00      	add	r7, sp, #0
	uart_init_fc();
 80090e4:	f000 f93c 	bl	8009360 <uart_init_fc>
}
 80090e8:	46c0      	nop			@ (mov r8, r8)
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}

080090ee <ring_buffer_init>:
 *  Created on: Aug 9, 2025
 *      Author: duong
 */
#include "ring_buff.h"
void ring_buffer_init(Ring_buff_t* ring_buff, uint8_t* buff, uint16_t len)
{
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	60f8      	str	r0, [r7, #12]
 80090f6:	60b9      	str	r1, [r7, #8]
 80090f8:	1dbb      	adds	r3, r7, #6
 80090fa:	801a      	strh	r2, [r3, #0]
	ring_buff->head = 0;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2200      	movs	r2, #0
 8009100:	809a      	strh	r2, [r3, #4]
	ring_buff->tail = 0;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	80da      	strh	r2, [r3, #6]
	ring_buff->buffer = buff;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	68ba      	ldr	r2, [r7, #8]
 800910c:	601a      	str	r2, [r3, #0]
	ring_buff->maxlen = len;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	1dba      	adds	r2, r7, #6
 8009112:	8812      	ldrh	r2, [r2, #0]
 8009114:	811a      	strh	r2, [r3, #8]
}
 8009116:	46c0      	nop			@ (mov r8, r8)
 8009118:	46bd      	mov	sp, r7
 800911a:	b004      	add	sp, #16
 800911c:	bd80      	pop	{r7, pc}

0800911e <ring_buffer_push>:


int8_t ring_buffer_push(Ring_buff_t* ring_buff, uint8_t data)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b084      	sub	sp, #16
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	000a      	movs	r2, r1
 8009128:	1cfb      	adds	r3, r7, #3
 800912a:	701a      	strb	r2, [r3, #0]
	uint16_t next;
	next = ring_buff->head + 1;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	889b      	ldrh	r3, [r3, #4]
 8009130:	b29a      	uxth	r2, r3
 8009132:	210e      	movs	r1, #14
 8009134:	187b      	adds	r3, r7, r1
 8009136:	3201      	adds	r2, #1
 8009138:	801a      	strh	r2, [r3, #0]
	if(next >= ring_buff->maxlen)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	891b      	ldrh	r3, [r3, #8]
 800913e:	187a      	adds	r2, r7, r1
 8009140:	8812      	ldrh	r2, [r2, #0]
 8009142:	429a      	cmp	r2, r3
 8009144:	d302      	bcc.n	800914c <ring_buffer_push+0x2e>
	{
		next = 0;
 8009146:	187b      	adds	r3, r7, r1
 8009148:	2200      	movs	r2, #0
 800914a:	801a      	strh	r2, [r3, #0]
	}
	if(next == ring_buff->tail)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	88db      	ldrh	r3, [r3, #6]
 8009150:	b29b      	uxth	r3, r3
 8009152:	220e      	movs	r2, #14
 8009154:	18ba      	adds	r2, r7, r2
 8009156:	8812      	ldrh	r2, [r2, #0]
 8009158:	429a      	cmp	r2, r3
 800915a:	d102      	bne.n	8009162 <ring_buffer_push+0x44>
	{
		return -1;
 800915c:	2301      	movs	r3, #1
 800915e:	425b      	negs	r3, r3
 8009160:	e00e      	b.n	8009180 <ring_buffer_push+0x62>
	}
	ring_buff->buffer[ring_buff->head] = data;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	8892      	ldrh	r2, [r2, #4]
 800916a:	b292      	uxth	r2, r2
 800916c:	189b      	adds	r3, r3, r2
 800916e:	1cfa      	adds	r2, r7, #3
 8009170:	7812      	ldrb	r2, [r2, #0]
 8009172:	701a      	strb	r2, [r3, #0]
	ring_buff->head = next;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	220e      	movs	r2, #14
 8009178:	18ba      	adds	r2, r7, r2
 800917a:	8812      	ldrh	r2, [r2, #0]
 800917c:	809a      	strh	r2, [r3, #4]
	return 0;
 800917e:	2300      	movs	r3, #0
}
 8009180:	0018      	movs	r0, r3
 8009182:	46bd      	mov	sp, r7
 8009184:	b004      	add	sp, #16
 8009186:	bd80      	pop	{r7, pc}

08009188 <ring_buffer_available>:
uint16_t ring_buffer_available(Ring_buff_t* ring_buff)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
	if(ring_buff->head < ring_buff->tail)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	889b      	ldrh	r3, [r3, #4]
 8009194:	b29a      	uxth	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	88db      	ldrh	r3, [r3, #6]
 800919a:	b29b      	uxth	r3, r3
 800919c:	429a      	cmp	r2, r3
 800919e:	d20c      	bcs.n	80091ba <ring_buffer_available+0x32>
	{
		return ring_buff->maxlen - (ring_buff->tail - ring_buff->head);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	891a      	ldrh	r2, [r3, #8]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	889b      	ldrh	r3, [r3, #4]
 80091a8:	b299      	uxth	r1, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	88db      	ldrh	r3, [r3, #6]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	1acb      	subs	r3, r1, r3
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	18d3      	adds	r3, r2, r3
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	e007      	b.n	80091ca <ring_buffer_available+0x42>
	}
	return ring_buff->head - ring_buff->tail;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	889b      	ldrh	r3, [r3, #4]
 80091be:	b29a      	uxth	r2, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	88db      	ldrh	r3, [r3, #6]
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	b29b      	uxth	r3, r3
}
 80091ca:	0018      	movs	r0, r3
 80091cc:	46bd      	mov	sp, r7
 80091ce:	b002      	add	sp, #8
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <ring_buffer_pop>:
int8_t ring_buffer_pop(Ring_buff_t* ring_buff, uint8_t* data)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
 80091da:	6039      	str	r1, [r7, #0]
	uint16_t next;
	if(ring_buff->head == ring_buff->tail)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	889b      	ldrh	r3, [r3, #4]
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	88db      	ldrh	r3, [r3, #6]
 80091e6:	b29b      	uxth	r3, r3
 80091e8:	429a      	cmp	r2, r3
 80091ea:	d102      	bne.n	80091f2 <ring_buffer_pop+0x20>
	{
		return -1;
 80091ec:	2301      	movs	r3, #1
 80091ee:	425b      	negs	r3, r3
 80091f0:	e01e      	b.n	8009230 <ring_buffer_pop+0x5e>
	}
	next = ring_buff->tail + 1;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	88db      	ldrh	r3, [r3, #6]
 80091f6:	b29a      	uxth	r2, r3
 80091f8:	210e      	movs	r1, #14
 80091fa:	187b      	adds	r3, r7, r1
 80091fc:	3201      	adds	r2, #1
 80091fe:	801a      	strh	r2, [r3, #0]
	if(next >= ring_buff->maxlen)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	891b      	ldrh	r3, [r3, #8]
 8009204:	187a      	adds	r2, r7, r1
 8009206:	8812      	ldrh	r2, [r2, #0]
 8009208:	429a      	cmp	r2, r3
 800920a:	d302      	bcc.n	8009212 <ring_buffer_pop+0x40>
	{
		next = 0;
 800920c:	187b      	adds	r3, r7, r1
 800920e:	2200      	movs	r2, #0
 8009210:	801a      	strh	r2, [r3, #0]
	}
	*data = ring_buff->buffer[ring_buff->tail];
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	687a      	ldr	r2, [r7, #4]
 8009218:	88d2      	ldrh	r2, [r2, #6]
 800921a:	b292      	uxth	r2, r2
 800921c:	189b      	adds	r3, r3, r2
 800921e:	781a      	ldrb	r2, [r3, #0]
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	701a      	strb	r2, [r3, #0]
	ring_buff->tail = next;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	220e      	movs	r2, #14
 8009228:	18ba      	adds	r2, r7, r2
 800922a:	8812      	ldrh	r2, [r2, #0]
 800922c:	80da      	strh	r2, [r3, #6]
	return 0;
 800922e:	2300      	movs	r3, #0
}
 8009230:	0018      	movs	r0, r3
 8009232:	46bd      	mov	sp, r7
 8009234:	b004      	add	sp, #16
 8009236:	bd80      	pop	{r7, pc}

08009238 <HAL_UART_RxCpltCallback>:
uint8_t data_rx_fc;
uint8_t data_rx_tobufi;
uint8_t buff_tobufi[RING_UART_LEN_TOBUFI];
uint8_t buff_fc[RING_UART_LEN_FC];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b082      	sub	sp, #8
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a10      	ldr	r2, [pc, #64]	@ (8009288 <HAL_UART_RxCpltCallback+0x50>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d10a      	bne.n	8009260 <HAL_UART_RxCpltCallback+0x28>
	{
		receive_rx_fc(data_rx_fc);
 800924a:	4b10      	ldr	r3, [pc, #64]	@ (800928c <HAL_UART_RxCpltCallback+0x54>)
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	0018      	movs	r0, r3
 8009250:	f000 f822 	bl	8009298 <receive_rx_fc>
		HAL_UART_Receive_IT(huart, &data_rx_fc, 1);
 8009254:	490d      	ldr	r1, [pc, #52]	@ (800928c <HAL_UART_RxCpltCallback+0x54>)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2201      	movs	r2, #1
 800925a:	0018      	movs	r0, r3
 800925c:	f7fa ffc4 	bl	80041e8 <HAL_UART_Receive_IT>
	}
	if(huart->Instance == USART2)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a0a      	ldr	r2, [pc, #40]	@ (8009290 <HAL_UART_RxCpltCallback+0x58>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d10a      	bne.n	8009280 <HAL_UART_RxCpltCallback+0x48>
	{
		receive_rx_tobufi(data_rx_tobufi);
 800926a:	4b0a      	ldr	r3, [pc, #40]	@ (8009294 <HAL_UART_RxCpltCallback+0x5c>)
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	0018      	movs	r0, r3
 8009270:	f000 f826 	bl	80092c0 <receive_rx_tobufi>
		HAL_UART_Receive_IT(huart, &data_rx_tobufi, 1);
 8009274:	4907      	ldr	r1, [pc, #28]	@ (8009294 <HAL_UART_RxCpltCallback+0x5c>)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2201      	movs	r2, #1
 800927a:	0018      	movs	r0, r3
 800927c:	f7fa ffb4 	bl	80041e8 <HAL_UART_Receive_IT>
	}
}
 8009280:	46c0      	nop			@ (mov r8, r8)
 8009282:	46bd      	mov	sp, r7
 8009284:	b002      	add	sp, #8
 8009286:	bd80      	pop	{r7, pc}
 8009288:	40004800 	.word	0x40004800
 800928c:	20000e9c 	.word	0x20000e9c
 8009290:	40004400 	.word	0x40004400
 8009294:	20000e9d 	.word	0x20000e9d

08009298 <receive_rx_fc>:


void receive_rx_fc(uint8_t data_rx)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	0002      	movs	r2, r0
 80092a0:	1dfb      	adds	r3, r7, #7
 80092a2:	701a      	strb	r2, [r3, #0]
	ring_buffer_push(&ring_fc, data_rx);
 80092a4:	1dfb      	adds	r3, r7, #7
 80092a6:	781a      	ldrb	r2, [r3, #0]
 80092a8:	4b04      	ldr	r3, [pc, #16]	@ (80092bc <receive_rx_fc+0x24>)
 80092aa:	0011      	movs	r1, r2
 80092ac:	0018      	movs	r0, r3
 80092ae:	f7ff ff36 	bl	800911e <ring_buffer_push>
}
 80092b2:	46c0      	nop			@ (mov r8, r8)
 80092b4:	46bd      	mov	sp, r7
 80092b6:	b002      	add	sp, #8
 80092b8:	bd80      	pop	{r7, pc}
 80092ba:	46c0      	nop			@ (mov r8, r8)
 80092bc:	20000e90 	.word	0x20000e90

080092c0 <receive_rx_tobufi>:
void receive_rx_tobufi(uint8_t data_rx)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b082      	sub	sp, #8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	0002      	movs	r2, r0
 80092c8:	1dfb      	adds	r3, r7, #7
 80092ca:	701a      	strb	r2, [r3, #0]
	ring_buffer_push(&ring_tobufi, data_rx);
 80092cc:	1dfb      	adds	r3, r7, #7
 80092ce:	781a      	ldrb	r2, [r3, #0]
 80092d0:	4b04      	ldr	r3, [pc, #16]	@ (80092e4 <receive_rx_tobufi+0x24>)
 80092d2:	0011      	movs	r1, r2
 80092d4:	0018      	movs	r0, r3
 80092d6:	f7ff ff22 	bl	800911e <ring_buffer_push>
}
 80092da:	46c0      	nop			@ (mov r8, r8)
 80092dc:	46bd      	mov	sp, r7
 80092de:	b002      	add	sp, #8
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	46c0      	nop			@ (mov r8, r8)
 80092e4:	20000e84 	.word	0x20000e84

080092e8 <uart_available_fc>:


uint16_t uart_available_fc(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
	return ring_buffer_available(&ring_fc);
 80092ec:	4b03      	ldr	r3, [pc, #12]	@ (80092fc <uart_available_fc+0x14>)
 80092ee:	0018      	movs	r0, r3
 80092f0:	f7ff ff4a 	bl	8009188 <ring_buffer_available>
 80092f4:	0003      	movs	r3, r0
}
 80092f6:	0018      	movs	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	20000e90 	.word	0x20000e90

08009300 <uart_available_tobufi>:
uint16_t uart_available_tobufi(void)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	af00      	add	r7, sp, #0
	return ring_buffer_available(&ring_tobufi);
 8009304:	4b03      	ldr	r3, [pc, #12]	@ (8009314 <uart_available_tobufi+0x14>)
 8009306:	0018      	movs	r0, r3
 8009308:	f7ff ff3e 	bl	8009188 <ring_buffer_available>
 800930c:	0003      	movs	r3, r0
}
 800930e:	0018      	movs	r0, r3
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	20000e84 	.word	0x20000e84

08009318 <uart_read_fc>:


uint8_t uart_read_fc(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
	uint8_t data_pop;
	ring_buffer_pop(&ring_fc, &data_pop);
 800931e:	1dfa      	adds	r2, r7, #7
 8009320:	4b05      	ldr	r3, [pc, #20]	@ (8009338 <uart_read_fc+0x20>)
 8009322:	0011      	movs	r1, r2
 8009324:	0018      	movs	r0, r3
 8009326:	f7ff ff54 	bl	80091d2 <ring_buffer_pop>
	return data_pop;
 800932a:	1dfb      	adds	r3, r7, #7
 800932c:	781b      	ldrb	r3, [r3, #0]
}
 800932e:	0018      	movs	r0, r3
 8009330:	46bd      	mov	sp, r7
 8009332:	b002      	add	sp, #8
 8009334:	bd80      	pop	{r7, pc}
 8009336:	46c0      	nop			@ (mov r8, r8)
 8009338:	20000e90 	.word	0x20000e90

0800933c <uart_read_tobufi>:
uint8_t uart_read_tobufi(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
	uint8_t data_pop;
	ring_buffer_pop(&ring_tobufi, &data_pop);
 8009342:	1dfa      	adds	r2, r7, #7
 8009344:	4b05      	ldr	r3, [pc, #20]	@ (800935c <uart_read_tobufi+0x20>)
 8009346:	0011      	movs	r1, r2
 8009348:	0018      	movs	r0, r3
 800934a:	f7ff ff42 	bl	80091d2 <ring_buffer_pop>
	return data_pop;
 800934e:	1dfb      	adds	r3, r7, #7
 8009350:	781b      	ldrb	r3, [r3, #0]
}
 8009352:	0018      	movs	r0, r3
 8009354:	46bd      	mov	sp, r7
 8009356:	b002      	add	sp, #8
 8009358:	bd80      	pop	{r7, pc}
 800935a:	46c0      	nop			@ (mov r8, r8)
 800935c:	20000e84 	.word	0x20000e84

08009360 <uart_init_fc>:


void uart_init_fc(void)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart3, &data_rx_fc, 1);
 8009364:	4907      	ldr	r1, [pc, #28]	@ (8009384 <uart_init_fc+0x24>)
 8009366:	4b08      	ldr	r3, [pc, #32]	@ (8009388 <uart_init_fc+0x28>)
 8009368:	2201      	movs	r2, #1
 800936a:	0018      	movs	r0, r3
 800936c:	f7fa ff3c 	bl	80041e8 <HAL_UART_Receive_IT>
	ring_buffer_init(&ring_fc, buff_fc, RING_UART_LEN_FC);
 8009370:	2380      	movs	r3, #128	@ 0x80
 8009372:	009a      	lsls	r2, r3, #2
 8009374:	4905      	ldr	r1, [pc, #20]	@ (800938c <uart_init_fc+0x2c>)
 8009376:	4b06      	ldr	r3, [pc, #24]	@ (8009390 <uart_init_fc+0x30>)
 8009378:	0018      	movs	r0, r3
 800937a:	f7ff feb8 	bl	80090ee <ring_buffer_init>
}
 800937e:	46c0      	nop			@ (mov r8, r8)
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	20000e9c 	.word	0x20000e9c
 8009388:	2000010c 	.word	0x2000010c
 800938c:	200010a0 	.word	0x200010a0
 8009390:	20000e90 	.word	0x20000e90

08009394 <uart_init_tobufi>:
void uart_init_tobufi(void)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &data_rx_tobufi, 1);
 8009398:	4907      	ldr	r1, [pc, #28]	@ (80093b8 <uart_init_tobufi+0x24>)
 800939a:	4b08      	ldr	r3, [pc, #32]	@ (80093bc <uart_init_tobufi+0x28>)
 800939c:	2201      	movs	r2, #1
 800939e:	0018      	movs	r0, r3
 80093a0:	f7fa ff22 	bl	80041e8 <HAL_UART_Receive_IT>
	ring_buffer_init(&ring_tobufi, buff_tobufi, RING_UART_LEN_TOBUFI);
 80093a4:	2380      	movs	r3, #128	@ 0x80
 80093a6:	009a      	lsls	r2, r3, #2
 80093a8:	4905      	ldr	r1, [pc, #20]	@ (80093c0 <uart_init_tobufi+0x2c>)
 80093aa:	4b06      	ldr	r3, [pc, #24]	@ (80093c4 <uart_init_tobufi+0x30>)
 80093ac:	0018      	movs	r0, r3
 80093ae:	f7ff fe9e 	bl	80090ee <ring_buffer_init>
}
 80093b2:	46c0      	nop			@ (mov r8, r8)
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000e9d 	.word	0x20000e9d
 80093bc:	20000078 	.word	0x20000078
 80093c0:	20000ea0 	.word	0x20000ea0
 80093c4:	20000e84 	.word	0x20000e84

080093c8 <memcmp>:
 80093c8:	b530      	push	{r4, r5, lr}
 80093ca:	2400      	movs	r4, #0
 80093cc:	3901      	subs	r1, #1
 80093ce:	42a2      	cmp	r2, r4
 80093d0:	d101      	bne.n	80093d6 <memcmp+0xe>
 80093d2:	2000      	movs	r0, #0
 80093d4:	e005      	b.n	80093e2 <memcmp+0x1a>
 80093d6:	5d03      	ldrb	r3, [r0, r4]
 80093d8:	3401      	adds	r4, #1
 80093da:	5d0d      	ldrb	r5, [r1, r4]
 80093dc:	42ab      	cmp	r3, r5
 80093de:	d0f6      	beq.n	80093ce <memcmp+0x6>
 80093e0:	1b58      	subs	r0, r3, r5
 80093e2:	bd30      	pop	{r4, r5, pc}

080093e4 <memset>:
 80093e4:	0003      	movs	r3, r0
 80093e6:	1882      	adds	r2, r0, r2
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d100      	bne.n	80093ee <memset+0xa>
 80093ec:	4770      	bx	lr
 80093ee:	7019      	strb	r1, [r3, #0]
 80093f0:	3301      	adds	r3, #1
 80093f2:	e7f9      	b.n	80093e8 <memset+0x4>

080093f4 <__libc_init_array>:
 80093f4:	b570      	push	{r4, r5, r6, lr}
 80093f6:	2600      	movs	r6, #0
 80093f8:	4c0c      	ldr	r4, [pc, #48]	@ (800942c <__libc_init_array+0x38>)
 80093fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009430 <__libc_init_array+0x3c>)
 80093fc:	1b64      	subs	r4, r4, r5
 80093fe:	10a4      	asrs	r4, r4, #2
 8009400:	42a6      	cmp	r6, r4
 8009402:	d109      	bne.n	8009418 <__libc_init_array+0x24>
 8009404:	2600      	movs	r6, #0
 8009406:	f000 f84b 	bl	80094a0 <_init>
 800940a:	4c0a      	ldr	r4, [pc, #40]	@ (8009434 <__libc_init_array+0x40>)
 800940c:	4d0a      	ldr	r5, [pc, #40]	@ (8009438 <__libc_init_array+0x44>)
 800940e:	1b64      	subs	r4, r4, r5
 8009410:	10a4      	asrs	r4, r4, #2
 8009412:	42a6      	cmp	r6, r4
 8009414:	d105      	bne.n	8009422 <__libc_init_array+0x2e>
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	00b3      	lsls	r3, r6, #2
 800941a:	58eb      	ldr	r3, [r5, r3]
 800941c:	4798      	blx	r3
 800941e:	3601      	adds	r6, #1
 8009420:	e7ee      	b.n	8009400 <__libc_init_array+0xc>
 8009422:	00b3      	lsls	r3, r6, #2
 8009424:	58eb      	ldr	r3, [r5, r3]
 8009426:	4798      	blx	r3
 8009428:	3601      	adds	r6, #1
 800942a:	e7f2      	b.n	8009412 <__libc_init_array+0x1e>
 800942c:	0800ae58 	.word	0x0800ae58
 8009430:	0800ae58 	.word	0x0800ae58
 8009434:	0800ae5c 	.word	0x0800ae5c
 8009438:	0800ae58 	.word	0x0800ae58

0800943c <memcpy>:
 800943c:	2300      	movs	r3, #0
 800943e:	b510      	push	{r4, lr}
 8009440:	429a      	cmp	r2, r3
 8009442:	d100      	bne.n	8009446 <memcpy+0xa>
 8009444:	bd10      	pop	{r4, pc}
 8009446:	5ccc      	ldrb	r4, [r1, r3]
 8009448:	54c4      	strb	r4, [r0, r3]
 800944a:	3301      	adds	r3, #1
 800944c:	e7f8      	b.n	8009440 <memcpy+0x4>

0800944e <lroundf>:
 800944e:	b570      	push	{r4, r5, r6, lr}
 8009450:	0dc5      	lsrs	r5, r0, #23
 8009452:	b2ed      	uxtb	r5, r5
 8009454:	002c      	movs	r4, r5
 8009456:	2101      	movs	r1, #1
 8009458:	3c7f      	subs	r4, #127	@ 0x7f
 800945a:	2800      	cmp	r0, #0
 800945c:	da00      	bge.n	8009460 <lroundf+0x12>
 800945e:	3902      	subs	r1, #2
 8009460:	2c1e      	cmp	r4, #30
 8009462:	dc19      	bgt.n	8009498 <lroundf+0x4a>
 8009464:	2c00      	cmp	r4, #0
 8009466:	da04      	bge.n	8009472 <lroundf+0x24>
 8009468:	3401      	adds	r4, #1
 800946a:	d000      	beq.n	800946e <lroundf+0x20>
 800946c:	2100      	movs	r1, #0
 800946e:	0008      	movs	r0, r1
 8009470:	bd70      	pop	{r4, r5, r6, pc}
 8009472:	2280      	movs	r2, #128	@ 0x80
 8009474:	0243      	lsls	r3, r0, #9
 8009476:	0a5b      	lsrs	r3, r3, #9
 8009478:	0412      	lsls	r2, r2, #16
 800947a:	4313      	orrs	r3, r2
 800947c:	2c16      	cmp	r4, #22
 800947e:	dd03      	ble.n	8009488 <lroundf+0x3a>
 8009480:	3d96      	subs	r5, #150	@ 0x96
 8009482:	40ab      	lsls	r3, r5
 8009484:	4359      	muls	r1, r3
 8009486:	e7f2      	b.n	800946e <lroundf+0x20>
 8009488:	2280      	movs	r2, #128	@ 0x80
 800948a:	03d2      	lsls	r2, r2, #15
 800948c:	4122      	asrs	r2, r4
 800948e:	18d3      	adds	r3, r2, r3
 8009490:	2217      	movs	r2, #23
 8009492:	1b12      	subs	r2, r2, r4
 8009494:	40d3      	lsrs	r3, r2
 8009496:	e7f5      	b.n	8009484 <lroundf+0x36>
 8009498:	f7f8 f850 	bl	800153c <__aeabi_f2iz>
 800949c:	0001      	movs	r1, r0
 800949e:	e7e6      	b.n	800946e <lroundf+0x20>

080094a0 <_init>:
 80094a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a2:	46c0      	nop			@ (mov r8, r8)
 80094a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a6:	bc08      	pop	{r3}
 80094a8:	469e      	mov	lr, r3
 80094aa:	4770      	bx	lr

080094ac <_fini>:
 80094ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ae:	46c0      	nop			@ (mov r8, r8)
 80094b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094b2:	bc08      	pop	{r3}
 80094b4:	469e      	mov	lr, r3
 80094b6:	4770      	bx	lr
