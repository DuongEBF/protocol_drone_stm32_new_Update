/*
 * led_controller.c
 *
 *  Created on: Aug 13, 2025
 *      Author: duong
 */
#include "led_controller.h"
#include "mavlink_from_FC.h"
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
mavlink_from_fc_t led_controll;
static float att_roll = 0.0f, att_pitch = 0.0f; // radians
static uint32_t  att_last_ms = 0;                    // tick khi nháº­n ATTITUDE
static GPIO_TypeDef* gpio = NULL;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/*< define */
#define DISARM_TILT_DEG         40.0f
#define ATT_VALID_MS            500
// Tweakable timings (ms)
#define UNINIT_HALF_PERIOD_MS   300   // -> 50% duty, 600 ms full period
#define STANDBY_PERIOD_MS       1050
#define STANDBY_ON_MS           50
#define ACTIVE_HALF_PERIOD_MS   500   // -> alternate every 300 ms
#define CRITICAL_HALF_PERIOD_MS 200   // -> 50% duty, 400 ms full period
/* USER CODE END PD */
/* ---------- Helpers ---------- */
// Helper: compute ON window in a repeating period
static inline uint8_t pulse_in_period(uint32_t now, uint32_t t0, uint16_t period_ms, uint16_t on_ms)
{
    uint32_t phase = (now - t0) % period_ms; // unsigned math -> overflow-safe
    return (phase < on_ms) ? 1u : 0u;
}

// Helper: write only when a pin actually needs to change
static inline void set_pin_if_changed(GPIO_TypeDef *port, uint16_t pin, uint8_t on, uint8_t *cached)
{
    if (on != *cached)
    {
        HAL_GPIO_WritePin(port, pin, on ? GPIO_PIN_SET : GPIO_PIN_RESET);
        *cached = on;
    }
}

void led_process(void)
{
	mavlink_process(*led_controll, HAL_GetTick());
}

void led_controller_init(GPIO_TypeDef* gpio_x)
{
	gpio = gpio_x;
	mavlink_init();
}



