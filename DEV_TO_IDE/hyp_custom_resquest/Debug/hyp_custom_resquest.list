
hyp_custom_resquest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005080  08005080  00006080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050b0  080050b0  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080050b0  080050b0  000060b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050b8  080050b8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050b8  080050b8  000060b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080050bc  080050bc  000060bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080050c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000700c  2**0
                  CONTENTS
 10 .bss          00000538  2000000c  2000000c  0000700c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000544  20000544  0000700c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009862  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e12  00000000  00000000  0001089e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007f0  00000000  00000000  000126b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005e8  00000000  00000000  00012ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207b6  00000000  00000000  00013488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000918c  00000000  00000000  00033c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4018  00000000  00000000  0003cdca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00100de2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001fd0  00000000  00000000  00100e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  00102df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005068 	.word	0x08005068

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005068 	.word	0x08005068

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_uldivmod>:
 80001dc:	b953      	cbnz	r3, 80001f4 <__aeabi_uldivmod+0x18>
 80001de:	b94a      	cbnz	r2, 80001f4 <__aeabi_uldivmod+0x18>
 80001e0:	2900      	cmp	r1, #0
 80001e2:	bf08      	it	eq
 80001e4:	2800      	cmpeq	r0, #0
 80001e6:	bf1c      	itt	ne
 80001e8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001ec:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f0:	f000 b988 	b.w	8000504 <__aeabi_idiv0>
 80001f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001fc:	f000 f806 	bl	800020c <__udivmoddi4>
 8000200:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000204:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000208:	b004      	add	sp, #16
 800020a:	4770      	bx	lr

0800020c <__udivmoddi4>:
 800020c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000210:	9d08      	ldr	r5, [sp, #32]
 8000212:	468e      	mov	lr, r1
 8000214:	4604      	mov	r4, r0
 8000216:	4688      	mov	r8, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14a      	bne.n	80002b2 <__udivmoddi4+0xa6>
 800021c:	428a      	cmp	r2, r1
 800021e:	4617      	mov	r7, r2
 8000220:	d962      	bls.n	80002e8 <__udivmoddi4+0xdc>
 8000222:	fab2 f682 	clz	r6, r2
 8000226:	b14e      	cbz	r6, 800023c <__udivmoddi4+0x30>
 8000228:	f1c6 0320 	rsb	r3, r6, #32
 800022c:	fa01 f806 	lsl.w	r8, r1, r6
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	40b7      	lsls	r7, r6
 8000236:	ea43 0808 	orr.w	r8, r3, r8
 800023a:	40b4      	lsls	r4, r6
 800023c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000240:	fa1f fc87 	uxth.w	ip, r7
 8000244:	fbb8 f1fe 	udiv	r1, r8, lr
 8000248:	0c23      	lsrs	r3, r4, #16
 800024a:	fb0e 8811 	mls	r8, lr, r1, r8
 800024e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000252:	fb01 f20c 	mul.w	r2, r1, ip
 8000256:	429a      	cmp	r2, r3
 8000258:	d909      	bls.n	800026e <__udivmoddi4+0x62>
 800025a:	18fb      	adds	r3, r7, r3
 800025c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000260:	f080 80ea 	bcs.w	8000438 <__udivmoddi4+0x22c>
 8000264:	429a      	cmp	r2, r3
 8000266:	f240 80e7 	bls.w	8000438 <__udivmoddi4+0x22c>
 800026a:	3902      	subs	r1, #2
 800026c:	443b      	add	r3, r7
 800026e:	1a9a      	subs	r2, r3, r2
 8000270:	b2a3      	uxth	r3, r4
 8000272:	fbb2 f0fe 	udiv	r0, r2, lr
 8000276:	fb0e 2210 	mls	r2, lr, r0, r2
 800027a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000282:	459c      	cmp	ip, r3
 8000284:	d909      	bls.n	800029a <__udivmoddi4+0x8e>
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800028c:	f080 80d6 	bcs.w	800043c <__udivmoddi4+0x230>
 8000290:	459c      	cmp	ip, r3
 8000292:	f240 80d3 	bls.w	800043c <__udivmoddi4+0x230>
 8000296:	443b      	add	r3, r7
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029e:	eba3 030c 	sub.w	r3, r3, ip
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa2>
 80002a6:	40f3      	lsrs	r3, r6
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xb6>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb0>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa2>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x14c>
 80002ca:	4573      	cmp	r3, lr
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xc8>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 8105 	bhi.w	80004de <__udivmoddi4+0x2d2>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4690      	mov	r8, r2
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e5      	beq.n	80002ae <__udivmoddi4+0xa2>
 80002e2:	e9c5 4800 	strd	r4, r8, [r5]
 80002e6:	e7e2      	b.n	80002ae <__udivmoddi4+0xa2>
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f000 8090 	beq.w	800040e <__udivmoddi4+0x202>
 80002ee:	fab2 f682 	clz	r6, r2
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f040 80a4 	bne.w	8000440 <__udivmoddi4+0x234>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	0c03      	lsrs	r3, r0, #16
 80002fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000300:	b280      	uxth	r0, r0
 8000302:	b2bc      	uxth	r4, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb2 fcfe 	udiv	ip, r2, lr
 800030a:	fb0e 221c 	mls	r2, lr, ip, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb04 f20c 	mul.w	r2, r4, ip
 8000316:	429a      	cmp	r2, r3
 8000318:	d907      	bls.n	800032a <__udivmoddi4+0x11e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x11c>
 8000322:	429a      	cmp	r2, r3
 8000324:	f200 80e0 	bhi.w	80004e8 <__udivmoddi4+0x2dc>
 8000328:	46c4      	mov	ip, r8
 800032a:	1a9b      	subs	r3, r3, r2
 800032c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000330:	fb0e 3312 	mls	r3, lr, r2, r3
 8000334:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000338:	fb02 f404 	mul.w	r4, r2, r4
 800033c:	429c      	cmp	r4, r3
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x144>
 8000340:	18fb      	adds	r3, r7, r3
 8000342:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x142>
 8000348:	429c      	cmp	r4, r3
 800034a:	f200 80ca 	bhi.w	80004e2 <__udivmoddi4+0x2d6>
 800034e:	4602      	mov	r2, r0
 8000350:	1b1b      	subs	r3, r3, r4
 8000352:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x98>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa0e f401 	lsl.w	r4, lr, r1
 8000368:	fa20 f306 	lsr.w	r3, r0, r6
 800036c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000370:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fa00 f801 	lsl.w	r8, r0, r1
 800037a:	fa1f fc87 	uxth.w	ip, r7
 800037e:	fbbe f0f9 	udiv	r0, lr, r9
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	fb09 ee10 	mls	lr, r9, r0, lr
 8000388:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800038c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000390:	45a6      	cmp	lr, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x1a0>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039e:	f080 809c 	bcs.w	80004da <__udivmoddi4+0x2ce>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8099 	bls.w	80004da <__udivmoddi4+0x2ce>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	eba4 040e 	sub.w	r4, r4, lr
 80003b0:	fa1f fe83 	uxth.w	lr, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c4:	45a4      	cmp	ip, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1ce>
 80003c8:	193c      	adds	r4, r7, r4
 80003ca:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ce:	f080 8082 	bcs.w	80004d6 <__udivmoddi4+0x2ca>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d97f      	bls.n	80004d6 <__udivmoddi4+0x2ca>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e6:	4564      	cmp	r4, ip
 80003e8:	4673      	mov	r3, lr
 80003ea:	46e1      	mov	r9, ip
 80003ec:	d362      	bcc.n	80004b4 <__udivmoddi4+0x2a8>
 80003ee:	d05f      	beq.n	80004b0 <__udivmoddi4+0x2a4>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x1fe>
 80003f2:	ebb8 0203 	subs.w	r2, r8, r3
 80003f6:	eb64 0409 	sbc.w	r4, r4, r9
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	fa22 f301 	lsr.w	r3, r2, r1
 8000402:	431e      	orrs	r6, r3
 8000404:	40cc      	lsrs	r4, r1
 8000406:	e9c5 6400 	strd	r6, r4, [r5]
 800040a:	2100      	movs	r1, #0
 800040c:	e74f      	b.n	80002ae <__udivmoddi4+0xa2>
 800040e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000412:	0c01      	lsrs	r1, r0, #16
 8000414:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000418:	b280      	uxth	r0, r0
 800041a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041e:	463b      	mov	r3, r7
 8000420:	4638      	mov	r0, r7
 8000422:	463c      	mov	r4, r7
 8000424:	46b8      	mov	r8, r7
 8000426:	46be      	mov	lr, r7
 8000428:	2620      	movs	r6, #32
 800042a:	fbb1 f1f7 	udiv	r1, r1, r7
 800042e:	eba2 0208 	sub.w	r2, r2, r8
 8000432:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000436:	e766      	b.n	8000306 <__udivmoddi4+0xfa>
 8000438:	4601      	mov	r1, r0
 800043a:	e718      	b.n	800026e <__udivmoddi4+0x62>
 800043c:	4610      	mov	r0, r2
 800043e:	e72c      	b.n	800029a <__udivmoddi4+0x8e>
 8000440:	f1c6 0220 	rsb	r2, r6, #32
 8000444:	fa2e f302 	lsr.w	r3, lr, r2
 8000448:	40b7      	lsls	r7, r6
 800044a:	40b1      	lsls	r1, r6
 800044c:	fa20 f202 	lsr.w	r2, r0, r2
 8000450:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000454:	430a      	orrs	r2, r1
 8000456:	fbb3 f8fe 	udiv	r8, r3, lr
 800045a:	b2bc      	uxth	r4, r7
 800045c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000460:	0c11      	lsrs	r1, r2, #16
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb08 f904 	mul.w	r9, r8, r4
 800046a:	40b0      	lsls	r0, r6
 800046c:	4589      	cmp	r9, r1
 800046e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000472:	b280      	uxth	r0, r0
 8000474:	d93e      	bls.n	80004f4 <__udivmoddi4+0x2e8>
 8000476:	1879      	adds	r1, r7, r1
 8000478:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800047c:	d201      	bcs.n	8000482 <__udivmoddi4+0x276>
 800047e:	4589      	cmp	r9, r1
 8000480:	d81f      	bhi.n	80004c2 <__udivmoddi4+0x2b6>
 8000482:	eba1 0109 	sub.w	r1, r1, r9
 8000486:	fbb1 f9fe 	udiv	r9, r1, lr
 800048a:	fb09 f804 	mul.w	r8, r9, r4
 800048e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000492:	b292      	uxth	r2, r2
 8000494:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000498:	4542      	cmp	r2, r8
 800049a:	d229      	bcs.n	80004f0 <__udivmoddi4+0x2e4>
 800049c:	18ba      	adds	r2, r7, r2
 800049e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004a2:	d2c4      	bcs.n	800042e <__udivmoddi4+0x222>
 80004a4:	4542      	cmp	r2, r8
 80004a6:	d2c2      	bcs.n	800042e <__udivmoddi4+0x222>
 80004a8:	f1a9 0102 	sub.w	r1, r9, #2
 80004ac:	443a      	add	r2, r7
 80004ae:	e7be      	b.n	800042e <__udivmoddi4+0x222>
 80004b0:	45f0      	cmp	r8, lr
 80004b2:	d29d      	bcs.n	80003f0 <__udivmoddi4+0x1e4>
 80004b4:	ebbe 0302 	subs.w	r3, lr, r2
 80004b8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004bc:	3801      	subs	r0, #1
 80004be:	46e1      	mov	r9, ip
 80004c0:	e796      	b.n	80003f0 <__udivmoddi4+0x1e4>
 80004c2:	eba7 0909 	sub.w	r9, r7, r9
 80004c6:	4449      	add	r1, r9
 80004c8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004cc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d0:	fb09 f804 	mul.w	r8, r9, r4
 80004d4:	e7db      	b.n	800048e <__udivmoddi4+0x282>
 80004d6:	4673      	mov	r3, lr
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1ce>
 80004da:	4650      	mov	r0, sl
 80004dc:	e766      	b.n	80003ac <__udivmoddi4+0x1a0>
 80004de:	4608      	mov	r0, r1
 80004e0:	e6fd      	b.n	80002de <__udivmoddi4+0xd2>
 80004e2:	443b      	add	r3, r7
 80004e4:	3a02      	subs	r2, #2
 80004e6:	e733      	b.n	8000350 <__udivmoddi4+0x144>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	443b      	add	r3, r7
 80004ee:	e71c      	b.n	800032a <__udivmoddi4+0x11e>
 80004f0:	4649      	mov	r1, r9
 80004f2:	e79c      	b.n	800042e <__udivmoddi4+0x222>
 80004f4:	eba1 0109 	sub.w	r1, r1, r9
 80004f8:	46c4      	mov	ip, r8
 80004fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fe:	fb09 f804 	mul.w	r8, r9, r4
 8000502:	e7c4      	b.n	800048e <__udivmoddi4+0x282>

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050c:	f000 f9ec 	bl	80008e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000510:	f000 f810 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000514:	f000 f8ae 	bl	8000674 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000518:	f000 f876 	bl	8000608 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  Can_Init(&hcan1,&hyp_can);
 800051c:	4903      	ldr	r1, [pc, #12]	@ (800052c <main+0x24>)
 800051e:	4804      	ldr	r0, [pc, #16]	@ (8000530 <main+0x28>)
 8000520:	f002 fa56 	bl	80029d0 <Can_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Can_Handle();
 8000524:	f002 faf2 	bl	8002b0c <Can_Handle>
 8000528:	e7fc      	b.n	8000524 <main+0x1c>
 800052a:	bf00      	nop
 800052c:	20000050 	.word	0x20000050
 8000530:	20000028 	.word	0x20000028

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	@ 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	@ 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f004 fd55 	bl	8004ff2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b28      	ldr	r3, [pc, #160]	@ (8000600 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	@ (8000600 <SystemClock_Config+0xcc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	@ 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	@ (8000600 <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a21      	ldr	r2, [pc, #132]	@ (8000604 <SystemClock_Config+0xd0>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000590:	2301      	movs	r3, #1
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000594:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000598:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a4:	2304      	movs	r3, #4
 80005a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a8:	23a8      	movs	r3, #168	@ 0xa8
 80005aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fb73 	bl	8001ca4 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c4:	f000 f88c 	bl	80006e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2105      	movs	r1, #5
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fdd4 	bl	8002194 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005f2:	f000 f875 	bl	80006e0 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	@ 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <MX_CAN1_Init+0x64>)
 800060e:	4a18      	ldr	r2, [pc, #96]	@ (8000670 <MX_CAN1_Init+0x68>)
 8000610:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000612:	4b16      	ldr	r3, [pc, #88]	@ (800066c <MX_CAN1_Init+0x64>)
 8000614:	2203      	movs	r2, #3
 8000616:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <MX_CAN1_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <MX_CAN1_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000624:	4b11      	ldr	r3, [pc, #68]	@ (800066c <MX_CAN1_Init+0x64>)
 8000626:	f44f 2230 	mov.w	r2, #720896	@ 0xb0000
 800062a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800062c:	4b0f      	ldr	r3, [pc, #60]	@ (800066c <MX_CAN1_Init+0x64>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_CAN1_Init+0x64>)
 8000634:	2200      	movs	r2, #0
 8000636:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000638:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <MX_CAN1_Init+0x64>)
 800063a:	2200      	movs	r2, #0
 800063c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800063e:	4b0b      	ldr	r3, [pc, #44]	@ (800066c <MX_CAN1_Init+0x64>)
 8000640:	2200      	movs	r2, #0
 8000642:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000644:	4b09      	ldr	r3, [pc, #36]	@ (800066c <MX_CAN1_Init+0x64>)
 8000646:	2200      	movs	r2, #0
 8000648:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800064a:	4b08      	ldr	r3, [pc, #32]	@ (800066c <MX_CAN1_Init+0x64>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000650:	4b06      	ldr	r3, [pc, #24]	@ (800066c <MX_CAN1_Init+0x64>)
 8000652:	2200      	movs	r2, #0
 8000654:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000656:	4805      	ldr	r0, [pc, #20]	@ (800066c <MX_CAN1_Init+0x64>)
 8000658:	f000 f9dc 	bl	8000a14 <HAL_CAN_Init>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000662:	f000 f83d 	bl	80006e0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000666:	bf00      	nop
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000028 	.word	0x20000028
 8000670:	40006400 	.word	0x40006400

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800067a:	2300      	movs	r3, #0
 800067c:	60fb      	str	r3, [r7, #12]
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_GPIO_Init+0x68>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	4a16      	ldr	r2, [pc, #88]	@ (80006dc <MX_GPIO_Init+0x68>)
 8000684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000688:	6313      	str	r3, [r2, #48]	@ 0x30
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_GPIO_Init+0x68>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <MX_GPIO_Init+0x68>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	4a0f      	ldr	r2, [pc, #60]	@ (80006dc <MX_GPIO_Init+0x68>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006a6:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <MX_GPIO_Init+0x68>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_GPIO_Init+0x68>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a08      	ldr	r2, [pc, #32]	@ (80006dc <MX_GPIO_Init+0x68>)
 80006bc:	f043 0308 	orr.w	r3, r3, #8
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_GPIO_Init+0x68>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0308 	and.w	r3, r3, #8
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e4:	b672      	cpsid	i
}
 80006e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <Error_Handler+0x8>

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b10      	ldr	r3, [pc, #64]	@ (8000738 <HAL_MspInit+0x4c>)
 80006f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000738 <HAL_MspInit+0x4c>)
 80006fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000700:	6453      	str	r3, [r2, #68]	@ 0x44
 8000702:	4b0d      	ldr	r3, [pc, #52]	@ (8000738 <HAL_MspInit+0x4c>)
 8000704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <HAL_MspInit+0x4c>)
 8000714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000716:	4a08      	ldr	r2, [pc, #32]	@ (8000738 <HAL_MspInit+0x4c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800071c:	6413      	str	r3, [r2, #64]	@ 0x40
 800071e:	4b06      	ldr	r3, [pc, #24]	@ (8000738 <HAL_MspInit+0x4c>)
 8000720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	@ 0x28
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
 800074c:	605a      	str	r2, [r3, #4]
 800074e:	609a      	str	r2, [r3, #8]
 8000750:	60da      	str	r2, [r3, #12]
 8000752:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <HAL_CAN_MspInit+0xb4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d143      	bne.n	80007e6 <HAL_CAN_MspInit+0xaa>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
 8000762:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <HAL_CAN_MspInit+0xb8>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000766:	4a23      	ldr	r2, [pc, #140]	@ (80007f4 <HAL_CAN_MspInit+0xb8>)
 8000768:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800076c:	6413      	str	r3, [r2, #64]	@ 0x40
 800076e:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <HAL_CAN_MspInit+0xb8>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
 800077e:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <HAL_CAN_MspInit+0xb8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a1c      	ldr	r2, [pc, #112]	@ (80007f4 <HAL_CAN_MspInit+0xb8>)
 8000784:	f043 0308 	orr.w	r3, r3, #8
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b1a      	ldr	r3, [pc, #104]	@ (80007f4 <HAL_CAN_MspInit+0xb8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000796:	2301      	movs	r3, #1
 8000798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800079e:	2301      	movs	r3, #1
 80007a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007a6:	2309      	movs	r3, #9
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	4811      	ldr	r0, [pc, #68]	@ (80007f8 <HAL_CAN_MspInit+0xbc>)
 80007b2:	f001 f8db 	bl	800196c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007b6:	2302      	movs	r3, #2
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007c6:	2309      	movs	r3, #9
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <HAL_CAN_MspInit+0xbc>)
 80007d2:	f001 f8cb 	bl	800196c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2014      	movs	r0, #20
 80007dc:	f001 f88f 	bl	80018fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80007e0:	2014      	movs	r0, #20
 80007e2:	f001 f8a8 	bl	8001936 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	@ 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40006400 	.word	0x40006400
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020c00 	.word	0x40020c00

080007fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <NMI_Handler+0x4>

08000804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <HardFault_Handler+0x4>

0800080c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <MemManage_Handler+0x4>

08000814 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <UsageFault_Handler+0x4>

08000824 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000852:	f000 f89b 	bl	800098c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000860:	4802      	ldr	r0, [pc, #8]	@ (800086c <CAN1_RX0_IRQHandler+0x10>)
 8000862:	f000 fd42 	bl	80012ea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000028 	.word	0x20000028

08000870 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <SystemInit+0x20>)
 8000876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800087a:	4a05      	ldr	r2, [pc, #20]	@ (8000890 <SystemInit+0x20>)
 800087c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000880:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000884:	bf00      	nop
 8000886:	46bd      	mov	sp, r7
 8000888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000898:	f7ff ffea 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800089c:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800089e:	490d      	ldr	r1, [pc, #52]	@ (80008d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008a0:	4a0d      	ldr	r2, [pc, #52]	@ (80008d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a4:	e002      	b.n	80008ac <LoopCopyDataInit>

080008a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008aa:	3304      	adds	r3, #4

080008ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b0:	d3f9      	bcc.n	80008a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008b2:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008b4:	4c0a      	ldr	r4, [pc, #40]	@ (80008e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b8:	e001      	b.n	80008be <LoopFillZerobss>

080008ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008bc:	3204      	adds	r2, #4

080008be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c0:	d3fb      	bcc.n	80008ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008c2:	f004 fb9f 	bl	8005004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008c6:	f7ff fe1f 	bl	8000508 <main>
  bx  lr    
 80008ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008d8:	080050c0 	.word	0x080050c0
  ldr r2, =_sbss
 80008dc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008e0:	20000544 	.word	0x20000544

080008e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008e4:	e7fe      	b.n	80008e4 <ADC_IRQHandler>
	...

080008e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000928 <HAL_Init+0x40>)
 80008f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000928 <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <HAL_Init+0x40>)
 80008fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000904:	4b08      	ldr	r3, [pc, #32]	@ (8000928 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a07      	ldr	r2, [pc, #28]	@ (8000928 <HAL_Init+0x40>)
 800090a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800090e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000910:	2003      	movs	r0, #3
 8000912:	f000 ffe9 	bl	80018e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000916:	200f      	movs	r0, #15
 8000918:	f000 f808 	bl	800092c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800091c:	f7ff fee6 	bl	80006ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000920:	2300      	movs	r3, #0
}
 8000922:	4618      	mov	r0, r3
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023c00 	.word	0x40023c00

0800092c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000934:	4b12      	ldr	r3, [pc, #72]	@ (8000980 <HAL_InitTick+0x54>)
 8000936:	681a      	ldr	r2, [r3, #0]
 8000938:	4b12      	ldr	r3, [pc, #72]	@ (8000984 <HAL_InitTick+0x58>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000942:	fbb3 f3f1 	udiv	r3, r3, r1
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f801 	bl	8001952 <HAL_SYSTICK_Config>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
 8000958:	e00e      	b.n	8000978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d80a      	bhi.n	8000976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000968:	f000 ffc9 	bl	80018fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800096c:	4a06      	ldr	r2, [pc, #24]	@ (8000988 <HAL_InitTick+0x5c>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	e000      	b.n	8000978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
}
 8000978:	4618      	mov	r0, r3
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000000 	.word	0x20000000
 8000984:	20000008 	.word	0x20000008
 8000988:	20000004 	.word	0x20000004

0800098c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000990:	4b06      	ldr	r3, [pc, #24]	@ (80009ac <HAL_IncTick+0x20>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <HAL_IncTick+0x24>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4413      	add	r3, r2
 800099c:	4a04      	ldr	r2, [pc, #16]	@ (80009b0 <HAL_IncTick+0x24>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	20000008 	.word	0x20000008
 80009b0:	2000052c 	.word	0x2000052c

080009b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <HAL_GetTick+0x14>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	2000052c 	.word	0x2000052c

080009cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009d4:	f7ff ffee 	bl	80009b4 <HAL_GetTick>
 80009d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80009e4:	d005      	beq.n	80009f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <HAL_Delay+0x44>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	4413      	add	r3, r2
 80009f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009f2:	bf00      	nop
 80009f4:	f7ff ffde 	bl	80009b4 <HAL_GetTick>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d8f7      	bhi.n	80009f4 <HAL_Delay+0x28>
  {
  }
}
 8000a04:	bf00      	nop
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008

08000a14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e0ed      	b.n	8000c02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d102      	bne.n	8000a38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f7ff fe82 	bl	800073c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f042 0201 	orr.w	r2, r2, #1
 8000a46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a48:	f7ff ffb4 	bl	80009b4 <HAL_GetTick>
 8000a4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a4e:	e012      	b.n	8000a76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a50:	f7ff ffb0 	bl	80009b4 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	1ad3      	subs	r3, r2, r3
 8000a5a:	2b0a      	cmp	r3, #10
 8000a5c:	d90b      	bls.n	8000a76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a62:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2205      	movs	r2, #5
 8000a6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e0c5      	b.n	8000c02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0e5      	beq.n	8000a50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f022 0202 	bic.w	r2, r2, #2
 8000a92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a94:	f7ff ff8e 	bl	80009b4 <HAL_GetTick>
 8000a98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a9a:	e012      	b.n	8000ac2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a9c:	f7ff ff8a 	bl	80009b4 <HAL_GetTick>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	1ad3      	subs	r3, r2, r3
 8000aa6:	2b0a      	cmp	r3, #10
 8000aa8:	d90b      	bls.n	8000ac2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000aae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2205      	movs	r2, #5
 8000aba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e09f      	b.n	8000c02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d1e5      	bne.n	8000a9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7e1b      	ldrb	r3, [r3, #24]
 8000ad4:	2b01      	cmp	r3, #1
 8000ad6:	d108      	bne.n	8000aea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	e007      	b.n	8000afa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000af8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	7e5b      	ldrb	r3, [r3, #25]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d108      	bne.n	8000b14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	e007      	b.n	8000b24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	7e9b      	ldrb	r3, [r3, #26]
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d108      	bne.n	8000b3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f042 0220 	orr.w	r2, r2, #32
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	e007      	b.n	8000b4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f022 0220 	bic.w	r2, r2, #32
 8000b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	7edb      	ldrb	r3, [r3, #27]
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d108      	bne.n	8000b68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 0210 	bic.w	r2, r2, #16
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	e007      	b.n	8000b78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 0210 	orr.w	r2, r2, #16
 8000b76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	7f1b      	ldrb	r3, [r3, #28]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d108      	bne.n	8000b92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f042 0208 	orr.w	r2, r2, #8
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	e007      	b.n	8000ba2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	681a      	ldr	r2, [r3, #0]
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f022 0208 	bic.w	r2, r2, #8
 8000ba0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	7f5b      	ldrb	r3, [r3, #29]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d108      	bne.n	8000bbc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f042 0204 	orr.w	r2, r2, #4
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	e007      	b.n	8000bcc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0204 	bic.w	r2, r2, #4
 8000bca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	689a      	ldr	r2, [r3, #8]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	431a      	orrs	r2, r3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	431a      	orrs	r2, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	ea42 0103 	orr.w	r1, r2, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	1e5a      	subs	r2, r3, #1
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c1c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8000c1e:	7dfb      	ldrb	r3, [r7, #23]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d003      	beq.n	8000c2c <HAL_CAN_ConfigFilter+0x20>
 8000c24:	7dfb      	ldrb	r3, [r7, #23]
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	f040 80be 	bne.w	8000da8 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000c2c:	4b65      	ldr	r3, [pc, #404]	@ (8000dc4 <HAL_CAN_ConfigFilter+0x1b8>)
 8000c2e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c36:	f043 0201 	orr.w	r2, r3, #1
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000c46:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	695b      	ldr	r3, [r3, #20]
 8000c68:	f003 031f 	and.w	r3, r3, #31
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	401a      	ands	r2, r3
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d123      	bne.n	8000cd6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	401a      	ands	r2, r3
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cac:	683a      	ldr	r2, [r7, #0]
 8000cae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000cb0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	3248      	adds	r2, #72	@ 0x48
 8000cb6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	689b      	ldr	r3, [r3, #8]
 8000cbe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000cca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ccc:	6939      	ldr	r1, [r7, #16]
 8000cce:	3348      	adds	r3, #72	@ 0x48
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	440b      	add	r3, r1
 8000cd4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d122      	bne.n	8000d24 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	431a      	orrs	r2, r3
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000cfe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	3248      	adds	r2, #72	@ 0x48
 8000d04:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	68db      	ldr	r3, [r3, #12]
 8000d12:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000d18:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000d1a:	6939      	ldr	r1, [r7, #16]
 8000d1c:	3348      	adds	r3, #72	@ 0x48
 8000d1e:	00db      	lsls	r3, r3, #3
 8000d20:	440b      	add	r3, r1
 8000d22:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d109      	bne.n	8000d40 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	401a      	ands	r2, r3
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000d3e:	e007      	b.n	8000d50 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d109      	bne.n	8000d6c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d58:	693b      	ldr	r3, [r7, #16]
 8000d5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	401a      	ands	r2, r3
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000d6a:	e007      	b.n	8000d7c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	431a      	orrs	r2, r3
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	6a1b      	ldr	r3, [r3, #32]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d107      	bne.n	8000d94 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d9a:	f023 0201 	bic.w	r2, r3, #1
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	e006      	b.n	8000db6 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dac:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
  }
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	371c      	adds	r7, #28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40006400 	.word	0x40006400

08000dc8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d12e      	bne.n	8000e3a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2202      	movs	r2, #2
 8000de0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f022 0201 	bic.w	r2, r2, #1
 8000df2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000df4:	f7ff fdde 	bl	80009b4 <HAL_GetTick>
 8000df8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000dfa:	e012      	b.n	8000e22 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dfc:	f7ff fdda 	bl	80009b4 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b0a      	cmp	r3, #10
 8000e08:	d90b      	bls.n	8000e22 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2205      	movs	r2, #5
 8000e1a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e012      	b.n	8000e48 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d1e5      	bne.n	8000dfc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e006      	b.n	8000e48 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
  }
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b089      	sub	sp, #36	@ 0x24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
 8000e5c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e64:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000e6e:	7ffb      	ldrb	r3, [r7, #31]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d003      	beq.n	8000e7c <HAL_CAN_AddTxMessage+0x2c>
 8000e74:	7ffb      	ldrb	r3, [r7, #31]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	f040 80ad 	bne.w	8000fd6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10a      	bne.n	8000e9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d105      	bne.n	8000e9c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	f000 8095 	beq.w	8000fc6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000e9c:	69bb      	ldr	r3, [r7, #24]
 8000e9e:	0e1b      	lsrs	r3, r3, #24
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d10d      	bne.n	8000ed4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000ec2:	68f9      	ldr	r1, [r7, #12]
 8000ec4:	6809      	ldr	r1, [r1, #0]
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	3318      	adds	r3, #24
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	440b      	add	r3, r1
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e00f      	b.n	8000ef4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ede:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000ee4:	68f9      	ldr	r1, [r7, #12]
 8000ee6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000ee8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3318      	adds	r3, #24
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	440b      	add	r3, r1
 8000ef2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	3318      	adds	r3, #24
 8000f00:	011b      	lsls	r3, r3, #4
 8000f02:	440b      	add	r3, r1
 8000f04:	3304      	adds	r3, #4
 8000f06:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	7d1b      	ldrb	r3, [r3, #20]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d111      	bne.n	8000f34 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3318      	adds	r3, #24
 8000f18:	011b      	lsls	r3, r3, #4
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	6811      	ldr	r1, [r2, #0]
 8000f24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3318      	adds	r3, #24
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	440b      	add	r3, r1
 8000f30:	3304      	adds	r3, #4
 8000f32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3307      	adds	r3, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	061a      	lsls	r2, r3, #24
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3306      	adds	r3, #6
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	041b      	lsls	r3, r3, #16
 8000f44:	431a      	orrs	r2, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3305      	adds	r3, #5
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	3204      	adds	r2, #4
 8000f54:	7812      	ldrb	r2, [r2, #0]
 8000f56:	4610      	mov	r0, r2
 8000f58:	68fa      	ldr	r2, [r7, #12]
 8000f5a:	6811      	ldr	r1, [r2, #0]
 8000f5c:	ea43 0200 	orr.w	r2, r3, r0
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	440b      	add	r3, r1
 8000f66:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000f6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	3303      	adds	r3, #3
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	061a      	lsls	r2, r3, #24
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3302      	adds	r3, #2
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	041b      	lsls	r3, r3, #16
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3301      	adds	r3, #1
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	4313      	orrs	r3, r2
 8000f88:	687a      	ldr	r2, [r7, #4]
 8000f8a:	7812      	ldrb	r2, [r2, #0]
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	6811      	ldr	r1, [r2, #0]
 8000f92:	ea43 0200 	orr.w	r2, r3, r0
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	440b      	add	r3, r1
 8000f9c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000fa0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3318      	adds	r3, #24
 8000faa:	011b      	lsls	r3, r3, #4
 8000fac:	4413      	add	r3, r2
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	68fa      	ldr	r2, [r7, #12]
 8000fb2:	6811      	ldr	r1, [r2, #0]
 8000fb4:	f043 0201 	orr.w	r2, r3, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3318      	adds	r3, #24
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	440b      	add	r3, r1
 8000fc0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e00e      	b.n	8000fe4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e006      	b.n	8000fe4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fda:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
  }
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3724      	adds	r7, #36	@ 0x24
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001002:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001004:	7afb      	ldrb	r3, [r7, #11]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d002      	beq.n	8001010 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800100a:	7afb      	ldrb	r3, [r7, #11]
 800100c:	2b02      	cmp	r3, #2
 800100e:	d11d      	bne.n	800104c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d002      	beq.n	8001024 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	3301      	adds	r3, #1
 8001022:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d002      	beq.n	8001038 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3301      	adds	r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800104c:	68fb      	ldr	r3, [r7, #12]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800105a:	b480      	push	{r7}
 800105c:	b087      	sub	sp, #28
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800106e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d003      	beq.n	800107e <HAL_CAN_GetRxMessage+0x24>
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	2b02      	cmp	r3, #2
 800107a:	f040 8103 	bne.w	8001284 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d10e      	bne.n	80010a2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001096:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e0f7      	b.n	8001292 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	691b      	ldr	r3, [r3, #16]
 80010a8:	f003 0303 	and.w	r3, r3, #3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d107      	bne.n	80010c0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e0e8      	b.n	8001292 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	331b      	adds	r3, #27
 80010c8:	011b      	lsls	r3, r3, #4
 80010ca:	4413      	add	r3, r2
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0204 	and.w	r2, r3, #4
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10c      	bne.n	80010f8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	331b      	adds	r3, #27
 80010e6:	011b      	lsls	r3, r3, #4
 80010e8:	4413      	add	r3, r2
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	0d5b      	lsrs	r3, r3, #21
 80010ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e00b      	b.n	8001110 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	331b      	adds	r3, #27
 8001100:	011b      	lsls	r3, r3, #4
 8001102:	4413      	add	r3, r2
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	08db      	lsrs	r3, r3, #3
 8001108:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	331b      	adds	r3, #27
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	4413      	add	r3, r2
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0202 	and.w	r2, r3, #2
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	331b      	adds	r3, #27
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	4413      	add	r3, r2
 8001132:	3304      	adds	r3, #4
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2208      	movs	r2, #8
 8001142:	611a      	str	r2, [r3, #16]
 8001144:	e00b      	b.n	800115e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	331b      	adds	r3, #27
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4413      	add	r3, r2
 8001152:	3304      	adds	r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 020f 	and.w	r2, r3, #15
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	331b      	adds	r3, #27
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4413      	add	r3, r2
 800116a:	3304      	adds	r3, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	0a1b      	lsrs	r3, r3, #8
 8001170:	b2da      	uxtb	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	331b      	adds	r3, #27
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	4413      	add	r3, r2
 8001182:	3304      	adds	r3, #4
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	0c1b      	lsrs	r3, r3, #16
 8001188:	b29a      	uxth	r2, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	4413      	add	r3, r2
 8001198:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	4413      	add	r3, r2
 80011ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	0a1a      	lsrs	r2, r3, #8
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	3301      	adds	r3, #1
 80011ba:	b2d2      	uxtb	r2, r2
 80011bc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	0c1a      	lsrs	r2, r3, #16
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	3302      	adds	r3, #2
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	4413      	add	r3, r2
 80011e2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	0e1a      	lsrs	r2, r3, #24
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	3303      	adds	r3, #3
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4413      	add	r3, r2
 80011fc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	3304      	adds	r3, #4
 8001206:	b2d2      	uxtb	r2, r2
 8001208:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	0a1a      	lsrs	r2, r3, #8
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3305      	adds	r3, #5
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	4413      	add	r3, r2
 800122e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	0c1a      	lsrs	r2, r3, #16
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	3306      	adds	r3, #6
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	4413      	add	r3, r2
 8001248:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	0e1a      	lsrs	r2, r3, #24
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	3307      	adds	r3, #7
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d108      	bne.n	8001270 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68da      	ldr	r2, [r3, #12]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0220 	orr.w	r2, r2, #32
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	e007      	b.n	8001280 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	691a      	ldr	r2, [r3, #16]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0220 	orr.w	r2, r2, #32
 800127e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001280:	2300      	movs	r3, #0
 8001282:	e006      	b.n	8001292 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001288:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
  }
}
 8001292:	4618      	mov	r0, r3
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d002      	beq.n	80012bc <HAL_CAN_ActivateNotification+0x1e>
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d109      	bne.n	80012d0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	6959      	ldr	r1, [r3, #20]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	683a      	ldr	r2, [r7, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e006      	b.n	80012de <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
  }
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b08a      	sub	sp, #40	@ 0x28
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001326:	6a3b      	ldr	r3, [r7, #32]
 8001328:	f003 0301 	and.w	r3, r3, #1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d07c      	beq.n	800142a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	2b00      	cmp	r3, #0
 8001338:	d023      	beq.n	8001382 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2201      	movs	r2, #1
 8001340:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f983 	bl	8001658 <HAL_CAN_TxMailbox0CompleteCallback>
 8001352:	e016      	b.n	8001382 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d004      	beq.n	8001368 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001360:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001364:	627b      	str	r3, [r7, #36]	@ 0x24
 8001366:	e00c      	b.n	8001382 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001374:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001378:	627b      	str	r3, [r7, #36]	@ 0x24
 800137a:	e002      	b.n	8001382 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 f989 	bl	8001694 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001388:	2b00      	cmp	r3, #0
 800138a:	d024      	beq.n	80013d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001394:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f963 	bl	800166c <HAL_CAN_TxMailbox1CompleteCallback>
 80013a6:	e016      	b.n	80013d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d004      	beq.n	80013bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ba:	e00c      	b.n	80013d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d004      	beq.n	80013d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80013c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80013ce:	e002      	b.n	80013d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f969 	bl	80016a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d024      	beq.n	800142a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d003      	beq.n	80013fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 f943 	bl	8001680 <HAL_CAN_TxMailbox2CompleteCallback>
 80013fa:	e016      	b.n	800142a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001408:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
 800140e:	e00c      	b.n	800142a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d004      	beq.n	8001424 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
 8001422:	e002      	b.n	800142a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f000 f949 	bl	80016bc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800142a:	6a3b      	ldr	r3, [r7, #32]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d00c      	beq.n	800144e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f003 0310 	and.w	r3, r3, #16
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001440:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2210      	movs	r2, #16
 800144c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800144e:	6a3b      	ldr	r3, [r7, #32]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00b      	beq.n	8001470 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d006      	beq.n	8001470 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2208      	movs	r2, #8
 8001468:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f000 f930 	bl	80016d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001470:	6a3b      	ldr	r3, [r7, #32]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d009      	beq.n	800148e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f001 f86f 	bl	800256c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800148e:	6a3b      	ldr	r3, [r7, #32]
 8001490:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00c      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	f003 0310 	and.w	r3, r3, #16
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d007      	beq.n	80014b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2210      	movs	r2, #16
 80014b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80014b2:	6a3b      	ldr	r3, [r7, #32]
 80014b4:	f003 0320 	and.w	r3, r3, #32
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d00b      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2208      	movs	r2, #8
 80014cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f000 f912 	bl	80016f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80014d4:	6a3b      	ldr	r3, [r7, #32]
 80014d6:	f003 0310 	and.w	r3, r3, #16
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d009      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	f003 0303 	and.w	r3, r3, #3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 f8f9 	bl	80016e4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80014f2:	6a3b      	ldr	r3, [r7, #32]
 80014f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00b      	beq.n	8001514 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0310 	and.w	r3, r3, #16
 8001502:	2b00      	cmp	r3, #0
 8001504:	d006      	beq.n	8001514 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2210      	movs	r2, #16
 800150c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 f8fc 	bl	800170c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d00b      	beq.n	8001536 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	2b00      	cmp	r3, #0
 8001526:	d006      	beq.n	8001536 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2208      	movs	r2, #8
 800152e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f000 f8f5 	bl	8001720 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001536:	6a3b      	ldr	r3, [r7, #32]
 8001538:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d07b      	beq.n	8001638 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0304 	and.w	r3, r3, #4
 8001546:	2b00      	cmp	r3, #0
 8001548:	d072      	beq.n	8001630 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001566:	6a3b      	ldr	r3, [r7, #32]
 8001568:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800156c:	2b00      	cmp	r3, #0
 800156e:	d008      	beq.n	8001582 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001582:	6a3b      	ldr	r3, [r7, #32]
 8001584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001588:	2b00      	cmp	r3, #0
 800158a:	d008      	beq.n	800159e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d043      	beq.n	8001630 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d03e      	beq.n	8001630 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80015b8:	2b60      	cmp	r3, #96	@ 0x60
 80015ba:	d02b      	beq.n	8001614 <HAL_CAN_IRQHandler+0x32a>
 80015bc:	2b60      	cmp	r3, #96	@ 0x60
 80015be:	d82e      	bhi.n	800161e <HAL_CAN_IRQHandler+0x334>
 80015c0:	2b50      	cmp	r3, #80	@ 0x50
 80015c2:	d022      	beq.n	800160a <HAL_CAN_IRQHandler+0x320>
 80015c4:	2b50      	cmp	r3, #80	@ 0x50
 80015c6:	d82a      	bhi.n	800161e <HAL_CAN_IRQHandler+0x334>
 80015c8:	2b40      	cmp	r3, #64	@ 0x40
 80015ca:	d019      	beq.n	8001600 <HAL_CAN_IRQHandler+0x316>
 80015cc:	2b40      	cmp	r3, #64	@ 0x40
 80015ce:	d826      	bhi.n	800161e <HAL_CAN_IRQHandler+0x334>
 80015d0:	2b30      	cmp	r3, #48	@ 0x30
 80015d2:	d010      	beq.n	80015f6 <HAL_CAN_IRQHandler+0x30c>
 80015d4:	2b30      	cmp	r3, #48	@ 0x30
 80015d6:	d822      	bhi.n	800161e <HAL_CAN_IRQHandler+0x334>
 80015d8:	2b10      	cmp	r3, #16
 80015da:	d002      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x2f8>
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d005      	beq.n	80015ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80015e0:	e01d      	b.n	800161e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80015e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e4:	f043 0308 	orr.w	r3, r3, #8
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015ea:	e019      	b.n	8001620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80015ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015f4:	e014      	b.n	8001620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	f043 0320 	orr.w	r3, r3, #32
 80015fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80015fe:	e00f      	b.n	8001620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001606:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001608:	e00a      	b.n	8001620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001612:	e005      	b.n	8001620 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001616:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800161c:	e000      	b.n	8001620 <HAL_CAN_IRQHandler+0x336>
            break;
 800161e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699a      	ldr	r2, [r3, #24]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800162e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2204      	movs	r2, #4
 8001636:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163a:	2b00      	cmp	r3, #0
 800163c:	d008      	beq.n	8001650 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	431a      	orrs	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f872 	bl	8001734 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001650:	bf00      	nop
 8001652:	3728      	adds	r7, #40	@ 0x28
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr

080016d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0c      	ldr	r3, [pc, #48]	@ (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	@ (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	db0b      	blt.n	80017d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	f003 021f 	and.w	r2, r3, #31
 80017c4:	4907      	ldr	r1, [pc, #28]	@ (80017e4 <__NVIC_EnableIRQ+0x38>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	095b      	lsrs	r3, r3, #5
 80017cc:	2001      	movs	r0, #1
 80017ce:	fa00 f202 	lsl.w	r2, r0, r2
 80017d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000e100 	.word	0xe000e100

080017e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	6039      	str	r1, [r7, #0]
 80017f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	db0a      	blt.n	8001812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	490c      	ldr	r1, [pc, #48]	@ (8001834 <__NVIC_SetPriority+0x4c>)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	0112      	lsls	r2, r2, #4
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	440b      	add	r3, r1
 800180c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001810:	e00a      	b.n	8001828 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	b2da      	uxtb	r2, r3
 8001816:	4908      	ldr	r1, [pc, #32]	@ (8001838 <__NVIC_SetPriority+0x50>)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	3b04      	subs	r3, #4
 8001820:	0112      	lsls	r2, r2, #4
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	440b      	add	r3, r1
 8001826:	761a      	strb	r2, [r3, #24]
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	e000e100 	.word	0xe000e100
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800183c:	b480      	push	{r7}
 800183e:	b089      	sub	sp, #36	@ 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f1c3 0307 	rsb	r3, r3, #7
 8001856:	2b04      	cmp	r3, #4
 8001858:	bf28      	it	cs
 800185a:	2304      	movcs	r3, #4
 800185c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3304      	adds	r3, #4
 8001862:	2b06      	cmp	r3, #6
 8001864:	d902      	bls.n	800186c <NVIC_EncodePriority+0x30>
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	3b03      	subs	r3, #3
 800186a:	e000      	b.n	800186e <NVIC_EncodePriority+0x32>
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001870:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43da      	mvns	r2, r3
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001884:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	fa01 f303 	lsl.w	r3, r1, r3
 800188e:	43d9      	mvns	r1, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	4313      	orrs	r3, r2
         );
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	@ 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b4:	d301      	bcc.n	80018ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00f      	b.n	80018da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ba:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <SysTick_Config+0x40>)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	3b01      	subs	r3, #1
 80018c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018c2:	210f      	movs	r1, #15
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018c8:	f7ff ff8e 	bl	80017e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <SysTick_Config+0x40>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018d2:	4b04      	ldr	r3, [pc, #16]	@ (80018e4 <SysTick_Config+0x40>)
 80018d4:	2207      	movs	r2, #7
 80018d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	e000e010 	.word	0xe000e010

080018e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ff29 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018fe:	b580      	push	{r7, lr}
 8001900:	b086      	sub	sp, #24
 8001902:	af00      	add	r7, sp, #0
 8001904:	4603      	mov	r3, r0
 8001906:	60b9      	str	r1, [r7, #8]
 8001908:	607a      	str	r2, [r7, #4]
 800190a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001910:	f7ff ff3e 	bl	8001790 <__NVIC_GetPriorityGrouping>
 8001914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	6978      	ldr	r0, [r7, #20]
 800191c:	f7ff ff8e 	bl	800183c <NVIC_EncodePriority>
 8001920:	4602      	mov	r2, r0
 8001922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff ff5d 	bl	80017e8 <__NVIC_SetPriority>
}
 800192e:	bf00      	nop
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b082      	sub	sp, #8
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff31 	bl	80017ac <__NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffa2 	bl	80018a4 <SysTick_Config>
 8001960:	4603      	mov	r3, r0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800196c:	b480      	push	{r7}
 800196e:	b089      	sub	sp, #36	@ 0x24
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800197e:	2300      	movs	r3, #0
 8001980:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001982:	2300      	movs	r3, #0
 8001984:	61fb      	str	r3, [r7, #28]
 8001986:	e16b      	b.n	8001c60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001988:	2201      	movs	r2, #1
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4013      	ands	r3, r2
 800199a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	f040 815a 	bne.w	8001c5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0303 	and.w	r3, r3, #3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d005      	beq.n	80019be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d130      	bne.n	8001a20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2203      	movs	r2, #3
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4013      	ands	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019f4:	2201      	movs	r2, #1
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 0201 	and.w	r2, r3, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d017      	beq.n	8001a5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	4013      	ands	r3, r2
 8001a42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d123      	bne.n	8001ab0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	08da      	lsrs	r2, r3, #3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3208      	adds	r2, #8
 8001a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	220f      	movs	r2, #15
 8001a80:	fa02 f303 	lsl.w	r3, r2, r3
 8001a84:	43db      	mvns	r3, r3
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	08da      	lsrs	r2, r3, #3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	3208      	adds	r2, #8
 8001aaa:	69b9      	ldr	r1, [r7, #24]
 8001aac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f003 0203 	and.w	r2, r3, #3
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80b4 	beq.w	8001c5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b60      	ldr	r3, [pc, #384]	@ (8001c78 <HAL_GPIO_Init+0x30c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	4a5f      	ldr	r2, [pc, #380]	@ (8001c78 <HAL_GPIO_Init+0x30c>)
 8001afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b02:	4b5d      	ldr	r3, [pc, #372]	@ (8001c78 <HAL_GPIO_Init+0x30c>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8001c7c <HAL_GPIO_Init+0x310>)
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	089b      	lsrs	r3, r3, #2
 8001b14:	3302      	adds	r3, #2
 8001b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	220f      	movs	r2, #15
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a52      	ldr	r2, [pc, #328]	@ (8001c80 <HAL_GPIO_Init+0x314>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d02b      	beq.n	8001b92 <HAL_GPIO_Init+0x226>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a51      	ldr	r2, [pc, #324]	@ (8001c84 <HAL_GPIO_Init+0x318>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d025      	beq.n	8001b8e <HAL_GPIO_Init+0x222>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a50      	ldr	r2, [pc, #320]	@ (8001c88 <HAL_GPIO_Init+0x31c>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d01f      	beq.n	8001b8a <HAL_GPIO_Init+0x21e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a4f      	ldr	r2, [pc, #316]	@ (8001c8c <HAL_GPIO_Init+0x320>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d019      	beq.n	8001b86 <HAL_GPIO_Init+0x21a>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a4e      	ldr	r2, [pc, #312]	@ (8001c90 <HAL_GPIO_Init+0x324>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d013      	beq.n	8001b82 <HAL_GPIO_Init+0x216>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a4d      	ldr	r2, [pc, #308]	@ (8001c94 <HAL_GPIO_Init+0x328>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00d      	beq.n	8001b7e <HAL_GPIO_Init+0x212>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4a4c      	ldr	r2, [pc, #304]	@ (8001c98 <HAL_GPIO_Init+0x32c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d007      	beq.n	8001b7a <HAL_GPIO_Init+0x20e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8001c9c <HAL_GPIO_Init+0x330>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d101      	bne.n	8001b76 <HAL_GPIO_Init+0x20a>
 8001b72:	2307      	movs	r3, #7
 8001b74:	e00e      	b.n	8001b94 <HAL_GPIO_Init+0x228>
 8001b76:	2308      	movs	r3, #8
 8001b78:	e00c      	b.n	8001b94 <HAL_GPIO_Init+0x228>
 8001b7a:	2306      	movs	r3, #6
 8001b7c:	e00a      	b.n	8001b94 <HAL_GPIO_Init+0x228>
 8001b7e:	2305      	movs	r3, #5
 8001b80:	e008      	b.n	8001b94 <HAL_GPIO_Init+0x228>
 8001b82:	2304      	movs	r3, #4
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x228>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e004      	b.n	8001b94 <HAL_GPIO_Init+0x228>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_Init+0x228>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x228>
 8001b92:	2300      	movs	r3, #0
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f002 0203 	and.w	r2, r2, #3
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	4093      	lsls	r3, r2
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba4:	4935      	ldr	r1, [pc, #212]	@ (8001c7c <HAL_GPIO_Init+0x310>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca0 <HAL_GPIO_Init+0x334>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd6:	4a32      	ldr	r2, [pc, #200]	@ (8001ca0 <HAL_GPIO_Init+0x334>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bdc:	4b30      	ldr	r3, [pc, #192]	@ (8001ca0 <HAL_GPIO_Init+0x334>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c00:	4a27      	ldr	r2, [pc, #156]	@ (8001ca0 <HAL_GPIO_Init+0x334>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c06:	4b26      	ldr	r3, [pc, #152]	@ (8001ca0 <HAL_GPIO_Init+0x334>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca0 <HAL_GPIO_Init+0x334>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca0 <HAL_GPIO_Init+0x334>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c54:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <HAL_GPIO_Init+0x334>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	f67f ae90 	bls.w	8001988 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3724      	adds	r7, #36	@ 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40021400 	.word	0x40021400
 8001c98:	40021800 	.word	0x40021800
 8001c9c:	40021c00 	.word	0x40021c00
 8001ca0:	40013c00 	.word	0x40013c00

08001ca4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d101      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e267      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0301 	and.w	r3, r3, #1
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d075      	beq.n	8001dae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cc2:	4b88      	ldr	r3, [pc, #544]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	d00c      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cce:	4b85      	ldr	r3, [pc, #532]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d112      	bne.n	8001d00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cda:	4b82      	ldr	r3, [pc, #520]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ce6:	d10b      	bne.n	8001d00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d05b      	beq.n	8001dac <HAL_RCC_OscConfig+0x108>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d157      	bne.n	8001dac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e242      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d08:	d106      	bne.n	8001d18 <HAL_RCC_OscConfig+0x74>
 8001d0a:	4b76      	ldr	r3, [pc, #472]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a75      	ldr	r2, [pc, #468]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
 8001d16:	e01d      	b.n	8001d54 <HAL_RCC_OscConfig+0xb0>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d20:	d10c      	bne.n	8001d3c <HAL_RCC_OscConfig+0x98>
 8001d22:	4b70      	ldr	r3, [pc, #448]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a6f      	ldr	r2, [pc, #444]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a6c      	ldr	r2, [pc, #432]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e00b      	b.n	8001d54 <HAL_RCC_OscConfig+0xb0>
 8001d3c:	4b69      	ldr	r3, [pc, #420]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a68      	ldr	r2, [pc, #416]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b66      	ldr	r3, [pc, #408]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a65      	ldr	r2, [pc, #404]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5c:	f7fe fe2a 	bl	80009b4 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7fe fe26 	bl	80009b4 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	@ 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e207      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0xc0>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7fe fe16 	bl	80009b4 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7fe fe12 	bl	80009b4 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	@ 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e1f3      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9e:	4b51      	ldr	r3, [pc, #324]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0xe8>
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d063      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dba:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00b      	beq.n	8001dde <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc6:	4b47      	ldr	r3, [pc, #284]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dce:	2b08      	cmp	r3, #8
 8001dd0:	d11c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dd2:	4b44      	ldr	r3, [pc, #272]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d116      	bne.n	8001e0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dde:	4b41      	ldr	r3, [pc, #260]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d005      	beq.n	8001df6 <HAL_RCC_OscConfig+0x152>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d001      	beq.n	8001df6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e1c7      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	00db      	lsls	r3, r3, #3
 8001e04:	4937      	ldr	r1, [pc, #220]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	e03a      	b.n	8001e82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d020      	beq.n	8001e56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e14:	4b34      	ldr	r3, [pc, #208]	@ (8001ee8 <HAL_RCC_OscConfig+0x244>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1a:	f7fe fdcb 	bl	80009b4 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e22:	f7fe fdc7 	bl	80009b4 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e1a8      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d0f0      	beq.n	8001e22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b28      	ldr	r3, [pc, #160]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	4925      	ldr	r1, [pc, #148]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]
 8001e54:	e015      	b.n	8001e82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e56:	4b24      	ldr	r3, [pc, #144]	@ (8001ee8 <HAL_RCC_OscConfig+0x244>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7fe fdaa 	bl	80009b4 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e64:	f7fe fda6 	bl	80009b4 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e187      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e76:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d036      	beq.n	8001efc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d016      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e96:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <HAL_RCC_OscConfig+0x248>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9c:	f7fe fd8a 	bl	80009b4 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea4:	f7fe fd86 	bl	80009b4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e167      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <HAL_RCC_OscConfig+0x240>)
 8001eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x200>
 8001ec2:	e01b      	b.n	8001efc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ec4:	4b09      	ldr	r3, [pc, #36]	@ (8001eec <HAL_RCC_OscConfig+0x248>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eca:	f7fe fd73 	bl	80009b4 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	e00e      	b.n	8001ef0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed2:	f7fe fd6f 	bl	80009b4 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d907      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e150      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	42470000 	.word	0x42470000
 8001eec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef0:	4b88      	ldr	r3, [pc, #544]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1ea      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f000 8097 	beq.w	8002038 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f0e:	4b81      	ldr	r3, [pc, #516]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d10f      	bne.n	8001f3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	4b7d      	ldr	r3, [pc, #500]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f22:	4a7c      	ldr	r2, [pc, #496]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f36:	2301      	movs	r3, #1
 8001f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3a:	4b77      	ldr	r3, [pc, #476]	@ (8002118 <HAL_RCC_OscConfig+0x474>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d118      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f46:	4b74      	ldr	r3, [pc, #464]	@ (8002118 <HAL_RCC_OscConfig+0x474>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a73      	ldr	r2, [pc, #460]	@ (8002118 <HAL_RCC_OscConfig+0x474>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f52:	f7fe fd2f 	bl	80009b4 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5a:	f7fe fd2b 	bl	80009b4 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e10c      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	4b6a      	ldr	r3, [pc, #424]	@ (8002118 <HAL_RCC_OscConfig+0x474>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x2ea>
 8001f80:	4b64      	ldr	r3, [pc, #400]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f84:	4a63      	ldr	r2, [pc, #396]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f8c:	e01c      	b.n	8001fc8 <HAL_RCC_OscConfig+0x324>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x30c>
 8001f96:	4b5f      	ldr	r3, [pc, #380]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9a:	4a5e      	ldr	r2, [pc, #376]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fa2:	4b5c      	ldr	r3, [pc, #368]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fa6:	4a5b      	ldr	r2, [pc, #364]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fae:	e00b      	b.n	8001fc8 <HAL_RCC_OscConfig+0x324>
 8001fb0:	4b58      	ldr	r3, [pc, #352]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb4:	4a57      	ldr	r2, [pc, #348]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fbc:	4b55      	ldr	r3, [pc, #340]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc0:	4a54      	ldr	r2, [pc, #336]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001fc2:	f023 0304 	bic.w	r3, r3, #4
 8001fc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d015      	beq.n	8001ffc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd0:	f7fe fcf0 	bl	80009b4 <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd6:	e00a      	b.n	8001fee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd8:	f7fe fcec 	bl	80009b4 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d901      	bls.n	8001fee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e0cb      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fee:	4b49      	ldr	r3, [pc, #292]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff2:	f003 0302 	and.w	r3, r3, #2
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d0ee      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x334>
 8001ffa:	e014      	b.n	8002026 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffc:	f7fe fcda 	bl	80009b4 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002002:	e00a      	b.n	800201a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002004:	f7fe fcd6 	bl	80009b4 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002012:	4293      	cmp	r3, r2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e0b5      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201a:	4b3e      	ldr	r3, [pc, #248]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1ee      	bne.n	8002004 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002026:	7dfb      	ldrb	r3, [r7, #23]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202c:	4b39      	ldr	r3, [pc, #228]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 800202e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002030:	4a38      	ldr	r2, [pc, #224]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8002032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002036:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80a1 	beq.w	8002184 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002042:	4b34      	ldr	r3, [pc, #208]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f003 030c 	and.w	r3, r3, #12
 800204a:	2b08      	cmp	r3, #8
 800204c:	d05c      	beq.n	8002108 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d141      	bne.n	80020da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002056:	4b31      	ldr	r3, [pc, #196]	@ (800211c <HAL_RCC_OscConfig+0x478>)
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205c:	f7fe fcaa 	bl	80009b4 <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7fe fca6 	bl	80009b4 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e087      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002076:	4b27      	ldr	r3, [pc, #156]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f0      	bne.n	8002064 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69da      	ldr	r2, [r3, #28]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	431a      	orrs	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002090:	019b      	lsls	r3, r3, #6
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	085b      	lsrs	r3, r3, #1
 800209a:	3b01      	subs	r3, #1
 800209c:	041b      	lsls	r3, r3, #16
 800209e:	431a      	orrs	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a4:	061b      	lsls	r3, r3, #24
 80020a6:	491b      	ldr	r1, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ac:	4b1b      	ldr	r3, [pc, #108]	@ (800211c <HAL_RCC_OscConfig+0x478>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7fe fc7f 	bl	80009b4 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ba:	f7fe fc7b 	bl	80009b4 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e05c      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020cc:	4b11      	ldr	r3, [pc, #68]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x416>
 80020d8:	e054      	b.n	8002184 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020da:	4b10      	ldr	r3, [pc, #64]	@ (800211c <HAL_RCC_OscConfig+0x478>)
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e0:	f7fe fc68 	bl	80009b4 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e8:	f7fe fc64 	bl	80009b4 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e045      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <HAL_RCC_OscConfig+0x470>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1f0      	bne.n	80020e8 <HAL_RCC_OscConfig+0x444>
 8002106:	e03d      	b.n	8002184 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e038      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
 8002114:	40023800 	.word	0x40023800
 8002118:	40007000 	.word	0x40007000
 800211c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002120:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_RCC_OscConfig+0x4ec>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d028      	beq.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d121      	bne.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002146:	429a      	cmp	r2, r3
 8002148:	d11a      	bne.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002150:	4013      	ands	r3, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002156:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002158:	4293      	cmp	r3, r2
 800215a:	d111      	bne.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002166:	085b      	lsrs	r3, r3, #1
 8002168:	3b01      	subs	r3, #1
 800216a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d107      	bne.n	8002180 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800217c:	429a      	cmp	r2, r3
 800217e:	d001      	beq.n	8002184 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3718      	adds	r7, #24
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800

08002194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0cc      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a8:	4b68      	ldr	r3, [pc, #416]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d90c      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b65      	ldr	r3, [pc, #404]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b63      	ldr	r3, [pc, #396]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0b8      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e8:	4b59      	ldr	r3, [pc, #356]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4a58      	ldr	r2, [pc, #352]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002200:	4b53      	ldr	r3, [pc, #332]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a52      	ldr	r2, [pc, #328]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800220a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b50      	ldr	r3, [pc, #320]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	494d      	ldr	r1, [pc, #308]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d044      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b47      	ldr	r3, [pc, #284]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d119      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e07f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d003      	beq.n	8002252 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800224e:	2b03      	cmp	r3, #3
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4b3f      	ldr	r3, [pc, #252]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002262:	4b3b      	ldr	r3, [pc, #236]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e067      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002272:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 0203 	bic.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4934      	ldr	r1, [pc, #208]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002284:	f7fe fb96 	bl	80009b4 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f7fe fb92 	bl	80009b4 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e04f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 020c 	and.w	r2, r3, #12
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1eb      	bne.n	800228c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b4:	4b25      	ldr	r3, [pc, #148]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d20c      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b22      	ldr	r3, [pc, #136]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b20      	ldr	r3, [pc, #128]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e032      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4916      	ldr	r1, [pc, #88]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002306:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	490e      	ldr	r1, [pc, #56]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800231a:	f000 f821 	bl	8002360 <HAL_RCC_GetSysClockFreq>
 800231e:	4602      	mov	r2, r0
 8002320:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	490a      	ldr	r1, [pc, #40]	@ (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	5ccb      	ldrb	r3, [r1, r3]
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	4a09      	ldr	r2, [pc, #36]	@ (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002336:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe faf6 	bl	800092c <HAL_InitTick>

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023c00 	.word	0x40023c00
 8002350:	40023800 	.word	0x40023800
 8002354:	0800509c 	.word	0x0800509c
 8002358:	20000000 	.word	0x20000000
 800235c:	20000004 	.word	0x20000004

08002360 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002360:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002364:	b094      	sub	sp, #80	@ 0x50
 8002366:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002378:	4b79      	ldr	r3, [pc, #484]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 030c 	and.w	r3, r3, #12
 8002380:	2b08      	cmp	r3, #8
 8002382:	d00d      	beq.n	80023a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002384:	2b08      	cmp	r3, #8
 8002386:	f200 80e1 	bhi.w	800254c <HAL_RCC_GetSysClockFreq+0x1ec>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d002      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x34>
 800238e:	2b04      	cmp	r3, #4
 8002390:	d003      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x3a>
 8002392:	e0db      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002394:	4b73      	ldr	r3, [pc, #460]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x204>)
 8002396:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002398:	e0db      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800239a:	4b73      	ldr	r3, [pc, #460]	@ (8002568 <HAL_RCC_GetSysClockFreq+0x208>)
 800239c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800239e:	e0d8      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d063      	beq.n	800247e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	2200      	movs	r2, #0
 80023be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80023ca:	2300      	movs	r3, #0
 80023cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80023ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023d2:	4622      	mov	r2, r4
 80023d4:	462b      	mov	r3, r5
 80023d6:	f04f 0000 	mov.w	r0, #0
 80023da:	f04f 0100 	mov.w	r1, #0
 80023de:	0159      	lsls	r1, r3, #5
 80023e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023e4:	0150      	lsls	r0, r2, #5
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4621      	mov	r1, r4
 80023ec:	1a51      	subs	r1, r2, r1
 80023ee:	6139      	str	r1, [r7, #16]
 80023f0:	4629      	mov	r1, r5
 80023f2:	eb63 0301 	sbc.w	r3, r3, r1
 80023f6:	617b      	str	r3, [r7, #20]
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002404:	4659      	mov	r1, fp
 8002406:	018b      	lsls	r3, r1, #6
 8002408:	4651      	mov	r1, sl
 800240a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800240e:	4651      	mov	r1, sl
 8002410:	018a      	lsls	r2, r1, #6
 8002412:	4651      	mov	r1, sl
 8002414:	ebb2 0801 	subs.w	r8, r2, r1
 8002418:	4659      	mov	r1, fp
 800241a:	eb63 0901 	sbc.w	r9, r3, r1
 800241e:	f04f 0200 	mov.w	r2, #0
 8002422:	f04f 0300 	mov.w	r3, #0
 8002426:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800242a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800242e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002432:	4690      	mov	r8, r2
 8002434:	4699      	mov	r9, r3
 8002436:	4623      	mov	r3, r4
 8002438:	eb18 0303 	adds.w	r3, r8, r3
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	462b      	mov	r3, r5
 8002440:	eb49 0303 	adc.w	r3, r9, r3
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	f04f 0300 	mov.w	r3, #0
 800244e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002452:	4629      	mov	r1, r5
 8002454:	024b      	lsls	r3, r1, #9
 8002456:	4621      	mov	r1, r4
 8002458:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800245c:	4621      	mov	r1, r4
 800245e:	024a      	lsls	r2, r1, #9
 8002460:	4610      	mov	r0, r2
 8002462:	4619      	mov	r1, r3
 8002464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002466:	2200      	movs	r2, #0
 8002468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800246a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800246c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002470:	f7fd feb4 	bl	80001dc <__aeabi_uldivmod>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4613      	mov	r3, r2
 800247a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800247c:	e058      	b.n	8002530 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247e:	4b38      	ldr	r3, [pc, #224]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	099b      	lsrs	r3, r3, #6
 8002484:	2200      	movs	r2, #0
 8002486:	4618      	mov	r0, r3
 8002488:	4611      	mov	r1, r2
 800248a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800248e:	623b      	str	r3, [r7, #32]
 8002490:	2300      	movs	r3, #0
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
 8002494:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002498:	4642      	mov	r2, r8
 800249a:	464b      	mov	r3, r9
 800249c:	f04f 0000 	mov.w	r0, #0
 80024a0:	f04f 0100 	mov.w	r1, #0
 80024a4:	0159      	lsls	r1, r3, #5
 80024a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024aa:	0150      	lsls	r0, r2, #5
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4641      	mov	r1, r8
 80024b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80024b6:	4649      	mov	r1, r9
 80024b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80024cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80024d0:	ebb2 040a 	subs.w	r4, r2, sl
 80024d4:	eb63 050b 	sbc.w	r5, r3, fp
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	f04f 0300 	mov.w	r3, #0
 80024e0:	00eb      	lsls	r3, r5, #3
 80024e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024e6:	00e2      	lsls	r2, r4, #3
 80024e8:	4614      	mov	r4, r2
 80024ea:	461d      	mov	r5, r3
 80024ec:	4643      	mov	r3, r8
 80024ee:	18e3      	adds	r3, r4, r3
 80024f0:	603b      	str	r3, [r7, #0]
 80024f2:	464b      	mov	r3, r9
 80024f4:	eb45 0303 	adc.w	r3, r5, r3
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002506:	4629      	mov	r1, r5
 8002508:	028b      	lsls	r3, r1, #10
 800250a:	4621      	mov	r1, r4
 800250c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002510:	4621      	mov	r1, r4
 8002512:	028a      	lsls	r2, r1, #10
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800251a:	2200      	movs	r2, #0
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	61fa      	str	r2, [r7, #28]
 8002520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002524:	f7fd fe5a 	bl	80001dc <__aeabi_uldivmod>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4613      	mov	r3, r2
 800252e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002530:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <HAL_RCC_GetSysClockFreq+0x200>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	0c1b      	lsrs	r3, r3, #16
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	3301      	adds	r3, #1
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002540:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
 8002548:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800254a:	e002      	b.n	8002552 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800254c:	4b05      	ldr	r3, [pc, #20]	@ (8002564 <HAL_RCC_GetSysClockFreq+0x204>)
 800254e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002550:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002554:	4618      	mov	r0, r3
 8002556:	3750      	adds	r7, #80	@ 0x50
 8002558:	46bd      	mov	sp, r7
 800255a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800
 8002564:	00f42400 	.word	0x00f42400
 8002568:	007a1200 	.word	0x007a1200

0800256c <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t heartbeat_transfer_id = 0;
uint8_t batteryinfo_transfer_id = 0;
hyp_can_packet_t* hyp_handle;
//----------------------driver_read-------------------//
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800256c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002570:	b085      	sub	sp, #20
 8002572:	af00      	add	r7, sp, #0
 8002574:	60f8      	str	r0, [r7, #12]
    if (hyp_handle->hyp_can_GetRxMessage(hcan, CAN_RX_FIFO0, &hyp_handle->rxHeader, hyp_handle->rxData) == HAL_OK)
 8002576:	4b44      	ldr	r3, [pc, #272]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	6e9e      	ldr	r6, [r3, #104]	@ 0x68
 800257c:	4b42      	ldr	r3, [pc, #264]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f103 020c 	add.w	r2, r3, #12
 8002584:	4b40      	ldr	r3, [pc, #256]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3304      	adds	r3, #4
 800258a:	2100      	movs	r1, #0
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	47b0      	blx	r6
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d172      	bne.n	800267c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>
    {
        hyp_handle->frame.id = hyp_handle->rxHeader.ExtId;
 8002596:	4b3c      	ldr	r3, [pc, #240]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	4b3b      	ldr	r3, [pc, #236]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6912      	ldr	r2, [r2, #16]
 80025a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        if (hyp_handle->rxHeader.IDE == CAN_ID_EXT)
 80025a4:	4b38      	ldr	r3, [pc, #224]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d109      	bne.n	80025c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
        	hyp_handle->frame.id |= (1UL << 31);
 80025ae:	4b36      	ldr	r3, [pc, #216]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80025b6:	4b34      	ldr	r3, [pc, #208]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80025be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        hyp_handle->frame.data_len = hyp_handle->rxHeader.DLC;
 80025c2:	4b31      	ldr	r3, [pc, #196]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
        memcpy(hyp_handle->frame.data, hyp_handle->rxData, hyp_handle->rxHeader.DLC);
 80025d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 80025da:	4b2b      	ldr	r3, [pc, #172]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	1d19      	adds	r1, r3, #4
 80025e0:	4b29      	ldr	r3, [pc, #164]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	69db      	ldr	r3, [r3, #28]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f002 fd30 	bl	800504c <memcpy>
        hyp_handle->frame.iface_id = 0;
 80025ec:	4b26      	ldr	r3, [pc, #152]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

        hyp_handle->hyp_canardHandleRxframe(&hyp_handle->canard, &hyp_handle->frame, HAL_GetTick() * 1000ULL);
 80025f6:	4b24      	ldr	r3, [pc, #144]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f8d3 6094 	ldr.w	r6, [r3, #148]	@ 0x94
 80025fe:	4b22      	ldr	r3, [pc, #136]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 8002606:	60bb      	str	r3, [r7, #8]
 8002608:	4b1f      	ldr	r3, [pc, #124]	@ (8002688 <HAL_CAN_RxFifo0MsgPendingCallback+0x11c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f103 0284 	add.w	r2, r3, #132	@ 0x84
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	f7fe f9cf 	bl	80009b4 <HAL_GetTick>
 8002616:	4603      	mov	r3, r0
 8002618:	2200      	movs	r2, #0
 800261a:	4698      	mov	r8, r3
 800261c:	4691      	mov	r9, r2
 800261e:	4642      	mov	r2, r8
 8002620:	464b      	mov	r3, r9
 8002622:	f04f 0000 	mov.w	r0, #0
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	0159      	lsls	r1, r3, #5
 800262c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002630:	0150      	lsls	r0, r2, #5
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	ebb2 0408 	subs.w	r4, r2, r8
 800263a:	eb63 0509 	sbc.w	r5, r3, r9
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	00ab      	lsls	r3, r5, #2
 8002648:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800264c:	00a2      	lsls	r2, r4, #2
 800264e:	4614      	mov	r4, r2
 8002650:	461d      	mov	r5, r3
 8002652:	eb14 0a08 	adds.w	sl, r4, r8
 8002656:	eb45 0b09 	adc.w	fp, r5, r9
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002666:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800266a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800266e:	4692      	mov	sl, r2
 8002670:	469b      	mov	fp, r3
 8002672:	4652      	mov	r2, sl
 8002674:	465b      	mov	r3, fp
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	68b8      	ldr	r0, [r7, #8]
 800267a:	47b0      	blx	r6
    }
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002686:	bf00      	nop
 8002688:	20000538 	.word	0x20000538
 800268c:	00000000 	.word	0x00000000

08002690 <should_accept>:

bool should_accept(const CanardInstance* ins, uint64_t* out_sig, uint16_t data_type_id,
                   CanardTransferType transfer_type, uint8_t source_node_id)
{
 8002690:	b480      	push	{r7}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	4611      	mov	r1, r2
 800269c:	461a      	mov	r2, r3
 800269e:	460b      	mov	r3, r1
 80026a0:	80fb      	strh	r3, [r7, #6]
 80026a2:	4613      	mov	r3, r2
 80026a4:	717b      	strb	r3, [r7, #5]
    if (data_type_id == 232 && transfer_type == CanardTransferTypeResponse)
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	2be8      	cmp	r3, #232	@ 0xe8
 80026aa:	d10a      	bne.n	80026c2 <should_accept+0x32>
 80026ac:	797b      	ldrb	r3, [r7, #5]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d107      	bne.n	80026c2 <should_accept+0x32>
    {
        *out_sig = HYP_MSG_BATTERYSTATUS_HYP_SIGNATURE;
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	a306      	add	r3, pc, #24	@ (adr r3, 80026d0 <should_accept+0x40>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	e9c1 2300 	strd	r2, r3, [r1]
        return true;
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <should_accept+0x34>
    }
    return false;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3714      	adds	r7, #20
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	fa81025f 	.word	0xfa81025f
 80026d4:	cf2a3806 	.word	0xcf2a3806

080026d8 <on_reception>:

void on_reception(CanardInstance* ins, CanardRxTransfer* transfer)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b0a0      	sub	sp, #128	@ 0x80
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
	if (transfer->data_type_id == 232 && transfer->transfer_type == CanardTransferTypeResponse)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	8adb      	ldrh	r3, [r3, #22]
 80026e6:	2be8      	cmp	r3, #232	@ 0xe8
 80026e8:	d12d      	bne.n	8002746 <on_reception+0x6e>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	7e1b      	ldrb	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d129      	bne.n	8002746 <on_reception+0x6e>
	{
		struct hyp_msg_BatteryStatus_Hyp resp;
		hyp_msg_BatteryStatus_Hyp_decode(transfer, &resp);
 80026f2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80026f6:	4619      	mov	r1, r3
 80026f8:	6838      	ldr	r0, [r7, #0]
 80026fa:	f002 fbef 	bl	8004edc <hyp_msg_BatteryStatus_Hyp_decode>
		char buff_resp[50] = {0};
 80026fe:	f107 0308 	add.w	r3, r7, #8
 8002702:	2232      	movs	r2, #50	@ 0x32
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f002 fc73 	bl	8004ff2 <memset>
		memcpy(buff_resp, resp.name.data, resp.name.len);
 800270c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002710:	461a      	mov	r2, r3
 8002712:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002716:	f103 0110 	add.w	r1, r3, #16
 800271a:	f107 0308 	add.w	r3, r7, #8
 800271e:	4618      	mov	r0, r3
 8002720:	f002 fc94 	bl	800504c <memcpy>
		if(strcmp(buff_resp, "HYPMOTION_BATT1") == 0)
 8002724:	f107 0308 	add.w	r3, r7, #8
 8002728:	4909      	ldr	r1, [pc, #36]	@ (8002750 <on_reception+0x78>)
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd fd4c 	bl	80001c8 <strcmp>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d107      	bne.n	8002746 <on_reception+0x6e>
		{
			v = resp.voltage;
 8002736:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800273a:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <on_reception+0x7c>)
 800273c:	801a      	strh	r2, [r3, #0]
			i = resp.current;
 800273e:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	@ 0x42
 8002742:	4b05      	ldr	r3, [pc, #20]	@ (8002758 <on_reception+0x80>)
 8002744:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8002746:	bf00      	nop
 8002748:	3780      	adds	r7, #128	@ 0x80
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	08005080 	.word	0x08005080
 8002754:	20000530 	.word	0x20000530
 8002758:	20000532 	.word	0x20000532
 800275c:	00000000 	.word	0x00000000

08002760 <send_heartbeat>:
static void send_heartbeat(CanardInstance* ins, uint8_t* transfer_id, uint32_t uptime_sec)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b090      	sub	sp, #64	@ 0x40
 8002764:	af06      	add	r7, sp, #24
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
	struct hyp_msg_HeartBeat_Hyp hb;
    hb.uptime_sec = uptime_sec;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	61bb      	str	r3, [r7, #24]
    hb.health = HYP_MSG_HEARTBEAT_HYP_HEALTH_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	773b      	strb	r3, [r7, #28]
    hb.mode = HYP_MSG_HEARTBEAT_HYP_MODE_OPERATIONAL;
 8002774:	2300      	movs	r3, #0
 8002776:	777b      	strb	r3, [r7, #29]
    hb.sub_mode = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	77bb      	strb	r3, [r7, #30]
    hb.vendor_specific_status_code = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	843b      	strh	r3, [r7, #32]
    uint8_t buff[HYP_MSG_HEARTBEAT_HYP_MAX_SIZE];
    uint32_t len = hyp_msg_HeartBeat_Hyp_encode(&hb, buff
 8002780:	f107 0210 	add.w	r2, r7, #16
 8002784:	f107 0318 	add.w	r3, r7, #24
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f002 fc17 	bl	8004fbe <hyp_msg_HeartBeat_Hyp_encode>
 8002790:	6278      	str	r0, [r7, #36]	@ 0x24
#if CANARD_ENABLE_TAO_OPTION
        , true
#endif
    );
    hyp_handle->hyp_canardBroadcast(
 8002792:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <send_heartbeat+0x70>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f8d3 14d4 	ldr.w	r1, [r3, #1236]	@ 0x4d4
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	b29b      	uxth	r3, r3
 800279e:	9304      	str	r3, [sp, #16]
 80027a0:	f107 0310 	add.w	r3, r7, #16
 80027a4:	9303      	str	r3, [sp, #12]
 80027a6:	2318      	movs	r3, #24
 80027a8:	9302      	str	r3, [sp, #8]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	9301      	str	r3, [sp, #4]
 80027ae:	f240 33e9 	movw	r3, #1001	@ 0x3e9
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	a304      	add	r3, pc, #16	@ (adr r3, 80027c8 <send_heartbeat+0x68>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	68f8      	ldr	r0, [r7, #12]
 80027bc:	4788      	blx	r1
									transfer_id,
									CANARD_TRANSFER_PRIORITY_LOW,
									buff,
									len
    );
}
 80027be:	bf00      	nop
 80027c0:	3728      	adds	r7, #40	@ 0x28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	715fa349 	.word	0x715fa349
 80027cc:	645e9951 	.word	0x645e9951
 80027d0:	20000538 	.word	0x20000538
 80027d4:	00000000 	.word	0x00000000

080027d8 <send_batteryinfo_request>:

static void send_batteryinfo_request(CanardInstance* ins, uint8_t* transfer_id, uint8_t node_id)
{
 80027d8:	b590      	push	{r4, r7, lr}
 80027da:	b0af      	sub	sp, #188	@ 0xbc
 80027dc:	af06      	add	r7, sp, #24
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	71fb      	strb	r3, [r7, #7]
	struct hyp_msg_BatteryStatus_Hyp msg;
	memset(&msg, 0, sizeof(msg));
 80027e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80027ea:	2244      	movs	r2, #68	@ 0x44
 80027ec:	2100      	movs	r1, #0
 80027ee:	4618      	mov	r0, r3
 80027f0:	f002 fbff 	bl	8004ff2 <memset>

	msg.name.len = strlen("Get_batt");
 80027f4:	2308      	movs	r3, #8
 80027f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	memcpy(msg.name.data, "Get_batt", msg.name.len);
 80027fa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80027fe:	461a      	mov	r2, r3
 8002800:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002804:	3310      	adds	r3, #16
 8002806:	4918      	ldr	r1, [pc, #96]	@ (8002868 <send_batteryinfo_request+0x90>)
 8002808:	4618      	mov	r0, r3
 800280a:	f002 fc1f 	bl	800504c <memcpy>

	uint8_t buffer[HYP_MSG_BATTERYSTATUS_HYP_MAX_SIZE];
	uint32_t len = hyp_msg_BatteryStatus_Hyp_encode(&msg, buffer
 800280e:	f107 0214 	add.w	r2, r7, #20
 8002812:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f002 fb45 	bl	8004ea8 <hyp_msg_BatteryStatus_Hyp_encode>
 800281e:	f8c7 009c 	str.w	r0, [r7, #156]	@ 0x9c
#if CANARD_ENABLE_TAO_OPTION
        , true
#endif
    );
	hyp_handle->hyp_canardRequestOrRespond(
 8002822:	4b12      	ldr	r3, [pc, #72]	@ (800286c <send_batteryinfo_request+0x94>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f8d3 44d8 	ldr.w	r4, [r3, #1240]	@ 0x4d8
 800282a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800282e:	b29b      	uxth	r3, r3
 8002830:	79f9      	ldrb	r1, [r7, #7]
 8002832:	9305      	str	r3, [sp, #20]
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	9304      	str	r3, [sp, #16]
 800283a:	2301      	movs	r3, #1
 800283c:	9303      	str	r3, [sp, #12]
 800283e:	2318      	movs	r3, #24
 8002840:	9302      	str	r3, [sp, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	9301      	str	r3, [sp, #4]
 8002846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	a304      	add	r3, pc, #16	@ (adr r3, 8002860 <send_batteryinfo_request+0x88>)
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	47a0      	blx	r4
											CANARD_TRANSFER_PRIORITY_LOW,
											CanardRequest,
											buffer,
											len
	);
}
 8002856:	bf00      	nop
 8002858:	37a4      	adds	r7, #164	@ 0xa4
 800285a:	46bd      	mov	sp, r7
 800285c:	bd90      	pop	{r4, r7, pc}
 800285e:	bf00      	nop
 8002860:	fa81025f 	.word	0xfa81025f
 8002864:	cf2a3806 	.word	0xcf2a3806
 8002868:	08005090 	.word	0x08005090
 800286c:	20000538 	.word	0x20000538

08002870 <tx_frame>:
//-------------driver_send---------------//
static void tx_frame(void)
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
	hyp_handle->txf = NULL;
 8002876:	4b3a      	ldr	r3, [pc, #232]	@ (8002960 <tx_frame+0xf0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2200      	movs	r2, #0
 800287c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
	while ((hyp_handle->txf = hyp_handle->hyp_canardPeekTxQueue(&hyp_handle->canard)) != NULL)
 8002880:	e04f      	b.n	8002922 <tx_frame+0xb2>
	{
		if (hyp_handle->hyp_can_GetTxMailboxesFreeLevel(hyp_handle->can_src) > 0)
 8002882:	4b37      	ldr	r3, [pc, #220]	@ (8002960 <tx_frame+0xf0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002888:	4a35      	ldr	r2, [pc, #212]	@ (8002960 <tx_frame+0xf0>)
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	4610      	mov	r0, r2
 8002890:	4798      	blx	r3
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d058      	beq.n	800294a <tx_frame+0xda>
		{
			memset(&hyp_handle->txHeader, 0, sizeof(hyp_handle->txHeader));
 8002898:	4b31      	ldr	r3, [pc, #196]	@ (8002960 <tx_frame+0xf0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3328      	adds	r3, #40	@ 0x28
 800289e:	2218      	movs	r2, #24
 80028a0:	2100      	movs	r1, #0
 80028a2:	4618      	mov	r0, r3
 80028a4:	f002 fba5 	bl	8004ff2 <memset>
			hyp_handle->txHeader.IDE = CAN_ID_EXT;
 80028a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002960 <tx_frame+0xf0>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2204      	movs	r2, #4
 80028ae:	631a      	str	r2, [r3, #48]	@ 0x30
			hyp_handle->txHeader.ExtId = hyp_handle->txf->id & 0x1FFFFFFF;
 80028b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <tx_frame+0xf0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b29      	ldr	r3, [pc, #164]	@ (8002960 <tx_frame+0xf0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 4260 	bic.w	r2, r2, #3758096384	@ 0xe0000000
 80028c2:	62da      	str	r2, [r3, #44]	@ 0x2c
			hyp_handle->txHeader.RTR = CAN_RTR_DATA;
 80028c4:	4b26      	ldr	r3, [pc, #152]	@ (8002960 <tx_frame+0xf0>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	635a      	str	r2, [r3, #52]	@ 0x34
			hyp_handle->txHeader.DLC = hyp_handle->txf->data_len;
 80028cc:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <tx_frame+0xf0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028d4:	7b1a      	ldrb	r2, [r3, #12]
 80028d6:	4b22      	ldr	r3, [pc, #136]	@ (8002960 <tx_frame+0xf0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	639a      	str	r2, [r3, #56]	@ 0x38
			hyp_handle->txHeader.TransmitGlobalTime = DISABLE;
 80028dc:	4b20      	ldr	r3, [pc, #128]	@ (8002960 <tx_frame+0xf0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

			uint32_t txMailbox;
			if (hyp_handle->hyp_can_AddTxMessage(hyp_handle->can_src, &hyp_handle->txHeader, (uint8_t*)hyp_handle->txf->data, &txMailbox) == HAL_OK)
 80028e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002960 <tx_frame+0xf0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6fdc      	ldr	r4, [r3, #124]	@ 0x7c
 80028ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002960 <tx_frame+0xf0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <tx_frame+0xf0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80028fa:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <tx_frame+0xf0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002902:	1d1a      	adds	r2, r3, #4
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	47a0      	blx	r4
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d11f      	bne.n	800294e <tx_frame+0xde>
			{
					hyp_handle->hyp_canardPopTxQueue(&hyp_handle->canard);
 800290e:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <tx_frame+0xf0>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8d3 34d0 	ldr.w	r3, [r3, #1232]	@ 0x4d0
 8002916:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <tx_frame+0xf0>)
 8002918:	6812      	ldr	r2, [r2, #0]
 800291a:	f502 6293 	add.w	r2, r2, #1176	@ 0x498
 800291e:	4610      	mov	r0, r2
 8002920:	4798      	blx	r3
	while ((hyp_handle->txf = hyp_handle->hyp_canardPeekTxQueue(&hyp_handle->canard)) != NULL)
 8002922:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <tx_frame+0xf0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8d3 34cc 	ldr.w	r3, [r3, #1228]	@ 0x4cc
 800292a:	4a0d      	ldr	r2, [pc, #52]	@ (8002960 <tx_frame+0xf0>)
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	f502 6293 	add.w	r2, r2, #1176	@ 0x498
 8002932:	490b      	ldr	r1, [pc, #44]	@ (8002960 <tx_frame+0xf0>)
 8002934:	680c      	ldr	r4, [r1, #0]
 8002936:	4610      	mov	r0, r2
 8002938:	4798      	blx	r3
 800293a:	4603      	mov	r3, r0
 800293c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8002940:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8002944:	2b00      	cmp	r3, #0
 8002946:	d19c      	bne.n	8002882 <tx_frame+0x12>
 8002948:	e002      	b.n	8002950 <tx_frame+0xe0>
					break;
			}
		}
		else
		{
				break;
 800294a:	bf00      	nop
 800294c:	e000      	b.n	8002950 <tx_frame+0xe0>
					break;
 800294e:	bf00      	nop
		}
	}
	HAL_Delay(1);
 8002950:	2001      	movs	r0, #1
 8002952:	f7fe f83b 	bl	80009cc <HAL_Delay>
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	bd90      	pop	{r4, r7, pc}
 800295e:	bf00      	nop
 8002960:	20000538 	.word	0x20000538

08002964 <config_filter>:

static void config_filter(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
		//------------filer-------------//
	hyp_handle->sFilterConfig.FilterBank = 0;
 8002968:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <config_filter+0x68>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2200      	movs	r2, #0
 800296e:	655a      	str	r2, [r3, #84]	@ 0x54
	hyp_handle->sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002970:	4b16      	ldr	r3, [pc, #88]	@ (80029cc <config_filter+0x68>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2200      	movs	r2, #0
 8002976:	659a      	str	r2, [r3, #88]	@ 0x58
	hyp_handle->sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002978:	4b14      	ldr	r3, [pc, #80]	@ (80029cc <config_filter+0x68>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2201      	movs	r2, #1
 800297e:	65da      	str	r2, [r3, #92]	@ 0x5c
	hyp_handle->sFilterConfig.FilterIdHigh = 0;
 8002980:	4b12      	ldr	r3, [pc, #72]	@ (80029cc <config_filter+0x68>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2200      	movs	r2, #0
 8002986:	641a      	str	r2, [r3, #64]	@ 0x40
	hyp_handle->sFilterConfig.FilterIdLow  = 0;
 8002988:	4b10      	ldr	r3, [pc, #64]	@ (80029cc <config_filter+0x68>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2200      	movs	r2, #0
 800298e:	645a      	str	r2, [r3, #68]	@ 0x44
	hyp_handle->sFilterConfig.FilterMaskIdHigh = 0;
 8002990:	4b0e      	ldr	r3, [pc, #56]	@ (80029cc <config_filter+0x68>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2200      	movs	r2, #0
 8002996:	649a      	str	r2, [r3, #72]	@ 0x48
	hyp_handle->sFilterConfig.FilterMaskIdLow  = 0;
 8002998:	4b0c      	ldr	r3, [pc, #48]	@ (80029cc <config_filter+0x68>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2200      	movs	r2, #0
 800299e:	64da      	str	r2, [r3, #76]	@ 0x4c
	hyp_handle->sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80029a0:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <config_filter+0x68>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2200      	movs	r2, #0
 80029a6:	651a      	str	r2, [r3, #80]	@ 0x50
	hyp_handle->sFilterConfig.FilterActivation = ENABLE;
 80029a8:	4b08      	ldr	r3, [pc, #32]	@ (80029cc <config_filter+0x68>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2201      	movs	r2, #1
 80029ae:	661a      	str	r2, [r3, #96]	@ 0x60
	hyp_handle->hyp_can_ConfigFilter(hyp_handle->can_src, &hyp_handle->sFilterConfig);
 80029b0:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <config_filter+0x68>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029b6:	4a05      	ldr	r2, [pc, #20]	@ (80029cc <config_filter+0x68>)
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	6810      	ldr	r0, [r2, #0]
 80029bc:	4a03      	ldr	r2, [pc, #12]	@ (80029cc <config_filter+0x68>)
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	3240      	adds	r2, #64	@ 0x40
 80029c2:	4611      	mov	r1, r2
 80029c4:	4798      	blx	r3
}
 80029c6:	bf00      	nop
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	20000538 	.word	0x20000538

080029d0 <Can_Init>:
void Can_Init(CAN_HandleTypeDef* hcan, hyp_can_packet_t* hyp_can)
{
 80029d0:	b590      	push	{r4, r7, lr}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af02      	add	r7, sp, #8
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
	hyp_handle = hyp_can;
 80029da:	4a3c      	ldr	r2, [pc, #240]	@ (8002acc <Can_Init+0xfc>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	6013      	str	r3, [r2, #0]
	hyp_handle->can_src = hcan;
 80029e0:	4b3a      	ldr	r3, [pc, #232]	@ (8002acc <Can_Init+0xfc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	601a      	str	r2, [r3, #0]
	hyp_handle->hyp_can_GetRxMessage =             HAL_CAN_GetRxMessage;
 80029e8:	4b38      	ldr	r3, [pc, #224]	@ (8002acc <Can_Init+0xfc>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a38      	ldr	r2, [pc, #224]	@ (8002ad0 <Can_Init+0x100>)
 80029ee:	669a      	str	r2, [r3, #104]	@ 0x68
	hyp_handle->hyp_canardHandleRxframe =          canardHandleRxFrame;
 80029f0:	4b36      	ldr	r3, [pc, #216]	@ (8002acc <Can_Init+0xfc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a37      	ldr	r2, [pc, #220]	@ (8002ad4 <Can_Init+0x104>)
 80029f6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
	hyp_handle->hyp_can_Start =                    HAL_CAN_Start;
 80029fa:	4b34      	ldr	r3, [pc, #208]	@ (8002acc <Can_Init+0xfc>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a36      	ldr	r2, [pc, #216]	@ (8002ad8 <Can_Init+0x108>)
 8002a00:	66da      	str	r2, [r3, #108]	@ 0x6c
	hyp_handle->hyp_can_ActivateNotification =     HAL_CAN_ActivateNotification;
 8002a02:	4b32      	ldr	r3, [pc, #200]	@ (8002acc <Can_Init+0xfc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a35      	ldr	r2, [pc, #212]	@ (8002adc <Can_Init+0x10c>)
 8002a08:	671a      	str	r2, [r3, #112]	@ 0x70
	hyp_handle->hyp_canardInit =                   canardInit;
 8002a0a:	4b30      	ldr	r3, [pc, #192]	@ (8002acc <Can_Init+0xfc>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a34      	ldr	r2, [pc, #208]	@ (8002ae0 <Can_Init+0x110>)
 8002a10:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4
	hyp_handle->hyp_canardSetLocalNodeID =         canardSetLocalNodeID;
 8002a14:	4b2d      	ldr	r3, [pc, #180]	@ (8002acc <Can_Init+0xfc>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a32      	ldr	r2, [pc, #200]	@ (8002ae4 <Can_Init+0x114>)
 8002a1a:	f8c3 24c8 	str.w	r2, [r3, #1224]	@ 0x4c8
	hyp_handle->hyp_can_ConfigFilter =             HAL_CAN_ConfigFilter;
 8002a1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002acc <Can_Init+0xfc>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a31      	ldr	r2, [pc, #196]	@ (8002ae8 <Can_Init+0x118>)
 8002a24:	675a      	str	r2, [r3, #116]	@ 0x74
	hyp_handle->hyp_canardPeekTxQueue =            canardPeekTxQueue;
 8002a26:	4b29      	ldr	r3, [pc, #164]	@ (8002acc <Can_Init+0xfc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a30      	ldr	r2, [pc, #192]	@ (8002aec <Can_Init+0x11c>)
 8002a2c:	f8c3 24cc 	str.w	r2, [r3, #1228]	@ 0x4cc
	hyp_handle->hyp_can_GetTxMailboxesFreeLevel =  HAL_CAN_GetTxMailboxesFreeLevel;
 8002a30:	4b26      	ldr	r3, [pc, #152]	@ (8002acc <Can_Init+0xfc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2e      	ldr	r2, [pc, #184]	@ (8002af0 <Can_Init+0x120>)
 8002a36:	679a      	str	r2, [r3, #120]	@ 0x78
	hyp_handle->hyp_can_AddTxMessage =             HAL_CAN_AddTxMessage;
 8002a38:	4b24      	ldr	r3, [pc, #144]	@ (8002acc <Can_Init+0xfc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8002af4 <Can_Init+0x124>)
 8002a3e:	67da      	str	r2, [r3, #124]	@ 0x7c
	hyp_handle->hyp_canardPopTxQueue =             canardPopTxQueue;
 8002a40:	4b22      	ldr	r3, [pc, #136]	@ (8002acc <Can_Init+0xfc>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a2c      	ldr	r2, [pc, #176]	@ (8002af8 <Can_Init+0x128>)
 8002a46:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0
	hyp_handle->hyp_canardBroadcast = 			   canardBroadcast;
 8002a4a:	4b20      	ldr	r3, [pc, #128]	@ (8002acc <Can_Init+0xfc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a2b      	ldr	r2, [pc, #172]	@ (8002afc <Can_Init+0x12c>)
 8002a50:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4
	hyp_handle->hyp_canardRequestOrRespond =       canardRequestOrRespond;
 8002a54:	4b1d      	ldr	r3, [pc, #116]	@ (8002acc <Can_Init+0xfc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a29      	ldr	r2, [pc, #164]	@ (8002b00 <Can_Init+0x130>)
 8002a5a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8


	hyp_handle->hyp_can_Start(hyp_handle->can_src);
 8002a5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002acc <Can_Init+0xfc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a64:	4a19      	ldr	r2, [pc, #100]	@ (8002acc <Can_Init+0xfc>)
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	6812      	ldr	r2, [r2, #0]
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4798      	blx	r3
	hyp_handle->hyp_can_ActivateNotification(hyp_handle->can_src, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002a6e:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <Can_Init+0xfc>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a74:	4a15      	ldr	r2, [pc, #84]	@ (8002acc <Can_Init+0xfc>)
 8002a76:	6812      	ldr	r2, [r2, #0]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	2102      	movs	r1, #2
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4798      	blx	r3
	hyp_handle->hyp_canardInit(&hyp_handle->canard,
 8002a80:	4b12      	ldr	r3, [pc, #72]	@ (8002acc <Can_Init+0xfc>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f8d3 44c4 	ldr.w	r4, [r3, #1220]	@ 0x4c4
 8002a88:	4b10      	ldr	r3, [pc, #64]	@ (8002acc <Can_Init+0xfc>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f503 6093 	add.w	r0, r3, #1176	@ 0x498
							hyp_handle->canard_memory_pool,
 8002a90:	4b0e      	ldr	r3, [pc, #56]	@ (8002acc <Can_Init+0xfc>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f103 0198 	add.w	r1, r3, #152	@ 0x98
	hyp_handle->hyp_canardInit(&hyp_handle->canard,
 8002a98:	2300      	movs	r3, #0
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <Can_Init+0x134>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <Can_Init+0x138>)
 8002aa2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aa6:	47a0      	blx	r4
							sizeof(hyp_handle->canard_memory_pool),
							on_reception,
							should_accept,
							NULL);
	hyp_handle->hyp_canardSetLocalNodeID(&hyp_handle->canard, 15);
 8002aa8:	4b08      	ldr	r3, [pc, #32]	@ (8002acc <Can_Init+0xfc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f8d3 34c8 	ldr.w	r3, [r3, #1224]	@ 0x4c8
 8002ab0:	4a06      	ldr	r2, [pc, #24]	@ (8002acc <Can_Init+0xfc>)
 8002ab2:	6812      	ldr	r2, [r2, #0]
 8002ab4:	f502 6293 	add.w	r2, r2, #1176	@ 0x498
 8002ab8:	210f      	movs	r1, #15
 8002aba:	4610      	mov	r0, r2
 8002abc:	4798      	blx	r3
	config_filter();
 8002abe:	f7ff ff51 	bl	8002964 <config_filter>
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd90      	pop	{r4, r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20000538 	.word	0x20000538
 8002ad0:	0800105b 	.word	0x0800105b
 8002ad4:	08002fb9 	.word	0x08002fb9
 8002ad8:	08000dc9 	.word	0x08000dc9
 8002adc:	0800129f 	.word	0x0800129f
 8002ae0:	08002b99 	.word	0x08002b99
 8002ae4:	08002c01 	.word	0x08002c01
 8002ae8:	08000c0d 	.word	0x08000c0d
 8002aec:	08002f67 	.word	0x08002f67
 8002af0:	08000ff1 	.word	0x08000ff1
 8002af4:	08000e51 	.word	0x08000e51
 8002af8:	08002f8d 	.word	0x08002f8d
 8002afc:	08002c4d 	.word	0x08002c4d
 8002b00:	08002e59 	.word	0x08002e59
 8002b04:	08002691 	.word	0x08002691
 8002b08:	080026d9 	.word	0x080026d9

08002b0c <Can_Handle>:


void Can_Handle(void)
{
 8002b0c:	b598      	push	{r3, r4, r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
	static uint32_t last_heartbeat_tick = 0;
	static uint32_t last_battinfo_tick = 0;
	if (HAL_GetTick() - last_heartbeat_tick >= 1000)
 8002b10:	f7fd ff50 	bl	80009b4 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <Can_Handle+0x74>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002b20:	d314      	bcc.n	8002b4c <Can_Handle+0x40>
	{
		last_heartbeat_tick = HAL_GetTick();
 8002b22:	f7fd ff47 	bl	80009b4 <HAL_GetTick>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4a15      	ldr	r2, [pc, #84]	@ (8002b80 <Can_Handle+0x74>)
 8002b2a:	6013      	str	r3, [r2, #0]
		send_heartbeat(&hyp_handle->canard, &heartbeat_transfer_id, HAL_GetTick()/1000);
 8002b2c:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <Can_Handle+0x78>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f503 6493 	add.w	r4, r3, #1176	@ 0x498
 8002b34:	f7fd ff3e 	bl	80009b4 <HAL_GetTick>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	4a13      	ldr	r2, [pc, #76]	@ (8002b88 <Can_Handle+0x7c>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	099b      	lsrs	r3, r3, #6
 8002b42:	461a      	mov	r2, r3
 8002b44:	4911      	ldr	r1, [pc, #68]	@ (8002b8c <Can_Handle+0x80>)
 8002b46:	4620      	mov	r0, r4
 8002b48:	f7ff fe0a 	bl	8002760 <send_heartbeat>
	}
	if (HAL_GetTick() - last_battinfo_tick >= 100)
 8002b4c:	f7fd ff32 	bl	80009b4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b0f      	ldr	r3, [pc, #60]	@ (8002b90 <Can_Handle+0x84>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b63      	cmp	r3, #99	@ 0x63
 8002b5a:	d90d      	bls.n	8002b78 <Can_Handle+0x6c>
	{
		last_battinfo_tick = HAL_GetTick();
 8002b5c:	f7fd ff2a 	bl	80009b4 <HAL_GetTick>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4a0b      	ldr	r2, [pc, #44]	@ (8002b90 <Can_Handle+0x84>)
 8002b64:	6013      	str	r3, [r2, #0]
		send_batteryinfo_request(&hyp_handle->canard, &batteryinfo_transfer_id, 11);
 8002b66:	4b07      	ldr	r3, [pc, #28]	@ (8002b84 <Can_Handle+0x78>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f503 6393 	add.w	r3, r3, #1176	@ 0x498
 8002b6e:	220b      	movs	r2, #11
 8002b70:	4908      	ldr	r1, [pc, #32]	@ (8002b94 <Can_Handle+0x88>)
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fe30 	bl	80027d8 <send_batteryinfo_request>
	}
	tx_frame();
 8002b78:	f7ff fe7a 	bl	8002870 <tx_frame>
}
 8002b7c:	bf00      	nop
 8002b7e:	bd98      	pop	{r3, r4, r7, pc}
 8002b80:	2000053c 	.word	0x2000053c
 8002b84:	20000538 	.word	0x20000538
 8002b88:	10624dd3 	.word	0x10624dd3
 8002b8c:	20000534 	.word	0x20000534
 8002b90:	20000540 	.word	0x20000540
 8002b94:	20000535 	.word	0x20000535

08002b98 <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
 8002ba4:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 8002ba6:	222c      	movs	r2, #44	@ 0x2c
 8002ba8:	2100      	movs	r1, #0
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f002 fa21 	bl	8004ff2 <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a3a      	ldr	r2, [r7, #32]
 8002bc0:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bd2:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002be0:	d302      	bcc.n	8002be8 <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 8002be2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002be6:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	330c      	adds	r3, #12
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	b292      	uxth	r2, r2
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f001 ff25 	bl	8004a42 <initPoolAllocator>
}
 8002bf8:	bf00      	nop
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <canardSetLocalNodeID+0x28>
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d006      	beq.n	8002c28 <canardSetLocalNodeID+0x28>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 8002c1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	db02      	blt.n	8002c28 <canardSetLocalNodeID+0x28>
    {
        ins->node_id = self_node_id;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <canardBroadcast>:
#endif
#if CANARD_ENABLE_CANFD
                        ,bool canfd
#endif
)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08e      	sub	sp, #56	@ 0x38
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	e9c7 2300 	strd	r2, r3, [r7]
    // create transfer object
    CanardTxTransfer transfer_object = {
 8002c58:	f107 0310 	add.w	r3, r7, #16
 8002c5c:	2228      	movs	r2, #40	@ 0x28
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f002 f9c6 	bl	8004ff2 <memset>
 8002c66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c6a:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002c6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002c72:	843b      	strh	r3, [r7, #32]
 8002c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c78:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002c7c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8002c80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c84:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002c88:	863b      	strh	r3, [r7, #48]	@ 0x30
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };

    return canardBroadcastObj(ins, &transfer_object);
 8002c8a:	f107 0310 	add.w	r3, r7, #16
 8002c8e:	4619      	mov	r1, r3
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 f805 	bl	8002ca0 <canardBroadcastObj>
 8002c96:	4603      	mov	r3, r0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3738      	adds	r7, #56	@ 0x38
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <canardBroadcastObj>:

int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
{
 8002ca0:	b590      	push	{r4, r7, lr}
 8002ca2:	b087      	sub	sp, #28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <canardBroadcastObj+0x20>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	8c1b      	ldrh	r3, [r3, #32]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d002      	beq.n	8002cc0 <canardBroadcastObj+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8002cba:	f06f 0301 	mvn.w	r3, #1
 8002cbe:	e070      	b.n	8002da2 <canardBroadcastObj+0x102>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	7e1b      	ldrb	r3, [r3, #24]
 8002cc4:	2b1f      	cmp	r3, #31
 8002cc6:	d902      	bls.n	8002cce <canardBroadcastObj+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8002cc8:	f06f 0301 	mvn.w	r3, #1
 8002ccc:	e069      	b.n	8002da2 <canardBroadcastObj+0x102>
    }

    uint32_t can_id = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0xFFFFU;
 8002cd2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002cd6:	827b      	strh	r3, [r7, #18]

    if (canardGetLocalNodeID(ins) == 0)
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ffab 	bl	8002c34 <canardGetLocalNodeID>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d138      	bne.n	8002d56 <canardBroadcastObj+0xb6>
    {
        if (transfer_object->payload_len > 7)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	8c1b      	ldrh	r3, [r3, #32]
 8002ce8:	2b07      	cmp	r3, #7
 8002cea:	d902      	bls.n	8002cf2 <canardBroadcastObj+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 8002cec:	f06f 0303 	mvn.w	r3, #3
 8002cf0:	e057      	b.n	8002da2 <canardBroadcastObj+0x102>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	8a1a      	ldrh	r2, [r3, #16]
 8002cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8002dac <canardBroadcastObj+0x10c>)
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	8a1b      	ldrh	r3, [r3, #16]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d002      	beq.n	8002d0c <canardBroadcastObj+0x6c>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 8002d06:	f06f 0301 	mvn.w	r3, #1
 8002d0a:	e04a      	b.n	8002da2 <canardBroadcastObj+0x102>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	69d9      	ldr	r1, [r3, #28]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	8c1b      	ldrh	r3, [r3, #32]
 8002d14:	461a      	mov	r2, r3
 8002d16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002d1a:	f001 fe75 	bl	8004a08 <crcAdd>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8002d26:	4013      	ands	r3, r2
 8002d28:	823b      	strh	r3, [r7, #16]
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	7e1b      	ldrb	r3, [r3, #24]
 8002d2e:	061a      	lsls	r2, r3, #24
 8002d30:	8a3b      	ldrh	r3, [r7, #16]
 8002d32:	025b      	lsls	r3, r3, #9
 8002d34:	431a      	orrs	r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	8a19      	ldrh	r1, [r3, #16]
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dac <canardBroadcastObj+0x10c>)
 8002d3c:	881b      	ldrh	r3, [r3, #0]
 8002d3e:	400b      	ands	r3, r1
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8002d44:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff ff73 	bl	8002c34 <canardGetLocalNodeID>
 8002d4e:	4603      	mov	r3, r0
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8002d50:	4323      	orrs	r3, r4
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e012      	b.n	8002d7c <canardBroadcastObj+0xdc>
    }
    else
    {
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	7e1b      	ldrb	r3, [r3, #24]
 8002d5a:	061a      	lsls	r2, r3, #24
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	8a1b      	ldrh	r3, [r3, #16]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	ea42 0403 	orr.w	r4, r2, r3
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ff64 	bl	8002c34 <canardGetLocalNodeID>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	4323      	orrs	r3, r4
 8002d70:	617b      	str	r3, [r7, #20]
        crc = calculateCRC(transfer_object);
 8002d72:	6838      	ldr	r0, [r7, #0]
 8002d74:	f000 f84c 	bl	8002e10 <calculateCRC>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	827b      	strh	r3, [r7, #18]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8002d7c:	8a7a      	ldrh	r2, [r7, #18]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	6979      	ldr	r1, [r7, #20]
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f001 f808 	bl	8003d98 <enqueueTxFrames>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	81fb      	strh	r3, [r7, #14]

    if (result > 0) {
 8002d8c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	dd04      	ble.n	8002d9e <canardBroadcastObj+0xfe>
        incrementTransferID(transfer_object->inout_transfer_id);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f000 ff88 	bl	8003cae <incrementTransferID>
    }

    return result;
 8002d9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd90      	pop	{r4, r7, pc}
 8002daa:	bf00      	nop
 8002dac:	080050ac 	.word	0x080050ac

08002db0 <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 8002dba:	683b      	ldr	r3, [r7, #0]
#endif
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 8002dd2:	683b      	ldr	r3, [r7, #0]
#endif
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 8002dea:	683b      	ldr	r3, [r7, #0]
#endif
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <canardRxToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)rx;
 8002e02:	683b      	ldr	r3, [r7, #0]
#endif
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <calculateCRC>:

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 8002e18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e1c:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8c1b      	ldrh	r3, [r3, #32]
 8002e22:	2b07      	cmp	r3, #7
 8002e24:	d913      	bls.n	8002e4e <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002e2c:	89f9      	ldrh	r1, [r7, #14]
 8002e2e:	4608      	mov	r0, r1
 8002e30:	f001 fdbb 	bl	80049aa <crcAddSignature>
 8002e34:	4603      	mov	r3, r0
 8002e36:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69d9      	ldr	r1, [r3, #28]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8c1b      	ldrh	r3, [r3, #32]
 8002e40:	461a      	mov	r2, r3
 8002e42:	89fb      	ldrh	r3, [r7, #14]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f001 fddf 	bl	8004a08 <crcAdd>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 8002e4e:	89fb      	ldrh	r3, [r7, #14]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08e      	sub	sp, #56	@ 0x38
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	e9c7 2300 	strd	r2, r3, [r7]
 8002e64:	460b      	mov	r3, r1
 8002e66:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 8002e68:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 8002e76:	743b      	strb	r3, [r7, #16]
 8002e78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8002e80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8002e84:	843b      	strh	r3, [r7, #32]
 8002e86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8002e8e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8002e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e96:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8002e9a:	863b      	strh	r3, [r7, #48]	@ 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 8002e9c:	f107 0210 	add.w	r2, r7, #16
 8002ea0:	7afb      	ldrb	r3, [r7, #11]
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f805 	bl	8002eb4 <canardRequestOrRespondObj>
 8002eaa:	4603      	mov	r3, r0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3738      	adds	r7, #56	@ 0x38
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b087      	sub	sp, #28
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <canardRequestOrRespondObj+0x24>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	8c1b      	ldrh	r3, [r3, #32]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8002ed2:	f06f 0301 	mvn.w	r3, #1
 8002ed6:	e042      	b.n	8002f5e <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7e1b      	ldrb	r3, [r3, #24]
 8002edc:	2b1f      	cmp	r3, #31
 8002ede:	d902      	bls.n	8002ee6 <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8002ee0:	f06f 0301 	mvn.w	r3, #1
 8002ee4:	e03b      	b.n	8002f5e <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f7ff fea4 	bl	8002c34 <canardGetLocalNodeID>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d102      	bne.n	8002ef8 <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8002ef2:	f06f 0303 	mvn.w	r3, #3
 8002ef6:	e032      	b.n	8002f5e <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7e1b      	ldrb	r3, [r3, #24]
 8002efc:	061a      	lsls	r2, r3, #24
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	8a1b      	ldrh	r3, [r3, #16]
 8002f02:	041b      	lsls	r3, r3, #16
 8002f04:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8002f0c:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8002f0e:	7afb      	ldrb	r3, [r7, #11]
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f7ff fe8c 	bl	8002c34 <canardGetLocalNodeID>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8002f20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f24:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7ff ff72 	bl	8002e10 <calculateCRC>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8002f30:	8a7a      	ldrh	r2, [r7, #18]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6979      	ldr	r1, [r7, #20]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 ff2e 	bl	8003d98 <enqueueTxFrames>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 8002f40:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	dd08      	ble.n	8002f5a <canardRequestOrRespondObj+0xa6>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d104      	bne.n	8002f5a <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 feaa 	bl	8003cae <incrementTransferID>
    }

    return result;
 8002f5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	371c      	adds	r7, #28
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd90      	pop	{r4, r7, pc}

08002f66 <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <canardPeekTxQueue+0x14>
    {
        return NULL;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e002      	b.n	8002f80 <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7e:	3304      	adds	r3, #4
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	68f9      	ldr	r1, [r7, #12]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 fdaa 	bl	8004b02 <freeBlock>
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8002fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fbc:	b09f      	sub	sp, #124	@ 0x7c
 8002fbe:	af02      	add	r7, sp, #8
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f001 f90d 	bl	80041ec <extractTransferType>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8002fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d007      	beq.n	8002ff0 <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8002fe8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	e000      	b.n	8002ff2 <canardHandleRxFrame+0x3a>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	da0f      	bge.n	800301e <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 800301e:	f06f 0309 	mvn.w	r3, #9
 8003022:	e361      	b.n	80036e8 <canardHandleRxFrame+0x730>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 8003024:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003028:	2b02      	cmp	r3, #2
 800302a:	d00b      	beq.n	8003044 <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f7ff fe01 	bl	8002c34 <canardGetLocalNodeID>
 8003032:	4603      	mov	r3, r0
 8003034:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8003036:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800303a:	4293      	cmp	r3, r2
 800303c:	d002      	beq.n	8003044 <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 800303e:	f06f 030a 	mvn.w	r3, #10
 8003042:	e351      	b.n	80036e8 <canardHandleRxFrame+0x730>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	0e1b      	lsrs	r3, r3, #24
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 031f 	and.w	r3, r3, #31
 8003050:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800305e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f001 f8a0 	bl	80041ac <extractDataType>
 800306c:	4603      	mov	r3, r0
 800306e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8003072:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8003076:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800307a:	041b      	lsls	r3, r3, #16
 800307c:	431a      	orrs	r2, r3
 800307e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8003082:	049b      	lsls	r3, r3, #18
 8003084:	431a      	orrs	r2, r3
 8003086:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800308a:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 800308c:	4313      	orrs	r3, r2
 800308e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	7b1b      	ldrb	r3, [r3, #12]
 8003094:	3b01      	subs	r3, #1
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	4413      	add	r3, r2
 800309a:	791b      	ldrb	r3, [r3, #4]
 800309c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    uint64_t data_type_signature = 0;
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	f04f 0300 	mov.w	r3, #0
 80030a8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    CanardRxState* rx_state = NULL;
 80030ac:	2300      	movs	r3, #0
 80030ae:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 80030b0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80030b4:	09db      	lsrs	r3, r3, #7
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f003 0301 	and.w	r3, r3, #1
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d01e      	beq.n	80030fe <canardHandleRxFrame+0x146>
    {

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	685e      	ldr	r6, [r3, #4]
 80030c4:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 80030c8:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 80030cc:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80030d0:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	4603      	mov	r3, r0
 80030d8:	68f8      	ldr	r0, [r7, #12]
 80030da:	47b0      	blx	r6
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <canardHandleRxFrame+0x140>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 80030e2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f001 f8a5 	bl	8004234 <traverseRxStates>
 80030ea:	66f8      	str	r0, [r7, #108]	@ 0x6c

            if(rx_state == NULL)
 80030ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d110      	bne.n	8003114 <canardHandleRxFrame+0x15c>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 80030f2:	f06f 0302 	mvn.w	r3, #2
 80030f6:	e2f7      	b.n	80036e8 <canardHandleRxFrame+0x730>
            }
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 80030f8:	f06f 030b 	mvn.w	r3, #11
 80030fc:	e2f4      	b.n	80036e8 <canardHandleRxFrame+0x730>
        }
    }
    else
    {
        rx_state = findRxState(ins, transfer_descriptor);
 80030fe:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f001 f8c6 	bl	8004292 <findRxState>
 8003106:	66f8      	str	r0, [r7, #108]	@ 0x6c

        if (rx_state == NULL)
 8003108:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <canardHandleRxFrame+0x15c>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 800310e:	f06f 030c 	mvn.w	r3, #12
 8003112:	e2e9      	b.n	80036e8 <canardHandleRxFrame+0x730>
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 8003114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003116:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800311a:	4313      	orrs	r3, r2
 800311c:	bf0c      	ite	eq
 800311e:	2301      	moveq	r3, #1
 8003120:	2300      	movne	r3, #0
 8003122:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8003126:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003128:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800312c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003130:	ebb0 0802 	subs.w	r8, r0, r2
 8003134:	eb61 0903 	sbc.w	r9, r1, r3
 8003138:	4ba9      	ldr	r3, [pc, #676]	@ (80033e0 <canardHandleRxFrame+0x428>)
 800313a:	4598      	cmp	r8, r3
 800313c:	f179 0300 	sbcs.w	r3, r9, #0
 8003140:	bf2c      	ite	cs
 8003142:	2301      	movcs	r3, #1
 8003144:	2300      	movcc	r3, #0
 8003146:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    const bool same_iface = frame->iface_id == rx_state->iface_id;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	7b5a      	ldrb	r2, [r3, #13]
 800314e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003150:	7e9b      	ldrb	r3, [r3, #26]
 8003152:	429a      	cmp	r2, r3
 8003154:	bf0c      	ite	eq
 8003156:	2301      	moveq	r3, #1
 8003158:	2300      	movne	r3, #0
 800315a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 800315e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003162:	09db      	lsrs	r3, r3, #7
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	bf14      	ite	ne
 800316e:	2301      	movne	r3, #1
 8003170:	2300      	moveq	r3, #0
 8003172:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8003176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003178:	7ddb      	ldrb	r3, [r3, #23]
 800317a:	f3c3 0384 	ubfx	r3, r3, #2, #5
 800317e:	b2db      	uxtb	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003186:	f003 031f 	and.w	r3, r3, #31
 800318a:	b2db      	uxtb	r3, r3
 800318c:	4619      	mov	r1, r3
 800318e:	4610      	mov	r0, r2
 8003190:	f000 fd6e 	bl	8003c70 <computeTransferIDForwardDistance>
 8003194:	4603      	mov	r3, r0
    const bool not_previous_tid =
 8003196:	2b01      	cmp	r3, #1
 8003198:	bfcc      	ite	gt
 800319a:	2301      	movgt	r3, #1
 800319c:	2300      	movle	r3, #0
 800319e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 80031a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80031a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80031ac:	1a84      	subs	r4, r0, r2
 80031ae:	eb61 0503 	sbc.w	r5, r1, r3
 80031b2:	4b8c      	ldr	r3, [pc, #560]	@ (80033e4 <canardHandleRxFrame+0x42c>)
 80031b4:	429c      	cmp	r4, r3
 80031b6:	f175 0300 	sbcs.w	r3, r5, #0
 80031ba:	bf2c      	ite	cs
 80031bc:	2301      	movcs	r3, #1
 80031be:	2300      	movcc	r3, #0
 80031c0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 80031c4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031d0:	7ddb      	ldrb	r3, [r3, #23]
 80031d2:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	4619      	mov	r1, r3
 80031da:	4610      	mov	r0, r2
 80031dc:	f000 fd48 	bl	8003c70 <computeTransferIDForwardDistance>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b0f      	cmp	r3, #15
 80031e4:	bfd4      	ite	le
 80031e6:	2301      	movle	r3, #1
 80031e8:	2300      	movgt	r3, #0
 80031ea:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 80031ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bf14      	ite	ne
 80031f6:	2301      	movne	r3, #1
 80031f8:	2300      	moveq	r3, #0
 80031fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 80031fe:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8003202:	2b00      	cmp	r3, #0
 8003204:	d11f      	bne.n	8003246 <canardHandleRxFrame+0x28e>
            (not_initialized) ||
 8003206:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800320a:	2b00      	cmp	r3, #0
 800320c:	d11b      	bne.n	8003246 <canardHandleRxFrame+0x28e>
            (tid_timed_out) ||
 800320e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00b      	beq.n	800322e <canardHandleRxFrame+0x276>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8003216:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800321a:	2b00      	cmp	r3, #0
 800321c:	d007      	beq.n	800322e <canardHandleRxFrame+0x276>
 800321e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10f      	bne.n	8003246 <canardHandleRxFrame+0x28e>
 8003226:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10b      	bne.n	8003246 <canardHandleRxFrame+0x28e>
 800322e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8003232:	2b00      	cmp	r3, #0
 8003234:	d009      	beq.n	800324a <canardHandleRxFrame+0x292>
            (iface_switch_allowed && first_frame && non_wrapped_tid);
 8003236:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <canardHandleRxFrame+0x292>
 800323e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <canardHandleRxFrame+0x292>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8003246:	2301      	movs	r3, #1
 8003248:	e000      	b.n	800324c <canardHandleRxFrame+0x294>
 800324a:	2300      	movs	r3, #0
    const bool need_restart =
 800324c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003250:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

    if (need_restart)
 800325c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8003260:	2b00      	cmp	r3, #0
 8003262:	d02f      	beq.n	80032c4 <canardHandleRxFrame+0x30c>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8003264:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	b2d9      	uxtb	r1, r3
 800326e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003270:	7dd3      	ldrb	r3, [r2, #23]
 8003272:	f361 0386 	bfi	r3, r1, #2, #5
 8003276:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 8003278:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800327a:	7dd3      	ldrb	r3, [r2, #23]
 800327c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003280:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 8003282:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f001 f86e 	bl	8004366 <releaseStatePayload>
        rx_state->iface_id = frame->iface_id;
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	7b5a      	ldrb	r2, [r3, #13]
 800328e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003290:	769a      	strb	r2, [r3, #26]
        if (!IS_START_OF_TRANSFER(tail_byte))
 8003292:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003296:	09db      	lsrs	r3, r3, #7
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d110      	bne.n	80032c4 <canardHandleRxFrame+0x30c>
        {
            rx_state->transfer_id++;
 80032a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032a4:	7ddb      	ldrb	r3, [r3, #23]
 80032a6:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	3301      	adds	r3, #1
 80032ae:	f003 031f 	and.w	r3, r3, #31
 80032b2:	b2d9      	uxtb	r1, r3
 80032b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032b6:	7dd3      	ldrb	r3, [r2, #23]
 80032b8:	f361 0386 	bfi	r3, r1, #2, #5
 80032bc:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 80032be:	f06f 030c 	mvn.w	r3, #12
 80032c2:	e211      	b.n	80036e8 <canardHandleRxFrame+0x730>
        }
    }

    if (frame->iface_id != rx_state->iface_id)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	7b5a      	ldrb	r2, [r3, #13]
 80032c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ca:	7e9b      	ldrb	r3, [r3, #26]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <canardHandleRxFrame+0x31c>
    {
        // drop frame if coming from unexpected interface
        return CANARD_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e209      	b.n	80036e8 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 80032d4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80032d8:	09db      	lsrs	r3, r3, #7
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	f003 0301 	and.w	r3, r3, #1
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d041      	beq.n	8003368 <canardHandleRxFrame+0x3b0>
 80032e4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d039      	beq.n	8003368 <canardHandleRxFrame+0x3b0>
    {
        rx_state->timestamp_usec = timestamp_usec;
 80032f4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80032f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80032fa:	e9c1 2302 	strd	r2, r3, [r1, #8]
        CanardRxTransfer rx_transfer = {
 80032fe:	f107 0310 	add.w	r3, r7, #16
 8003302:	2220      	movs	r2, #32
 8003304:	2100      	movs	r1, #0
 8003306:	4618      	mov	r0, r3
 8003308:	f001 fe73 	bl	8004ff2 <memset>
 800330c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003310:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 8003318:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	7b1b      	ldrb	r3, [r3, #12]
 800331e:	3b01      	subs	r3, #1
 8003320:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8003322:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003324:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003328:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800332a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800332e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8003332:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003336:	f003 031f 	and.w	r3, r3, #31
 800333a:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 800333c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8003340:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8003344:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003348:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800334c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        ins->on_reception(ins, &rx_transfer);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f107 0210 	add.w	r2, r7, #16
 8003358:	4611      	mov	r1, r2
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 800335e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003360:	f000 ff02 	bl	8004168 <prepareForNextTransfer>
        return CANARD_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	e1bf      	b.n	80036e8 <canardHandleRxFrame+0x730>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 8003368:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	2b00      	cmp	r3, #0
 8003376:	bf14      	ite	ne
 8003378:	2301      	movne	r3, #1
 800337a:	2300      	moveq	r3, #0
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003382:	7ddb      	ldrb	r3, [r3, #23]
 8003384:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003388:	b2db      	uxtb	r3, r3
 800338a:	429a      	cmp	r2, r3
 800338c:	d002      	beq.n	8003394 <canardHandleRxFrame+0x3dc>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 800338e:	f06f 030d 	mvn.w	r3, #13
 8003392:	e1a9      	b.n	80036e8 <canardHandleRxFrame+0x730>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 8003394:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800339e:	7dd2      	ldrb	r2, [r2, #23]
 80033a0:	f3c2 0284 	ubfx	r2, r2, #2, #5
 80033a4:	b2d2      	uxtb	r2, r2
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d002      	beq.n	80033b0 <canardHandleRxFrame+0x3f8>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 80033aa:	f06f 030e 	mvn.w	r3, #14
 80033ae:	e19b      	b.n	80036e8 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 80033b0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80033b4:	09db      	lsrs	r3, r3, #7
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d061      	beq.n	8003484 <canardHandleRxFrame+0x4cc>
 80033c0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80033c4:	099b      	lsrs	r3, r3, #6
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d159      	bne.n	8003484 <canardHandleRxFrame+0x4cc>
    {
        if (frame->data_len <= 3)
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	7b1b      	ldrb	r3, [r3, #12]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d807      	bhi.n	80033e8 <canardHandleRxFrame+0x430>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 80033d8:	f06f 030f 	mvn.w	r3, #15
 80033dc:	e184      	b.n	80036e8 <canardHandleRxFrame+0x730>
 80033de:	bf00      	nop
 80033e0:	001e8481 	.word	0x001e8481
 80033e4:	000f4241 	.word	0x000f4241
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 80033e8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80033ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rx_state->payload_len = 0;
 80033f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033f4:	8ad3      	ldrh	r3, [r2, #22]
 80033f6:	f36f 0309 	bfc	r3, #0, #10
 80033fa:	82d3      	strh	r3, [r2, #22]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f103 000c 	add.w	r0, r3, #12
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3304      	adds	r3, #4
 8003406:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 800340c:	3b03      	subs	r3, #3
 800340e:	b2db      	uxtb	r3, r3
 8003410:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003412:	f000 ffdd 	bl	80043d0 <bufferBlockPushBytes>
 8003416:	4603      	mov	r3, r0
 8003418:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if (ret < 0)
 800341c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	da09      	bge.n	8003438 <canardHandleRxFrame+0x480>
        {
            releaseStatePayload(ins, rx_state);
 8003424:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 ff9d 	bl	8004366 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 800342c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800342e:	f000 fe9b 	bl	8004168 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8003432:	f06f 0302 	mvn.w	r3, #2
 8003436:	e157      	b.n	80036e8 <canardHandleRxFrame+0x730>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	791b      	ldrb	r3, [r3, #4]
 800343c:	461a      	mov	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	795b      	ldrb	r3, [r3, #5]
 8003442:	021b      	lsls	r3, r3, #8
 8003444:	b29b      	uxth	r3, r3
 8003446:	4313      	orrs	r3, r2
 8003448:	b29a      	uxth	r2, r3
 800344a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800344c:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 800344e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003452:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003456:	f001 faa8 	bl	80049aa <crcAddSignature>
 800345a:	4603      	mov	r3, r0
 800345c:	461a      	mov	r2, r3
 800345e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003460:	829a      	strh	r2, [r3, #20]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8003462:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003464:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800346a:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	7b1b      	ldrb	r3, [r3, #12]
 8003470:	3b03      	subs	r3, #3
 8003472:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8003474:	461a      	mov	r2, r3
 8003476:	f001 fac7 	bl	8004a08 <crcAdd>
 800347a:	4603      	mov	r3, r0
 800347c:	461a      	mov	r2, r3
 800347e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003480:	829a      	strh	r2, [r3, #20]
    {
 8003482:	e124      	b.n	80036ce <canardHandleRxFrame+0x716>
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8003484:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003488:	09db      	lsrs	r3, r3, #7
 800348a:	b2db      	uxtb	r3, r3
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d133      	bne.n	80034fc <canardHandleRxFrame+0x544>
 8003494:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003498:	099b      	lsrs	r3, r3, #6
 800349a:	b2db      	uxtb	r3, r3
 800349c:	f003 0301 	and.w	r3, r3, #1
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d12b      	bne.n	80034fc <canardHandleRxFrame+0x544>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f103 000c 	add.w	r0, r3, #12
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80034b8:	f000 ff8a 	bl	80043d0 <bufferBlockPushBytes>
 80034bc:	4603      	mov	r3, r0
 80034be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (ret < 0)
 80034c0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	da09      	bge.n	80034dc <canardHandleRxFrame+0x524>
        {
            releaseStatePayload(ins, rx_state);
 80034c8:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f000 ff4b 	bl	8004366 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 80034d0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80034d2:	f000 fe49 	bl	8004168 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80034d6:	f06f 0302 	mvn.w	r3, #2
 80034da:	e105      	b.n	80036e8 <canardHandleRxFrame+0x730>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80034dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034de:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	1d19      	adds	r1, r3, #4
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	7b1b      	ldrb	r3, [r3, #12]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80034ec:	461a      	mov	r2, r3
 80034ee:	f001 fa8b 	bl	8004a08 <crcAdd>
 80034f2:	4603      	mov	r3, r0
 80034f4:	461a      	mov	r2, r3
 80034f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f8:	829a      	strh	r2, [r3, #20]
    {
 80034fa:	e0e8      	b.n	80036ce <canardHandleRxFrame+0x716>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	7b1b      	ldrb	r3, [r3, #12]
 8003500:	3b01      	subs	r3, #1
 8003502:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

        uint8_t tail_offset = 0;
 8003506:	2300      	movs	r3, #0
 8003508:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 800350c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800350e:	8adb      	ldrh	r3, [r3, #22]
 8003510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003514:	b29b      	uxth	r3, r3
 8003516:	2b04      	cmp	r3, #4
 8003518:	d823      	bhi.n	8003562 <canardHandleRxFrame+0x5aa>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 800351a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800351c:	8adb      	ldrh	r3, [r3, #22]
 800351e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003522:	b29b      	uxth	r3, r3
 8003524:	667b      	str	r3, [r7, #100]	@ 0x64
 8003526:	e012      	b.n	800354e <canardHandleRxFrame+0x596>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 8003528:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800352c:	68ba      	ldr	r2, [r7, #8]
 800352e:	4413      	add	r3, r2
 8003530:	7919      	ldrb	r1, [r3, #4]
 8003532:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003534:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003536:	4413      	add	r3, r2
 8003538:	331b      	adds	r3, #27
 800353a:	460a      	mov	r2, r1
 800353c:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 800353e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003540:	3301      	adds	r3, #1
 8003542:	667b      	str	r3, [r7, #100]	@ 0x64
 8003544:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003548:	3301      	adds	r3, #1
 800354a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 800354e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003550:	2b04      	cmp	r3, #4
 8003552:	d848      	bhi.n	80035e6 <canardHandleRxFrame+0x62e>
 8003554:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8003558:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800355c:	429a      	cmp	r2, r3
 800355e:	d3e3      	bcc.n	8003528 <canardHandleRxFrame+0x570>
 8003560:	e041      	b.n	80035e6 <canardHandleRxFrame+0x62e>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f103 020c 	add.w	r2, r3, #12
 8003568:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4619      	mov	r1, r3
 800356e:	4610      	mov	r0, r2
 8003570:	f7ff fc1e 	bl	8002db0 <canardBufferFromIdx>
 8003574:	6638      	str	r0, [r7, #96]	@ 0x60
            if (block != NULL)
 8003576:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003578:	2b00      	cmp	r3, #0
 800357a:	d034      	beq.n	80035e6 <canardHandleRxFrame+0x62e>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 800357c:	2305      	movs	r3, #5
 800357e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 8003580:	e005      	b.n	800358e <canardHandleRxFrame+0x5d6>
                {
                    block = block->next;
 8003582:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	663b      	str	r3, [r7, #96]	@ 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 8003588:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800358a:	331c      	adds	r3, #28
 800358c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 800358e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f5      	bne.n	8003582 <canardHandleRxFrame+0x5ca>
                }
                CANARD_ASSERT(block != NULL);

                const size_t offset_within_block = rx_state->payload_len - offset;
 8003596:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003598:	8adb      	ldrh	r3, [r3, #22]
 800359a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800359e:	b29b      	uxth	r3, r3
 80035a0:	461a      	mov	r2, r3
 80035a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	63bb      	str	r3, [r7, #56]	@ 0x38
                CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                for (size_t i = offset_within_block;
 80035a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035ac:	e012      	b.n	80035d4 <canardHandleRxFrame+0x61c>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 80035ae:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	4413      	add	r3, r2
 80035b6:	7919      	ldrb	r1, [r3, #4]
 80035b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80035ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035bc:	4413      	add	r3, r2
 80035be:	3304      	adds	r3, #4
 80035c0:	460a      	mov	r2, r1
 80035c2:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 80035c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035c6:	3301      	adds	r3, #1
 80035c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035ca:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80035ce:	3301      	adds	r3, #1
 80035d0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 80035d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035d6:	2b1b      	cmp	r3, #27
 80035d8:	d805      	bhi.n	80035e6 <canardHandleRxFrame+0x62e>
 80035da:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80035de:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d3e3      	bcc.n	80035ae <canardHandleRxFrame+0x5f6>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 80035e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80035ea:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 80035ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035f0:	331b      	adds	r3, #27
        CanardRxTransfer rx_transfer = {
 80035f2:	61bb      	str	r3, [r7, #24]
            .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f103 020c 	add.w	r2, r3, #12
 80035fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4619      	mov	r1, r3
 8003600:	4610      	mov	r0, r2
 8003602:	f7ff fbd5 	bl	8002db0 <canardBufferFromIdx>
 8003606:	4603      	mov	r3, r0
        CanardRxTransfer rx_transfer = {
 8003608:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 800360a:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800360e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003612:	429a      	cmp	r2, r3
 8003614:	d205      	bcs.n	8003622 <canardHandleRxFrame+0x66a>
 8003616:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	4413      	add	r3, r2
 800361e:	3304      	adds	r3, #4
 8003620:	e000      	b.n	8003624 <canardHandleRxFrame+0x66c>
 8003622:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 8003624:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 8003626:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003628:	8adb      	ldrh	r3, [r3, #22]
 800362a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800362e:	b29b      	uxth	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8003636:	b29b      	uxth	r3, r3
 8003638:	4413      	add	r3, r2
 800363a:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 800363c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800363e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003642:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003644:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8003648:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 800364c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003650:	f003 031f 	and.w	r3, r3, #31
 8003654:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8003656:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800365a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800365e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003662:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8003666:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 800366a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800366c:	2200      	movs	r2, #0
 800366e:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 8003670:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003672:	8a98      	ldrh	r0, [r3, #20]
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	1d19      	adds	r1, r3, #4
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	7b1b      	ldrb	r3, [r3, #12]
 800367c:	3b01      	subs	r3, #1
 800367e:	461a      	mov	r2, r3
 8003680:	f001 f9c2 	bl	8004a08 <crcAdd>
 8003684:	4603      	mov	r3, r0
 8003686:	461a      	mov	r2, r3
 8003688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800368a:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 800368c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800368e:	8a9a      	ldrh	r2, [r3, #20]
 8003690:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003692:	8b1b      	ldrh	r3, [r3, #24]
 8003694:	429a      	cmp	r2, r3
 8003696:	d106      	bne.n	80036a6 <canardHandleRxFrame+0x6ee>
        {
            ins->on_reception(ins, &rx_transfer);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f107 0210 	add.w	r2, r7, #16
 80036a0:	4611      	mov	r1, r2
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 80036a6:	f107 0310 	add.w	r3, r7, #16
 80036aa:	4619      	mov	r1, r3
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fa27 	bl	8003b00 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 80036b2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80036b4:	f000 fd58 	bl	8004168 <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 80036b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036ba:	8a9a      	ldrh	r2, [r3, #20]
 80036bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036be:	8b1b      	ldrh	r3, [r3, #24]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d101      	bne.n	80036c8 <canardHandleRxFrame+0x710>
        {
            return CANARD_OK;
 80036c4:	2300      	movs	r3, #0
 80036c6:	e00f      	b.n	80036e8 <canardHandleRxFrame+0x730>
        }
        else
        {
            return -CANARD_ERROR_RX_BAD_CRC;
 80036c8:	f06f 0310 	mvn.w	r3, #16
 80036cc:	e00c      	b.n	80036e8 <canardHandleRxFrame+0x730>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 80036ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036d0:	7ddb      	ldrb	r3, [r3, #23]
 80036d2:	b25b      	sxtb	r3, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	09db      	lsrs	r3, r3, #7
 80036da:	b2d9      	uxtb	r1, r3
 80036dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036de:	7dd3      	ldrb	r3, [r2, #23]
 80036e0:	f361 13c7 	bfi	r3, r1, #7, #1
 80036e4:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3774      	adds	r7, #116	@ 0x74
 80036ec:	46bd      	mov	sp, r7
 80036ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80036f2:	bf00      	nop

080036f4 <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 80036f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036f8:	b08d      	sub	sp, #52	@ 0x34
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	61f8      	str	r0, [r7, #28]
 80036fe:	61b9      	str	r1, [r7, #24]
 8003700:	4611      	mov	r1, r2
 8003702:	461a      	mov	r2, r3
 8003704:	460b      	mov	r3, r1
 8003706:	75fb      	strb	r3, [r7, #23]
 8003708:	4613      	mov	r3, r2
 800370a:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d002      	beq.n	8003718 <canardDecodeScalar+0x24>
 8003712:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003714:	2b00      	cmp	r3, #0
 8003716:	d102      	bne.n	800371e <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003718:	f06f 0301 	mvn.w	r3, #1
 800371c:	e16e      	b.n	80039fc <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 800371e:	7dfb      	ldrb	r3, [r7, #23]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <canardDecodeScalar+0x36>
 8003724:	7dfb      	ldrb	r3, [r7, #23]
 8003726:	2b40      	cmp	r3, #64	@ 0x40
 8003728:	d902      	bls.n	8003730 <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800372a:	f06f 0301 	mvn.w	r3, #1
 800372e:	e165      	b.n	80039fc <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 8003730:	7dfb      	ldrb	r3, [r7, #23]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d105      	bne.n	8003742 <canardDecodeScalar+0x4e>
 8003736:	7dbb      	ldrb	r3, [r7, #22]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800373c:	f06f 0301 	mvn.w	r3, #1
 8003740:	e15c      	b.n	80039fc <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 8003742:	f107 0320 	add.w	r3, r7, #32
 8003746:	2208      	movs	r2, #8
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f001 fc51 	bl	8004ff2 <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 8003750:	f107 0320 	add.w	r3, r7, #32
 8003754:	7dfa      	ldrb	r2, [r7, #23]
 8003756:	69b9      	ldr	r1, [r7, #24]
 8003758:	69f8      	ldr	r0, [r7, #28]
 800375a:	f000 ffc1 	bl	80046e0 <descatterTransferPayload>
 800375e:	4603      	mov	r3, r0
 8003760:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (result <= 0)
 8003762:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003766:	2b00      	cmp	r3, #0
 8003768:	dc02      	bgt.n	8003770 <canardDecodeScalar+0x7c>
    {
        return result;
 800376a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800376e:	e145      	b.n	80039fc <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8003770:	7dfb      	ldrb	r3, [r7, #23]
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d018      	beq.n	80037ae <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 800377c:	7dfb      	ldrb	r3, [r7, #23]
 800377e:	08db      	lsrs	r3, r3, #3
 8003780:	b2db      	uxtb	r3, r3
 8003782:	3320      	adds	r3, #32
 8003784:	f107 0210 	add.w	r2, r7, #16
 8003788:	4413      	add	r3, r2
 800378a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800378e:	461a      	mov	r2, r3
 8003790:	7dfb      	ldrb	r3, [r7, #23]
 8003792:	425b      	negs	r3, r3
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	411a      	asrs	r2, r3
 800379a:	7dfb      	ldrb	r3, [r7, #23]
 800379c:	08db      	lsrs	r3, r3, #3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	b2d2      	uxtb	r2, r2
 80037a2:	3320      	adds	r3, #32
 80037a4:	f107 0110 	add.w	r1, r7, #16
 80037a8:	440b      	add	r3, r1
 80037aa:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 80037ae:	2300      	movs	r3, #0
 80037b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 80037b4:	7dfb      	ldrb	r3, [r7, #23]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d103      	bne.n	80037c2 <canardDecodeScalar+0xce>
 80037ba:	2301      	movs	r3, #1
 80037bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037c0:	e01e      	b.n	8003800 <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d803      	bhi.n	80037d0 <canardDecodeScalar+0xdc>
 80037c8:	2301      	movs	r3, #1
 80037ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037ce:	e017      	b.n	8003800 <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 80037d0:	7dfb      	ldrb	r3, [r7, #23]
 80037d2:	2b10      	cmp	r3, #16
 80037d4:	d803      	bhi.n	80037de <canardDecodeScalar+0xea>
 80037d6:	2302      	movs	r3, #2
 80037d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037dc:	e010      	b.n	8003800 <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d803      	bhi.n	80037ec <canardDecodeScalar+0xf8>
 80037e4:	2304      	movs	r3, #4
 80037e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037ea:	e009      	b.n	8003800 <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 80037ec:	7dfb      	ldrb	r3, [r7, #23]
 80037ee:	2b40      	cmp	r3, #64	@ 0x40
 80037f0:	d803      	bhi.n	80037fa <canardDecodeScalar+0x106>
 80037f2:	2308      	movs	r3, #8
 80037f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80037f8:	e002      	b.n	8003800 <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 80037fa:	f06f 0308 	mvn.w	r3, #8
 80037fe:	e0fd      	b.n	80039fc <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 8003800:	f001 f863 	bl	80048ca <isBigEndian>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 800380a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800380e:	f107 0320 	add.w	r3, r7, #32
 8003812:	4611      	mov	r1, r2
 8003814:	4618      	mov	r0, r3
 8003816:	f001 f869 	bl	80048ec <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 800381a:	7dbb      	ldrb	r3, [r7, #22]
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 809b 	beq.w	8003958 <canardDecodeScalar+0x264>
 8003822:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003826:	00da      	lsls	r2, r3, #3
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	429a      	cmp	r2, r3
 800382c:	f000 8094 	beq.w	8003958 <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	2b08      	cmp	r3, #8
 8003834:	d819      	bhi.n	800386a <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 8003836:	f897 3020 	ldrb.w	r3, [r7, #32]
 800383a:	461a      	mov	r2, r3
 800383c:	7dfb      	ldrb	r3, [r7, #23]
 800383e:	3b01      	subs	r3, #1
 8003840:	fa22 f303 	lsr.w	r3, r2, r3
 8003844:	f003 0301 	and.w	r3, r3, #1
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8085 	beq.w	8003958 <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 800384e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003852:	7dfb      	ldrb	r3, [r7, #23]
 8003854:	2101      	movs	r1, #1
 8003856:	fa01 f303 	lsl.w	r3, r1, r3
 800385a:	b2db      	uxtb	r3, r3
 800385c:	425b      	negs	r3, r3
 800385e:	b2db      	uxtb	r3, r3
 8003860:	4313      	orrs	r3, r2
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f887 3020 	strb.w	r3, [r7, #32]
 8003868:	e076      	b.n	8003958 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 800386a:	7dfb      	ldrb	r3, [r7, #23]
 800386c:	2b10      	cmp	r3, #16
 800386e:	d815      	bhi.n	800389c <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 8003870:	8c3b      	ldrh	r3, [r7, #32]
 8003872:	461a      	mov	r2, r3
 8003874:	7dfb      	ldrb	r3, [r7, #23]
 8003876:	3b01      	subs	r3, #1
 8003878:	fa22 f303 	lsr.w	r3, r2, r3
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d069      	beq.n	8003958 <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8003884:	8c3a      	ldrh	r2, [r7, #32]
 8003886:	7dfb      	ldrb	r3, [r7, #23]
 8003888:	2101      	movs	r1, #1
 800388a:	fa01 f303 	lsl.w	r3, r1, r3
 800388e:	b29b      	uxth	r3, r3
 8003890:	425b      	negs	r3, r3
 8003892:	b29b      	uxth	r3, r3
 8003894:	4313      	orrs	r3, r2
 8003896:	b29b      	uxth	r3, r3
 8003898:	843b      	strh	r3, [r7, #32]
 800389a:	e05d      	b.n	8003958 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	2b20      	cmp	r3, #32
 80038a0:	d811      	bhi.n	80038c6 <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 80038a2:	6a3a      	ldr	r2, [r7, #32]
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d051      	beq.n	8003958 <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 80038b4:	6a3a      	ldr	r2, [r7, #32]
 80038b6:	7dfb      	ldrb	r3, [r7, #23]
 80038b8:	2101      	movs	r1, #1
 80038ba:	fa01 f303 	lsl.w	r3, r1, r3
 80038be:	425b      	negs	r3, r3
 80038c0:	4313      	orrs	r3, r2
 80038c2:	623b      	str	r3, [r7, #32]
 80038c4:	e048      	b.n	8003958 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 80038c6:	7dfb      	ldrb	r3, [r7, #23]
 80038c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80038ca:	d842      	bhi.n	8003952 <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 80038cc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038d0:	7df9      	ldrb	r1, [r7, #23]
 80038d2:	1e48      	subs	r0, r1, #1
 80038d4:	f1c0 0620 	rsb	r6, r0, #32
 80038d8:	f1a0 0120 	sub.w	r1, r0, #32
 80038dc:	fa22 f400 	lsr.w	r4, r2, r0
 80038e0:	fa03 f606 	lsl.w	r6, r3, r6
 80038e4:	4334      	orrs	r4, r6
 80038e6:	fa23 f101 	lsr.w	r1, r3, r1
 80038ea:	430c      	orrs	r4, r1
 80038ec:	fa23 f500 	lsr.w	r5, r3, r0
 80038f0:	f004 0301 	and.w	r3, r4, #1
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80038fe:	460b      	mov	r3, r1
 8003900:	4313      	orrs	r3, r2
 8003902:	d029      	beq.n	8003958 <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8003904:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003908:	7df9      	ldrb	r1, [r7, #23]
 800390a:	f04f 0201 	mov.w	r2, #1
 800390e:	f04f 0300 	mov.w	r3, #0
 8003912:	f1a1 0620 	sub.w	r6, r1, #32
 8003916:	f1c1 0020 	rsb	r0, r1, #32
 800391a:	fa03 f901 	lsl.w	r9, r3, r1
 800391e:	fa02 f606 	lsl.w	r6, r2, r6
 8003922:	ea49 0906 	orr.w	r9, r9, r6
 8003926:	fa22 f000 	lsr.w	r0, r2, r0
 800392a:	ea49 0900 	orr.w	r9, r9, r0
 800392e:	fa02 f801 	lsl.w	r8, r2, r1
 8003932:	2300      	movs	r3, #0
 8003934:	f1d8 0a00 	rsbs	sl, r8, #0
 8003938:	eb63 0b09 	sbc.w	fp, r3, r9
 800393c:	ea44 030a 	orr.w	r3, r4, sl
 8003940:	603b      	str	r3, [r7, #0]
 8003942:	ea45 030b 	orr.w	r3, r5, fp
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	e9d7 3400 	ldrd	r3, r4, [r7]
 800394c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8003950:	e002      	b.n	8003958 <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 8003952:	f06f 0308 	mvn.w	r3, #8
 8003956:	e051      	b.n	80039fc <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 8003958:	7dbb      	ldrb	r3, [r7, #22]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d022      	beq.n	80039a4 <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 800395e:	7dfb      	ldrb	r3, [r7, #23]
 8003960:	2b08      	cmp	r3, #8
 8003962:	d804      	bhi.n	800396e <canardDecodeScalar+0x27a>
 8003964:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8003968:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800396a:	701a      	strb	r2, [r3, #0]
 800396c:	e044      	b.n	80039f8 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 800396e:	7dfb      	ldrb	r3, [r7, #23]
 8003970:	2b10      	cmp	r3, #16
 8003972:	d804      	bhi.n	800397e <canardDecodeScalar+0x28a>
 8003974:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8003978:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800397a:	801a      	strh	r2, [r3, #0]
 800397c:	e03c      	b.n	80039f8 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 800397e:	7dfb      	ldrb	r3, [r7, #23]
 8003980:	2b20      	cmp	r3, #32
 8003982:	d803      	bhi.n	800398c <canardDecodeScalar+0x298>
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	e035      	b.n	80039f8 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 800398c:	7dfb      	ldrb	r3, [r7, #23]
 800398e:	2b40      	cmp	r3, #64	@ 0x40
 8003990:	d805      	bhi.n	800399e <canardDecodeScalar+0x2aa>
 8003992:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003996:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003998:	e9c1 2300 	strd	r2, r3, [r1]
 800399c:	e02c      	b.n	80039f8 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 800399e:	f06f 0308 	mvn.w	r3, #8
 80039a2:	e02b      	b.n	80039fc <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 80039a4:	7dfb      	ldrb	r3, [r7, #23]
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d104      	bne.n	80039b4 <canardDecodeScalar+0x2c0>
 80039aa:	f897 2020 	ldrb.w	r2, [r7, #32]
 80039ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	e021      	b.n	80039f8 <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 80039b4:	7dfb      	ldrb	r3, [r7, #23]
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d804      	bhi.n	80039c4 <canardDecodeScalar+0x2d0>
 80039ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80039be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e019      	b.n	80039f8 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 80039c4:	7dfb      	ldrb	r3, [r7, #23]
 80039c6:	2b10      	cmp	r3, #16
 80039c8:	d803      	bhi.n	80039d2 <canardDecodeScalar+0x2de>
 80039ca:	8c3a      	ldrh	r2, [r7, #32]
 80039cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039ce:	801a      	strh	r2, [r3, #0]
 80039d0:	e012      	b.n	80039f8 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 80039d2:	7dfb      	ldrb	r3, [r7, #23]
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d803      	bhi.n	80039e0 <canardDecodeScalar+0x2ec>
 80039d8:	6a3a      	ldr	r2, [r7, #32]
 80039da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	e00b      	b.n	80039f8 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 80039e0:	7dfb      	ldrb	r3, [r7, #23]
 80039e2:	2b40      	cmp	r3, #64	@ 0x40
 80039e4:	d805      	bhi.n	80039f2 <canardDecodeScalar+0x2fe>
 80039e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80039ea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80039ec:	e9c1 2300 	strd	r2, r3, [r1]
 80039f0:	e002      	b.n	80039f8 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 80039f2:	f06f 0308 	mvn.w	r3, #8
 80039f6:	e001      	b.n	80039fc <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 80039f8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3734      	adds	r7, #52	@ 0x34
 8003a00:	46bd      	mov	sp, r7
 8003a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003a06 <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b08a      	sub	sp, #40	@ 0x28
 8003a0a:	af02      	add	r7, sp, #8
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4613      	mov	r3, r2
 8003a14:	71fb      	strb	r3, [r7, #7]
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
    CANARD_ASSERT(value != NULL);

    if (bit_length > 64)
 8003a16:	79fb      	ldrb	r3, [r7, #7]
 8003a18:	2b40      	cmp	r3, #64	@ 0x40
 8003a1a:	d901      	bls.n	8003a20 <canardEncodeScalar+0x1a>
    {
        CANARD_ASSERT(false);
        bit_length = 64;
 8003a1c:	2340      	movs	r3, #64	@ 0x40
 8003a1e:	71fb      	strb	r3, [r7, #7]
    }

    if (bit_length < 1)
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <canardEncodeScalar+0x24>
    {
        CANARD_ASSERT(false);
        bit_length = 1;
 8003a26:	2301      	movs	r3, #1
 8003a28:	71fb      	strb	r3, [r7, #7]
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 8003a2a:	f107 0310 	add.w	r3, r7, #16
 8003a2e:	2208      	movs	r2, #8
 8003a30:	2100      	movs	r1, #0
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 fadd 	bl	8004ff2 <memset>

    uint8_t std_byte_length = 0;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d105      	bne.n	8003a4e <canardEncodeScalar+0x48>
 8003a42:	2301      	movs	r3, #1
 8003a44:	77fb      	strb	r3, [r7, #31]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	743b      	strb	r3, [r7, #16]
 8003a4c:	e024      	b.n	8003a98 <canardEncodeScalar+0x92>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	2b08      	cmp	r3, #8
 8003a52:	d805      	bhi.n	8003a60 <canardEncodeScalar+0x5a>
 8003a54:	2301      	movs	r3, #1
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	743b      	strb	r3, [r7, #16]
 8003a5e:	e01b      	b.n	8003a98 <canardEncodeScalar+0x92>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	2b10      	cmp	r3, #16
 8003a64:	d805      	bhi.n	8003a72 <canardEncodeScalar+0x6c>
 8003a66:	2302      	movs	r3, #2
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	823b      	strh	r3, [r7, #16]
 8003a70:	e012      	b.n	8003a98 <canardEncodeScalar+0x92>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d805      	bhi.n	8003a84 <canardEncodeScalar+0x7e>
 8003a78:	2304      	movs	r3, #4
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	e009      	b.n	8003a98 <canardEncodeScalar+0x92>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	2b40      	cmp	r3, #64	@ 0x40
 8003a88:	d806      	bhi.n	8003a98 <canardEncodeScalar+0x92>
 8003a8a:	2308      	movs	r3, #8
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a94:	e9c7 2304 	strd	r2, r3, [r7, #16]
            storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
        }
    }
#endif

    if (isBigEndian())
 8003a98:	f000 ff17 	bl	80048ca <isBigEndian>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d006      	beq.n	8003ab0 <canardEncodeScalar+0xaa>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8003aa2:	7ffa      	ldrb	r2, [r7, #31]
 8003aa4:	f107 0310 	add.w	r3, r7, #16
 8003aa8:	4611      	mov	r1, r2
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 ff1e 	bl	80048ec <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	f003 0307 	and.w	r3, r3, #7
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d014      	beq.n	8003ae6 <canardEncodeScalar+0xe0>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	08db      	lsrs	r3, r3, #3
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	3320      	adds	r3, #32
 8003ac4:	443b      	add	r3, r7
 8003ac6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003aca:	461a      	mov	r2, r3
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	425b      	negs	r3, r3
 8003ad0:	f003 0307 	and.w	r3, r3, #7
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	08db      	lsrs	r3, r3, #3
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	3320      	adds	r3, #32
 8003ae0:	443b      	add	r3, r7
 8003ae2:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 8003ae6:	79fa      	ldrb	r2, [r7, #7]
 8003ae8:	f107 0010 	add.w	r0, r7, #16
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2100      	movs	r1, #0
 8003af4:	f000 fd7d 	bl	80045f2 <copyBitArray>
}
 8003af8:	bf00      	nop
 8003afa:	3720      	adds	r7, #32
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <canardReleaseRxTransferPayload>:

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 8003b0a:	e00f      	b.n	8003b2c <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f103 020c 	add.w	r2, r3, #12
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	4619      	mov	r1, r3
 8003b20:	4610      	mov	r0, r2
 8003b22:	f000 ffee 	bl	8004b02 <freeBlock>
        transfer->payload_middle = temp;
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1eb      	bne.n	8003b0c <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2200      	movs	r2, #0
 8003b38:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	829a      	strh	r2, [r3, #20]
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <canardConvertNativeFloatToFloat16>:
{
    return ins->allocator.statistics;
}

uint16_t canardConvertNativeFloatToFloat16(float value)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b08b      	sub	sp, #44	@ 0x2c
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	ed87 0a01 	vstr	s0, [r7, #4]
    {
        uint32_t u;
        float f;
    };

    const union FP32 f32inf = { 255UL << 23U };
 8003b5e:	f04f 43ff 	mov.w	r3, #2139095040	@ 0x7f800000
 8003b62:	617b      	str	r3, [r7, #20]
    const union FP32 f16inf = { 31UL << 23U };
 8003b64:	f04f 6378 	mov.w	r3, #260046848	@ 0xf800000
 8003b68:	613b      	str	r3, [r7, #16]
    const union FP32 magic = { 15UL << 23U };
 8003b6a:	f04f 63f0 	mov.w	r3, #125829120	@ 0x7800000
 8003b6e:	60fb      	str	r3, [r7, #12]
    const uint32_t sign_mask = 0x80000000UL;
 8003b70:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003b74:	623b      	str	r3, [r7, #32]
    const uint32_t round_mask = 0xFFFFF000UL;
 8003b76:	4b21      	ldr	r3, [pc, #132]	@ (8003bfc <canardConvertNativeFloatToFloat16+0xa8>)
 8003b78:	61fb      	str	r3, [r7, #28]

    union FP32 in;
    in.f = value;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	60bb      	str	r3, [r7, #8]
    uint32_t sign = in.u & sign_mask;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
    in.u ^= sign;
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	4053      	eors	r3, r2
 8003b8c:	60bb      	str	r3, [r7, #8]

    uint16_t out = 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (in.u >= f32inf.u)
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	d30a      	bcc.n	8003bb0 <canardConvertNativeFloatToFloat16+0x5c>
    {
        out = (in.u > f32inf.u) ? (uint16_t)0x7FFFU : (uint16_t)0x7C00U;
 8003b9a:	68ba      	ldr	r2, [r7, #8]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d902      	bls.n	8003ba8 <canardConvertNativeFloatToFloat16+0x54>
 8003ba2:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8003ba6:	e001      	b.n	8003bac <canardConvertNativeFloatToFloat16+0x58>
 8003ba8:	f44f 43f8 	mov.w	r3, #31744	@ 0x7c00
 8003bac:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003bae:	e018      	b.n	8003be2 <canardConvertNativeFloatToFloat16+0x8e>
    }
    else
    {
        in.u &= round_mask;
 8003bb0:	68ba      	ldr	r2, [r7, #8]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	60bb      	str	r3, [r7, #8]
        in.f *= magic.f;
 8003bb8:	ed97 7a02 	vldr	s14, [r7, #8]
 8003bbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc4:	edc7 7a02 	vstr	s15, [r7, #8]
        in.u -= round_mask;
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	60bb      	str	r3, [r7, #8]
        if (in.u > f16inf.u)
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d901      	bls.n	8003bdc <canardConvertNativeFloatToFloat16+0x88>
        {
            in.u = f16inf.u;
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	60bb      	str	r3, [r7, #8]
        }
        out = (uint16_t)(in.u >> 13U);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	0b5b      	lsrs	r3, r3, #13
 8003be0:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    out |= (uint16_t)(sign >> 16U);
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	0c1b      	lsrs	r3, r3, #16
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003bea:	4313      	orrs	r3, r2
 8003bec:	84fb      	strh	r3, [r7, #38]	@ 0x26

    return out;
 8003bee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	372c      	adds	r7, #44	@ 0x2c
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	fffff000 	.word	0xfffff000

08003c00 <canardConvertFloat16ToNativeFloat>:

float canardConvertFloat16ToNativeFloat(uint16_t value)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
    {
        uint32_t u;
        float f;
    };

    const union FP32 magic = { (254UL - 15UL) << 23U };
 8003c0a:	f04f 43ef 	mov.w	r3, #2004877312	@ 0x77800000
 8003c0e:	617b      	str	r3, [r7, #20]
    const union FP32 was_inf_nan = { (127UL + 16UL) << 23U };
 8003c10:	f04f 438f 	mov.w	r3, #1199570944	@ 0x47800000
 8003c14:	613b      	str	r3, [r7, #16]
    union FP32 out;

    out.u = (value & 0x7FFFU) << 13U;
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	035a      	lsls	r2, r3, #13
 8003c1a:	4b14      	ldr	r3, [pc, #80]	@ (8003c6c <canardConvertFloat16ToNativeFloat+0x6c>)
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
    out.f *= magic.f;
 8003c20:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c24:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2c:	edc7 7a03 	vstr	s15, [r7, #12]
    if (out.f >= was_inf_nan.f)
 8003c30:	ed97 7a03 	vldr	s14, [r7, #12]
 8003c34:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c40:	db03      	blt.n	8003c4a <canardConvertFloat16ToNativeFloat+0x4a>
    {
        out.u |= 255UL << 23U;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f043 43ff 	orr.w	r3, r3, #2139095040	@ 0x7f800000
 8003c48:	60fb      	str	r3, [r7, #12]
    }
    out.u |= (value & 0x8000UL) << 16U;
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	041b      	lsls	r3, r3, #16
 8003c50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c54:	4313      	orrs	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

    return out.f;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	ee07 3a90 	vmov	s15, r3
}
 8003c5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	0fffe000 	.word	0x0fffe000

08003c70 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	4603      	mov	r3, r0
 8003c78:	460a      	mov	r2, r1
 8003c7a:	71fb      	strb	r3, [r7, #7]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(a - b);
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	79bb      	ldrb	r3, [r7, #6]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 8003c8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	da03      	bge.n	8003c9e <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 8003c96:	89fb      	ldrh	r3, [r7, #14]
 8003c98:	3320      	adds	r3, #32
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 8003c9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr

08003cae <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b083      	sub	sp, #12
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b1f      	cmp	r3, #31
 8003cc8:	d902      	bls.n	8003cd0 <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	701a      	strb	r2, [r3, #0]
    }
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d801      	bhi.n	8003cf0 <dlcToDataLength+0x14>
        return dlc;
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	e01e      	b.n	8003d2e <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 8003cf0:	88fb      	ldrh	r3, [r7, #6]
 8003cf2:	2b09      	cmp	r3, #9
 8003cf4:	d101      	bne.n	8003cfa <dlcToDataLength+0x1e>
        return 12;
 8003cf6:	230c      	movs	r3, #12
 8003cf8:	e019      	b.n	8003d2e <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	2b0a      	cmp	r3, #10
 8003cfe:	d101      	bne.n	8003d04 <dlcToDataLength+0x28>
        return 16;
 8003d00:	2310      	movs	r3, #16
 8003d02:	e014      	b.n	8003d2e <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 8003d04:	88fb      	ldrh	r3, [r7, #6]
 8003d06:	2b0b      	cmp	r3, #11
 8003d08:	d101      	bne.n	8003d0e <dlcToDataLength+0x32>
        return 20;
 8003d0a:	2314      	movs	r3, #20
 8003d0c:	e00f      	b.n	8003d2e <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 8003d0e:	88fb      	ldrh	r3, [r7, #6]
 8003d10:	2b0c      	cmp	r3, #12
 8003d12:	d101      	bne.n	8003d18 <dlcToDataLength+0x3c>
        return 24;
 8003d14:	2318      	movs	r3, #24
 8003d16:	e00a      	b.n	8003d2e <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 8003d18:	88fb      	ldrh	r3, [r7, #6]
 8003d1a:	2b0d      	cmp	r3, #13
 8003d1c:	d101      	bne.n	8003d22 <dlcToDataLength+0x46>
        return 32;
 8003d1e:	2320      	movs	r3, #32
 8003d20:	e005      	b.n	8003d2e <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 8003d22:	88fb      	ldrh	r3, [r7, #6]
 8003d24:	2b0e      	cmp	r3, #14
 8003d26:	d101      	bne.n	8003d2c <dlcToDataLength+0x50>
        return 48;
 8003d28:	2330      	movs	r3, #48	@ 0x30
 8003d2a:	e000      	b.n	8003d2e <dlcToDataLength+0x52>
    }
    return 64;
 8003d2c:	2340      	movs	r3, #64	@ 0x40
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	4603      	mov	r3, r0
 8003d42:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 8003d44:	88fb      	ldrh	r3, [r7, #6]
 8003d46:	2b08      	cmp	r3, #8
 8003d48:	d801      	bhi.n	8003d4e <dataLengthToDlc+0x14>
        return data_length;
 8003d4a:	88fb      	ldrh	r3, [r7, #6]
 8003d4c:	e01e      	b.n	8003d8c <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 8003d4e:	88fb      	ldrh	r3, [r7, #6]
 8003d50:	2b0c      	cmp	r3, #12
 8003d52:	d801      	bhi.n	8003d58 <dataLengthToDlc+0x1e>
        return 9;
 8003d54:	2309      	movs	r3, #9
 8003d56:	e019      	b.n	8003d8c <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	2b10      	cmp	r3, #16
 8003d5c:	d801      	bhi.n	8003d62 <dataLengthToDlc+0x28>
        return 10;
 8003d5e:	230a      	movs	r3, #10
 8003d60:	e014      	b.n	8003d8c <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 8003d62:	88fb      	ldrh	r3, [r7, #6]
 8003d64:	2b14      	cmp	r3, #20
 8003d66:	d801      	bhi.n	8003d6c <dataLengthToDlc+0x32>
        return 11;
 8003d68:	230b      	movs	r3, #11
 8003d6a:	e00f      	b.n	8003d8c <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	2b18      	cmp	r3, #24
 8003d70:	d801      	bhi.n	8003d76 <dataLengthToDlc+0x3c>
        return 12;
 8003d72:	230c      	movs	r3, #12
 8003d74:	e00a      	b.n	8003d8c <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 8003d76:	88fb      	ldrh	r3, [r7, #6]
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d801      	bhi.n	8003d80 <dataLengthToDlc+0x46>
        return 13;
 8003d7c:	230d      	movs	r3, #13
 8003d7e:	e005      	b.n	8003d8c <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 8003d80:	88fb      	ldrh	r3, [r7, #6]
 8003d82:	2b30      	cmp	r3, #48	@ 0x30
 8003d84:	d801      	bhi.n	8003d8a <dataLengthToDlc+0x50>
        return 14;
 8003d86:	230e      	movs	r3, #14
 8003d88:	e000      	b.n	8003d8c <dataLengthToDlc+0x52>
    }
    return 15;
 8003d8a:	230f      	movs	r3, #15
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	@ 0x30
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d102      	bne.n	8003db6 <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003db0:	f06f 0301 	mvn.w	r3, #1
 8003db4:	e11c      	b.n	8003ff0 <enqueueTxFrames+0x258>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	8c1b      	ldrh	r3, [r3, #32]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <enqueueTxFrames+0x34>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003dc6:	f06f 0301 	mvn.w	r3, #1
 8003dca:	e111      	b.n	8003ff0 <enqueueTxFrames+0x258>
    }

    int16_t result = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	8c1a      	ldrh	r2, [r3, #32]
 8003dda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d24b      	bcs.n	8003e7c <enqueueTxFrames+0xe4>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	330c      	adds	r3, #12
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 f94a 	bl	8004082 <createTxItem>
 8003dee:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d102      	bne.n	8003dfc <enqueueTxFrames+0x64>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8003df6:	f06f 0302 	mvn.w	r3, #2
 8003dfa:	e0f9      	b.n	8003ff0 <enqueueTxFrames+0x258>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f103 0008 	add.w	r0, r3, #8
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	69d9      	ldr	r1, [r3, #28]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	8c1b      	ldrh	r3, [r3, #32]
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	f001 f91e 	bl	800504c <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	8c1b      	ldrh	r3, [r3, #32]
 8003e14:	3301      	adds	r3, #1
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff8e 	bl	8003d3a <dataLengthToDlc>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff5b 	bl	8003cdc <dlcToDataLength>
 8003e26:	4603      	mov	r3, r0
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	8c1b      	ldrh	r3, [r3, #32]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	3301      	adds	r3, #1
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	8c12      	ldrh	r2, [r2, #32]
 8003e4e:	4611      	mov	r1, r2
 8003e50:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8003e54:	b2da      	uxtb	r2, r3
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	440b      	add	r3, r1
 8003e5a:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 8003e66:	6979      	ldr	r1, [r7, #20]
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f8c5 	bl	8003ff8 <pushTxQueue>
        result++;
 8003e6e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3301      	adds	r3, #1
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8003e7a:	e0b7      	b.n	8003fec <enqueueTxFrames+0x254>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        uint8_t toggle = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint8_t sot_eot = 0x80;
 8003e86:	2380      	movs	r3, #128	@ 0x80
 8003e88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
          see if we are going to be able to allocate enough blocks for
          this transfer. If not then stop now, otherwise we will end
          up doing a partial (corrupt) transfer which will just make
          the situation worse as it will waste bus bandwidth
         */
        const uint16_t total_bytes = transfer->payload_len + 2; // including CRC
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	8c1b      	ldrh	r3, [r3, #32]
 8003e90:	3302      	adds	r3, #2
 8003e92:	84bb      	strh	r3, [r7, #36]	@ 0x24
        const uint8_t bytes_per_frame = frame_max_data_len-1; // sot/eot byte consumes one byte
 8003e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        const uint16_t frames_needed = (total_bytes + (bytes_per_frame-1)) / bytes_per_frame;
 8003e9e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ea0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	441a      	add	r2, r3
 8003ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003eac:	fb92 f3f3 	sdiv	r3, r2, r3
 8003eb0:	843b      	strh	r3, [r7, #32]
        const uint16_t blocks_available = ins->allocator.statistics.capacity_blocks - ins->allocator.statistics.current_usage_blocks;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8a9a      	ldrh	r2, [r3, #20]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8adb      	ldrh	r3, [r3, #22]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	83fb      	strh	r3, [r7, #30]
        if (blocks_available < frames_needed) {
 8003ebe:	8bfa      	ldrh	r2, [r7, #30]
 8003ec0:	8c3b      	ldrh	r3, [r7, #32]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d202      	bcs.n	8003ecc <enqueueTxFrames+0x134>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8003ec6:	f06f 0302 	mvn.w	r3, #2
 8003eca:	e091      	b.n	8003ff0 <enqueueTxFrames+0x258>
        }

        CanardTxQueueItem* queue_item = NULL;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 8003ed0:	e086      	b.n	8003fe0 <enqueueTxFrames+0x248>
        {
            queue_item = createTxItem(&ins->allocator);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f8d3 	bl	8004082 <createTxItem>
 8003edc:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d102      	bne.n	8003eea <enqueueTxFrames+0x152>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8003ee4:	f06f 0302 	mvn.w	r3, #2
 8003ee8:	e082      	b.n	8003ff0 <enqueueTxFrames+0x258>
            }

            uint16_t i = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	853b      	strh	r3, [r7, #40]	@ 0x28
            if (data_index == 0)
 8003eee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10c      	bne.n	8003f0e <enqueueTxFrames+0x176>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	0a1b      	lsrs	r3, r3, #8
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	b2da      	uxtb	r2, r3
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	725a      	strb	r2, [r3, #9]
                i = 2;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003f0c:	e012      	b.n	8003f34 <enqueueTxFrames+0x19c>
            }
            else
            {
                i = 0;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	853b      	strh	r3, [r7, #40]	@ 0x28
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8003f12:	e00f      	b.n	8003f34 <enqueueTxFrames+0x19c>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003f1a:	441a      	add	r2, r3
 8003f1c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f1e:	7811      	ldrb	r1, [r2, #0]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4413      	add	r3, r2
 8003f24:	460a      	mov	r2, r1
 8003f26:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8003f28:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003f2e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003f30:	3301      	adds	r3, #1
 8003f32:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8003f34:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8003f36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	da04      	bge.n	8003f4a <enqueueTxFrames+0x1b2>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	8c1b      	ldrh	r3, [r3, #32]
 8003f44:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d3e4      	bcc.n	8003f14 <enqueueTxFrames+0x17c>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	8c1b      	ldrh	r3, [r3, #32]
 8003f4e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d002      	beq.n	8003f5a <enqueueTxFrames+0x1c2>
 8003f54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003f58:	e000      	b.n	8003f5c <enqueueTxFrames+0x1c4>
 8003f5a:	2340      	movs	r3, #64	@ 0x40
 8003f5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8003f60:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f62:	3301      	adds	r3, #1
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff fee7 	bl	8003d3a <dataLengthToDlc>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff feb4 	bl	8003cdc <dlcToDataLength>
 8003f74:	4603      	mov	r3, r0
 8003f76:	3b01      	subs	r3, #1
 8003f78:	853b      	strh	r3, [r7, #40]	@ 0x28
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 8003f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003f7e:	015b      	lsls	r3, r3, #5
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003f86:	4313      	orrs	r3, r2
 8003f88:	b2d9      	uxtb	r1, r3
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	f003 031f 	and.w	r3, r3, #31
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	b2d1      	uxtb	r1, r2
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	460a      	mov	r2, r1
 8003fa2:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8003fae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	b2da      	uxtb	r2, r3
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 8003fba:	69b9      	ldr	r1, [r7, #24]
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f81b 	bl	8003ff8 <pushTxQueue>

            result++;
 8003fc2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3301      	adds	r3, #1
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            toggle ^= 1;
 8003fce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003fd2:	f083 0301 	eor.w	r3, r3, #1
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            sot_eot = 0;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        while (transfer->payload_len - data_index != 0)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	8c1b      	ldrh	r3, [r3, #32]
 8003fe4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	f47f af73 	bne.w	8003ed2 <enqueueTxFrames+0x13a>
        }
    }

    return result;
 8003fec:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3730      	adds	r7, #48	@ 0x30
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8004010:	e034      	b.n	800407c <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004016:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800401c:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 800401e:	e02a      	b.n	8004076 <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f000 f840 	bl	80040b0 <isPriorityHigher>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d012      	beq.n	800405c <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	429a      	cmp	r2, r3
 800403e:	d106      	bne.n	800404e <pushTxQueue+0x56>
            {
                item->next = queue;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 800404c:	e016      	b.n	800407c <pushTxQueue+0x84>
                previous->next = item;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	601a      	str	r2, [r3, #0]
            return;
 800405a:	e00f      	b.n	800407c <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d103      	bne.n	800406c <pushTxQueue+0x74>
            {
                queue->next = item;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	601a      	str	r2, [r3, #0]
                return;
 800406a:	e007      	b.n	800407c <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1d1      	bne.n	8004020 <pushTxQueue+0x28>
            }
        }
    }
}
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fd10 	bl	8004ab0 <allocateBlock>
 8004090:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <createTxItem+0x1a>
    {
        return NULL;
 8004098:	2300      	movs	r3, #0
 800409a:	e005      	b.n	80040a8 <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 800409c:	2214      	movs	r2, #20
 800409e:	2100      	movs	r1, #0
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 ffa6 	bl	8004ff2 <memset>
    return item;
 80040a6:	68fb      	ldr	r3, [r7, #12]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b089      	sub	sp, #36	@ 0x24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80040c0:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 80040c8:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	0fdb      	lsrs	r3, r3, #31
 80040ce:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	0fdb      	lsrs	r3, r3, #31
 80040d4:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 80040d6:	7dfa      	ldrb	r2, [r7, #23]
 80040d8:	7dbb      	ldrb	r3, [r7, #22]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d01d      	beq.n	800411a <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 80040de:	7dfb      	ldrb	r3, [r7, #23]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <isPriorityHigher+0x3a>
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	0c9b      	lsrs	r3, r3, #18
 80040e8:	e000      	b.n	80040ec <isPriorityHigher+0x3c>
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 80040ee:	7dbb      	ldrb	r3, [r7, #22]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d002      	beq.n	80040fa <isPriorityHigher+0x4a>
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	0c9b      	lsrs	r3, r3, #18
 80040f8:	e000      	b.n	80040fc <isPriorityHigher+0x4c>
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 80040fe:	693a      	ldr	r2, [r7, #16]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	429a      	cmp	r2, r3
 8004104:	d007      	beq.n	8004116 <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 8004106:	693a      	ldr	r2, [r7, #16]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	429a      	cmp	r2, r3
 800410c:	bf34      	ite	cc
 800410e:	2301      	movcc	r3, #1
 8004110:	2300      	movcs	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	e022      	b.n	800415c <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 8004116:	7dbb      	ldrb	r3, [r7, #22]
 8004118:	e020      	b.n	800415c <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf14      	ite	ne
 8004134:	2301      	movne	r3, #1
 8004136:	2300      	moveq	r3, #0
 8004138:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	429a      	cmp	r2, r3
 8004140:	d105      	bne.n	800414e <isPriorityHigher+0x9e>
 8004142:	7d7a      	ldrb	r2, [r7, #21]
 8004144:	7d3b      	ldrb	r3, [r7, #20]
 8004146:	429a      	cmp	r2, r3
 8004148:	d001      	beq.n	800414e <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 800414a:	7d3b      	ldrb	r3, [r7, #20]
 800414c:	e006      	b.n	800415c <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 800414e:	69fa      	ldr	r2, [r7, #28]
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	429a      	cmp	r2, r3
 8004154:	bf34      	ite	cc
 8004156:	2301      	movcc	r3, #1
 8004158:	2300      	movcs	r3, #0
 800415a:	b2db      	uxtb	r3, r3
}
 800415c:	4618      	mov	r0, r3
 800415e:	3724      	adds	r7, #36	@ 0x24
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
    state->transfer_id++;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7ddb      	ldrb	r3, [r3, #23]
 8004174:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8004178:	b2db      	uxtb	r3, r3
 800417a:	3301      	adds	r3, #1
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	b2d9      	uxtb	r1, r3
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	7dd3      	ldrb	r3, [r2, #23]
 8004186:	f361 0386 	bfi	r3, r1, #2, #5
 800418a:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	8ad3      	ldrh	r3, [r2, #22]
 8004190:	f36f 0309 	bfc	r3, #0, #10
 8004194:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	7dd3      	ldrb	r3, [r2, #23]
 800419a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800419e:	75d3      	strb	r3, [r2, #23]
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <extractDataType>:

/**
 * returns data type from id
 */
uint16_t extractDataType(uint32_t id)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f819 	bl	80041ec <extractTransferType>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d10e      	bne.n	80041de <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 80041d2:	89fb      	ldrh	r3, [r7, #14]
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 80041da:	89fb      	ldrh	r3, [r7, #14]
 80041dc:	e002      	b.n	80041e4 <extractDataType+0x38>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	b2db      	uxtb	r3, r3
    }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3710      	adds	r7, #16
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <extractTransferType>:

/**
 * returns transfer type from id
 */
CanardTransferType extractTransferType(uint32_t id)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	09db      	lsrs	r3, r3, #7
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	bf14      	ite	ne
 8004200:	2301      	movne	r3, #1
 8004202:	2300      	moveq	r3, #0
 8004204:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	f083 0301 	eor.w	r3, r3, #1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <extractTransferType+0x2a>
    {
        return CanardTransferTypeBroadcast;
 8004212:	2302      	movs	r3, #2
 8004214:	e008      	b.n	8004228 <extractTransferType+0x3c>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	0bdb      	lsrs	r3, r3, #15
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <extractTransferType+0x3a>
    {
        return CanardTransferTypeRequest;
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <extractTransferType+0x3c>
    }
    else
    {
        return CanardTransferTypeResponse;
 8004226:	2300      	movs	r3, #0
    }
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d110      	bne.n	800426c <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	330c      	adds	r3, #12
 800424e:	6839      	ldr	r1, [r7, #0]
 8004250:	4618      	mov	r0, r3
 8004252:	f000 f865 	bl	8004320 <createRxState>
 8004256:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <traverseRxStates+0x2e>
        {
            return NULL;
 800425e:	2300      	movs	r3, #0
 8004260:	e013      	b.n	800428a <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	621a      	str	r2, [r3, #32]
        return states;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	e00e      	b.n	800428a <traverseRxStates+0x56>
    }

    states = findRxState(ins, transfer_descriptor);
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f80f 	bl	8004292 <findRxState>
 8004274:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <traverseRxStates+0x4c>
    {
        return states;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	e004      	b.n	800428a <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 8004280:	6839      	ldr	r1, [r7, #0]
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f827 	bl	80042d6 <prependRxState>
 8004288:	4603      	mov	r3, r0
    }
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
    CanardRxState *state = ins->rx_states;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6a1b      	ldr	r3, [r3, #32]
 80042a0:	60fb      	str	r3, [r7, #12]
    while (state != NULL)
 80042a2:	e010      	b.n	80042c6 <findRxState+0x34>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d101      	bne.n	80042b2 <findRxState+0x20>
        {
            return state;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	e00d      	b.n	80042ce <findRxState+0x3c>
        }
        state = canardRxFromIdx(&ins->allocator, state->next);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f103 020c 	add.w	r2, r3, #12
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4619      	mov	r1, r3
 80042be:	4610      	mov	r0, r2
 80042c0:	f7fe fd8e 	bl	8002de0 <canardRxFromIdx>
 80042c4:	60f8      	str	r0, [r7, #12]
    while (state != NULL)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1eb      	bne.n	80042a4 <findRxState+0x12>
    }
    return NULL;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b084      	sub	sp, #16
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
 80042de:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	330c      	adds	r3, #12
 80042e4:	6839      	ldr	r1, [r7, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 f81a 	bl	8004320 <createRxState>
 80042ec:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <prependRxState+0x22>
    {
        return NULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	e00f      	b.n	8004318 <prependRxState+0x42>
    }

    state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f103 020c 	add.w	r2, r3, #12
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	4619      	mov	r1, r3
 8004304:	4610      	mov	r0, r2
 8004306:	f7fe fd77 	bl	8002df8 <canardRxToIdx>
 800430a:	4602      	mov	r2, r0
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	621a      	str	r2, [r3, #32]
    return state;
 8004316:	68fb      	ldr	r3, [r7, #12]
}
 8004318:	4618      	mov	r0, r3
 800431a:	3710      	adds	r7, #16
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08c      	sub	sp, #48	@ 0x30
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 800432a:	f107 0308 	add.w	r3, r7, #8
 800432e:	2220      	movs	r2, #32
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fe5d 	bl	8004ff2 <memset>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	61bb      	str	r3, [r7, #24]
        .next = CANARD_BUFFER_IDX_NONE,
        .buffer_blocks = CANARD_BUFFER_IDX_NONE,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 fbb7 	bl	8004ab0 <allocateBlock>
 8004342:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (state == NULL)
 8004344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <createRxState+0x2e>
    {
        return NULL;
 800434a:	2300      	movs	r3, #0
 800434c:	e007      	b.n	800435e <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 800434e:	f107 0308 	add.w	r3, r7, #8
 8004352:	2220      	movs	r2, #32
 8004354:	4619      	mov	r1, r3
 8004356:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004358:	f000 fe78 	bl	800504c <memcpy>

    return state;
 800435c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800435e:	4618      	mov	r0, r3
 8004360:	3730      	adds	r7, #48	@ 0x30
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8004370:	e01b      	b.n	80043aa <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f103 020c 	add.w	r2, r3, #12
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	4619      	mov	r1, r3
 800437e:	4610      	mov	r0, r2
 8004380:	f7fe fd16 	bl	8002db0 <canardBufferFromIdx>
 8004384:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	330c      	adds	r3, #12
 8004390:	68f9      	ldr	r1, [r7, #12]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fbb5 	bl	8004b02 <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	330c      	adds	r3, #12
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fe fd12 	bl	8002dc8 <canardBufferToIdx>
 80043a4:	4602      	mov	r2, r0
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1df      	bne.n	8004372 <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 80043b2:	683a      	ldr	r2, [r7, #0]
 80043b4:	8ad3      	ldrh	r3, [r2, #22]
 80043b6:	f36f 0309 	bfc	r3, #0, #10
 80043ba:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	f04f 0300 	mov.w	r3, #0
}
 80043c4:	4610      	mov	r0, r2
 80043c6:	4619      	mov	r1, r3
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
	...

080043d0 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08a      	sub	sp, #40	@ 0x28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 80043de:	2300      	movs	r3, #0
 80043e0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	8adb      	ldrh	r3, [r3, #22]
 80043e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b05      	cmp	r3, #5
 80043ee:	d036      	beq.n	800445e <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	8adb      	ldrh	r3, [r3, #22]
 80043f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80043fc:	e00e      	b.n	800441c <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 80043fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	441a      	add	r2, r3
 8004404:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004406:	7811      	ldrb	r1, [r2, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	4413      	add	r3, r2
 800440c:	460a      	mov	r2, r1
 800440e:	76da      	strb	r2, [r3, #27]
             i++, data_index++)
 8004410:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004412:	3301      	adds	r3, #1
 8004414:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8004416:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004418:	3301      	adds	r3, #1
 800441a:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 800441c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800441e:	2b04      	cmp	r3, #4
 8004420:	d804      	bhi.n	800442c <bufferBlockPushBytes+0x5c>
 8004422:	78fb      	ldrb	r3, [r7, #3]
 8004424:	b29b      	uxth	r3, r3
 8004426:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004428:	429a      	cmp	r2, r3
 800442a:	d3e8      	bcc.n	80043fe <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	b29b      	uxth	r3, r3
 8004430:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004432:	429a      	cmp	r2, r3
 8004434:	d313      	bcc.n	800445e <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	8adb      	ldrh	r3, [r3, #22]
 800443a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800443e:	b29b      	uxth	r3, r3
 8004440:	461a      	mov	r2, r3
 8004442:	78fb      	ldrb	r3, [r7, #3]
 8004444:	b29b      	uxth	r3, r3
 8004446:	4413      	add	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800444e:	b299      	uxth	r1, r3
            state->payload_len =
 8004450:	68ba      	ldr	r2, [r7, #8]
 8004452:	8ad3      	ldrh	r3, [r2, #22]
 8004454:	f361 0309 	bfi	r3, r1, #0, #10
 8004458:	82d3      	strh	r3, [r2, #22]
            return 1;
 800445a:	2301      	movs	r3, #1
 800445c:	e0ae      	b.n	80045bc <bufferBlockPushBytes+0x1ec>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	8adb      	ldrh	r3, [r3, #22]
 8004462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004466:	b29b      	uxth	r3, r3
 8004468:	1f5a      	subs	r2, r3, #5
 800446a:	0893      	lsrs	r3, r2, #2
 800446c:	4955      	ldr	r1, [pc, #340]	@ (80045c4 <bufferBlockPushBytes+0x1f4>)
 800446e:	fba1 3103 	umull	r3, r1, r1, r3
 8004472:	460b      	mov	r3, r1
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	1a5b      	subs	r3, r3, r1
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 800447c:	847b      	strh	r3, [r7, #34]	@ 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d113      	bne.n	80044b2 <bufferBlockPushBytes+0xe2>
    {
        block = createBufferBlock(allocator);
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f89c 	bl	80045c8 <createBufferBlock>
 8004490:	61f8      	str	r0, [r7, #28]
        state->buffer_blocks = canardBufferToIdx(allocator, block);
 8004492:	69f9      	ldr	r1, [r7, #28]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f7fe fc97 	bl	8002dc8 <canardBufferToIdx>
 800449a:	4602      	mov	r2, r0
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	605a      	str	r2, [r3, #4]
        if (block == NULL)
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d102      	bne.n	80044ac <bufferBlockPushBytes+0xdc>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80044a6:	f06f 0302 	mvn.w	r3, #2
 80044aa:	e087      	b.n	80045bc <bufferBlockPushBytes+0x1ec>
        }

        index_at_nth_block = 0;
 80044ac:	2300      	movs	r3, #0
 80044ae:	847b      	strh	r3, [r7, #34]	@ 0x22
 80044b0:	e06c      	b.n	800458c <bufferBlockPushBytes+0x1bc>
    }
    else
    {
        uint16_t nth_block = 1;
 80044b2:	2301      	movs	r3, #1
 80044b4:	837b      	strh	r3, [r7, #26]

        // get to block
        block = canardBufferFromIdx(allocator, state->buffer_blocks);
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4619      	mov	r1, r3
 80044bc:	68f8      	ldr	r0, [r7, #12]
 80044be:	f7fe fc77 	bl	8002db0 <canardBufferFromIdx>
 80044c2:	61f8      	str	r0, [r7, #28]
        while (block->next != NULL)
 80044c4:	e005      	b.n	80044d2 <bufferBlockPushBytes+0x102>
        {
            nth_block++;
 80044c6:	8b7b      	ldrh	r3, [r7, #26]
 80044c8:	3301      	adds	r3, #1
 80044ca:	837b      	strh	r3, [r7, #26]
            block = block->next;
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1f5      	bne.n	80044c6 <bufferBlockPushBytes+0xf6>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	8adb      	ldrh	r3, [r3, #22]
 80044de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	78fb      	ldrb	r3, [r7, #3]
 80044e8:	4413      	add	r3, r2
 80044ea:	3b05      	subs	r3, #5
 80044ec:	089b      	lsrs	r3, r3, #2
 80044ee:	4a35      	ldr	r2, [pc, #212]	@ (80045c4 <bufferBlockPushBytes+0x1f4>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 80044f6:	3301      	adds	r3, #1
 80044f8:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 80044fa:	8afa      	ldrh	r2, [r7, #22]
 80044fc:	8b7b      	ldrh	r3, [r7, #26]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d944      	bls.n	800458c <bufferBlockPushBytes+0x1bc>
 8004502:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004504:	2b00      	cmp	r3, #0
 8004506:	d141      	bne.n	800458c <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f000 f85d 	bl	80045c8 <createBufferBlock>
 800450e:	4602      	mov	r2, r0
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <bufferBlockPushBytes+0x152>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 800451c:	f06f 0302 	mvn.w	r3, #2
 8004520:	e04c      	b.n	80045bc <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 8004528:	e030      	b.n	800458c <bufferBlockPushBytes+0x1bc>
    {
        for (uint16_t i = index_at_nth_block;
 800452a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800452c:	833b      	strh	r3, [r7, #24]
 800452e:	e00e      	b.n	800454e <bufferBlockPushBytes+0x17e>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8004530:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	441a      	add	r2, r3
 8004536:	8b3b      	ldrh	r3, [r7, #24]
 8004538:	7811      	ldrb	r1, [r2, #0]
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	460a      	mov	r2, r1
 8004540:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 8004542:	8b3b      	ldrh	r3, [r7, #24]
 8004544:	3301      	adds	r3, #1
 8004546:	833b      	strh	r3, [r7, #24]
 8004548:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800454a:	3301      	adds	r3, #1
 800454c:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 800454e:	8b3b      	ldrh	r3, [r7, #24]
 8004550:	2b1b      	cmp	r3, #27
 8004552:	d804      	bhi.n	800455e <bufferBlockPushBytes+0x18e>
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	b29b      	uxth	r3, r3
 8004558:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800455a:	429a      	cmp	r2, r3
 800455c:	d3e8      	bcc.n	8004530 <bufferBlockPushBytes+0x160>
        }

        if (data_index < data_len)
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	b29b      	uxth	r3, r3
 8004562:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004564:	429a      	cmp	r2, r3
 8004566:	d211      	bcs.n	800458c <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 f82d 	bl	80045c8 <createBufferBlock>
 800456e:	4602      	mov	r2, r0
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <bufferBlockPushBytes+0x1b2>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 800457c:	f06f 0302 	mvn.w	r3, #2
 8004580:	e01c      	b.n	80045bc <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 8004588:	2300      	movs	r3, #0
 800458a:	847b      	strh	r3, [r7, #34]	@ 0x22
    while (data_index < data_len)
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	b29b      	uxth	r3, r3
 8004590:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8004592:	429a      	cmp	r2, r3
 8004594:	d3c9      	bcc.n	800452a <bufferBlockPushBytes+0x15a>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	8adb      	ldrh	r3, [r3, #22]
 800459a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800459e:	b29b      	uxth	r3, r3
 80045a0:	461a      	mov	r2, r3
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ae:	b299      	uxth	r1, r3
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	8ad3      	ldrh	r3, [r2, #22]
 80045b4:	f361 0309 	bfi	r3, r1, #0, #10
 80045b8:	82d3      	strh	r3, [r2, #22]

    return 1;
 80045ba:	2301      	movs	r3, #1
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3728      	adds	r7, #40	@ 0x28
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	24924925 	.word	0x24924925

080045c8 <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fa6d 	bl	8004ab0 <allocateBlock>
 80045d6:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <createBufferBlock+0x1a>
    {
        return NULL;
 80045de:	2300      	movs	r3, #0
 80045e0:	e003      	b.n	80045ea <createBufferBlock+0x22>
    }
    block->next = NULL;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	601a      	str	r2, [r3, #0]
    return block;
 80045e8:	68fb      	ldr	r3, [r7, #12]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b089      	sub	sp, #36	@ 0x24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	60f8      	str	r0, [r7, #12]
 80045fa:	60b9      	str	r1, [r7, #8]
 80045fc:	607a      	str	r2, [r7, #4]
 80045fe:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	08db      	lsrs	r3, r3, #3
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4413      	add	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 800460a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460c:	08db      	lsrs	r3, r3, #3
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	4413      	add	r3, r2
 8004612:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4413      	add	r3, r2
 800462a:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 800462c:	e04d      	b.n	80046ca <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	b2db      	uxtb	r3, r3
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8004638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8004642:	7eba      	ldrb	r2, [r7, #26]
 8004644:	7efb      	ldrb	r3, [r7, #27]
 8004646:	4293      	cmp	r3, r2
 8004648:	bf38      	it	cc
 800464a:	4613      	movcc	r3, r2
 800464c:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 800464e:	7e7b      	ldrb	r3, [r7, #25]
 8004650:	f1c3 0208 	rsb	r2, r3, #8
 8004654:	69f9      	ldr	r1, [r7, #28]
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	1acb      	subs	r3, r1, r3
 800465a:	4293      	cmp	r3, r2
 800465c:	bf28      	it	cs
 800465e:	4613      	movcs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8004662:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	fa22 f303 	lsr.w	r3, r2, r3
 800466c:	b2db      	uxtb	r3, r3
 800466e:	461a      	mov	r2, r3
 8004670:	7ebb      	ldrb	r3, [r7, #26]
 8004672:	fa42 f303 	asr.w	r3, r2, r3
 8004676:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	08db      	lsrs	r3, r3, #3
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4413      	add	r3, r2
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	7efb      	ldrb	r3, [r7, #27]
 8004686:	409a      	lsls	r2, r3
 8004688:	7ebb      	ldrb	r3, [r7, #26]
 800468a:	fa22 f303 	lsr.w	r3, r2, r3
 800468e:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8004690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004692:	08db      	lsrs	r3, r3, #3
 8004694:	683a      	ldr	r2, [r7, #0]
 8004696:	4413      	add	r3, r2
 8004698:	781a      	ldrb	r2, [r3, #0]
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	43db      	mvns	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	4013      	ands	r3, r2
 80046a2:	b2d9      	uxtb	r1, r3
 80046a4:	7cba      	ldrb	r2, [r7, #18]
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	4013      	ands	r3, r2
 80046aa:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 80046ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ae:	08db      	lsrs	r3, r3, #3
 80046b0:	6838      	ldr	r0, [r7, #0]
 80046b2:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 80046b4:	430a      	orrs	r2, r1
 80046b6:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 80046b8:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 80046ba:	68ba      	ldr	r2, [r7, #8]
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	4413      	add	r3, r2
 80046c0:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 80046c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4413      	add	r3, r2
 80046c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d1ad      	bne.n	800462e <copyBitArray+0x3c>
    }
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	3724      	adds	r7, #36	@ 0x24
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr

080046e0 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b090      	sub	sp, #64	@ 0x40
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8a9b      	ldrh	r3, [r3, #20]
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	461a      	mov	r2, r3
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d301      	bcc.n	8004702 <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 80046fe:	2300      	movs	r3, #0
 8004700:	e0df      	b.n	80048c2 <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 8004702:	79fa      	ldrb	r2, [r7, #7]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4413      	add	r3, r2
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	8a92      	ldrh	r2, [r2, #20]
 800470c:	00d2      	lsls	r2, r2, #3
 800470e:	4293      	cmp	r3, r2
 8004710:	d908      	bls.n	8004724 <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8a9b      	ldrh	r3, [r3, #20]
 8004716:	b2db      	uxtb	r3, r3
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	b2da      	uxtb	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d104      	bne.n	8004736 <descatterTransferPayload+0x56>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 80b9 	beq.w	80048a8 <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t output_bit_offset = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        uint8_t remaining_bit_length = bit_length;
 8004740:	79fb      	ldrb	r3, [r7, #7]
 8004742:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8004746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004748:	2b27      	cmp	r3, #39	@ 0x27
 800474a:	d82d      	bhi.n	80047a8 <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 800474c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8004750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004752:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8004756:	429a      	cmp	r2, r3
 8004758:	d305      	bcc.n	8004766 <descatterTransferPayload+0x86>
 800475a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800475c:	b2db      	uxtb	r3, r3
 800475e:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8004762:	b2db      	uxtb	r3, r3
 8004764:	e001      	b.n	800476a <descatterTransferPayload+0x8a>
 8004766:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6898      	ldr	r0, [r3, #8]
 8004772:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8004776:	2300      	movs	r3, #0
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800477e:	f7ff ff38 	bl	80045f2 <copyBitArray>

            input_bit_offset += amount;
 8004782:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004786:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004788:	4413      	add	r3, r2
 800478a:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 800478c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8004790:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004794:	4413      	add	r3, r2
 8004796:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 800479a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800479e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8a9b      	ldrh	r3, [r3, #20]
 80047ac:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80047b0:	3b05      	subs	r3, #5
 80047b2:	00db      	lsls	r3, r3, #3
 80047b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 80047b6:	2328      	movs	r3, #40	@ 0x28
 80047b8:	62bb      	str	r3, [r7, #40]	@ 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 80047c0:	e044      	b.n	800484c <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 80047c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c4:	2be0      	cmp	r3, #224	@ 0xe0
 80047c6:	bf28      	it	cs
 80047c8:	23e0      	movcs	r3, #224	@ 0xe0
 80047ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047cc:	4413      	add	r3, r2
 80047ce:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d92e      	bls.n	8004836 <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 80047d8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80047dc:	69f9      	ldr	r1, [r7, #28]
 80047de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047e0:	1acb      	subs	r3, r1, r3
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d306      	bcc.n	80047f4 <descatterTransferPayload+0x114>
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e001      	b.n	80047f8 <descatterTransferPayload+0x118>
 80047f4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80047f8:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 80047fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	1d18      	adds	r0, r3, #4
 8004806:	7efa      	ldrb	r2, [r7, #27]
 8004808:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6979      	ldr	r1, [r7, #20]
 8004812:	f7ff feee 	bl	80045f2 <copyBitArray>

                input_bit_offset += amount;
 8004816:	7efb      	ldrb	r3, [r7, #27]
 8004818:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800481a:	4413      	add	r3, r2
 800481c:	637b      	str	r3, [r7, #52]	@ 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 800481e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8004822:	7efb      	ldrb	r3, [r7, #27]
 8004824:	4413      	add	r3, r2
 8004826:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 800482a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800482e:	7efb      	ldrb	r3, [r7, #27]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8004836:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800483e:	4413      	add	r3, r2
 8004840:	62fb      	str	r3, [r7, #44]	@ 0x2c
            block_bit_offset = block_end_bit_offset;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	62bb      	str	r3, [r7, #40]	@ 0x28
            block = block->next;
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 800484c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <descatterTransferPayload+0x17a>
 8004852:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1b3      	bne.n	80047c2 <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02c      	beq.n	80048bc <descatterTransferPayload+0x1dc>
 8004862:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004866:	2b00      	cmp	r3, #0
 8004868:	d028      	beq.n	80048bc <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 800486a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800486c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6918      	ldr	r0, [r3, #16]
 8004876:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800487a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	6939      	ldr	r1, [r7, #16]
 8004884:	f7ff feb5 	bl	80045f2 <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 8004888:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800488c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800488e:	4413      	add	r3, r2
 8004890:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8004892:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8004896:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800489a:	4413      	add	r3, r2
 800489c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = 0;
 80048a0:	2300      	movs	r3, #0
 80048a2:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    {
 80048a6:	e009      	b.n	80048bc <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6898      	ldr	r0, [r3, #8]
 80048ac:	79fa      	ldrb	r2, [r7, #7]
 80048ae:	2300      	movs	r3, #0
 80048b0:	9300      	str	r3, [sp, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68b9      	ldr	r1, [r7, #8]
 80048b6:	f7ff fe9c 	bl	80045f2 <copyBitArray>
 80048ba:	e000      	b.n	80048be <descatterTransferPayload+0x1de>
    {
 80048bc:	bf00      	nop
    }

    return bit_length;
 80048be:	79fb      	ldrb	r3, [r7, #7]
 80048c0:	b21b      	sxth	r3, r3
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3738      	adds	r7, #56	@ 0x38
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 80048d0:	2301      	movs	r3, #1
 80048d2:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 80048d4:	797b      	ldrb	r3, [r7, #5]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	bf0c      	ite	eq
 80048da:	2301      	moveq	r3, #1
 80048dc:	2300      	movne	r3, #0
 80048de:	b2db      	uxtb	r3, r3
#endif
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3b01      	subs	r3, #1
 8004902:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 8004904:	e017      	b.n	8004936 <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	4413      	add	r3, r2
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 8004910:	68fa      	ldr	r2, [r7, #12]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	441a      	add	r2, r3
 8004916:	68f9      	ldr	r1, [r7, #12]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	440b      	add	r3, r1
 800491c:	7812      	ldrb	r2, [r2, #0]
 800491e:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4413      	add	r3, r2
 8004926:	7afa      	ldrb	r2, [r7, #11]
 8004928:	701a      	strb	r2, [r3, #0]
        fwd++;
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	3301      	adds	r3, #1
 800492e:	617b      	str	r3, [r7, #20]
        rev--;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	3b01      	subs	r3, #1
 8004934:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	429a      	cmp	r2, r3
 800493c:	d3e3      	bcc.n	8004906 <swapByteOrder+0x1a>
    }
}
 800493e:	bf00      	nop
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	460a      	mov	r2, r1
 8004956:	80fb      	strh	r3, [r7, #6]
 8004958:	4613      	mov	r3, r2
 800495a:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 800495c:	797b      	ldrb	r3, [r7, #5]
 800495e:	b29b      	uxth	r3, r3
 8004960:	021b      	lsls	r3, r3, #8
 8004962:	b29a      	uxth	r2, r3
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	4053      	eors	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 800496a:	2300      	movs	r3, #0
 800496c:	73fb      	strb	r3, [r7, #15]
 800496e:	e012      	b.n	8004996 <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 8004970:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004974:	2b00      	cmp	r3, #0
 8004976:	da08      	bge.n	800498a <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	b29b      	uxth	r3, r3
 800497e:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8004982:	f083 0301 	eor.w	r3, r3, #1
 8004986:	80fb      	strh	r3, [r7, #6]
 8004988:	e002      	b.n	8004990 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 800498a:	88fb      	ldrh	r3, [r7, #6]
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	3301      	adds	r3, #1
 8004994:	73fb      	strb	r3, [r7, #15]
 8004996:	7bfb      	ldrb	r3, [r7, #15]
 8004998:	2b07      	cmp	r3, #7
 800499a:	d9e9      	bls.n	8004970 <crcAddByte+0x24>
        }
    }
    return crc_val;
 800499c:	88fb      	ldrh	r3, [r7, #6]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 80049aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ac:	b087      	sub	sp, #28
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	4601      	mov	r1, r0
 80049b2:	e9c7 2300 	strd	r2, r3, [r7]
 80049b6:	460b      	mov	r3, r1
 80049b8:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80049ba:	2300      	movs	r3, #0
 80049bc:	82fb      	strh	r3, [r7, #22]
 80049be:	e01b      	b.n	80049f8 <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 80049c0:	8af9      	ldrh	r1, [r7, #22]
 80049c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049c6:	f1c1 0620 	rsb	r6, r1, #32
 80049ca:	f1a1 0020 	sub.w	r0, r1, #32
 80049ce:	fa22 f401 	lsr.w	r4, r2, r1
 80049d2:	fa03 f606 	lsl.w	r6, r3, r6
 80049d6:	4334      	orrs	r4, r6
 80049d8:	fa23 f000 	lsr.w	r0, r3, r0
 80049dc:	4304      	orrs	r4, r0
 80049de:	fa23 f501 	lsr.w	r5, r3, r1
 80049e2:	b2e2      	uxtb	r2, r4
 80049e4:	89fb      	ldrh	r3, [r7, #14]
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff ffaf 	bl	800494c <crcAddByte>
 80049ee:	4603      	mov	r3, r0
 80049f0:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80049f2:	8afb      	ldrh	r3, [r7, #22]
 80049f4:	3308      	adds	r3, #8
 80049f6:	82fb      	strh	r3, [r7, #22]
 80049f8:	8afb      	ldrh	r3, [r7, #22]
 80049fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80049fc:	d9e0      	bls.n	80049c0 <crcAddSignature+0x16>
    }
    return crc_val;
 80049fe:	89fb      	ldrh	r3, [r7, #14]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a08 <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
 8004a14:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8004a16:	e00a      	b.n	8004a2e <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	1c5a      	adds	r2, r3, #1
 8004a1c:	60ba      	str	r2, [r7, #8]
 8004a1e:	781a      	ldrb	r2, [r3, #0]
 8004a20:	89fb      	ldrh	r3, [r7, #14]
 8004a22:	4611      	mov	r1, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff ff91 	bl	800494c <crcAddByte>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	81fb      	strh	r3, [r7, #14]
    while (len--)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	1e5a      	subs	r2, r3, #1
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1ef      	bne.n	8004a18 <crcAdd+0x10>
    }
    return crc_val;
 8004a38:	89fb      	ldrh	r3, [r7, #14]
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b089      	sub	sp, #36	@ 0x24
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3304      	adds	r3, #4
 8004a62:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 8004a64:	e00b      	b.n	8004a7e <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	015b      	lsls	r3, r3, #5
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	441a      	add	r2, r3
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	61bb      	str	r3, [r7, #24]
        current_index++;
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 8004a7e:	88fb      	ldrh	r3, [r7, #6]
 8004a80:	69fa      	ldr	r2, [r7, #28]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d3ef      	bcc.n	8004a66 <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	88fa      	ldrh	r2, [r7, #6]
 8004a90:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2200      	movs	r2, #0
 8004a96:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	3724      	adds	r7, #36	@ 0x24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	e018      	b.n	8004af6 <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	895b      	ldrh	r3, [r3, #10]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	899a      	ldrh	r2, [r3, #12]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	895b      	ldrh	r3, [r3, #10]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d203      	bcs.n	8004af4 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	895a      	ldrh	r2, [r3, #10]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 8004af4:	68fb      	ldr	r3, [r7, #12]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 8004b02:	b480      	push	{r7}
 8004b04:	b085      	sub	sp, #20
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	895b      	ldrh	r3, [r3, #10]
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <_hyp_msg_BatteryStatus_Hyp_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _hyp_msg_BatteryStatus_Hyp_encode(uint8_t* buffer, uint32_t* bit_ofs, struct hyp_msg_BatteryStatus_Hyp* msg, bool tao);
static inline bool _hyp_msg_BatteryStatus_Hyp_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct hyp_msg_BatteryStatus_Hyp* msg, bool tao);
void _hyp_msg_BatteryStatus_Hyp_encode(uint8_t* buffer, uint32_t* bit_ofs, struct hyp_msg_BatteryStatus_Hyp* msg, bool tao) {
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b086      	sub	sp, #24
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	60f8      	str	r0, [r7, #12]
 8004b3e:	60b9      	str	r1, [r7, #8]
 8004b40:	607a      	str	r2, [r7, #4]
 8004b42:	70fb      	strb	r3, [r7, #3]




    {
        uint16_t float16_val = canardConvertNativeFloatToFloat16(msg->temperature);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	edd3 7a00 	vldr	s15, [r3]
 8004b4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004b4e:	f7ff f801 	bl	8003b54 <canardConvertNativeFloatToFloat16>
 8004b52:	4603      	mov	r3, r0
 8004b54:	823b      	strh	r3, [r7, #16]
        canardEncodeScalar(buffer, *bit_ofs, 16, &float16_val);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6819      	ldr	r1, [r3, #0]
 8004b5a:	f107 0310 	add.w	r3, r7, #16
 8004b5e:	2210      	movs	r2, #16
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7fe ff50 	bl	8003a06 <canardEncodeScalar>
    }

    *bit_ofs += 16;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f103 0210 	add.w	r2, r3, #16
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->voltage);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	6819      	ldr	r1, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	3304      	adds	r3, #4
 8004b7a:	2210      	movs	r2, #16
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f7fe ff42 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 16;
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f103 0210 	add.w	r2, r3, #16
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->current);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	6819      	ldr	r1, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3306      	adds	r3, #6
 8004b96:	2210      	movs	r2, #16
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f7fe ff34 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 16;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f103 0210 	add.w	r2, r3, #16
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->time_to_full);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6819      	ldr	r1, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7fe ff26 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 16;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f103 0210 	add.w	r2, r3, #16
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->time_to_empty);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	6819      	ldr	r1, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	330a      	adds	r3, #10
 8004bce:	2210      	movs	r2, #16
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7fe ff18 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 16;
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f103 0210 	add.w	r2, r3, #16
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->button);
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6819      	ldr	r1, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	330c      	adds	r3, #12
 8004bea:	2208      	movs	r2, #8
 8004bec:	68f8      	ldr	r0, [r7, #12]
 8004bee:	f7fe ff0a 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 8;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f103 0208 	add.w	r2, r3, #8
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->is_charging);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	330d      	adds	r3, #13
 8004c06:	2208      	movs	r2, #8
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f7fe fefc 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 8;
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f103 0208 	add.w	r2, r3, #8
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->adapter_power);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	6819      	ldr	r1, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	330e      	adds	r3, #14
 8004c22:	2208      	movs	r2, #8
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f7fe feee 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 8;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f103 0208 	add.w	r2, r3, #8
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	601a      	str	r2, [r3, #0]



#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    const uint8_t name_len = msg->name.len > 50 ? 50 : msg->name.len;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	7bdb      	ldrb	r3, [r3, #15]
 8004c3a:	2b32      	cmp	r3, #50	@ 0x32
 8004c3c:	bf28      	it	cs
 8004c3e:	2332      	movcs	r3, #50	@ 0x32
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	74fb      	strb	r3, [r7, #19]
#pragma GCC diagnostic pop

    canardEncodeScalar(buffer, *bit_ofs, 6, &name_len);
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	6819      	ldr	r1, [r3, #0]
 8004c48:	f107 0313 	add.w	r3, r7, #19
 8004c4c:	2206      	movs	r2, #6
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f7fe fed9 	bl	8003a06 <canardEncodeScalar>
    *bit_ofs += 6;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	1d9a      	adds	r2, r3, #6
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	601a      	str	r2, [r3, #0]

    for (size_t i=0; i < name_len; i++) {
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e013      	b.n	8004c8c <_hyp_msg_BatteryStatus_Hyp_encode+0x156>




        canardEncodeScalar(buffer, *bit_ofs, 8, &msg->name.data[i]);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	6819      	ldr	r1, [r3, #0]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	4413      	add	r3, r2
 8004c70:	3308      	adds	r3, #8
 8004c72:	2208      	movs	r2, #8
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f7fe fec6 	bl	8003a06 <canardEncodeScalar>

        *bit_ofs += 8;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f103 0208 	add.w	r2, r3, #8
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < name_len; i++) {
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	3301      	adds	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d3e6      	bcc.n	8004c64 <_hyp_msg_BatteryStatus_Hyp_encode+0x12e>





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->state_of_charge_percent);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	6819      	ldr	r1, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	3342      	adds	r3, #66	@ 0x42
 8004c9e:	2208      	movs	r2, #8
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f7fe feb0 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 8;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f103 0208 	add.w	r2, r3, #8
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 8, &msg->full_charge_flag);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6819      	ldr	r1, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3343      	adds	r3, #67	@ 0x43
 8004cba:	2208      	movs	r2, #8
 8004cbc:	68f8      	ldr	r0, [r7, #12]
 8004cbe:	f7fe fea2 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 8;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f103 0208 	add.w	r2, r3, #8
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	601a      	str	r2, [r3, #0]





}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <_hyp_msg_BatteryStatus_Hyp_decode>:

/*
 decode hyp_msg_BatteryStatus_Hyp, return true on failure, false on success
*/
bool _hyp_msg_BatteryStatus_Hyp_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct hyp_msg_BatteryStatus_Hyp* msg, bool tao) {
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b088      	sub	sp, #32
 8004cda:	af02      	add	r7, sp, #8
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
 8004ce2:	70fb      	strb	r3, [r7, #3]



    {
        uint16_t float16_val;
        canardDecodeScalar(transfer, *bit_ofs, 16, true, &float16_val);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	6819      	ldr	r1, [r3, #0]
 8004ce8:	f107 0312 	add.w	r3, r7, #18
 8004cec:	9300      	str	r3, [sp, #0]
 8004cee:	2301      	movs	r3, #1
 8004cf0:	2210      	movs	r2, #16
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f7fe fcfe 	bl	80036f4 <canardDecodeScalar>
        msg->temperature = canardConvertFloat16ToNativeFloat(float16_val);
 8004cf8:	8a7b      	ldrh	r3, [r7, #18]
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f7fe ff80 	bl	8003c00 <canardConvertFloat16ToNativeFloat>
 8004d00:	eef0 7a40 	vmov.f32	s15, s0
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	edc3 7a00 	vstr	s15, [r3]
    }

    *bit_ofs += 16;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f103 0210 	add.w	r2, r3, #16
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->voltage);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	6819      	ldr	r1, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	2300      	movs	r3, #0
 8004d22:	2210      	movs	r2, #16
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7fe fce5 	bl	80036f4 <canardDecodeScalar>

    *bit_ofs += 16;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f103 0210 	add.w	r2, r3, #16
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, true, &msg->current);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6819      	ldr	r1, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	3306      	adds	r3, #6
 8004d3e:	9300      	str	r3, [sp, #0]
 8004d40:	2301      	movs	r3, #1
 8004d42:	2210      	movs	r2, #16
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f7fe fcd5 	bl	80036f4 <canardDecodeScalar>

    *bit_ofs += 16;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f103 0210 	add.w	r2, r3, #16
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->time_to_full);
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	6819      	ldr	r1, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	9300      	str	r3, [sp, #0]
 8004d60:	2300      	movs	r3, #0
 8004d62:	2210      	movs	r2, #16
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f7fe fcc5 	bl	80036f4 <canardDecodeScalar>

    *bit_ofs += 16;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f103 0210 	add.w	r2, r3, #16
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 16, false, &msg->time_to_empty);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6819      	ldr	r1, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	330a      	adds	r3, #10
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	2300      	movs	r3, #0
 8004d82:	2210      	movs	r2, #16
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f7fe fcb5 	bl	80036f4 <canardDecodeScalar>

    *bit_ofs += 16;
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f103 0210 	add.w	r2, r3, #16
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->button);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	6819      	ldr	r1, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	2300      	movs	r3, #0
 8004da2:	2208      	movs	r2, #8
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7fe fca5 	bl	80036f4 <canardDecodeScalar>

    *bit_ofs += 8;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f103 0208 	add.w	r2, r3, #8
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->is_charging);
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6819      	ldr	r1, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	330d      	adds	r3, #13
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	68f8      	ldr	r0, [r7, #12]
 8004dc6:	f7fe fc95 	bl	80036f4 <canardDecodeScalar>

    *bit_ofs += 8;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f103 0208 	add.w	r2, r3, #8
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->adapter_power);
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	6819      	ldr	r1, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	330e      	adds	r3, #14
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	2300      	movs	r3, #0
 8004de2:	2208      	movs	r2, #8
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f7fe fc85 	bl	80036f4 <canardDecodeScalar>

    *bit_ofs += 8;
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f103 0208 	add.w	r2, r3, #8
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 6, false, &msg->name.len);
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6819      	ldr	r1, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	330f      	adds	r3, #15
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	2300      	movs	r3, #0
 8004e02:	2206      	movs	r2, #6
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7fe fc75 	bl	80036f4 <canardDecodeScalar>
    *bit_ofs += 6;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	1d9a      	adds	r2, r3, #6
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	601a      	str	r2, [r3, #0]


#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wtype-limits"
    if (msg->name.len > 50) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	7bdb      	ldrb	r3, [r3, #15]
 8004e18:	2b32      	cmp	r3, #50	@ 0x32
 8004e1a:	d901      	bls.n	8004e20 <_hyp_msg_BatteryStatus_Hyp_decode+0x14a>
        return true; /* invalid value */
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e03f      	b.n	8004ea0 <_hyp_msg_BatteryStatus_Hyp_decode+0x1ca>
    }
#pragma GCC diagnostic pop
    for (size_t i=0; i < msg->name.len; i++) {
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
 8004e24:	e015      	b.n	8004e52 <_hyp_msg_BatteryStatus_Hyp_decode+0x17c>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->name.data[i]);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	3308      	adds	r3, #8
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4413      	add	r3, r2
 8004e32:	3308      	adds	r3, #8
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	2300      	movs	r3, #0
 8004e38:	2208      	movs	r2, #8
 8004e3a:	68f8      	ldr	r0, [r7, #12]
 8004e3c:	f7fe fc5a 	bl	80036f4 <canardDecodeScalar>

        *bit_ofs += 8;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f103 0208 	add.w	r2, r3, #8
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < msg->name.len; i++) {
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	7bdb      	ldrb	r3, [r3, #15]
 8004e56:	461a      	mov	r2, r3
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d3e3      	bcc.n	8004e26 <_hyp_msg_BatteryStatus_Hyp_decode+0x150>





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->state_of_charge_percent);
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	6819      	ldr	r1, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3342      	adds	r3, #66	@ 0x42
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	2300      	movs	r3, #0
 8004e6a:	2208      	movs	r2, #8
 8004e6c:	68f8      	ldr	r0, [r7, #12]
 8004e6e:	f7fe fc41 	bl	80036f4 <canardDecodeScalar>

    *bit_ofs += 8;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f103 0208 	add.w	r2, r3, #8
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	601a      	str	r2, [r3, #0]





    canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->full_charge_flag);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	6819      	ldr	r1, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3343      	adds	r3, #67	@ 0x43
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	2300      	movs	r3, #0
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7fe fc31 	bl	80036f4 <canardDecodeScalar>

    *bit_ofs += 8;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f103 0208 	add.w	r2, r3, #8
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	601a      	str	r2, [r3, #0]





    return false; /* success */
 8004e9e:	2300      	movs	r3, #0

}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <hyp_msg_BatteryStatus_Hyp_encode>:

uint32_t hyp_msg_BatteryStatus_Hyp_encode(struct hyp_msg_BatteryStatus_Hyp* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, HYP_MSG_BATTERYSTATUS_HYP_MAX_SIZE);
 8004eb6:	2242      	movs	r2, #66	@ 0x42
 8004eb8:	2100      	movs	r1, #0
 8004eba:	6838      	ldr	r0, [r7, #0]
 8004ebc:	f000 f899 	bl	8004ff2 <memset>
    _hyp_msg_BatteryStatus_Hyp_encode(buffer, &bit_ofs, msg, 
 8004ec0:	f107 010c 	add.w	r1, r7, #12
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6838      	ldr	r0, [r7, #0]
 8004eca:	f7ff fe34 	bl	8004b36 <_hyp_msg_BatteryStatus_Hyp_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	3307      	adds	r3, #7
 8004ed2:	08db      	lsrs	r3, r3, #3
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <hyp_msg_BatteryStatus_Hyp_decode>:

/*
  return true if the decode is invalid
 */
bool hyp_msg_BatteryStatus_Hyp_decode(const CanardRxTransfer* transfer, struct hyp_msg_BatteryStatus_Hyp* msg) {
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > HYP_MSG_BATTERYSTATUS_HYP_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	60bb      	str	r3, [r7, #8]
    if (_hyp_msg_BatteryStatus_Hyp_decode(transfer, &bit_ofs, msg,
 8004eea:	f107 0108 	add.w	r1, r7, #8
 8004eee:	2301      	movs	r3, #1
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff feef 	bl	8004cd6 <_hyp_msg_BatteryStatus_Hyp_decode>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <hyp_msg_BatteryStatus_Hyp_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8004efe:	2301      	movs	r3, #1
 8004f00:	e00c      	b.n	8004f1c <hyp_msg_BatteryStatus_Hyp_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	3307      	adds	r3, #7
 8004f06:	08db      	lsrs	r3, r3, #3
 8004f08:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	8a9b      	ldrh	r3, [r3, #20]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	4293      	cmp	r3, r2
 8004f14:	bf14      	ite	ne
 8004f16:	2301      	movne	r3, #1
 8004f18:	2300      	moveq	r3, #0
 8004f1a:	b2db      	uxtb	r3, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <_hyp_msg_HeartBeat_Hyp_encode>:

#if defined(CANARD_DSDLC_INTERNAL)

static inline void _hyp_msg_HeartBeat_Hyp_encode(uint8_t* buffer, uint32_t* bit_ofs, struct hyp_msg_HeartBeat_Hyp* msg, bool tao);
static inline bool _hyp_msg_HeartBeat_Hyp_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct hyp_msg_HeartBeat_Hyp* msg, bool tao);
void _hyp_msg_HeartBeat_Hyp_encode(uint8_t* buffer, uint32_t* bit_ofs, struct hyp_msg_HeartBeat_Hyp* msg, bool tao) {
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	70fb      	strb	r3, [r7, #3]





    canardEncodeScalar(buffer, *bit_ofs, 32, &msg->uptime_sec);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	6819      	ldr	r1, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f7fe fd63 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 32;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f103 0220 	add.w	r2, r3, #32
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 2, &msg->health);
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	6819      	ldr	r1, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	3304      	adds	r3, #4
 8004f54:	2202      	movs	r2, #2
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7fe fd55 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 2;
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	1c9a      	adds	r2, r3, #2
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->mode);
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6819      	ldr	r1, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3305      	adds	r3, #5
 8004f6e:	2203      	movs	r2, #3
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f7fe fd48 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 3;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	1cda      	adds	r2, r3, #3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 3, &msg->sub_mode);
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	6819      	ldr	r1, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3306      	adds	r3, #6
 8004f88:	2203      	movs	r2, #3
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f7fe fd3b 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 3;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	1cda      	adds	r2, r3, #3
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	601a      	str	r2, [r3, #0]





    canardEncodeScalar(buffer, *bit_ofs, 16, &msg->vendor_specific_status_code);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	6819      	ldr	r1, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3308      	adds	r3, #8
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f7fe fd2e 	bl	8003a06 <canardEncodeScalar>

    *bit_ofs += 16;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f103 0210 	add.w	r2, r3, #16
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	601a      	str	r2, [r3, #0]





}
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <hyp_msg_HeartBeat_Hyp_encode>:

uint32_t hyp_msg_HeartBeat_Hyp_encode(struct hyp_msg_HeartBeat_Hyp* msg, uint8_t* buffer
#if CANARD_ENABLE_TAO_OPTION
    , bool tao
#endif
) {
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b084      	sub	sp, #16
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
 8004fc6:	6039      	str	r1, [r7, #0]
    uint32_t bit_ofs = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60fb      	str	r3, [r7, #12]
    memset(buffer, 0, HYP_MSG_HEARTBEAT_HYP_MAX_SIZE);
 8004fcc:	2207      	movs	r2, #7
 8004fce:	2100      	movs	r1, #0
 8004fd0:	6838      	ldr	r0, [r7, #0]
 8004fd2:	f000 f80e 	bl	8004ff2 <memset>
    _hyp_msg_HeartBeat_Hyp_encode(buffer, &bit_ofs, msg, 
 8004fd6:	f107 010c 	add.w	r1, r7, #12
 8004fda:	2301      	movs	r3, #1
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	6838      	ldr	r0, [r7, #0]
 8004fe0:	f7ff ffa0 	bl	8004f24 <_hyp_msg_HeartBeat_Hyp_encode>
    tao
#else
    true
#endif
    );
    return ((bit_ofs+7)/8);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3307      	adds	r3, #7
 8004fe8:	08db      	lsrs	r3, r3, #3
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3710      	adds	r7, #16
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}

08004ff2 <memset>:
 8004ff2:	4402      	add	r2, r0
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d100      	bne.n	8004ffc <memset+0xa>
 8004ffa:	4770      	bx	lr
 8004ffc:	f803 1b01 	strb.w	r1, [r3], #1
 8005000:	e7f9      	b.n	8004ff6 <memset+0x4>
	...

08005004 <__libc_init_array>:
 8005004:	b570      	push	{r4, r5, r6, lr}
 8005006:	4d0d      	ldr	r5, [pc, #52]	@ (800503c <__libc_init_array+0x38>)
 8005008:	4c0d      	ldr	r4, [pc, #52]	@ (8005040 <__libc_init_array+0x3c>)
 800500a:	1b64      	subs	r4, r4, r5
 800500c:	10a4      	asrs	r4, r4, #2
 800500e:	2600      	movs	r6, #0
 8005010:	42a6      	cmp	r6, r4
 8005012:	d109      	bne.n	8005028 <__libc_init_array+0x24>
 8005014:	4d0b      	ldr	r5, [pc, #44]	@ (8005044 <__libc_init_array+0x40>)
 8005016:	4c0c      	ldr	r4, [pc, #48]	@ (8005048 <__libc_init_array+0x44>)
 8005018:	f000 f826 	bl	8005068 <_init>
 800501c:	1b64      	subs	r4, r4, r5
 800501e:	10a4      	asrs	r4, r4, #2
 8005020:	2600      	movs	r6, #0
 8005022:	42a6      	cmp	r6, r4
 8005024:	d105      	bne.n	8005032 <__libc_init_array+0x2e>
 8005026:	bd70      	pop	{r4, r5, r6, pc}
 8005028:	f855 3b04 	ldr.w	r3, [r5], #4
 800502c:	4798      	blx	r3
 800502e:	3601      	adds	r6, #1
 8005030:	e7ee      	b.n	8005010 <__libc_init_array+0xc>
 8005032:	f855 3b04 	ldr.w	r3, [r5], #4
 8005036:	4798      	blx	r3
 8005038:	3601      	adds	r6, #1
 800503a:	e7f2      	b.n	8005022 <__libc_init_array+0x1e>
 800503c:	080050b8 	.word	0x080050b8
 8005040:	080050b8 	.word	0x080050b8
 8005044:	080050b8 	.word	0x080050b8
 8005048:	080050bc 	.word	0x080050bc

0800504c <memcpy>:
 800504c:	440a      	add	r2, r1
 800504e:	4291      	cmp	r1, r2
 8005050:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005054:	d100      	bne.n	8005058 <memcpy+0xc>
 8005056:	4770      	bx	lr
 8005058:	b510      	push	{r4, lr}
 800505a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800505e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005062:	4291      	cmp	r1, r2
 8005064:	d1f9      	bne.n	800505a <memcpy+0xe>
 8005066:	bd10      	pop	{r4, pc}

08005068 <_init>:
 8005068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506a:	bf00      	nop
 800506c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800506e:	bc08      	pop	{r3}
 8005070:	469e      	mov	lr, r3
 8005072:	4770      	bx	lr

08005074 <_fini>:
 8005074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005076:	bf00      	nop
 8005078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507a:	bc08      	pop	{r3}
 800507c:	469e      	mov	lr, r3
 800507e:	4770      	bx	lr
