
AES_recv_batt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cd8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08004eb0  08004eb0  00005eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050fc  080050fc  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080050fc  080050fc  0000700c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080050fc  080050fc  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050fc  080050fc  000060fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005100  08005100  00006100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005104  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009bc  2000000c  08005110  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c8  08005110  000079c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bae8  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002196  00000000  00000000  00012b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00014cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a1  00000000  00000000  00015848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002520b  00000000  00000000  000160e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd69  00000000  00000000  0003b2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9ba2  00000000  00000000  0004705d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130bff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f20  00000000  00000000  00130c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00133b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004e98 	.word	0x08004e98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08004e98 	.word	0x08004e98

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 f9e1 	bl	80005e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f80c 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f89a 	bl	800035c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000228:	f000 f852 	bl	80002d0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  fdcan_init(&hfdcan1);
 800022c:	4802      	ldr	r0, [pc, #8]	@ (8000238 <main+0x20>)
 800022e:	f002 fcf1 	bl	8002c14 <fdcan_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fdcan_handle();
 8000232:	f002 fd29 	bl	8002c88 <fdcan_handle>
 8000236:	e7fc      	b.n	8000232 <main+0x1a>
 8000238:	20000028 	.word	0x20000028

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b094      	sub	sp, #80	@ 0x50
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	2238      	movs	r2, #56	@ 0x38
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f004 fde9 	bl	8004e22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	1d3b      	adds	r3, r7, #4
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]
 8000256:	605a      	str	r2, [r3, #4]
 8000258:	609a      	str	r2, [r3, #8]
 800025a:	60da      	str	r2, [r3, #12]
 800025c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800025e:	2000      	movs	r0, #0
 8000260:	f001 fb54 	bl	800190c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000264:	2301      	movs	r3, #1
 8000266:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000268:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800026c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026e:	2302      	movs	r3, #2
 8000270:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000272:	2303      	movs	r3, #3
 8000274:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000276:	2302      	movs	r3, #2
 8000278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 28;
 800027a:	231c      	movs	r3, #28
 800027c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800027e:	2302      	movs	r3, #2
 8000280:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000282:	2302      	movs	r3, #2
 8000284:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000286:	2302      	movs	r3, #2
 8000288:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800028a:	f107 0318 	add.w	r3, r7, #24
 800028e:	4618      	mov	r0, r3
 8000290:	f001 fbf0 	bl	8001a74 <HAL_RCC_OscConfig>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800029a:	f000 f88f 	bl	80003bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029e:	230f      	movs	r3, #15
 80002a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a2:	2303      	movs	r3, #3
 80002a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ae:	2300      	movs	r3, #0
 80002b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	2104      	movs	r1, #4
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 feee 	bl	8002098 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002c2:	f000 f87b 	bl	80003bc <Error_Handler>
  }
}
 80002c6:	bf00      	nop
 80002c8:	3750      	adds	r7, #80	@ 0x50
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
	...

080002d0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80002d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002d6:	4a20      	ldr	r2, [pc, #128]	@ (8000358 <MX_FDCAN1_Init+0x88>)
 80002d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80002da:	4b1e      	ldr	r3, [pc, #120]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002dc:	2200      	movs	r2, #0
 80002de:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80002e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80002e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80002ec:	4b19      	ldr	r3, [pc, #100]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80002f2:	4b18      	ldr	r3, [pc, #96]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80002f8:	4b16      	ldr	r3, [pc, #88]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 12;
 80002fe:	4b15      	ldr	r3, [pc, #84]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000300:	220c      	movs	r2, #12
 8000302:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000304:	4b13      	ldr	r3, [pc, #76]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000306:	2201      	movs	r2, #1
 8000308:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 800030a:	4b12      	ldr	r3, [pc, #72]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 800030c:	220c      	movs	r2, #12
 800030e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8000310:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000312:	2201      	movs	r2, #1
 8000314:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000316:	4b0f      	ldr	r3, [pc, #60]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000318:	2201      	movs	r2, #1
 800031a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800031c:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 800031e:	2201      	movs	r2, #1
 8000320:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000322:	4b0c      	ldr	r3, [pc, #48]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000324:	2201      	movs	r2, #1
 8000326:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000328:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 800032a:	2201      	movs	r2, #1
 800032c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800032e:	4b09      	ldr	r3, [pc, #36]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000330:	2201      	movs	r2, #1
 8000332:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 1;
 8000334:	4b07      	ldr	r3, [pc, #28]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000336:	2201      	movs	r2, #1
 8000338:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800033a:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 800033c:	2200      	movs	r2, #0
 800033e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000340:	4804      	ldr	r0, [pc, #16]	@ (8000354 <MX_FDCAN1_Init+0x84>)
 8000342:	f000 facf 	bl	80008e4 <HAL_FDCAN_Init>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800034c:	f000 f836 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000350:	bf00      	nop
 8000352:	bd80      	pop	{r7, pc}
 8000354:	20000028 	.word	0x20000028
 8000358:	40006400 	.word	0x40006400

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b480      	push	{r7}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000362:	4b15      	ldr	r3, [pc, #84]	@ (80003b8 <MX_GPIO_Init+0x5c>)
 8000364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000366:	4a14      	ldr	r2, [pc, #80]	@ (80003b8 <MX_GPIO_Init+0x5c>)
 8000368:	f043 0320 	orr.w	r3, r3, #32
 800036c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800036e:	4b12      	ldr	r3, [pc, #72]	@ (80003b8 <MX_GPIO_Init+0x5c>)
 8000370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000372:	f003 0320 	and.w	r3, r3, #32
 8000376:	60fb      	str	r3, [r7, #12]
 8000378:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b0f      	ldr	r3, [pc, #60]	@ (80003b8 <MX_GPIO_Init+0x5c>)
 800037c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800037e:	4a0e      	ldr	r2, [pc, #56]	@ (80003b8 <MX_GPIO_Init+0x5c>)
 8000380:	f043 0301 	orr.w	r3, r3, #1
 8000384:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000386:	4b0c      	ldr	r3, [pc, #48]	@ (80003b8 <MX_GPIO_Init+0x5c>)
 8000388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800038a:	f003 0301 	and.w	r3, r3, #1
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <MX_GPIO_Init+0x5c>)
 8000394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000396:	4a08      	ldr	r2, [pc, #32]	@ (80003b8 <MX_GPIO_Init+0x5c>)
 8000398:	f043 0302 	orr.w	r3, r3, #2
 800039c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800039e:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_GPIO_Init+0x5c>)
 80003a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003a2:	f003 0302 	and.w	r3, r3, #2
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80003aa:	bf00      	nop
 80003ac:	3714      	adds	r7, #20
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
}
 80003c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c4:	bf00      	nop
 80003c6:	e7fd      	b.n	80003c4 <Error_Handler+0x8>

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ce:	4b0f      	ldr	r3, [pc, #60]	@ (800040c <HAL_MspInit+0x44>)
 80003d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003d2:	4a0e      	ldr	r2, [pc, #56]	@ (800040c <HAL_MspInit+0x44>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80003da:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <HAL_MspInit+0x44>)
 80003dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b09      	ldr	r3, [pc, #36]	@ (800040c <HAL_MspInit+0x44>)
 80003e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003ea:	4a08      	ldr	r2, [pc, #32]	@ (800040c <HAL_MspInit+0x44>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80003f2:	4b06      	ldr	r3, [pc, #24]	@ (800040c <HAL_MspInit+0x44>)
 80003f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003fa:	603b      	str	r3, [r7, #0]
 80003fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80003fe:	f001 fb29 	bl	8001a54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40021000 	.word	0x40021000

08000410 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b09e      	sub	sp, #120	@ 0x78
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000418:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	609a      	str	r2, [r3, #8]
 8000424:	60da      	str	r2, [r3, #12]
 8000426:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	2254      	movs	r2, #84	@ 0x54
 800042e:	2100      	movs	r1, #0
 8000430:	4618      	mov	r0, r3
 8000432:	f004 fcf6 	bl	8004e22 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a2c      	ldr	r2, [pc, #176]	@ (80004ec <HAL_FDCAN_MspInit+0xdc>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d151      	bne.n	80004e4 <HAL_FDCAN_MspInit+0xd4>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000440:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000444:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000446:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800044a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4618      	mov	r0, r3
 8000452:	f002 f805 	bl	8002460 <HAL_RCCEx_PeriphCLKConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800045c:	f7ff ffae 	bl	80003bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000460:	4b23      	ldr	r3, [pc, #140]	@ (80004f0 <HAL_FDCAN_MspInit+0xe0>)
 8000462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000464:	4a22      	ldr	r2, [pc, #136]	@ (80004f0 <HAL_FDCAN_MspInit+0xe0>)
 8000466:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800046a:	6593      	str	r3, [r2, #88]	@ 0x58
 800046c:	4b20      	ldr	r3, [pc, #128]	@ (80004f0 <HAL_FDCAN_MspInit+0xe0>)
 800046e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000474:	60fb      	str	r3, [r7, #12]
 8000476:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000478:	4b1d      	ldr	r3, [pc, #116]	@ (80004f0 <HAL_FDCAN_MspInit+0xe0>)
 800047a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800047c:	4a1c      	ldr	r2, [pc, #112]	@ (80004f0 <HAL_FDCAN_MspInit+0xe0>)
 800047e:	f043 0302 	orr.w	r3, r3, #2
 8000482:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000484:	4b1a      	ldr	r3, [pc, #104]	@ (80004f0 <HAL_FDCAN_MspInit+0xe0>)
 8000486:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000488:	f003 0302 	and.w	r3, r3, #2
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000490:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000494:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000496:	2302      	movs	r3, #2
 8000498:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800049a:	2301      	movs	r3, #1
 800049c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049e:	2300      	movs	r3, #0
 80004a0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80004a2:	2309      	movs	r3, #9
 80004a4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004a6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80004aa:	4619      	mov	r1, r3
 80004ac:	4811      	ldr	r0, [pc, #68]	@ (80004f4 <HAL_FDCAN_MspInit+0xe4>)
 80004ae:	f001 f8ab 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004b6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b8:	2302      	movs	r3, #2
 80004ba:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004c0:	2300      	movs	r3, #0
 80004c2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80004c4:	2309      	movs	r3, #9
 80004c6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80004cc:	4619      	mov	r1, r3
 80004ce:	4809      	ldr	r0, [pc, #36]	@ (80004f4 <HAL_FDCAN_MspInit+0xe4>)
 80004d0:	f001 f89a 	bl	8001608 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80004d4:	2200      	movs	r2, #0
 80004d6:	2100      	movs	r1, #0
 80004d8:	2015      	movs	r0, #21
 80004da:	f000 f9ce 	bl	800087a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80004de:	2015      	movs	r0, #21
 80004e0:	f000 f9e5 	bl	80008ae <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80004e4:	bf00      	nop
 80004e6:	3778      	adds	r7, #120	@ 0x78
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40006400 	.word	0x40006400
 80004f0:	40021000 	.word	0x40021000
 80004f4:	48000400 	.word	0x48000400

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <NMI_Handler+0x4>

08000500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <HardFault_Handler+0x4>

08000508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <MemManage_Handler+0x4>

08000510 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <BusFault_Handler+0x4>

08000518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <UsageFault_Handler+0x4>

08000520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054e:	f000 f89b 	bl	8000688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800055c:	4802      	ldr	r0, [pc, #8]	@ (8000568 <FDCAN1_IT0_IRQHandler+0x10>)
 800055e:	f000 fdcf 	bl	8001100 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000028 	.word	0x20000028

0800056c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000570:	4b06      	ldr	r3, [pc, #24]	@ (800058c <SystemInit+0x20>)
 8000572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000576:	4a05      	ldr	r2, [pc, #20]	@ (800058c <SystemInit+0x20>)
 8000578:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800057c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <Reset_Handler>:
 8000590:	480d      	ldr	r0, [pc, #52]	@ (80005c8 <LoopForever+0x2>)
 8000592:	4685      	mov	sp, r0
 8000594:	f7ff ffea 	bl	800056c <SystemInit>
 8000598:	480c      	ldr	r0, [pc, #48]	@ (80005cc <LoopForever+0x6>)
 800059a:	490d      	ldr	r1, [pc, #52]	@ (80005d0 <LoopForever+0xa>)
 800059c:	4a0d      	ldr	r2, [pc, #52]	@ (80005d4 <LoopForever+0xe>)
 800059e:	2300      	movs	r3, #0
 80005a0:	e002      	b.n	80005a8 <LoopCopyDataInit>

080005a2 <CopyDataInit>:
 80005a2:	58d4      	ldr	r4, [r2, r3]
 80005a4:	50c4      	str	r4, [r0, r3]
 80005a6:	3304      	adds	r3, #4

080005a8 <LoopCopyDataInit>:
 80005a8:	18c4      	adds	r4, r0, r3
 80005aa:	428c      	cmp	r4, r1
 80005ac:	d3f9      	bcc.n	80005a2 <CopyDataInit>
 80005ae:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <LoopForever+0x12>)
 80005b0:	4c0a      	ldr	r4, [pc, #40]	@ (80005dc <LoopForever+0x16>)
 80005b2:	2300      	movs	r3, #0
 80005b4:	e001      	b.n	80005ba <LoopFillZerobss>

080005b6 <FillZerobss>:
 80005b6:	6013      	str	r3, [r2, #0]
 80005b8:	3204      	adds	r2, #4

080005ba <LoopFillZerobss>:
 80005ba:	42a2      	cmp	r2, r4
 80005bc:	d3fb      	bcc.n	80005b6 <FillZerobss>
 80005be:	f004 fc39 	bl	8004e34 <__libc_init_array>
 80005c2:	f7ff fe29 	bl	8000218 <main>

080005c6 <LoopForever>:
 80005c6:	e7fe      	b.n	80005c6 <LoopForever>
 80005c8:	20020000 	.word	0x20020000
 80005cc:	20000000 	.word	0x20000000
 80005d0:	2000000c 	.word	0x2000000c
 80005d4:	08005104 	.word	0x08005104
 80005d8:	2000000c 	.word	0x2000000c
 80005dc:	200009c8 	.word	0x200009c8

080005e0 <ADC1_2_IRQHandler>:
 80005e0:	e7fe      	b.n	80005e0 <ADC1_2_IRQHandler>

080005e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005e8:	2300      	movs	r3, #0
 80005ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ec:	2003      	movs	r0, #3
 80005ee:	f000 f939 	bl	8000864 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005f2:	200f      	movs	r0, #15
 80005f4:	f000 f80e 	bl	8000614 <HAL_InitTick>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	e001      	b.n	8000608 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000604:	f7ff fee0 	bl	80003c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000608:	79fb      	ldrb	r3, [r7, #7]

}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000620:	4b16      	ldr	r3, [pc, #88]	@ (800067c <HAL_InitTick+0x68>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d022      	beq.n	800066e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000628:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <HAL_InitTick+0x6c>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b13      	ldr	r3, [pc, #76]	@ (800067c <HAL_InitTick+0x68>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000634:	fbb1 f3f3 	udiv	r3, r1, r3
 8000638:	fbb2 f3f3 	udiv	r3, r2, r3
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f944 	bl	80008ca <HAL_SYSTICK_Config>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10f      	bne.n	8000668 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b0f      	cmp	r3, #15
 800064c:	d809      	bhi.n	8000662 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800064e:	2200      	movs	r2, #0
 8000650:	6879      	ldr	r1, [r7, #4]
 8000652:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000656:	f000 f910 	bl	800087a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800065a:	4a0a      	ldr	r2, [pc, #40]	@ (8000684 <HAL_InitTick+0x70>)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	e007      	b.n	8000672 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000662:	2301      	movs	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	e004      	b.n	8000672 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000668:	2301      	movs	r3, #1
 800066a:	73fb      	strb	r3, [r7, #15]
 800066c:	e001      	b.n	8000672 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800066e:	2301      	movs	r3, #1
 8000670:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000672:	7bfb      	ldrb	r3, [r7, #15]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000008 	.word	0x20000008
 8000680:	20000000 	.word	0x20000000
 8000684:	20000004 	.word	0x20000004

08000688 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800068c:	4b05      	ldr	r3, [pc, #20]	@ (80006a4 <HAL_IncTick+0x1c>)
 800068e:	681a      	ldr	r2, [r3, #0]
 8000690:	4b05      	ldr	r3, [pc, #20]	@ (80006a8 <HAL_IncTick+0x20>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4413      	add	r3, r2
 8000696:	4a03      	ldr	r2, [pc, #12]	@ (80006a4 <HAL_IncTick+0x1c>)
 8000698:	6013      	str	r3, [r2, #0]
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	2000008c 	.word	0x2000008c
 80006a8:	20000008 	.word	0x20000008

080006ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  return uwTick;
 80006b0:	4b03      	ldr	r3, [pc, #12]	@ (80006c0 <HAL_GetTick+0x14>)
 80006b2:	681b      	ldr	r3, [r3, #0]
}
 80006b4:	4618      	mov	r0, r3
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	2000008c 	.word	0x2000008c

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	@ (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	@ (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db0b      	blt.n	8000752 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f003 021f 	and.w	r2, r3, #31
 8000740:	4907      	ldr	r1, [pc, #28]	@ (8000760 <__NVIC_EnableIRQ+0x38>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	095b      	lsrs	r3, r3, #5
 8000748:	2001      	movs	r0, #1
 800074a:	fa00 f202 	lsl.w	r2, r0, r2
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	e000e100 	.word	0xe000e100

08000764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	6039      	str	r1, [r7, #0]
 800076e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	db0a      	blt.n	800078e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	b2da      	uxtb	r2, r3
 800077c:	490c      	ldr	r1, [pc, #48]	@ (80007b0 <__NVIC_SetPriority+0x4c>)
 800077e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000782:	0112      	lsls	r2, r2, #4
 8000784:	b2d2      	uxtb	r2, r2
 8000786:	440b      	add	r3, r1
 8000788:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800078c:	e00a      	b.n	80007a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	b2da      	uxtb	r2, r3
 8000792:	4908      	ldr	r1, [pc, #32]	@ (80007b4 <__NVIC_SetPriority+0x50>)
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	f003 030f 	and.w	r3, r3, #15
 800079a:	3b04      	subs	r3, #4
 800079c:	0112      	lsls	r2, r2, #4
 800079e:	b2d2      	uxtb	r2, r2
 80007a0:	440b      	add	r3, r1
 80007a2:	761a      	strb	r2, [r3, #24]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr
 80007b0:	e000e100 	.word	0xe000e100
 80007b4:	e000ed00 	.word	0xe000ed00

080007b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b089      	sub	sp, #36	@ 0x24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f003 0307 	and.w	r3, r3, #7
 80007ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	f1c3 0307 	rsb	r3, r3, #7
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	bf28      	it	cs
 80007d6:	2304      	movcs	r3, #4
 80007d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	3304      	adds	r3, #4
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d902      	bls.n	80007e8 <NVIC_EncodePriority+0x30>
 80007e2:	69fb      	ldr	r3, [r7, #28]
 80007e4:	3b03      	subs	r3, #3
 80007e6:	e000      	b.n	80007ea <NVIC_EncodePriority+0x32>
 80007e8:	2300      	movs	r3, #0
 80007ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	fa02 f303 	lsl.w	r3, r2, r3
 80007f6:	43da      	mvns	r2, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	401a      	ands	r2, r3
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000800:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	fa01 f303 	lsl.w	r3, r1, r3
 800080a:	43d9      	mvns	r1, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000810:	4313      	orrs	r3, r2
         );
}
 8000812:	4618      	mov	r0, r3
 8000814:	3724      	adds	r7, #36	@ 0x24
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
	...

08000820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3b01      	subs	r3, #1
 800082c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000830:	d301      	bcc.n	8000836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000832:	2301      	movs	r3, #1
 8000834:	e00f      	b.n	8000856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000836:	4a0a      	ldr	r2, [pc, #40]	@ (8000860 <SysTick_Config+0x40>)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	3b01      	subs	r3, #1
 800083c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800083e:	210f      	movs	r1, #15
 8000840:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000844:	f7ff ff8e 	bl	8000764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000848:	4b05      	ldr	r3, [pc, #20]	@ (8000860 <SysTick_Config+0x40>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800084e:	4b04      	ldr	r3, [pc, #16]	@ (8000860 <SysTick_Config+0x40>)
 8000850:	2207      	movs	r2, #7
 8000852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	e000e010 	.word	0xe000e010

08000864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ff29 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}

0800087a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	b086      	sub	sp, #24
 800087e:	af00      	add	r7, sp, #0
 8000880:	4603      	mov	r3, r0
 8000882:	60b9      	str	r1, [r7, #8]
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000888:	f7ff ff40 	bl	800070c <__NVIC_GetPriorityGrouping>
 800088c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	68b9      	ldr	r1, [r7, #8]
 8000892:	6978      	ldr	r0, [r7, #20]
 8000894:	f7ff ff90 	bl	80007b8 <NVIC_EncodePriority>
 8000898:	4602      	mov	r2, r0
 800089a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800089e:	4611      	mov	r1, r2
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff5f 	bl	8000764 <__NVIC_SetPriority>
}
 80008a6:	bf00      	nop
 80008a8:	3718      	adds	r7, #24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b082      	sub	sp, #8
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff ff33 	bl	8000728 <__NVIC_EnableIRQ>
}
 80008c2:	bf00      	nop
 80008c4:	3708      	adds	r7, #8
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}

080008ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b082      	sub	sp, #8
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f7ff ffa4 	bl	8000820 <SysTick_Config>
 80008d8:	4603      	mov	r3, r0
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d101      	bne.n	80008f6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e147      	b.n	8000b86 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d106      	bne.n	8000910 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2200      	movs	r2, #0
 8000906:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fd80 	bl	8000410 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	699a      	ldr	r2, [r3, #24]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f022 0210 	bic.w	r2, r2, #16
 800091e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000920:	f7ff fec4 	bl	80006ac <HAL_GetTick>
 8000924:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000926:	e012      	b.n	800094e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000928:	f7ff fec0 	bl	80006ac <HAL_GetTick>
 800092c:	4602      	mov	r2, r0
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	2b0a      	cmp	r3, #10
 8000934:	d90b      	bls.n	800094e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093a:	f043 0201 	orr.w	r2, r3, #1
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	2203      	movs	r2, #3
 8000946:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e11b      	b.n	8000b86 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0308 	and.w	r3, r3, #8
 8000958:	2b08      	cmp	r3, #8
 800095a:	d0e5      	beq.n	8000928 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	699a      	ldr	r2, [r3, #24]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f042 0201 	orr.w	r2, r2, #1
 800096a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800096c:	f7ff fe9e 	bl	80006ac <HAL_GetTick>
 8000970:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000972:	e012      	b.n	800099a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000974:	f7ff fe9a 	bl	80006ac <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	2b0a      	cmp	r3, #10
 8000980:	d90b      	bls.n	800099a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000986:	f043 0201 	orr.w	r2, r3, #1
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2203      	movs	r2, #3
 8000992:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e0f5      	b.n	8000b86 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f003 0301 	and.w	r3, r3, #1
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0e5      	beq.n	8000974 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	699a      	ldr	r2, [r3, #24]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f042 0202 	orr.w	r2, r2, #2
 80009b6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a74      	ldr	r2, [pc, #464]	@ (8000b90 <HAL_FDCAN_Init+0x2ac>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d103      	bne.n	80009ca <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80009c2:	4a74      	ldr	r2, [pc, #464]	@ (8000b94 <HAL_FDCAN_Init+0x2b0>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	7c1b      	ldrb	r3, [r3, #16]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d108      	bne.n	80009e4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	699a      	ldr	r2, [r3, #24]
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80009e0:	619a      	str	r2, [r3, #24]
 80009e2:	e007      	b.n	80009f4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	699a      	ldr	r2, [r3, #24]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80009f2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	7c5b      	ldrb	r3, [r3, #17]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d108      	bne.n	8000a0e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	699a      	ldr	r2, [r3, #24]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000a0a:	619a      	str	r2, [r3, #24]
 8000a0c:	e007      	b.n	8000a1e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	699a      	ldr	r2, [r3, #24]
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000a1c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7c9b      	ldrb	r3, [r3, #18]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d108      	bne.n	8000a38 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	699a      	ldr	r2, [r3, #24]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000a34:	619a      	str	r2, [r3, #24]
 8000a36:	e007      	b.n	8000a48 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	699a      	ldr	r2, [r3, #24]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000a46:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	699b      	ldr	r3, [r3, #24]
 8000a4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	689a      	ldr	r2, [r3, #8]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	699a      	ldr	r2, [r3, #24]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8000a6c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	691a      	ldr	r2, [r3, #16]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f022 0210 	bic.w	r2, r2, #16
 8000a7c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d108      	bne.n	8000a98 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	699a      	ldr	r2, [r3, #24]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f042 0204 	orr.w	r2, r2, #4
 8000a94:	619a      	str	r2, [r3, #24]
 8000a96:	e02c      	b.n	8000af2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d028      	beq.n	8000af2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d01c      	beq.n	8000ae2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ab6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	691a      	ldr	r2, [r3, #16]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f042 0210 	orr.w	r2, r2, #16
 8000ac6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	68db      	ldr	r3, [r3, #12]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d110      	bne.n	8000af2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	699a      	ldr	r2, [r3, #24]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f042 0220 	orr.w	r2, r2, #32
 8000ade:	619a      	str	r2, [r3, #24]
 8000ae0:	e007      	b.n	8000af2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	699a      	ldr	r2, [r3, #24]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f042 0220 	orr.w	r2, r2, #32
 8000af0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	3b01      	subs	r3, #1
 8000af8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b02:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6a1b      	ldr	r3, [r3, #32]
 8000b08:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000b0a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000b1a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000b1c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	689b      	ldr	r3, [r3, #8]
 8000b22:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000b26:	d115      	bne.n	8000b54 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b32:	3b01      	subs	r3, #1
 8000b34:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b36:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000b40:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000b50:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000b52:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f000 fc64 	bl	8001438 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2200      	movs	r2, #0
 8000b74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	2200      	movs	r2, #0
 8000b7a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2201      	movs	r2, #1
 8000b80:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40006400 	.word	0x40006400
 8000b94:	40006500 	.word	0x40006500

08000b98 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b087      	sub	sp, #28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000ba8:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000baa:	7dfb      	ldrb	r3, [r7, #23]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d002      	beq.n	8000bb6 <HAL_FDCAN_ConfigFilter+0x1e>
 8000bb0:	7dfb      	ldrb	r3, [r7, #23]
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d13d      	bne.n	8000c32 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d119      	bne.n	8000bf2 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000bca:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	691b      	ldr	r3, [r3, #16]
 8000bd0:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8000bd2:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e01d      	b.n	8000c2e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	075a      	lsls	r2, r3, #29
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	691b      	ldr	r3, [r3, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	079a      	lsls	r2, r3, #30
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	4413      	add	r3, r2
 8000c1a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	3304      	adds	r3, #4
 8000c26:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e006      	b.n	8000c40 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c36:	f043 0202 	orr.w	r2, r3, #2
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
  }
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	371c      	adds	r7, #28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b01      	cmp	r3, #1
 8000c5e:	d110      	bne.n	8000c82 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2202      	movs	r2, #2
 8000c64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	699a      	ldr	r2, [r3, #24]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f022 0201 	bic.w	r2, r2, #1
 8000c76:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e006      	b.n	8000c90 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000c86:	f043 0204 	orr.w	r2, r3, #4
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
  }
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	2b02      	cmp	r3, #2
 8000cb2:	d12c      	bne.n	8000d0e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d007      	beq.n	8000cd4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e023      	b.n	8000d1c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8000cdc:	0c1b      	lsrs	r3, r3, #16
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	687a      	ldr	r2, [r7, #4]
 8000ce8:	68b9      	ldr	r1, [r7, #8]
 8000cea:	68f8      	ldr	r0, [r7, #12]
 8000cec:	f000 fc10 	bl	8001510 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	697a      	ldr	r2, [r7, #20]
 8000cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfc:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8000d00:	2201      	movs	r2, #1
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	409a      	lsls	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	e006      	b.n	8000d1c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d12:	f043 0208 	orr.w	r2, r3, #8
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
  }
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b08b      	sub	sp, #44	@ 0x2c
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000d3c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8000d3e:	7efb      	ldrb	r3, [r7, #27]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	f040 80e8 	bne.w	8000f16 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	2b40      	cmp	r3, #64	@ 0x40
 8000d4a:	d137      	bne.n	8000dbc <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d107      	bne.n	8000d6c <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d60:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	e0db      	b.n	8000f24 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000d78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d7c:	d10a      	bne.n	8000d94 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000d86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d8a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000d8e:	d101      	bne.n	8000d94 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000d9c:	0a1b      	lsrs	r3, r3, #8
 8000d9e:	f003 0303 	and.w	r3, r3, #3
 8000da2:	69fa      	ldr	r2, [r7, #28]
 8000da4:	4413      	add	r3, r2
 8000da6:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8000dac:	69fa      	ldr	r2, [r7, #28]
 8000dae:	4613      	mov	r3, r2
 8000db0:	00db      	lsls	r3, r3, #3
 8000db2:	4413      	add	r3, r2
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	440b      	add	r3, r1
 8000db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dba:	e036      	b.n	8000e2a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000dc4:	f003 030f 	and.w	r3, r3, #15
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d107      	bne.n	8000ddc <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8000dd8:	2301      	movs	r3, #1
 8000dda:	e0a3      	b.n	8000f24 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000de4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000de8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dec:	d10a      	bne.n	8000e04 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000dfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dfe:	d101      	bne.n	8000e04 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8000e00:	2301      	movs	r3, #1
 8000e02:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8000e0c:	0a1b      	lsrs	r3, r3, #8
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	69fa      	ldr	r2, [r7, #28]
 8000e14:	4413      	add	r3, r2
 8000e16:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8000e1c:	69fa      	ldr	r2, [r7, #28]
 8000e1e:	4613      	mov	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	4413      	add	r3, r2
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	440b      	add	r3, r1
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8000e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d107      	bne.n	8000e4e <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8000e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	0c9b      	lsrs	r3, r3, #18
 8000e44:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	e005      	b.n	8000e5a <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8000e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8000e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8000e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8000e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e74:	3304      	adds	r3, #4
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8000e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8000e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	0c1b      	lsrs	r3, r3, #16
 8000e88:	f003 020f 	and.w	r2, r3, #15
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8000ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	0e1b      	lsrs	r3, r3, #24
 8000eae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	0fda      	lsrs	r2, r3, #31
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec2:	3304      	adds	r3, #4
 8000ec4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8000ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ec8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	623b      	str	r3, [r7, #32]
 8000ece:	e00a      	b.n	8000ee6 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8000ed0:	697a      	ldr	r2, [r7, #20]
 8000ed2:	6a3b      	ldr	r3, [r7, #32]
 8000ed4:	441a      	add	r2, r3
 8000ed6:	6839      	ldr	r1, [r7, #0]
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	440b      	add	r3, r1
 8000edc:	7812      	ldrb	r2, [r2, #0]
 8000ede:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8000ee0:	6a3b      	ldr	r3, [r7, #32]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	623b      	str	r3, [r7, #32]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	4a11      	ldr	r2, [pc, #68]	@ (8000f30 <HAL_FDCAN_GetRxMessage+0x20c>)
 8000eec:	5cd3      	ldrb	r3, [r2, r3]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	6a3b      	ldr	r3, [r7, #32]
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d3ec      	bcc.n	8000ed0 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	2b40      	cmp	r3, #64	@ 0x40
 8000efa:	d105      	bne.n	8000f08 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	69fa      	ldr	r2, [r7, #28]
 8000f02:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8000f06:	e004      	b.n	8000f12 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	69fa      	ldr	r2, [r7, #28]
 8000f0e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e006      	b.n	8000f24 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1a:	f043 0208 	orr.w	r2, r3, #8
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8000f22:	2301      	movs	r3, #1
  }
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	372c      	adds	r7, #44	@ 0x2c
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	08004ed0 	.word	0x08004ed0

08000f34 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b087      	sub	sp, #28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8000f46:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8000f48:	7dfb      	ldrb	r3, [r7, #23]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d003      	beq.n	8000f56 <HAL_FDCAN_ActivateNotification+0x22>
 8000f4e:	7dfb      	ldrb	r3, [r7, #23]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	f040 80c8 	bne.w	80010e6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f5c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d004      	beq.n	8000f72 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d03b      	beq.n	8000fea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d004      	beq.n	8000f86 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d031      	beq.n	8000fea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d004      	beq.n	8000f9a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d027      	beq.n	8000fea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d004      	beq.n	8000fae <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d01d      	beq.n	8000fea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	f003 0310 	and.w	r3, r3, #16
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d013      	beq.n	8000fea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d004      	beq.n	8000fd6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	f003 0320 	and.w	r3, r3, #32
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d009      	beq.n	8000fea <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00c      	beq.n	8000ffa <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d107      	bne.n	8000ffa <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f042 0201 	orr.w	r2, r2, #1
 8000ff8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	f003 0307 	and.w	r3, r3, #7
 8001000:	2b00      	cmp	r3, #0
 8001002:	d004      	beq.n	800100e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d13b      	bne.n	8001086 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001014:	2b00      	cmp	r3, #0
 8001016:	d004      	beq.n	8001022 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d131      	bne.n	8001086 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8001028:	2b00      	cmp	r3, #0
 800102a:	d004      	beq.n	8001036 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	2b00      	cmp	r3, #0
 8001034:	d127      	bne.n	8001086 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800103c:	2b00      	cmp	r3, #0
 800103e:	d004      	beq.n	800104a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d11d      	bne.n	8001086 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8001050:	2b00      	cmp	r3, #0
 8001052:	d004      	beq.n	800105e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	f003 0310 	and.w	r3, r3, #16
 800105a:	2b00      	cmp	r3, #0
 800105c:	d113      	bne.n	8001086 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8001064:	2b00      	cmp	r3, #0
 8001066:	d004      	beq.n	8001072 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	f003 0320 	and.w	r3, r3, #32
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00c      	beq.n	8001096 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001082:	2b00      	cmp	r3, #0
 8001084:	d007      	beq.n	8001096 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f042 0202 	orr.w	r2, r2, #2
 8001094:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800109c:	2b00      	cmp	r3, #0
 800109e:	d009      	beq.n	80010b4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	430a      	orrs	r2, r1
 80010b0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d009      	beq.n	80010d2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	430a      	orrs	r2, r1
 80010ce:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	68ba      	ldr	r2, [r7, #8]
 80010de:	430a      	orrs	r2, r1
 80010e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e006      	b.n	80010f4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010ea:	f043 0202 	orr.w	r2, r3, #2
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
  }
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	371c      	adds	r7, #28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	@ 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800110e:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800111a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800111c:	4013      	ands	r3, r2
 800111e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001132:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001134:	4013      	ands	r3, r2
 8001136:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800113e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001142:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800114a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800114c:	4013      	ands	r3, r2
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001156:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800115a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001162:	6a3a      	ldr	r2, [r7, #32]
 8001164:	4013      	ands	r3, r2
 8001166:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800116e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001172:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	4013      	ands	r3, r2
 800117e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001186:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800118e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	099b      	lsrs	r3, r3, #6
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	2b00      	cmp	r3, #0
 800119a:	d00c      	beq.n	80011b6 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	099b      	lsrs	r3, r3, #6
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2240      	movs	r2, #64	@ 0x40
 80011ae:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 f922 	bl	80013fa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	0a1b      	lsrs	r3, r3, #8
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d01a      	beq.n	80011f8 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	0a1b      	lsrs	r3, r3, #8
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d014      	beq.n	80011f8 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80011d6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011ee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f000 f8e2 	bl	80013bc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80011f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001204:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f8ac 	bl	8001366 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800120e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001210:	2b00      	cmp	r3, #0
 8001212:	d007      	beq.n	8001224 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800121a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800121c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f001 fb6c 	bl	80028fc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	2b00      	cmp	r3, #0
 8001228:	d007      	beq.n	800123a <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001230:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001232:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f000 f8a1 	bl	800137c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	0a5b      	lsrs	r3, r3, #9
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00d      	beq.n	8001262 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	0a5b      	lsrs	r3, r3, #9
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d007      	beq.n	8001262 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800125a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f000 f898 	bl	8001392 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	09db      	lsrs	r3, r3, #7
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	d019      	beq.n	80012a2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	09db      	lsrs	r3, r3, #7
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b00      	cmp	r3, #0
 8001278:	d013      	beq.n	80012a2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001282:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4013      	ands	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2280      	movs	r2, #128	@ 0x80
 8001298:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800129a:	68f9      	ldr	r1, [r7, #12]
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f000 f882 	bl	80013a6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	0b5b      	lsrs	r3, r3, #13
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00d      	beq.n	80012ca <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	0b5b      	lsrs	r3, r3, #13
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f884 	bl	80013d2 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	0bdb      	lsrs	r3, r3, #15
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d00d      	beq.n	80012f2 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	0bdb      	lsrs	r3, r3, #15
 80012da:	f003 0301 	and.w	r3, r3, #1
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d007      	beq.n	80012f2 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012ea:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f000 f87a 	bl	80013e6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	0b9b      	lsrs	r3, r3, #14
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d010      	beq.n	8001320 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	0b9b      	lsrs	r3, r3, #14
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	d00a      	beq.n	8001320 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001312:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001318:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d007      	beq.n	8001336 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	69fa      	ldr	r2, [r7, #28]
 800132c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800132e:	69f9      	ldr	r1, [r7, #28]
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f000 f876 	bl	8001422 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001336:	6a3b      	ldr	r3, [r7, #32]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d009      	beq.n	8001350 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6a3a      	ldr	r2, [r7, #32]
 8001342:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001348:	6a3b      	ldr	r3, [r7, #32]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001354:	2b00      	cmp	r3, #0
 8001356:	d002      	beq.n	800135e <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f000 f858 	bl	800140e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800135e:	bf00      	nop
 8001360:	3730      	adds	r7, #48	@ 0x30
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
 800136e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr

080013e6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b083      	sub	sp, #12
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001440:	4b30      	ldr	r3, [pc, #192]	@ (8001504 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001442:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a2f      	ldr	r2, [pc, #188]	@ (8001508 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d103      	bne.n	8001456 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001454:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a2c      	ldr	r2, [pc, #176]	@ (800150c <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d103      	bne.n	8001468 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001466:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001476:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800147e:	041a      	lsls	r2, r3, #16
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800149c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014a4:	061a      	lsls	r2, r3, #24
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	430a      	orrs	r2, r1
 80014ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	e005      	b.n	80014ea <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3304      	adds	r3, #4
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80014f0:	68fa      	ldr	r2, [r7, #12]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d3f3      	bcc.n	80014de <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80014f6:	bf00      	nop
 80014f8:	bf00      	nop
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	4000a400 	.word	0x4000a400
 8001508:	40006800 	.word	0x40006800
 800150c:	40006c00 	.word	0x40006c00

08001510 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	@ 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
 800151c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10a      	bne.n	800153c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800152e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001536:	4313      	orrs	r3, r2
 8001538:	61fb      	str	r3, [r7, #28]
 800153a:	e00a      	b.n	8001552 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001544:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800154a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800154c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001550:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800155c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001562:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001568:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	3304      	adds	r3, #4
 8001590:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	3304      	adds	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e020      	b.n	80015e6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3303      	adds	r3, #3
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	3302      	adds	r3, #2
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	440b      	add	r3, r1
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80015bc:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	440b      	add	r3, r1
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80015ca:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80015cc:	6879      	ldr	r1, [r7, #4]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	440a      	add	r2, r1
 80015d2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80015d4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80015da:	69bb      	ldr	r3, [r7, #24]
 80015dc:	3304      	adds	r3, #4
 80015de:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3304      	adds	r3, #4
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	4a06      	ldr	r2, [pc, #24]	@ (8001604 <FDCAN_CopyMessageToRAM+0xf4>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	461a      	mov	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d3d6      	bcc.n	80015a4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	3724      	adds	r7, #36	@ 0x24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	08004ed0 	.word	0x08004ed0

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b480      	push	{r7}
 800160a:	b087      	sub	sp, #28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001616:	e15a      	b.n	80018ce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2101      	movs	r1, #1
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	4013      	ands	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f000 814c 	beq.w	80018c8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f003 0303 	and.w	r3, r3, #3
 8001638:	2b01      	cmp	r3, #1
 800163a:	d005      	beq.n	8001648 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001644:	2b02      	cmp	r3, #2
 8001646:	d130      	bne.n	80016aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4013      	ands	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	693a      	ldr	r2, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800167e:	2201      	movs	r2, #1
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4013      	ands	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	091b      	lsrs	r3, r3, #4
 8001694:	f003 0201 	and.w	r2, r3, #1
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d017      	beq.n	80016e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	2203      	movs	r2, #3
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	689a      	ldr	r2, [r3, #8]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f003 0303 	and.w	r3, r3, #3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d123      	bne.n	800173a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	08da      	lsrs	r2, r3, #3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3208      	adds	r2, #8
 80016fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	220f      	movs	r2, #15
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	691a      	ldr	r2, [r3, #16]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	08da      	lsrs	r2, r3, #3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3208      	adds	r2, #8
 8001734:	6939      	ldr	r1, [r7, #16]
 8001736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4013      	ands	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0203 	and.w	r2, r3, #3
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001776:	2b00      	cmp	r3, #0
 8001778:	f000 80a6 	beq.w	80018c8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177c:	4b5b      	ldr	r3, [pc, #364]	@ (80018ec <HAL_GPIO_Init+0x2e4>)
 800177e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001780:	4a5a      	ldr	r2, [pc, #360]	@ (80018ec <HAL_GPIO_Init+0x2e4>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6613      	str	r3, [r2, #96]	@ 0x60
 8001788:	4b58      	ldr	r3, [pc, #352]	@ (80018ec <HAL_GPIO_Init+0x2e4>)
 800178a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001794:	4a56      	ldr	r2, [pc, #344]	@ (80018f0 <HAL_GPIO_Init+0x2e8>)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	089b      	lsrs	r3, r3, #2
 800179a:	3302      	adds	r3, #2
 800179c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	220f      	movs	r2, #15
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80017be:	d01f      	beq.n	8001800 <HAL_GPIO_Init+0x1f8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a4c      	ldr	r2, [pc, #304]	@ (80018f4 <HAL_GPIO_Init+0x2ec>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d019      	beq.n	80017fc <HAL_GPIO_Init+0x1f4>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a4b      	ldr	r2, [pc, #300]	@ (80018f8 <HAL_GPIO_Init+0x2f0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d013      	beq.n	80017f8 <HAL_GPIO_Init+0x1f0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4a4a      	ldr	r2, [pc, #296]	@ (80018fc <HAL_GPIO_Init+0x2f4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d00d      	beq.n	80017f4 <HAL_GPIO_Init+0x1ec>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	4a49      	ldr	r2, [pc, #292]	@ (8001900 <HAL_GPIO_Init+0x2f8>)
 80017dc:	4293      	cmp	r3, r2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_Init+0x1e8>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	4a48      	ldr	r2, [pc, #288]	@ (8001904 <HAL_GPIO_Init+0x2fc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d101      	bne.n	80017ec <HAL_GPIO_Init+0x1e4>
 80017e8:	2305      	movs	r3, #5
 80017ea:	e00a      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017ec:	2306      	movs	r3, #6
 80017ee:	e008      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017f0:	2304      	movs	r3, #4
 80017f2:	e006      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017f4:	2303      	movs	r3, #3
 80017f6:	e004      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017f8:	2302      	movs	r3, #2
 80017fa:	e002      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 80017fc:	2301      	movs	r3, #1
 80017fe:	e000      	b.n	8001802 <HAL_GPIO_Init+0x1fa>
 8001800:	2300      	movs	r3, #0
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	f002 0203 	and.w	r2, r2, #3
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	4093      	lsls	r3, r2
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001812:	4937      	ldr	r1, [pc, #220]	@ (80018f0 <HAL_GPIO_Init+0x2e8>)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	089b      	lsrs	r3, r3, #2
 8001818:	3302      	adds	r3, #2
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001820:	4b39      	ldr	r3, [pc, #228]	@ (8001908 <HAL_GPIO_Init+0x300>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	43db      	mvns	r3, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4013      	ands	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	4313      	orrs	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001844:	4a30      	ldr	r2, [pc, #192]	@ (8001908 <HAL_GPIO_Init+0x300>)
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800184a:	4b2f      	ldr	r3, [pc, #188]	@ (8001908 <HAL_GPIO_Init+0x300>)
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43db      	mvns	r3, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800186e:	4a26      	ldr	r2, [pc, #152]	@ (8001908 <HAL_GPIO_Init+0x300>)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001874:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <HAL_GPIO_Init+0x300>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001898:	4a1b      	ldr	r2, [pc, #108]	@ (8001908 <HAL_GPIO_Init+0x300>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800189e:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <HAL_GPIO_Init+0x300>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4013      	ands	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	4313      	orrs	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c2:	4a11      	ldr	r2, [pc, #68]	@ (8001908 <HAL_GPIO_Init+0x300>)
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	3301      	adds	r3, #1
 80018cc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	fa22 f303 	lsr.w	r3, r2, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	f47f ae9d 	bne.w	8001618 <HAL_GPIO_Init+0x10>
  }
}
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
 80018e2:	371c      	adds	r7, #28
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	40021000 	.word	0x40021000
 80018f0:	40010000 	.word	0x40010000
 80018f4:	48000400 	.word	0x48000400
 80018f8:	48000800 	.word	0x48000800
 80018fc:	48000c00 	.word	0x48000c00
 8001900:	48001000 	.word	0x48001000
 8001904:	48001400 	.word	0x48001400
 8001908:	40010400 	.word	0x40010400

0800190c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d141      	bne.n	800199e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800191a:	4b4b      	ldr	r3, [pc, #300]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001922:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001926:	d131      	bne.n	800198c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001928:	4b47      	ldr	r3, [pc, #284]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800192e:	4a46      	ldr	r2, [pc, #280]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001934:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001938:	4b43      	ldr	r3, [pc, #268]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001940:	4a41      	ldr	r2, [pc, #260]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001942:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001946:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001948:	4b40      	ldr	r3, [pc, #256]	@ (8001a4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2232      	movs	r2, #50	@ 0x32
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	4a3f      	ldr	r2, [pc, #252]	@ (8001a50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001954:	fba2 2303 	umull	r2, r3, r2, r3
 8001958:	0c9b      	lsrs	r3, r3, #18
 800195a:	3301      	adds	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800195e:	e002      	b.n	8001966 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3b01      	subs	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001966:	4b38      	ldr	r3, [pc, #224]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800196e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001972:	d102      	bne.n	800197a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1f2      	bne.n	8001960 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800197a:	4b33      	ldr	r3, [pc, #204]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001982:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001986:	d158      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e057      	b.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800198c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001992:	4a2d      	ldr	r2, [pc, #180]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001994:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001998:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800199c:	e04d      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019a4:	d141      	bne.n	8001a2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019a6:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019b2:	d131      	bne.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019b4:	4b24      	ldr	r3, [pc, #144]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80019ba:	4a23      	ldr	r2, [pc, #140]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c4:	4b20      	ldr	r3, [pc, #128]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019d4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2232      	movs	r2, #50	@ 0x32
 80019da:	fb02 f303 	mul.w	r3, r2, r3
 80019de:	4a1c      	ldr	r2, [pc, #112]	@ (8001a50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	0c9b      	lsrs	r3, r3, #18
 80019e6:	3301      	adds	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019ea:	e002      	b.n	80019f2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019f2:	4b15      	ldr	r3, [pc, #84]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019fe:	d102      	bne.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f2      	bne.n	80019ec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a12:	d112      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e011      	b.n	8001a3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001a28:	e007      	b.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a32:	4a05      	ldr	r2, [pc, #20]	@ (8001a48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	40007000 	.word	0x40007000
 8001a4c:	20000000 	.word	0x20000000
 8001a50:	431bde83 	.word	0x431bde83

08001a54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a62:	6093      	str	r3, [r2, #8]
}
 8001a64:	bf00      	nop
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40007000 	.word	0x40007000

08001a74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e2fe      	b.n	8002084 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d075      	beq.n	8001b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a92:	4b97      	ldr	r3, [pc, #604]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a9c:	4b94      	ldr	r3, [pc, #592]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	2b0c      	cmp	r3, #12
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x3e>
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d002      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x44>
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	2b08      	cmp	r3, #8
 8001ab6:	d10b      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab8:	4b8d      	ldr	r3, [pc, #564]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d05b      	beq.n	8001b7c <HAL_RCC_OscConfig+0x108>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d157      	bne.n	8001b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e2d9      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ad8:	d106      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x74>
 8001ada:	4b85      	ldr	r3, [pc, #532]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a84      	ldr	r2, [pc, #528]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e01d      	b.n	8001b24 <HAL_RCC_OscConfig+0xb0>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001af0:	d10c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x98>
 8001af2:	4b7f      	ldr	r3, [pc, #508]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a7e      	ldr	r2, [pc, #504]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	4b7c      	ldr	r3, [pc, #496]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a7b      	ldr	r2, [pc, #492]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0xb0>
 8001b0c:	4b78      	ldr	r3, [pc, #480]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a77      	ldr	r2, [pc, #476]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b75      	ldr	r3, [pc, #468]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a74      	ldr	r2, [pc, #464]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d013      	beq.n	8001b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7fe fdbe 	bl	80006ac <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b34:	f7fe fdba 	bl	80006ac <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b64      	cmp	r3, #100	@ 0x64
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e29e      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b46:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0xc0>
 8001b52:	e014      	b.n	8001b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b54:	f7fe fdaa 	bl	80006ac <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7fe fda6 	bl	80006ac <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	@ 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e28a      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6e:	4b60      	ldr	r3, [pc, #384]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0xe8>
 8001b7a:	e000      	b.n	8001b7e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d075      	beq.n	8001c76 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8a:	4b59      	ldr	r3, [pc, #356]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
 8001b92:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b94:	4b56      	ldr	r3, [pc, #344]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b0c      	cmp	r3, #12
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_OscConfig+0x136>
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x13c>
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d11f      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x154>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e25d      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bc8:	4b49      	ldr	r3, [pc, #292]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	061b      	lsls	r3, r3, #24
 8001bd6:	4946      	ldr	r1, [pc, #280]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bdc:	4b45      	ldr	r3, [pc, #276]	@ (8001cf4 <HAL_RCC_OscConfig+0x280>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fd17 	bl	8000614 <HAL_InitTick>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d043      	beq.n	8001c74 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e249      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b3d      	ldr	r3, [pc, #244]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a3c      	ldr	r2, [pc, #240]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7fe fd52 	bl	80006ac <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7fe fd4e 	bl	80006ac <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e232      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1e:	4b34      	ldr	r3, [pc, #208]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b31      	ldr	r3, [pc, #196]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	061b      	lsls	r3, r3, #24
 8001c38:	492d      	ldr	r1, [pc, #180]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	604b      	str	r3, [r1, #4]
 8001c3e:	e01a      	b.n	8001c76 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c40:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a2a      	ldr	r2, [pc, #168]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7fe fd2e 	bl	80006ac <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7fe fd2a 	bl	80006ac <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e20e      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c66:	4b22      	ldr	r3, [pc, #136]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x1e0>
 8001c72:	e000      	b.n	8001c76 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c74:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d041      	beq.n	8001d06 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d01c      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8a:	4b19      	ldr	r3, [pc, #100]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c90:	4a17      	ldr	r2, [pc, #92]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001c92:	f043 0301 	orr.w	r3, r3, #1
 8001c96:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9a:	f7fe fd07 	bl	80006ac <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca2:	f7fe fd03 	bl	80006ac <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1e7      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0ef      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x22e>
 8001cc2:	e020      	b.n	8001d06 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cca:	4a09      	ldr	r2, [pc, #36]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001ccc:	f023 0301 	bic.w	r3, r3, #1
 8001cd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd4:	f7fe fcea 	bl	80006ac <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cda:	e00d      	b.n	8001cf8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7fe fce6 	bl	80006ac <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d906      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1ca      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d1ea      	bne.n	8001cdc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0304 	and.w	r3, r3, #4
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f000 80a6 	beq.w	8001e60 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d14:	2300      	movs	r3, #0
 8001d16:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d18:	4b84      	ldr	r3, [pc, #528]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001d1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_OscConfig+0x2b4>
 8001d24:	2301      	movs	r3, #1
 8001d26:	e000      	b.n	8001d2a <HAL_RCC_OscConfig+0x2b6>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00d      	beq.n	8001d4a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	4a7e      	ldr	r2, [pc, #504]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001d34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d3a:	4b7c      	ldr	r3, [pc, #496]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d46:	2301      	movs	r3, #1
 8001d48:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d4a:	4b79      	ldr	r3, [pc, #484]	@ (8001f30 <HAL_RCC_OscConfig+0x4bc>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d118      	bne.n	8001d88 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d56:	4b76      	ldr	r3, [pc, #472]	@ (8001f30 <HAL_RCC_OscConfig+0x4bc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a75      	ldr	r2, [pc, #468]	@ (8001f30 <HAL_RCC_OscConfig+0x4bc>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d62:	f7fe fca3 	bl	80006ac <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6a:	f7fe fc9f 	bl	80006ac <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e183      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d7c:	4b6c      	ldr	r3, [pc, #432]	@ (8001f30 <HAL_RCC_OscConfig+0x4bc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0f0      	beq.n	8001d6a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <HAL_RCC_OscConfig+0x32e>
 8001d90:	4b66      	ldr	r3, [pc, #408]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001d96:	4a65      	ldr	r2, [pc, #404]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001da0:	e024      	b.n	8001dec <HAL_RCC_OscConfig+0x378>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	2b05      	cmp	r3, #5
 8001da8:	d110      	bne.n	8001dcc <HAL_RCC_OscConfig+0x358>
 8001daa:	4b60      	ldr	r3, [pc, #384]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001db0:	4a5e      	ldr	r2, [pc, #376]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001db2:	f043 0304 	orr.w	r3, r3, #4
 8001db6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dba:	4b5c      	ldr	r3, [pc, #368]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dc0:	4a5a      	ldr	r2, [pc, #360]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001dca:	e00f      	b.n	8001dec <HAL_RCC_OscConfig+0x378>
 8001dcc:	4b57      	ldr	r3, [pc, #348]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001dd2:	4a56      	ldr	r2, [pc, #344]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ddc:	4b53      	ldr	r3, [pc, #332]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001de2:	4a52      	ldr	r2, [pc, #328]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001de4:	f023 0304 	bic.w	r3, r3, #4
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d016      	beq.n	8001e22 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7fe fc5a 	bl	80006ac <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7fe fc56 	bl	80006ac <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e138      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e12:	4b46      	ldr	r3, [pc, #280]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0ed      	beq.n	8001dfc <HAL_RCC_OscConfig+0x388>
 8001e20:	e015      	b.n	8001e4e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7fe fc43 	bl	80006ac <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe fc3f 	bl	80006ac <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e121      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e40:	4b3a      	ldr	r3, [pc, #232]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d1ed      	bne.n	8001e2a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e4e:	7ffb      	ldrb	r3, [r7, #31]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e54:	4b35      	ldr	r3, [pc, #212]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e58:	4a34      	ldr	r2, [pc, #208]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e5e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d03c      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01c      	beq.n	8001eae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e74:	4b2d      	ldr	r3, [pc, #180]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e84:	f7fe fc12 	bl	80006ac <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e8c:	f7fe fc0e 	bl	80006ac <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e0f2      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e9e:	4b23      	ldr	r3, [pc, #140]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001ea0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ef      	beq.n	8001e8c <HAL_RCC_OscConfig+0x418>
 8001eac:	e01b      	b.n	8001ee6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001eae:	4b1f      	ldr	r3, [pc, #124]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ebe:	f7fe fbf5 	bl	80006ac <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ec6:	f7fe fbf1 	bl	80006ac <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e0d5      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ed8:	4b14      	ldr	r3, [pc, #80]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ef      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80c9 	beq.w	8002082 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b0c      	cmp	r3, #12
 8001efa:	f000 8083 	beq.w	8002004 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d15e      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b09      	ldr	r3, [pc, #36]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a08      	ldr	r2, [pc, #32]	@ (8001f2c <HAL_RCC_OscConfig+0x4b8>)
 8001f0c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7fe fbcb 	bl	80006ac <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f18:	e00c      	b.n	8001f34 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7fe fbc7 	bl	80006ac <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d905      	bls.n	8001f34 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0ab      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f34:	4b55      	ldr	r3, [pc, #340]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1ec      	bne.n	8001f1a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f40:	4b52      	ldr	r3, [pc, #328]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	4b52      	ldr	r3, [pc, #328]	@ (8002090 <HAL_RCC_OscConfig+0x61c>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	6a11      	ldr	r1, [r2, #32]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f50:	3a01      	subs	r2, #1
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	4311      	orrs	r1, r2
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001f5a:	0212      	lsls	r2, r2, #8
 8001f5c:	4311      	orrs	r1, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001f62:	0852      	lsrs	r2, r2, #1
 8001f64:	3a01      	subs	r2, #1
 8001f66:	0552      	lsls	r2, r2, #21
 8001f68:	4311      	orrs	r1, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001f6e:	0852      	lsrs	r2, r2, #1
 8001f70:	3a01      	subs	r2, #1
 8001f72:	0652      	lsls	r2, r2, #25
 8001f74:	4311      	orrs	r1, r2
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f7a:	06d2      	lsls	r2, r2, #27
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	4943      	ldr	r1, [pc, #268]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f84:	4b41      	ldr	r3, [pc, #260]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a40      	ldr	r2, [pc, #256]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f8e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f90:	4b3e      	ldr	r3, [pc, #248]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	4a3d      	ldr	r2, [pc, #244]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001f96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fb86 	bl	80006ac <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa4:	f7fe fb82 	bl	80006ac <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e066      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb6:	4b35      	ldr	r3, [pc, #212]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d0f0      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x530>
 8001fc2:	e05e      	b.n	8002082 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc4:	4b31      	ldr	r3, [pc, #196]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a30      	ldr	r2, [pc, #192]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7fe fb6c 	bl	80006ac <HAL_GetTick>
 8001fd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe fb68 	bl	80006ac <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e04c      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fea:	4b28      	ldr	r3, [pc, #160]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001ff6:	4b25      	ldr	r3, [pc, #148]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001ff8:	68da      	ldr	r2, [r3, #12]
 8001ffa:	4924      	ldr	r1, [pc, #144]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8001ffc:	4b25      	ldr	r3, [pc, #148]	@ (8002094 <HAL_RCC_OscConfig+0x620>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	60cb      	str	r3, [r1, #12]
 8002002:	e03e      	b.n	8002082 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d101      	bne.n	8002010 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e039      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002010:	4b1e      	ldr	r3, [pc, #120]	@ (800208c <HAL_RCC_OscConfig+0x618>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 0203 	and.w	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	429a      	cmp	r2, r3
 8002022:	d12c      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202e:	3b01      	subs	r3, #1
 8002030:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002032:	429a      	cmp	r2, r3
 8002034:	d123      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002040:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002042:	429a      	cmp	r2, r3
 8002044:	d11b      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d113      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	3b01      	subs	r3, #1
 8002064:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d109      	bne.n	800207e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002074:	085b      	lsrs	r3, r3, #1
 8002076:	3b01      	subs	r3, #1
 8002078:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d001      	beq.n	8002082 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	4618      	mov	r0, r3
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40021000 	.word	0x40021000
 8002090:	019f800c 	.word	0x019f800c
 8002094:	feeefffc 	.word	0xfeeefffc

08002098 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e11e      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020b0:	4b91      	ldr	r3, [pc, #580]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d910      	bls.n	80020e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020be:	4b8e      	ldr	r3, [pc, #568]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f023 020f 	bic.w	r2, r3, #15
 80020c6:	498c      	ldr	r1, [pc, #560]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ce:	4b8a      	ldr	r3, [pc, #552]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d001      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e106      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d073      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d129      	bne.n	8002148 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f4:	4b81      	ldr	r3, [pc, #516]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0f4      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002104:	f000 f966 	bl	80023d4 <RCC_GetSysClockFreqFromPLLSource>
 8002108:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4a7c      	ldr	r2, [pc, #496]	@ (8002300 <HAL_RCC_ClockConfig+0x268>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d93f      	bls.n	8002192 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002112:	4b7a      	ldr	r3, [pc, #488]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d009      	beq.n	8002132 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002126:	2b00      	cmp	r3, #0
 8002128:	d033      	beq.n	8002192 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800212e:	2b00      	cmp	r3, #0
 8002130:	d12f      	bne.n	8002192 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002132:	4b72      	ldr	r3, [pc, #456]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800213a:	4a70      	ldr	r2, [pc, #448]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 800213c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002140:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	617b      	str	r3, [r7, #20]
 8002146:	e024      	b.n	8002192 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002150:	4b6a      	ldr	r3, [pc, #424]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d109      	bne.n	8002170 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0c6      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002160:	4b66      	ldr	r3, [pc, #408]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002168:	2b00      	cmp	r3, #0
 800216a:	d101      	bne.n	8002170 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0be      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002170:	f000 f8ce 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 8002174:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	4a61      	ldr	r2, [pc, #388]	@ (8002300 <HAL_RCC_ClockConfig+0x268>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d909      	bls.n	8002192 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800217e:	4b5f      	ldr	r3, [pc, #380]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002186:	4a5d      	ldr	r2, [pc, #372]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800218c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800218e:	2380      	movs	r3, #128	@ 0x80
 8002190:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002192:	4b5a      	ldr	r3, [pc, #360]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f023 0203 	bic.w	r2, r3, #3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	4957      	ldr	r1, [pc, #348]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021a4:	f7fe fa82 	bl	80006ac <HAL_GetTick>
 80021a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021aa:	e00a      	b.n	80021c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ac:	f7fe fa7e 	bl	80006ac <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e095      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c2:	4b4e      	ldr	r3, [pc, #312]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 020c 	and.w	r2, r3, #12
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d1eb      	bne.n	80021ac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d023      	beq.n	8002228 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ec:	4b43      	ldr	r3, [pc, #268]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	4a42      	ldr	r2, [pc, #264]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80021f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021f6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002204:	4b3d      	ldr	r3, [pc, #244]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800220c:	4a3b      	ldr	r2, [pc, #236]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 800220e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002212:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002214:	4b39      	ldr	r3, [pc, #228]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4936      	ldr	r1, [pc, #216]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002222:	4313      	orrs	r3, r2
 8002224:	608b      	str	r3, [r1, #8]
 8002226:	e008      	b.n	800223a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2b80      	cmp	r3, #128	@ 0x80
 800222c:	d105      	bne.n	800223a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800222e:	4b33      	ldr	r3, [pc, #204]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	4a32      	ldr	r2, [pc, #200]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002234:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002238:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800223a:	4b2f      	ldr	r3, [pc, #188]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d21d      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002248:	4b2b      	ldr	r3, [pc, #172]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f023 020f 	bic.w	r2, r3, #15
 8002250:	4929      	ldr	r1, [pc, #164]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	4313      	orrs	r3, r2
 8002256:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002258:	f7fe fa28 	bl	80006ac <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	e00a      	b.n	8002276 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002260:	f7fe fa24 	bl	80006ac <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e03b      	b.n	80022ee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002276:	4b20      	ldr	r3, [pc, #128]	@ (80022f8 <HAL_RCC_ClockConfig+0x260>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d1ed      	bne.n	8002260 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	4b1a      	ldr	r3, [pc, #104]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4917      	ldr	r1, [pc, #92]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ae:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	490f      	ldr	r1, [pc, #60]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022c2:	f000 f825 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <HAL_RCC_ClockConfig+0x264>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	490c      	ldr	r1, [pc, #48]	@ (8002304 <HAL_RCC_ClockConfig+0x26c>)
 80022d4:	5ccb      	ldrb	r3, [r1, r3]
 80022d6:	f003 031f 	and.w	r3, r3, #31
 80022da:	fa22 f303 	lsr.w	r3, r2, r3
 80022de:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <HAL_RCC_ClockConfig+0x270>)
 80022e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022e2:	4b0a      	ldr	r3, [pc, #40]	@ (800230c <HAL_RCC_ClockConfig+0x274>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe f994 	bl	8000614 <HAL_InitTick>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40022000 	.word	0x40022000
 80022fc:	40021000 	.word	0x40021000
 8002300:	04c4b400 	.word	0x04c4b400
 8002304:	08004ec0 	.word	0x08004ec0
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	b480      	push	{r7}
 8002312:	b087      	sub	sp, #28
 8002314:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002316:	4b2c      	ldr	r3, [pc, #176]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
 800231e:	2b04      	cmp	r3, #4
 8002320:	d102      	bne.n	8002328 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002322:	4b2a      	ldr	r3, [pc, #168]	@ (80023cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	e047      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002328:	4b27      	ldr	r3, [pc, #156]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b08      	cmp	r3, #8
 8002332:	d102      	bne.n	800233a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002334:	4b26      	ldr	r3, [pc, #152]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002336:	613b      	str	r3, [r7, #16]
 8002338:	e03e      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800233a:	4b23      	ldr	r3, [pc, #140]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d136      	bne.n	80023b4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002346:	4b20      	ldr	r3, [pc, #128]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002350:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	3301      	adds	r3, #1
 800235c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b03      	cmp	r3, #3
 8002362:	d10c      	bne.n	800237e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002364:	4a1a      	ldr	r2, [pc, #104]	@ (80023d0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	fbb2 f3f3 	udiv	r3, r2, r3
 800236c:	4a16      	ldr	r2, [pc, #88]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236e:	68d2      	ldr	r2, [r2, #12]
 8002370:	0a12      	lsrs	r2, r2, #8
 8002372:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002376:	fb02 f303 	mul.w	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
      break;
 800237c:	e00c      	b.n	8002398 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800237e:	4a13      	ldr	r2, [pc, #76]	@ (80023cc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	4a10      	ldr	r2, [pc, #64]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002388:	68d2      	ldr	r2, [r2, #12]
 800238a:	0a12      	lsrs	r2, r2, #8
 800238c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002390:	fb02 f303 	mul.w	r3, r2, r3
 8002394:	617b      	str	r3, [r7, #20]
      break;
 8002396:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002398:	4b0b      	ldr	r3, [pc, #44]	@ (80023c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0e5b      	lsrs	r3, r3, #25
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	3301      	adds	r3, #1
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	e001      	b.n	80023b8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023b8:	693b      	ldr	r3, [r7, #16]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000
 80023cc:	00f42400 	.word	0x00f42400
 80023d0:	016e3600 	.word	0x016e3600

080023d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b087      	sub	sp, #28
 80023d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023da:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f003 0303 	and.w	r3, r3, #3
 80023e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	3301      	adds	r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d10c      	bne.n	8002412 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023f8:	4a17      	ldr	r2, [pc, #92]	@ (8002458 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	4a14      	ldr	r2, [pc, #80]	@ (8002454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002402:	68d2      	ldr	r2, [r2, #12]
 8002404:	0a12      	lsrs	r2, r2, #8
 8002406:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	617b      	str	r3, [r7, #20]
    break;
 8002410:	e00c      	b.n	800242c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002412:	4a12      	ldr	r2, [pc, #72]	@ (800245c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
 800241a:	4a0e      	ldr	r2, [pc, #56]	@ (8002454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800241c:	68d2      	ldr	r2, [r2, #12]
 800241e:	0a12      	lsrs	r2, r2, #8
 8002420:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002424:	fb02 f303 	mul.w	r3, r2, r3
 8002428:	617b      	str	r3, [r7, #20]
    break;
 800242a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800242c:	4b09      	ldr	r3, [pc, #36]	@ (8002454 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	0e5b      	lsrs	r3, r3, #25
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002446:	687b      	ldr	r3, [r7, #4]
}
 8002448:	4618      	mov	r0, r3
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40021000 	.word	0x40021000
 8002458:	016e3600 	.word	0x016e3600
 800245c:	00f42400 	.word	0x00f42400

08002460 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002468:	2300      	movs	r3, #0
 800246a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800246c:	2300      	movs	r3, #0
 800246e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8098 	beq.w	80025ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800247e:	2300      	movs	r3, #0
 8002480:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002482:	4b43      	ldr	r3, [pc, #268]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10d      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800248e:	4b40      	ldr	r3, [pc, #256]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002492:	4a3f      	ldr	r2, [pc, #252]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002494:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002498:	6593      	str	r3, [r2, #88]	@ 0x58
 800249a:	4b3d      	ldr	r3, [pc, #244]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	60bb      	str	r3, [r7, #8]
 80024a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024a6:	2301      	movs	r3, #1
 80024a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a39      	ldr	r2, [pc, #228]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024b6:	f7fe f8f9 	bl	80006ac <HAL_GetTick>
 80024ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024bc:	e009      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7fe f8f5 	bl	80006ac <HAL_GetTick>
 80024c2:	4602      	mov	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d902      	bls.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	74fb      	strb	r3, [r7, #19]
        break;
 80024d0:	e005      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024d2:	4b30      	ldr	r3, [pc, #192]	@ (8002594 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0ef      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80024de:	7cfb      	ldrb	r3, [r7, #19]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d159      	bne.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d01e      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d019      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002500:	4b23      	ldr	r3, [pc, #140]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800250a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800250c:	4b20      	ldr	r3, [pc, #128]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002512:	4a1f      	ldr	r2, [pc, #124]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800251c:	4b1c      	ldr	r3, [pc, #112]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002522:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002524:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002528:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800252c:	4a18      	ldr	r2, [pc, #96]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d016      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253e:	f7fe f8b5 	bl	80006ac <HAL_GetTick>
 8002542:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002544:	e00b      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7fe f8b1 	bl	80006ac <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d902      	bls.n	800255e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	74fb      	strb	r3, [r7, #19]
            break;
 800255c:	e006      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255e:	4b0c      	ldr	r3, [pc, #48]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0ec      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800256c:	7cfb      	ldrb	r3, [r7, #19]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10b      	bne.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002572:	4b07      	ldr	r3, [pc, #28]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002580:	4903      	ldr	r1, [pc, #12]	@ (8002590 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002582:	4313      	orrs	r3, r2
 8002584:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002588:	e008      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800258a:	7cfb      	ldrb	r3, [r7, #19]
 800258c:	74bb      	strb	r3, [r7, #18]
 800258e:	e005      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002590:	40021000 	.word	0x40021000
 8002594:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002598:	7cfb      	ldrb	r3, [r7, #19]
 800259a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800259c:	7c7b      	ldrb	r3, [r7, #17]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d105      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025a2:	4ba7      	ldr	r3, [pc, #668]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	4aa6      	ldr	r2, [pc, #664]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025ba:	4ba1      	ldr	r3, [pc, #644]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c0:	f023 0203 	bic.w	r2, r3, #3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	499d      	ldr	r1, [pc, #628]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025dc:	4b98      	ldr	r3, [pc, #608]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e2:	f023 020c 	bic.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4995      	ldr	r1, [pc, #596]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025fe:	4b90      	ldr	r3, [pc, #576]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002604:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	498c      	ldr	r1, [pc, #560]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002620:	4b87      	ldr	r3, [pc, #540]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002626:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	4984      	ldr	r1, [pc, #528]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002642:	4b7f      	ldr	r3, [pc, #508]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002648:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	497b      	ldr	r1, [pc, #492]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0320 	and.w	r3, r3, #32
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002664:	4b76      	ldr	r3, [pc, #472]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800266a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4973      	ldr	r1, [pc, #460]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002686:	4b6e      	ldr	r3, [pc, #440]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800268c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	69db      	ldr	r3, [r3, #28]
 8002694:	496a      	ldr	r1, [pc, #424]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80026a8:	4b65      	ldr	r3, [pc, #404]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4962      	ldr	r1, [pc, #392]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	4959      	ldr	r1, [pc, #356]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80026ec:	4b54      	ldr	r3, [pc, #336]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026f2:	f023 0203 	bic.w	r2, r3, #3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fa:	4951      	ldr	r1, [pc, #324]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800270e:	4b4c      	ldr	r3, [pc, #304]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002714:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800271c:	4948      	ldr	r1, [pc, #288]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d015      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002730:	4b43      	ldr	r3, [pc, #268]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002736:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	4940      	ldr	r1, [pc, #256]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800274e:	d105      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002750:	4b3b      	ldr	r3, [pc, #236]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	4a3a      	ldr	r2, [pc, #232]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002756:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800275a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002764:	2b00      	cmp	r3, #0
 8002766:	d015      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002768:	4b35      	ldr	r3, [pc, #212]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002776:	4932      	ldr	r1, [pc, #200]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002778:	4313      	orrs	r3, r2
 800277a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002782:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002786:	d105      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002788:	4b2d      	ldr	r3, [pc, #180]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a2c      	ldr	r2, [pc, #176]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002792:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027a0:	4b27      	ldr	r3, [pc, #156]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027a6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	4924      	ldr	r1, [pc, #144]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027be:	d105      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d015      	beq.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027d8:	4b19      	ldr	r3, [pc, #100]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027e6:	4916      	ldr	r1, [pc, #88]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027f6:	d105      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f8:	4b11      	ldr	r3, [pc, #68]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	4a10      	ldr	r2, [pc, #64]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002802:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d019      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002810:	4b0b      	ldr	r3, [pc, #44]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002812:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002816:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	4908      	ldr	r1, [pc, #32]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002820:	4313      	orrs	r3, r2
 8002822:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800282e:	d109      	bne.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002830:	4b03      	ldr	r3, [pc, #12]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	4a02      	ldr	r2, [pc, #8]	@ (8002840 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002836:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800283a:	60d3      	str	r3, [r2, #12]
 800283c:	e002      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d015      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002850:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002856:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	4926      	ldr	r1, [pc, #152]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800286a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800286e:	d105      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002870:	4b21      	ldr	r3, [pc, #132]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	4a20      	ldr	r2, [pc, #128]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002876:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800287a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d015      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002888:	4b1b      	ldr	r3, [pc, #108]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002896:	4918      	ldr	r1, [pc, #96]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028a6:	d105      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028a8:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	4a12      	ldr	r2, [pc, #72]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d015      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80028c0:	4b0d      	ldr	r3, [pc, #52]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80028c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ce:	490a      	ldr	r1, [pc, #40]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80028de:	d105      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e0:	4b05      	ldr	r3, [pc, #20]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	4a04      	ldr	r2, [pc, #16]	@ (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80028e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028ea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3718      	adds	r7, #24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40021000 	.word	0x40021000

080028fc <HAL_FDCAN_RxFifo0Callback>:
struct hyp_msg_BatteryStatus_Hyp batt_infor;
uint32_t count = 0;


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t filterIndex)
{
 80028fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002900:	b092      	sub	sp, #72	@ 0x48
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rxHeader;
	uint8_t rxData[8];
	count++;
 8002908:	4b35      	ldr	r3, [pc, #212]	@ (80029e0 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3301      	adds	r3, #1
 800290e:	4a34      	ldr	r2, [pc, #208]	@ (80029e0 <HAL_FDCAN_RxFifo0Callback+0xe4>)
 8002910:	6013      	str	r3, [r2, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 8002912:	f107 0318 	add.w	r3, r7, #24
 8002916:	f107 0220 	add.w	r2, r7, #32
 800291a:	2140      	movs	r1, #64	@ 0x40
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7fe fa01 	bl	8000d24 <HAL_FDCAN_GetRxMessage>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d155      	bne.n	80029d4 <HAL_FDCAN_RxFifo0Callback+0xd8>
			return;
	CanardCANFrame frame;
	frame.id = rxHeader.Identifier;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	60bb      	str	r3, [r7, #8]
	if (rxHeader.IdType == FDCAN_EXTENDED_ID)
 800292c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800292e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002932:	d103      	bne.n	800293c <HAL_FDCAN_RxFifo0Callback+0x40>
			frame.id |= (1UL << 31); // set extended bit
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800293a:	60bb      	str	r3, [r7, #8]
	frame.data_len = rxHeader.DataLength;
 800293c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293e:	b2db      	uxtb	r3, r3
 8002940:	753b      	strb	r3, [r7, #20]
	if (frame.data_len > 8) frame.data_len = 8;
 8002942:	7d3b      	ldrb	r3, [r7, #20]
 8002944:	2b08      	cmp	r3, #8
 8002946:	d901      	bls.n	800294c <HAL_FDCAN_RxFifo0Callback+0x50>
 8002948:	2308      	movs	r3, #8
 800294a:	753b      	strb	r3, [r7, #20]

	memcpy(frame.data, rxData, frame.data_len);
 800294c:	7d3b      	ldrb	r3, [r7, #20]
 800294e:	461a      	mov	r2, r3
 8002950:	f107 0118 	add.w	r1, r7, #24
 8002954:	f107 0308 	add.w	r3, r7, #8
 8002958:	3304      	adds	r3, #4
 800295a:	4618      	mov	r0, r3
 800295c:	f002 fa8e 	bl	8004e7c <memcpy>
	frame.iface_id = 0;
 8002960:	2300      	movs	r3, #0
 8002962:	757b      	strb	r3, [r7, #21]

	canardHandleRxFrame(&canard, &frame, HAL_GetTick() * 1000ULL);
 8002964:	f7fd fea2 	bl	80006ac <HAL_GetTick>
 8002968:	4603      	mov	r3, r0
 800296a:	2200      	movs	r2, #0
 800296c:	4698      	mov	r8, r3
 800296e:	4691      	mov	r9, r2
 8002970:	4642      	mov	r2, r8
 8002972:	464b      	mov	r3, r9
 8002974:	f04f 0000 	mov.w	r0, #0
 8002978:	f04f 0100 	mov.w	r1, #0
 800297c:	0159      	lsls	r1, r3, #5
 800297e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002982:	0150      	lsls	r0, r2, #5
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	ebb2 0408 	subs.w	r4, r2, r8
 800298c:	eb63 0509 	sbc.w	r5, r3, r9
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	00ab      	lsls	r3, r5, #2
 800299a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800299e:	00a2      	lsls	r2, r4, #2
 80029a0:	4614      	mov	r4, r2
 80029a2:	461d      	mov	r5, r3
 80029a4:	eb14 0a08 	adds.w	sl, r4, r8
 80029a8:	eb45 0b09 	adc.w	fp, r5, r9
 80029ac:	f04f 0200 	mov.w	r2, #0
 80029b0:	f04f 0300 	mov.w	r3, #0
 80029b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029c0:	4692      	mov	sl, r2
 80029c2:	469b      	mov	fp, r3
 80029c4:	4652      	mov	r2, sl
 80029c6:	465b      	mov	r3, fp
 80029c8:	f107 0108 	add.w	r1, r7, #8
 80029cc:	4805      	ldr	r0, [pc, #20]	@ (80029e4 <HAL_FDCAN_RxFifo0Callback+0xe8>)
 80029ce:	f000 fa13 	bl	8002df8 <canardHandleRxFrame>
 80029d2:	e000      	b.n	80029d6 <HAL_FDCAN_RxFifo0Callback+0xda>
			return;
 80029d4:	bf00      	nop
}
 80029d6:	3748      	adds	r7, #72	@ 0x48
 80029d8:	46bd      	mov	sp, r7
 80029da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029de:	bf00      	nop
 80029e0:	200009c4 	.word	0x200009c4
 80029e4:	20000890 	.word	0x20000890

080029e8 <config_fdcan_filter_all>:

static void config_fdcan_filter_all(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
    FDCAN_FilterTypeDef sFilterConfig;

    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80029ee:	2300      	movs	r3, #0
 80029f0:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 0;
 80029f2:	2300      	movs	r3, #0
 80029f4:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80029f6:	2302      	movs	r3, #2
 80029f8:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80029fa:	2301      	movs	r3, #1
 80029fc:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x000;
 80029fe:	2300      	movs	r3, #0
 8002a00:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x000;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK)
 8002a06:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <config_fdcan_filter_all+0x70>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	463a      	mov	r2, r7
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe f8c2 	bl	8000b98 <HAL_FDCAN_ConfigFilter>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <config_fdcan_filter_all+0x36>
    {
        Error_Handler();
 8002a1a:	f7fd fccf 	bl	80003bc <Error_Handler>
    }

    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8002a1e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a22:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIndex = 1;
 8002a24:	2301      	movs	r3, #1
 8002a26:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterID1 = 0x00000000;
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterID2 = 0x00000000;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
    if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) != HAL_OK)
 8002a38:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <config_fdcan_filter_all+0x70>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	463a      	mov	r2, r7
 8002a3e:	4611      	mov	r1, r2
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe f8a9 	bl	8000b98 <HAL_FDCAN_ConfigFilter>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <config_fdcan_filter_all+0x68>
    {
        Error_Handler();
 8002a4c:	f7fd fcb6 	bl	80003bc <Error_Handler>
    }
}
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	200008bc 	.word	0x200008bc

08002a5c <FDCan_tx_frame>:

static void FDCan_tx_frame(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	@ 0x28
 8002a60:	af00      	add	r7, sp, #0
    const CanardCANFrame* txf;
    while ((txf = canardPeekTxQueue(&canard)) != NULL)
 8002a62:	e02e      	b.n	8002ac2 <FDCan_tx_frame+0x66>
    {
    	FDCAN_TxHeaderTypeDef txHeader;
        if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) == 0) // TX FIFO not full
 8002a64:	4b1d      	ldr	r3, [pc, #116]	@ (8002adc <FDCan_tx_frame+0x80>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002a6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d123      	bne.n	8002abe <FDCan_tx_frame+0x62>
        {
            txHeader.Identifier = txf->id & 0x1FFFFFFF;
 8002a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8002a7e:	603b      	str	r3, [r7, #0]
            txHeader.IdType = FDCAN_EXTENDED_ID;
 8002a80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002a84:	607b      	str	r3, [r7, #4]
            txHeader.TxFrameType = FDCAN_DATA_FRAME;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
            txHeader.DataLength = txf->data_len;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	7b1b      	ldrb	r3, [r3, #12]
 8002a8e:	60fb      	str	r3, [r7, #12]
            txHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61bb      	str	r3, [r7, #24]
            txHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
            txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
            txHeader.MessageMarker = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	623b      	str	r3, [r7, #32]

            if (HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &txHeader, (uint8_t*)txf->data) == HAL_OK)
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <FDCan_tx_frame+0x80>)
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	1d1a      	adds	r2, r3, #4
 8002aa8:	463b      	mov	r3, r7
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7fe f8f6 	bl	8000c9c <HAL_FDCAN_AddMessageToTxFifoQ>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <FDCan_tx_frame+0x76>
            {
                canardPopTxQueue(&canard);
 8002ab6:	480a      	ldr	r0, [pc, #40]	@ (8002ae0 <FDCan_tx_frame+0x84>)
 8002ab8:	f000 f989 	bl	8002dce <canardPopTxQueue>
 8002abc:	e001      	b.n	8002ac2 <FDCan_tx_frame+0x66>
                break;
            }
        }
        else
        {
            break;
 8002abe:	bf00      	nop
        }
    }
}
 8002ac0:	e008      	b.n	8002ad4 <FDCan_tx_frame+0x78>
    while ((txf = canardPeekTxQueue(&canard)) != NULL)
 8002ac2:	4807      	ldr	r0, [pc, #28]	@ (8002ae0 <FDCan_tx_frame+0x84>)
 8002ac4:	f000 f970 	bl	8002da8 <canardPeekTxQueue>
 8002ac8:	6278      	str	r0, [r7, #36]	@ 0x24
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1c9      	bne.n	8002a64 <FDCan_tx_frame+0x8>
}
 8002ad0:	e000      	b.n	8002ad4 <FDCan_tx_frame+0x78>
                break;
 8002ad2:	bf00      	nop
}
 8002ad4:	bf00      	nop
 8002ad6:	3728      	adds	r7, #40	@ 0x28
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	200008bc 	.word	0x200008bc
 8002ae0:	20000890 	.word	0x20000890

08002ae4 <handle_AES_Allocation>:

static void handle_AES_Allocation(CanardInstance *ins, CanardRxTransfer *transfer)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b0d8      	sub	sp, #352	@ 0x160
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002aee:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 8002af2:	6018      	str	r0, [r3, #0]
 8002af4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002af8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002afc:	6019      	str	r1, [r3, #0]
	uint8_t data[PADDED_SIZE] = {0};
 8002afe:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b02:	2250      	movs	r2, #80	@ 0x50
 8002b04:	2100      	movs	r1, #0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f002 f98b 	bl	8004e22 <memset>
	struct hyp_aes_Encryption_Hyp pkt;
	hyp_aes_Encryption_Hyp_decode(transfer, &pkt);
 8002b0c:	f107 020c 	add.w	r2, r7, #12
 8002b10:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002b14:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002b18:	4611      	mov	r1, r2
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	f001 fc1b 	bl	8004356 <hyp_aes_Encryption_Hyp_decode>


	memcpy(data, pkt.payload_ciphertext_tiny, PADDED_SIZE);
 8002b20:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002b24:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002b28:	f507 7086 	add.w	r0, r7, #268	@ 0x10c
 8002b2c:	3380      	adds	r3, #128	@ 0x80
 8002b2e:	2250      	movs	r2, #80	@ 0x50
 8002b30:	4619      	mov	r1, r3
 8002b32:	f002 f9a3 	bl	8004e7c <memcpy>
	for (int i = 0; i < PADDED_SIZE; i += BLOCK_SIZE)
 8002b36:	2300      	movs	r3, #0
 8002b38:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8002b3c:	e00d      	b.n	8002b5a <handle_AES_Allocation+0x76>
	{
	    AES_ECB_decrypt(&ctx, data + i);
 8002b3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002b42:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8002b46:	4413      	add	r3, r2
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4811      	ldr	r0, [pc, #68]	@ (8002b90 <handle_AES_Allocation+0xac>)
 8002b4c:	f002 f94b 	bl	8004de6 <AES_ECB_decrypt>
	for (int i = 0; i < PADDED_SIZE; i += BLOCK_SIZE)
 8002b50:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002b54:	3310      	adds	r3, #16
 8002b56:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8002b5a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002b5e:	2b4f      	cmp	r3, #79	@ 0x4f
 8002b60:	dded      	ble.n	8002b3e <handle_AES_Allocation+0x5a>
	}
	memcpy(&batt_infor, data, STRUCT_SIZE);
 8002b62:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8002b66:	2244      	movs	r2, #68	@ 0x44
 8002b68:	4619      	mov	r1, r3
 8002b6a:	480a      	ldr	r0, [pc, #40]	@ (8002b94 <handle_AES_Allocation+0xb0>)
 8002b6c:	f002 f986 	bl	8004e7c <memcpy>
	if (batt_infor.name.len == strlen("HYPMOTION_PACK1") &&
 8002b70:	4b08      	ldr	r3, [pc, #32]	@ (8002b94 <handle_AES_Allocation+0xb0>)
 8002b72:	7bdb      	ldrb	r3, [r3, #15]
 8002b74:	2b0f      	cmp	r3, #15
 8002b76:	d106      	bne.n	8002b86 <handle_AES_Allocation+0xa2>
		memcmp(batt_infor.name.data, "HYPMOTION_PACK1", batt_infor.name.len) == 0)
 8002b78:	4b06      	ldr	r3, [pc, #24]	@ (8002b94 <handle_AES_Allocation+0xb0>)
 8002b7a:	7bdb      	ldrb	r3, [r3, #15]
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	4906      	ldr	r1, [pc, #24]	@ (8002b98 <handle_AES_Allocation+0xb4>)
 8002b80:	4806      	ldr	r0, [pc, #24]	@ (8002b9c <handle_AES_Allocation+0xb8>)
 8002b82:	f002 f93e 	bl	8004e02 <memcmp>
	{
	}
}
 8002b86:	bf00      	nop
 8002b88:	f507 77b0 	add.w	r7, r7, #352	@ 0x160
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	200008c0 	.word	0x200008c0
 8002b94:	20000980 	.word	0x20000980
 8002b98:	08004eb0 	.word	0x08004eb0
 8002b9c:	20000990 	.word	0x20000990

08002ba0 <should_accept>:

static bool should_accept(const CanardInstance *ins, uint64_t *out_data_type_signature,
								uint16_t data_type_id,
                                CanardTransferType transfer_type,
                                uint8_t source_node_id)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	4611      	mov	r1, r2
 8002bac:	461a      	mov	r2, r3
 8002bae:	460b      	mov	r3, r1
 8002bb0:	80fb      	strh	r3, [r7, #6]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	717b      	strb	r3, [r7, #5]
	if (transfer_type == CanardTransferTypeBroadcast)
 8002bb6:	797b      	ldrb	r3, [r7, #5]
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d10a      	bne.n	8002bd2 <should_accept+0x32>
	{
		switch (data_type_id)
 8002bbc:	88fb      	ldrh	r3, [r7, #6]
 8002bbe:	2b2c      	cmp	r3, #44	@ 0x2c
 8002bc0:	d107      	bne.n	8002bd2 <should_accept+0x32>
		{
		 // see if we want to handle a specific broadcast packet
			case HYP_AES_ENCRYPTION_HYP_ID:
			{
				*out_data_type_signature = HYP_AES_ENCRYPTION_HYP_SIGNATURE;
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	a306      	add	r3, pc, #24	@ (adr r3, 8002be0 <should_accept+0x40>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	e9c1 2300 	strd	r2, r3, [r1]
				return true;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <should_accept+0x34>
			}
		}
	}
    // we don't want any other messages
    return false;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	7ee308d1 	.word	0x7ee308d1
 8002be4:	0b5efee6 	.word	0x0b5efee6

08002be8 <on_reception>:
static void on_reception(CanardInstance *ins, CanardRxTransfer *transfer)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
	if (transfer->transfer_type == CanardTransferTypeBroadcast)
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	7e1b      	ldrb	r3, [r3, #24]
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d108      	bne.n	8002c0c <on_reception+0x24>
	{
		switch (transfer->data_type_id)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	8adb      	ldrh	r3, [r3, #22]
 8002bfe:	2b2c      	cmp	r3, #44	@ 0x2c
 8002c00:	d104      	bne.n	8002c0c <on_reception+0x24>
		{
			case HYP_AES_ENCRYPTION_HYP_ID:
			{
				handle_AES_Allocation(ins, transfer);
 8002c02:	6839      	ldr	r1, [r7, #0]
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f7ff ff6d 	bl	8002ae4 <handle_AES_Allocation>
				break;
 8002c0a:	bf00      	nop
			}
		}
	}
}
 8002c0c:	bf00      	nop
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <fdcan_init>:
void fdcan_init(FDCAN_HandleTypeDef* hfdcan1)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af02      	add	r7, sp, #8
 8002c1a:	6078      	str	r0, [r7, #4]
	hfdcan = hfdcan1;
 8002c1c:	4a13      	ldr	r2, [pc, #76]	@ (8002c6c <fdcan_init+0x58>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
    // Init CAN hardware
    HAL_FDCAN_Start(hfdcan);
 8002c22:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <fdcan_init+0x58>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7fe f810 	bl	8000c4c <HAL_FDCAN_Start>
    HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c6c <fdcan_init+0x58>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2200      	movs	r2, #0
 8002c32:	2101      	movs	r1, #1
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe f97d 	bl	8000f34 <HAL_FDCAN_ActivateNotification>
    config_fdcan_filter_all();
 8002c3a:	f7ff fed5 	bl	80029e8 <config_fdcan_filter_all>

    // Init libcanard
    canardInit(&canard,
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <fdcan_init+0x5c>)
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <fdcan_init+0x60>)
 8002c48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c4c:	490a      	ldr	r1, [pc, #40]	@ (8002c78 <fdcan_init+0x64>)
 8002c4e:	480b      	ldr	r0, [pc, #44]	@ (8002c7c <fdcan_init+0x68>)
 8002c50:	f000 f820 	bl	8002c94 <canardInit>
				canard_memory_pool,
				sizeof(canard_memory_pool),
				on_reception,
				should_accept,
				NULL);
    canardSetLocalNodeID(&canard, 11);
 8002c54:	210b      	movs	r1, #11
 8002c56:	4809      	ldr	r0, [pc, #36]	@ (8002c7c <fdcan_init+0x68>)
 8002c58:	f000 f850 	bl	8002cfc <canardSetLocalNodeID>
    AES_init_ctx(&ctx, key);
 8002c5c:	4908      	ldr	r1, [pc, #32]	@ (8002c80 <fdcan_init+0x6c>)
 8002c5e:	4809      	ldr	r0, [pc, #36]	@ (8002c84 <fdcan_init+0x70>)
 8002c60:	f001 fc6e 	bl	8004540 <AES_init_ctx>
}
 8002c64:	bf00      	nop
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	200008bc 	.word	0x200008bc
 8002c70:	08002ba1 	.word	0x08002ba1
 8002c74:	08002be9 	.word	0x08002be9
 8002c78:	20000090 	.word	0x20000090
 8002c7c:	20000890 	.word	0x20000890
 8002c80:	08004ee0 	.word	0x08004ee0
 8002c84:	200008c0 	.word	0x200008c0

08002c88 <fdcan_handle>:


void fdcan_handle(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
	FDCan_tx_frame();
 8002c8c:	f7ff fee6 	bl	8002a5c <FDCan_tx_frame>
}
 8002c90:	bf00      	nop
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b086      	sub	sp, #24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 8002ca2:	222c      	movs	r2, #44	@ 0x2c
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f002 f8bb 	bl	8004e22 <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a3a      	ldr	r2, [r7, #32]
 8002cbc:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cce:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cdc:	d302      	bcc.n	8002ce4 <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 8002cde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ce2:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	330c      	adds	r3, #12
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	b292      	uxth	r2, r2
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fa75 	bl	80041de <initPoolAllocator>
}
 8002cf4:	bf00      	nop
 8002cf6:	3718      	adds	r7, #24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d109      	bne.n	8002d24 <canardSetLocalNodeID+0x28>
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d006      	beq.n	8002d24 <canardSetLocalNodeID+0x28>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 8002d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	db02      	blt.n	8002d24 <canardSetLocalNodeID+0x28>
    {
        ins->node_id = self_node_id;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	781b      	ldrb	r3, [r3, #0]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 8002d52:	683b      	ldr	r3, [r7, #0]
#endif
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 8002d6a:	683b      	ldr	r3, [r7, #0]
#endif
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 8002d82:	683b      	ldr	r3, [r7, #0]
#endif
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <canardRxToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)rx;
 8002d9a:	683b      	ldr	r3, [r7, #0]
#endif
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <canardPeekTxQueue>:

    return result;
}

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <canardPeekTxQueue+0x14>
    {
        return NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	e002      	b.n	8002dc2 <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	3304      	adds	r3, #4
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	330c      	adds	r3, #12
 8002de8:	68f9      	ldr	r1, [r7, #12]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f001 fa57 	bl	800429e <freeBlock>
}
 8002df0:	bf00      	nop
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8002df8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002dfc:	b09f      	sub	sp, #124	@ 0x7c
 8002dfe:	af02      	add	r7, sp, #8
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fdbb 	bl	8003988 <extractTransferType>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8002e18:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d007      	beq.n	8002e30 <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0a1b      	lsrs	r3, r3, #8
 8002e26:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8002e28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e000      	b.n	8002e32 <canardHandleRxFrame+0x3a>
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	da0f      	bge.n	8002e5e <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d103      	bne.n	8002e5e <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d102      	bne.n	8002e64 <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 8002e5e:	f06f 0309 	mvn.w	r3, #9
 8002e62:	e377      	b.n	8003554 <canardHandleRxFrame+0x75c>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 8002e64:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d00b      	beq.n	8002e84 <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 8002e6c:	68f8      	ldr	r0, [r7, #12]
 8002e6e:	f7ff ff5f 	bl	8002d30 <canardGetLocalNodeID>
 8002e72:	4603      	mov	r3, r0
 8002e74:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8002e76:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d002      	beq.n	8002e84 <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 8002e7e:	f06f 030a 	mvn.w	r3, #10
 8002e82:	e367      	b.n	8003554 <canardHandleRxFrame+0x75c>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	0e1b      	lsrs	r3, r3, #24
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e9e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fd4e 	bl	8003948 <extractDataType>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8002eb2:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8002eb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002ec2:	049b      	lsls	r3, r3, #18
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002eca:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	64fb      	str	r3, [r7, #76]	@ 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	7b1b      	ldrb	r3, [r3, #12]
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	4413      	add	r3, r2
 8002eda:	791b      	ldrb	r3, [r3, #4]
 8002edc:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    uint64_t data_type_signature = 0;
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    CanardRxState* rx_state = NULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 8002ef0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002ef4:	09db      	lsrs	r3, r3, #7
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01e      	beq.n	8002f3e <canardHandleRxFrame+0x146>
    {

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685e      	ldr	r6, [r3, #4]
 8002f04:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8002f08:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8002f0c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002f10:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	4603      	mov	r3, r0
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	47b0      	blx	r6
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <canardHandleRxFrame+0x140>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 8002f22:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fd53 	bl	80039d0 <traverseRxStates>
 8002f2a:	66f8      	str	r0, [r7, #108]	@ 0x6c

            if(rx_state == NULL)
 8002f2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d127      	bne.n	8002f82 <canardHandleRxFrame+0x18a>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8002f32:	f06f 0302 	mvn.w	r3, #2
 8002f36:	e30d      	b.n	8003554 <canardHandleRxFrame+0x75c>
            }
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 8002f38:	f06f 030b 	mvn.w	r3, #11
 8002f3c:	e30a      	b.n	8003554 <canardHandleRxFrame+0x75c>
        }
    }
    else
    {
        rx_state = findRxState(ins, transfer_descriptor);
 8002f3e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 fd74 	bl	8003a2e <findRxState>
 8002f46:	66f8      	str	r0, [r7, #108]	@ 0x6c

        if (rx_state == NULL)
 8002f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d119      	bne.n	8002f82 <canardHandleRxFrame+0x18a>
	    // we should return -CANARD_ERROR_RX_NOT_WANTED for
	    // non-start frames where we have rejected the start of
	    // transfer.  doing it here avoids calling the potentially
	    // expensive should_accept() on every frame in messages we
	    // will be accepting
	    if (!ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id)) {
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	685c      	ldr	r4, [r3, #4]
 8002f52:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8002f56:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8002f5a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8002f5e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4603      	mov	r3, r0
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	47a0      	blx	r4
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	f083 0301 	eor.w	r3, r3, #1
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <canardHandleRxFrame+0x184>
		return -CANARD_ERROR_RX_NOT_WANTED;
 8002f76:	f06f 030b 	mvn.w	r3, #11
 8002f7a:	e2eb      	b.n	8003554 <canardHandleRxFrame+0x75c>
	    }
	    return -CANARD_ERROR_RX_MISSED_START;
 8002f7c:	f06f 030c 	mvn.w	r3, #12
 8002f80:	e2e8      	b.n	8003554 <canardHandleRxFrame+0x75c>
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 8002f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8002f94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f9e:	ebb0 0802 	subs.w	r8, r0, r2
 8002fa2:	eb61 0903 	sbc.w	r9, r1, r3
 8002fa6:	4ba9      	ldr	r3, [pc, #676]	@ (800324c <canardHandleRxFrame+0x454>)
 8002fa8:	4598      	cmp	r8, r3
 8002faa:	f179 0300 	sbcs.w	r3, r9, #0
 8002fae:	bf2c      	ite	cs
 8002fb0:	2301      	movcs	r3, #1
 8002fb2:	2300      	movcc	r3, #0
 8002fb4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    const bool same_iface = frame->iface_id == rx_state->iface_id;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	7b5a      	ldrb	r2, [r3, #13]
 8002fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fbe:	7e9b      	ldrb	r3, [r3, #26]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	bf0c      	ite	eq
 8002fc4:	2301      	moveq	r3, #1
 8002fc6:	2300      	movne	r3, #0
 8002fc8:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 8002fcc:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002fd0:	09db      	lsrs	r3, r3, #7
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf14      	ite	ne
 8002fdc:	2301      	movne	r3, #1
 8002fde:	2300      	moveq	r3, #0
 8002fe0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8002fe4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fe6:	7ddb      	ldrb	r3, [r3, #23]
 8002fe8:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	461a      	mov	r2, r3
 8002ff0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002ff4:	f003 031f 	and.w	r3, r3, #31
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	f000 fc62 	bl	80038c6 <computeTransferIDForwardDistance>
 8003002:	4603      	mov	r3, r0
    const bool not_previous_tid =
 8003004:	2b01      	cmp	r3, #1
 8003006:	bfcc      	ite	gt
 8003008:	2301      	movgt	r3, #1
 800300a:	2300      	movle	r3, #0
 800300c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 8003010:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003012:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003016:	e9d7 0100 	ldrd	r0, r1, [r7]
 800301a:	1a84      	subs	r4, r0, r2
 800301c:	eb61 0503 	sbc.w	r5, r1, r3
 8003020:	4b8b      	ldr	r3, [pc, #556]	@ (8003250 <canardHandleRxFrame+0x458>)
 8003022:	429c      	cmp	r4, r3
 8003024:	f175 0300 	sbcs.w	r3, r5, #0
 8003028:	bf2c      	ite	cs
 800302a:	2301      	movcs	r3, #1
 800302c:	2300      	movcc	r3, #0
 800302e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 8003032:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	b2da      	uxtb	r2, r3
 800303c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800303e:	7ddb      	ldrb	r3, [r3, #23]
 8003040:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8003044:	b2db      	uxtb	r3, r3
 8003046:	4619      	mov	r1, r3
 8003048:	4610      	mov	r0, r2
 800304a:	f000 fc3c 	bl	80038c6 <computeTransferIDForwardDistance>
 800304e:	4603      	mov	r3, r0
 8003050:	2b0f      	cmp	r3, #15
 8003052:	bfd4      	ite	le
 8003054:	2301      	movle	r3, #1
 8003056:	2300      	movgt	r3, #0
 8003058:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 800305c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 800306c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8003070:	2b00      	cmp	r3, #0
 8003072:	d11f      	bne.n	80030b4 <canardHandleRxFrame+0x2bc>
            (not_initialized) ||
 8003074:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8003078:	2b00      	cmp	r3, #0
 800307a:	d11b      	bne.n	80030b4 <canardHandleRxFrame+0x2bc>
            (tid_timed_out) ||
 800307c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <canardHandleRxFrame+0x2a4>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8003084:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <canardHandleRxFrame+0x2a4>
 800308c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10f      	bne.n	80030b4 <canardHandleRxFrame+0x2bc>
 8003094:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10b      	bne.n	80030b4 <canardHandleRxFrame+0x2bc>
 800309c:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d009      	beq.n	80030b8 <canardHandleRxFrame+0x2c0>
            (iface_switch_allowed && first_frame && non_wrapped_tid);
 80030a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <canardHandleRxFrame+0x2c0>
 80030ac:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <canardHandleRxFrame+0x2c0>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <canardHandleRxFrame+0x2c2>
 80030b8:	2300      	movs	r3, #0
    const bool need_restart =
 80030ba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80030be:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

    if (need_restart)
 80030ca:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d02f      	beq.n	8003132 <canardHandleRxFrame+0x33a>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 80030d2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	b2d9      	uxtb	r1, r3
 80030dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030de:	7dd3      	ldrb	r3, [r2, #23]
 80030e0:	f361 0386 	bfi	r3, r1, #2, #5
 80030e4:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 80030e6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030e8:	7dd3      	ldrb	r3, [r2, #23]
 80030ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030ee:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 80030f0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fd05 	bl	8003b02 <releaseStatePayload>
        rx_state->iface_id = frame->iface_id;
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	7b5a      	ldrb	r2, [r3, #13]
 80030fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030fe:	769a      	strb	r2, [r3, #26]
        if (!IS_START_OF_TRANSFER(tail_byte))
 8003100:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003104:	09db      	lsrs	r3, r3, #7
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d110      	bne.n	8003132 <canardHandleRxFrame+0x33a>
        {
            rx_state->transfer_id++;
 8003110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003112:	7ddb      	ldrb	r3, [r3, #23]
 8003114:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8003118:	b2db      	uxtb	r3, r3
 800311a:	3301      	adds	r3, #1
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	b2d9      	uxtb	r1, r3
 8003122:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003124:	7dd3      	ldrb	r3, [r2, #23]
 8003126:	f361 0386 	bfi	r3, r1, #2, #5
 800312a:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 800312c:	f06f 030c 	mvn.w	r3, #12
 8003130:	e210      	b.n	8003554 <canardHandleRxFrame+0x75c>
        }
    }

    if (frame->iface_id != rx_state->iface_id)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	7b5a      	ldrb	r2, [r3, #13]
 8003136:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003138:	7e9b      	ldrb	r3, [r3, #26]
 800313a:	429a      	cmp	r2, r3
 800313c:	d001      	beq.n	8003142 <canardHandleRxFrame+0x34a>
    {
        // drop frame if coming from unexpected interface
        return CANARD_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	e208      	b.n	8003554 <canardHandleRxFrame+0x75c>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 8003142:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003146:	09db      	lsrs	r3, r3, #7
 8003148:	b2db      	uxtb	r3, r3
 800314a:	f003 0301 	and.w	r3, r3, #1
 800314e:	2b00      	cmp	r3, #0
 8003150:	d041      	beq.n	80031d6 <canardHandleRxFrame+0x3de>
 8003152:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003156:	099b      	lsrs	r3, r3, #6
 8003158:	b2db      	uxtb	r3, r3
 800315a:	f003 0301 	and.w	r3, r3, #1
 800315e:	2b00      	cmp	r3, #0
 8003160:	d039      	beq.n	80031d6 <canardHandleRxFrame+0x3de>
    {
        rx_state->timestamp_usec = timestamp_usec;
 8003162:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003168:	e9c1 2302 	strd	r2, r3, [r1, #8]
        CanardRxTransfer rx_transfer = {
 800316c:	f107 0310 	add.w	r3, r7, #16
 8003170:	2220      	movs	r2, #32
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f001 fe54 	bl	8004e22 <memset>
 800317a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800317e:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 8003186:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	7b1b      	ldrb	r3, [r3, #12]
 800318c:	3b01      	subs	r3, #1
 800318e:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8003190:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003192:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003196:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8003198:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800319c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 80031a0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 80031aa:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80031ae:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80031b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80031b6:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80031ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        ins->on_reception(ins, &rx_transfer);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f107 0210 	add.w	r2, r7, #16
 80031c6:	4611      	mov	r1, r2
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 80031cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80031ce:	f000 fb99 	bl	8003904 <prepareForNextTransfer>
        return CANARD_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	e1be      	b.n	8003554 <canardHandleRxFrame+0x75c>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 80031d6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80031da:	095b      	lsrs	r3, r3, #5
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	461a      	mov	r2, r3
 80031ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031f0:	7ddb      	ldrb	r3, [r3, #23]
 80031f2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d002      	beq.n	8003202 <canardHandleRxFrame+0x40a>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 80031fc:	f06f 030d 	mvn.w	r3, #13
 8003200:	e1a8      	b.n	8003554 <canardHandleRxFrame+0x75c>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 8003202:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800320c:	7dd2      	ldrb	r2, [r2, #23]
 800320e:	f3c2 0284 	ubfx	r2, r2, #2, #5
 8003212:	b2d2      	uxtb	r2, r2
 8003214:	4293      	cmp	r3, r2
 8003216:	d002      	beq.n	800321e <canardHandleRxFrame+0x426>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 8003218:	f06f 030e 	mvn.w	r3, #14
 800321c:	e19a      	b.n	8003554 <canardHandleRxFrame+0x75c>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 800321e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003222:	09db      	lsrs	r3, r3, #7
 8003224:	b2db      	uxtb	r3, r3
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d060      	beq.n	80032f0 <canardHandleRxFrame+0x4f8>
 800322e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003232:	099b      	lsrs	r3, r3, #6
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d158      	bne.n	80032f0 <canardHandleRxFrame+0x4f8>
    {
        if (frame->data_len <= 3)
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	7b1b      	ldrb	r3, [r3, #12]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d806      	bhi.n	8003254 <canardHandleRxFrame+0x45c>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 8003246:	f06f 030f 	mvn.w	r3, #15
 800324a:	e183      	b.n	8003554 <canardHandleRxFrame+0x75c>
 800324c:	001e8481 	.word	0x001e8481
 8003250:	000f4241 	.word	0x000f4241
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 8003254:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003256:	e9d7 2300 	ldrd	r2, r3, [r7]
 800325a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rx_state->payload_len = 0;
 800325e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003260:	8ad3      	ldrh	r3, [r2, #22]
 8003262:	f36f 0309 	bfc	r3, #0, #10
 8003266:	82d3      	strh	r3, [r2, #22]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f103 000c 	add.w	r0, r3, #12
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	3304      	adds	r3, #4
 8003272:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8003278:	3b03      	subs	r3, #3
 800327a:	b2db      	uxtb	r3, r3
 800327c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800327e:	f000 fc75 	bl	8003b6c <bufferBlockPushBytes>
 8003282:	4603      	mov	r3, r0
 8003284:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if (ret < 0)
 8003288:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 800328c:	2b00      	cmp	r3, #0
 800328e:	da09      	bge.n	80032a4 <canardHandleRxFrame+0x4ac>
        {
            releaseStatePayload(ins, rx_state);
 8003290:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fc35 	bl	8003b02 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8003298:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800329a:	f000 fb33 	bl	8003904 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 800329e:	f06f 0302 	mvn.w	r3, #2
 80032a2:	e157      	b.n	8003554 <canardHandleRxFrame+0x75c>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	791b      	ldrb	r3, [r3, #4]
 80032a8:	461a      	mov	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	795b      	ldrb	r3, [r3, #5]
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	4313      	orrs	r3, r2
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032b8:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 80032ba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80032be:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80032c2:	f000 ff40 	bl	8004146 <crcAddSignature>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032cc:	829a      	strh	r2, [r3, #20]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80032ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032d0:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80032d6:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	7b1b      	ldrb	r3, [r3, #12]
 80032dc:	3b03      	subs	r3, #3
 80032de:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80032e0:	461a      	mov	r2, r3
 80032e2:	f000 ff5f 	bl	80041a4 <crcAdd>
 80032e6:	4603      	mov	r3, r0
 80032e8:	461a      	mov	r2, r3
 80032ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ec:	829a      	strh	r2, [r3, #20]
    {
 80032ee:	e124      	b.n	800353a <canardHandleRxFrame+0x742>
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 80032f0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80032f4:	09db      	lsrs	r3, r3, #7
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d133      	bne.n	8003368 <canardHandleRxFrame+0x570>
 8003300:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8003304:	099b      	lsrs	r3, r3, #6
 8003306:	b2db      	uxtb	r3, r3
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d12b      	bne.n	8003368 <canardHandleRxFrame+0x570>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f103 000c 	add.w	r0, r3, #12
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 800331e:	3b01      	subs	r3, #1
 8003320:	b2db      	uxtb	r3, r3
 8003322:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003324:	f000 fc22 	bl	8003b6c <bufferBlockPushBytes>
 8003328:	4603      	mov	r3, r0
 800332a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (ret < 0)
 800332c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8003330:	2b00      	cmp	r3, #0
 8003332:	da09      	bge.n	8003348 <canardHandleRxFrame+0x550>
        {
            releaseStatePayload(ins, rx_state);
 8003334:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 fbe3 	bl	8003b02 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 800333c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800333e:	f000 fae1 	bl	8003904 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8003342:	f06f 0302 	mvn.w	r3, #2
 8003346:	e105      	b.n	8003554 <canardHandleRxFrame+0x75c>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8003348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800334a:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	1d19      	adds	r1, r3, #4
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	7b1b      	ldrb	r3, [r3, #12]
 8003354:	3b01      	subs	r3, #1
 8003356:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8003358:	461a      	mov	r2, r3
 800335a:	f000 ff23 	bl	80041a4 <crcAdd>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003364:	829a      	strh	r2, [r3, #20]
    {
 8003366:	e0e8      	b.n	800353a <canardHandleRxFrame+0x742>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	7b1b      	ldrb	r3, [r3, #12]
 800336c:	3b01      	subs	r3, #1
 800336e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

        uint8_t tail_offset = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 8003378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800337a:	8adb      	ldrh	r3, [r3, #22]
 800337c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b04      	cmp	r3, #4
 8003384:	d823      	bhi.n	80033ce <canardHandleRxFrame+0x5d6>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 8003386:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003388:	8adb      	ldrh	r3, [r3, #22]
 800338a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800338e:	b29b      	uxth	r3, r3
 8003390:	667b      	str	r3, [r7, #100]	@ 0x64
 8003392:	e012      	b.n	80033ba <canardHandleRxFrame+0x5c2>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 8003394:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	4413      	add	r3, r2
 800339c:	7919      	ldrb	r1, [r3, #4]
 800339e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80033a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033a2:	4413      	add	r3, r2
 80033a4:	331b      	adds	r3, #27
 80033a6:	460a      	mov	r2, r1
 80033a8:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 80033aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033ac:	3301      	adds	r3, #1
 80033ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80033b0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80033b4:	3301      	adds	r3, #1
 80033b6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 80033ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d848      	bhi.n	8003452 <canardHandleRxFrame+0x65a>
 80033c0:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80033c4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d3e3      	bcc.n	8003394 <canardHandleRxFrame+0x59c>
 80033cc:	e041      	b.n	8003452 <canardHandleRxFrame+0x65a>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f103 020c 	add.w	r2, r3, #12
 80033d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4619      	mov	r1, r3
 80033da:	4610      	mov	r0, r2
 80033dc:	f7ff fcb4 	bl	8002d48 <canardBufferFromIdx>
 80033e0:	6638      	str	r0, [r7, #96]	@ 0x60
            if (block != NULL)
 80033e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d034      	beq.n	8003452 <canardHandleRxFrame+0x65a>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 80033e8:	2305      	movs	r3, #5
 80033ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 80033ec:	e005      	b.n	80033fa <canardHandleRxFrame+0x602>
                {
                    block = block->next;
 80033ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	663b      	str	r3, [r7, #96]	@ 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 80033f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033f6:	331c      	adds	r3, #28
 80033f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 80033fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f5      	bne.n	80033ee <canardHandleRxFrame+0x5f6>
                }
                CANARD_ASSERT(block != NULL);

                const size_t offset_within_block = rx_state->payload_len - offset;
 8003402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003404:	8adb      	ldrh	r3, [r3, #22]
 8003406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800340a:	b29b      	uxth	r3, r3
 800340c:	461a      	mov	r2, r3
 800340e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	63bb      	str	r3, [r7, #56]	@ 0x38
                CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                for (size_t i = offset_within_block;
 8003414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003416:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003418:	e012      	b.n	8003440 <canardHandleRxFrame+0x648>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 800341a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	4413      	add	r3, r2
 8003422:	7919      	ldrb	r1, [r3, #4]
 8003424:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003426:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003428:	4413      	add	r3, r2
 800342a:	3304      	adds	r3, #4
 800342c:	460a      	mov	r2, r1
 800342e:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 8003430:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003432:	3301      	adds	r3, #1
 8003434:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003436:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800343a:	3301      	adds	r3, #1
 800343c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 8003440:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003442:	2b1b      	cmp	r3, #27
 8003444:	d805      	bhi.n	8003452 <canardHandleRxFrame+0x65a>
 8003446:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800344a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800344e:	429a      	cmp	r2, r3
 8003450:	d3e3      	bcc.n	800341a <canardHandleRxFrame+0x622>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 8003452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003456:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 800345a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800345c:	331b      	adds	r3, #27
        CanardRxTransfer rx_transfer = {
 800345e:	61bb      	str	r3, [r7, #24]
            .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f103 020c 	add.w	r2, r3, #12
 8003466:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4619      	mov	r1, r3
 800346c:	4610      	mov	r0, r2
 800346e:	f7ff fc6b 	bl	8002d48 <canardBufferFromIdx>
 8003472:	4603      	mov	r3, r0
        CanardRxTransfer rx_transfer = {
 8003474:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 8003476:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800347a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800347e:	429a      	cmp	r2, r3
 8003480:	d205      	bcs.n	800348e <canardHandleRxFrame+0x696>
 8003482:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8003486:	68ba      	ldr	r2, [r7, #8]
 8003488:	4413      	add	r3, r2
 800348a:	3304      	adds	r3, #4
 800348c:	e000      	b.n	8003490 <canardHandleRxFrame+0x698>
 800348e:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 8003490:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 8003492:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003494:	8adb      	ldrh	r3, [r3, #22]
 8003496:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800349a:	b29b      	uxth	r3, r3
 800349c:	461a      	mov	r2, r3
 800349e:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 80034a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80034aa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80034ae:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80034b0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80034b4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 80034b8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 80034c2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 80034c6:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80034ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034ce:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80034d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 80034d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034d8:	2200      	movs	r2, #0
 80034da:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 80034dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034de:	8a98      	ldrh	r0, [r3, #20]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	1d19      	adds	r1, r3, #4
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	7b1b      	ldrb	r3, [r3, #12]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	461a      	mov	r2, r3
 80034ec:	f000 fe5a 	bl	80041a4 <crcAdd>
 80034f0:	4603      	mov	r3, r0
 80034f2:	461a      	mov	r2, r3
 80034f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034f6:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 80034f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034fa:	8a9a      	ldrh	r2, [r3, #20]
 80034fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80034fe:	8b1b      	ldrh	r3, [r3, #24]
 8003500:	429a      	cmp	r2, r3
 8003502:	d106      	bne.n	8003512 <canardHandleRxFrame+0x71a>
        {
            ins->on_reception(ins, &rx_transfer);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f107 0210 	add.w	r2, r7, #16
 800350c:	4611      	mov	r1, r2
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 8003512:	f107 0310 	add.w	r3, r7, #16
 8003516:	4619      	mov	r1, r3
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f9aa 	bl	8003872 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 800351e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003520:	f000 f9f0 	bl	8003904 <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 8003524:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003526:	8a9a      	ldrh	r2, [r3, #20]
 8003528:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800352a:	8b1b      	ldrh	r3, [r3, #24]
 800352c:	429a      	cmp	r2, r3
 800352e:	d101      	bne.n	8003534 <canardHandleRxFrame+0x73c>
        {
            return CANARD_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e00f      	b.n	8003554 <canardHandleRxFrame+0x75c>
        }
        else
        {
            return -CANARD_ERROR_RX_BAD_CRC;
 8003534:	f06f 0310 	mvn.w	r3, #16
 8003538:	e00c      	b.n	8003554 <canardHandleRxFrame+0x75c>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 800353a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800353c:	7ddb      	ldrb	r3, [r3, #23]
 800353e:	b25b      	sxtb	r3, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	09db      	lsrs	r3, r3, #7
 8003546:	b2d9      	uxtb	r1, r3
 8003548:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800354a:	7dd3      	ldrb	r3, [r2, #23]
 800354c:	f361 13c7 	bfi	r3, r1, #7, #1
 8003550:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3774      	adds	r7, #116	@ 0x74
 8003558:	46bd      	mov	sp, r7
 800355a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800355e:	bf00      	nop

08003560 <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 8003560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003564:	b08d      	sub	sp, #52	@ 0x34
 8003566:	af00      	add	r7, sp, #0
 8003568:	61f8      	str	r0, [r7, #28]
 800356a:	61b9      	str	r1, [r7, #24]
 800356c:	4611      	mov	r1, r2
 800356e:	461a      	mov	r2, r3
 8003570:	460b      	mov	r3, r1
 8003572:	75fb      	strb	r3, [r7, #23]
 8003574:	4613      	mov	r3, r2
 8003576:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <canardDecodeScalar+0x24>
 800357e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003580:	2b00      	cmp	r3, #0
 8003582:	d102      	bne.n	800358a <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003584:	f06f 0301 	mvn.w	r3, #1
 8003588:	e16e      	b.n	8003868 <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 800358a:	7dfb      	ldrb	r3, [r7, #23]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <canardDecodeScalar+0x36>
 8003590:	7dfb      	ldrb	r3, [r7, #23]
 8003592:	2b40      	cmp	r3, #64	@ 0x40
 8003594:	d902      	bls.n	800359c <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8003596:	f06f 0301 	mvn.w	r3, #1
 800359a:	e165      	b.n	8003868 <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 800359c:	7dfb      	ldrb	r3, [r7, #23]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d105      	bne.n	80035ae <canardDecodeScalar+0x4e>
 80035a2:	7dbb      	ldrb	r3, [r7, #22]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80035a8:	f06f 0301 	mvn.w	r3, #1
 80035ac:	e15c      	b.n	8003868 <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 80035ae:	f107 0320 	add.w	r3, r7, #32
 80035b2:	2208      	movs	r2, #8
 80035b4:	2100      	movs	r1, #0
 80035b6:	4618      	mov	r0, r3
 80035b8:	f001 fc33 	bl	8004e22 <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 80035bc:	f107 0320 	add.w	r3, r7, #32
 80035c0:	7dfa      	ldrb	r2, [r7, #23]
 80035c2:	69b9      	ldr	r1, [r7, #24]
 80035c4:	69f8      	ldr	r0, [r7, #28]
 80035c6:	f000 fc59 	bl	8003e7c <descatterTransferPayload>
 80035ca:	4603      	mov	r3, r0
 80035cc:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (result <= 0)
 80035ce:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	dc02      	bgt.n	80035dc <canardDecodeScalar+0x7c>
    {
        return result;
 80035d6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80035da:	e145      	b.n	8003868 <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d018      	beq.n	800361a <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	08db      	lsrs	r3, r3, #3
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	3320      	adds	r3, #32
 80035f0:	f107 0210 	add.w	r2, r7, #16
 80035f4:	4413      	add	r3, r2
 80035f6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80035fa:	461a      	mov	r2, r3
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	425b      	negs	r3, r3
 8003600:	f003 0307 	and.w	r3, r3, #7
 8003604:	411a      	asrs	r2, r3
 8003606:	7dfb      	ldrb	r3, [r7, #23]
 8003608:	08db      	lsrs	r3, r3, #3
 800360a:	b2db      	uxtb	r3, r3
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	3320      	adds	r3, #32
 8003610:	f107 0110 	add.w	r1, r7, #16
 8003614:	440b      	add	r3, r1
 8003616:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 800361a:	2300      	movs	r3, #0
 800361c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 8003620:	7dfb      	ldrb	r3, [r7, #23]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d103      	bne.n	800362e <canardDecodeScalar+0xce>
 8003626:	2301      	movs	r3, #1
 8003628:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800362c:	e01e      	b.n	800366c <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 800362e:	7dfb      	ldrb	r3, [r7, #23]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d803      	bhi.n	800363c <canardDecodeScalar+0xdc>
 8003634:	2301      	movs	r3, #1
 8003636:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800363a:	e017      	b.n	800366c <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 800363c:	7dfb      	ldrb	r3, [r7, #23]
 800363e:	2b10      	cmp	r3, #16
 8003640:	d803      	bhi.n	800364a <canardDecodeScalar+0xea>
 8003642:	2302      	movs	r3, #2
 8003644:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003648:	e010      	b.n	800366c <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 800364a:	7dfb      	ldrb	r3, [r7, #23]
 800364c:	2b20      	cmp	r3, #32
 800364e:	d803      	bhi.n	8003658 <canardDecodeScalar+0xf8>
 8003650:	2304      	movs	r3, #4
 8003652:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003656:	e009      	b.n	800366c <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 8003658:	7dfb      	ldrb	r3, [r7, #23]
 800365a:	2b40      	cmp	r3, #64	@ 0x40
 800365c:	d803      	bhi.n	8003666 <canardDecodeScalar+0x106>
 800365e:	2308      	movs	r3, #8
 8003660:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003664:	e002      	b.n	800366c <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 8003666:	f06f 0308 	mvn.w	r3, #8
 800366a:	e0fd      	b.n	8003868 <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 800366c:	f000 fcfb 	bl	8004066 <isBigEndian>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d007      	beq.n	8003686 <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8003676:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800367a:	f107 0320 	add.w	r3, r7, #32
 800367e:	4611      	mov	r1, r2
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fd01 	bl	8004088 <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 8003686:	7dbb      	ldrb	r3, [r7, #22]
 8003688:	2b00      	cmp	r3, #0
 800368a:	f000 809b 	beq.w	80037c4 <canardDecodeScalar+0x264>
 800368e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003692:	00da      	lsls	r2, r3, #3
 8003694:	7dfb      	ldrb	r3, [r7, #23]
 8003696:	429a      	cmp	r2, r3
 8003698:	f000 8094 	beq.w	80037c4 <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d819      	bhi.n	80036d6 <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 80036a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036a6:	461a      	mov	r2, r3
 80036a8:	7dfb      	ldrb	r3, [r7, #23]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	fa22 f303 	lsr.w	r3, r2, r3
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8085 	beq.w	80037c4 <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 80036ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80036be:	7dfb      	ldrb	r3, [r7, #23]
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	425b      	negs	r3, r3
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	4313      	orrs	r3, r2
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f887 3020 	strb.w	r3, [r7, #32]
 80036d4:	e076      	b.n	80037c4 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 80036d6:	7dfb      	ldrb	r3, [r7, #23]
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d815      	bhi.n	8003708 <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 80036dc:	8c3b      	ldrh	r3, [r7, #32]
 80036de:	461a      	mov	r2, r3
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	fa22 f303 	lsr.w	r3, r2, r3
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d069      	beq.n	80037c4 <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 80036f0:	8c3a      	ldrh	r2, [r7, #32]
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	2101      	movs	r1, #1
 80036f6:	fa01 f303 	lsl.w	r3, r1, r3
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	425b      	negs	r3, r3
 80036fe:	b29b      	uxth	r3, r3
 8003700:	4313      	orrs	r3, r2
 8003702:	b29b      	uxth	r3, r3
 8003704:	843b      	strh	r3, [r7, #32]
 8003706:	e05d      	b.n	80037c4 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 8003708:	7dfb      	ldrb	r3, [r7, #23]
 800370a:	2b20      	cmp	r3, #32
 800370c:	d811      	bhi.n	8003732 <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 800370e:	6a3a      	ldr	r2, [r7, #32]
 8003710:	7dfb      	ldrb	r3, [r7, #23]
 8003712:	3b01      	subs	r3, #1
 8003714:	fa22 f303 	lsr.w	r3, r2, r3
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d051      	beq.n	80037c4 <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8003720:	6a3a      	ldr	r2, [r7, #32]
 8003722:	7dfb      	ldrb	r3, [r7, #23]
 8003724:	2101      	movs	r1, #1
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	425b      	negs	r3, r3
 800372c:	4313      	orrs	r3, r2
 800372e:	623b      	str	r3, [r7, #32]
 8003730:	e048      	b.n	80037c4 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 8003732:	7dfb      	ldrb	r3, [r7, #23]
 8003734:	2b3f      	cmp	r3, #63	@ 0x3f
 8003736:	d842      	bhi.n	80037be <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8003738:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800373c:	7df9      	ldrb	r1, [r7, #23]
 800373e:	1e48      	subs	r0, r1, #1
 8003740:	f1c0 0620 	rsb	r6, r0, #32
 8003744:	f1a0 0120 	sub.w	r1, r0, #32
 8003748:	fa22 f400 	lsr.w	r4, r2, r0
 800374c:	fa03 f606 	lsl.w	r6, r3, r6
 8003750:	4334      	orrs	r4, r6
 8003752:	fa23 f101 	lsr.w	r1, r3, r1
 8003756:	430c      	orrs	r4, r1
 8003758:	fa23 f500 	lsr.w	r5, r3, r0
 800375c:	f004 0301 	and.w	r3, r4, #1
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800376a:	460b      	mov	r3, r1
 800376c:	4313      	orrs	r3, r2
 800376e:	d029      	beq.n	80037c4 <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 8003770:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003774:	7df9      	ldrb	r1, [r7, #23]
 8003776:	f04f 0201 	mov.w	r2, #1
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	f1a1 0620 	sub.w	r6, r1, #32
 8003782:	f1c1 0020 	rsb	r0, r1, #32
 8003786:	fa03 f901 	lsl.w	r9, r3, r1
 800378a:	fa02 f606 	lsl.w	r6, r2, r6
 800378e:	ea49 0906 	orr.w	r9, r9, r6
 8003792:	fa22 f000 	lsr.w	r0, r2, r0
 8003796:	ea49 0900 	orr.w	r9, r9, r0
 800379a:	fa02 f801 	lsl.w	r8, r2, r1
 800379e:	2300      	movs	r3, #0
 80037a0:	f1d8 0a00 	rsbs	sl, r8, #0
 80037a4:	eb63 0b09 	sbc.w	fp, r3, r9
 80037a8:	ea44 030a 	orr.w	r3, r4, sl
 80037ac:	603b      	str	r3, [r7, #0]
 80037ae:	ea45 030b 	orr.w	r3, r5, fp
 80037b2:	607b      	str	r3, [r7, #4]
 80037b4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80037b8:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80037bc:	e002      	b.n	80037c4 <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 80037be:	f06f 0308 	mvn.w	r3, #8
 80037c2:	e051      	b.n	8003868 <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 80037c4:	7dbb      	ldrb	r3, [r7, #22]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d022      	beq.n	8003810 <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 80037ca:	7dfb      	ldrb	r3, [r7, #23]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d804      	bhi.n	80037da <canardDecodeScalar+0x27a>
 80037d0:	f997 2020 	ldrsb.w	r2, [r7, #32]
 80037d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037d6:	701a      	strb	r2, [r3, #0]
 80037d8:	e044      	b.n	8003864 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 80037da:	7dfb      	ldrb	r3, [r7, #23]
 80037dc:	2b10      	cmp	r3, #16
 80037de:	d804      	bhi.n	80037ea <canardDecodeScalar+0x28a>
 80037e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80037e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037e6:	801a      	strh	r2, [r3, #0]
 80037e8:	e03c      	b.n	8003864 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 80037ea:	7dfb      	ldrb	r3, [r7, #23]
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d803      	bhi.n	80037f8 <canardDecodeScalar+0x298>
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e035      	b.n	8003864 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 80037f8:	7dfb      	ldrb	r3, [r7, #23]
 80037fa:	2b40      	cmp	r3, #64	@ 0x40
 80037fc:	d805      	bhi.n	800380a <canardDecodeScalar+0x2aa>
 80037fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003802:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003804:	e9c1 2300 	strd	r2, r3, [r1]
 8003808:	e02c      	b.n	8003864 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 800380a:	f06f 0308 	mvn.w	r3, #8
 800380e:	e02b      	b.n	8003868 <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8003810:	7dfb      	ldrb	r3, [r7, #23]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d104      	bne.n	8003820 <canardDecodeScalar+0x2c0>
 8003816:	f897 2020 	ldrb.w	r2, [r7, #32]
 800381a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	e021      	b.n	8003864 <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	2b08      	cmp	r3, #8
 8003824:	d804      	bhi.n	8003830 <canardDecodeScalar+0x2d0>
 8003826:	f897 2020 	ldrb.w	r2, [r7, #32]
 800382a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e019      	b.n	8003864 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8003830:	7dfb      	ldrb	r3, [r7, #23]
 8003832:	2b10      	cmp	r3, #16
 8003834:	d803      	bhi.n	800383e <canardDecodeScalar+0x2de>
 8003836:	8c3a      	ldrh	r2, [r7, #32]
 8003838:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800383a:	801a      	strh	r2, [r3, #0]
 800383c:	e012      	b.n	8003864 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 800383e:	7dfb      	ldrb	r3, [r7, #23]
 8003840:	2b20      	cmp	r3, #32
 8003842:	d803      	bhi.n	800384c <canardDecodeScalar+0x2ec>
 8003844:	6a3a      	ldr	r2, [r7, #32]
 8003846:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e00b      	b.n	8003864 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 800384c:	7dfb      	ldrb	r3, [r7, #23]
 800384e:	2b40      	cmp	r3, #64	@ 0x40
 8003850:	d805      	bhi.n	800385e <canardDecodeScalar+0x2fe>
 8003852:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003856:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8003858:	e9c1 2300 	strd	r2, r3, [r1]
 800385c:	e002      	b.n	8003864 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 800385e:	f06f 0308 	mvn.w	r3, #8
 8003862:	e001      	b.n	8003868 <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 8003864:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 8003868:	4618      	mov	r0, r3
 800386a:	3734      	adds	r7, #52	@ 0x34
 800386c:	46bd      	mov	sp, r7
 800386e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003872 <canardReleaseRxTransferPayload>:
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
}

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 800387c:	e00f      	b.n	800389e <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f103 020c 	add.w	r2, r3, #12
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 fd03 	bl	800429e <freeBlock>
        transfer->payload_middle = temp;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1eb      	bne.n	800387e <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2200      	movs	r2, #0
 80038aa:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2200      	movs	r2, #0
 80038b0:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2200      	movs	r2, #0
 80038b6:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2200      	movs	r2, #0
 80038bc:	829a      	strh	r2, [r3, #20]
}
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b085      	sub	sp, #20
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	4603      	mov	r3, r0
 80038ce:	460a      	mov	r2, r1
 80038d0:	71fb      	strb	r3, [r7, #7]
 80038d2:	4613      	mov	r3, r2
 80038d4:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(a - b);
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	b29a      	uxth	r2, r3
 80038da:	79bb      	ldrb	r3, [r7, #6]
 80038dc:	b29b      	uxth	r3, r3
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 80038e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	da03      	bge.n	80038f4 <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 80038ec:	89fb      	ldrh	r3, [r7, #14]
 80038ee:	3320      	adds	r3, #32
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 80038f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
    state->transfer_id++;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	7ddb      	ldrb	r3, [r3, #23]
 8003910:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8003914:	b2db      	uxtb	r3, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	b2d9      	uxtb	r1, r3
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	7dd3      	ldrb	r3, [r2, #23]
 8003922:	f361 0386 	bfi	r3, r1, #2, #5
 8003926:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	8ad3      	ldrh	r3, [r2, #22]
 800392c:	f36f 0309 	bfc	r3, #0, #10
 8003930:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	7dd3      	ldrb	r3, [r2, #23]
 8003936:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800393a:	75d3      	strb	r3, [r2, #23]
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <extractDataType>:

/**
 * returns data type from id
 */
uint16_t extractDataType(uint32_t id)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f819 	bl	8003988 <extractTransferType>
 8003956:	4603      	mov	r3, r0
 8003958:	2b02      	cmp	r3, #2
 800395a:	d10e      	bne.n	800397a <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800396a:	2b00      	cmp	r3, #0
 800396c:	d103      	bne.n	8003976 <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 800396e:	89fb      	ldrh	r3, [r7, #14]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 8003976:	89fb      	ldrh	r3, [r7, #14]
 8003978:	e002      	b.n	8003980 <extractDataType+0x38>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	b2db      	uxtb	r3, r3
    }
}
 8003980:	4618      	mov	r0, r3
 8003982:	3710      	adds	r7, #16
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <extractTransferType>:

/**
 * returns transfer type from id
 */
CanardTransferType extractTransferType(uint32_t id)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	09db      	lsrs	r3, r3, #7
 8003994:	f003 0301 	and.w	r3, r3, #1
 8003998:	2b00      	cmp	r3, #0
 800399a:	bf14      	ite	ne
 800399c:	2301      	movne	r3, #1
 800399e:	2300      	moveq	r3, #0
 80039a0:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	f083 0301 	eor.w	r3, r3, #1
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <extractTransferType+0x2a>
    {
        return CanardTransferTypeBroadcast;
 80039ae:	2302      	movs	r3, #2
 80039b0:	e008      	b.n	80039c4 <extractTransferType+0x3c>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	0bdb      	lsrs	r3, r3, #15
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <extractTransferType+0x3a>
    {
        return CanardTransferTypeRequest;
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <extractTransferType+0x3c>
    }
    else
    {
        return CanardTransferTypeResponse;
 80039c2:	2300      	movs	r3, #0
    }
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d110      	bne.n	8003a08 <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	330c      	adds	r3, #12
 80039ea:	6839      	ldr	r1, [r7, #0]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f000 f865 	bl	8003abc <createRxState>
 80039f2:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <traverseRxStates+0x2e>
        {
            return NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e013      	b.n	8003a26 <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	621a      	str	r2, [r3, #32]
        return states;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	e00e      	b.n	8003a26 <traverseRxStates+0x56>
    }

    states = findRxState(ins, transfer_descriptor);
 8003a08:	6839      	ldr	r1, [r7, #0]
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f80f 	bl	8003a2e <findRxState>
 8003a10:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <traverseRxStates+0x4c>
    {
        return states;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	e004      	b.n	8003a26 <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 8003a1c:	6839      	ldr	r1, [r7, #0]
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f827 	bl	8003a72 <prependRxState>
 8003a24:	4603      	mov	r3, r0
    }
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	6039      	str	r1, [r7, #0]
    CanardRxState *state = ins->rx_states;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	60fb      	str	r3, [r7, #12]
    while (state != NULL)
 8003a3e:	e010      	b.n	8003a62 <findRxState+0x34>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	691b      	ldr	r3, [r3, #16]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d101      	bne.n	8003a4e <findRxState+0x20>
        {
            return state;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	e00d      	b.n	8003a6a <findRxState+0x3c>
        }
        state = canardRxFromIdx(&ins->allocator, state->next);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f103 020c 	add.w	r2, r3, #12
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	4610      	mov	r0, r2
 8003a5c:	f7ff f98c 	bl	8002d78 <canardRxFromIdx>
 8003a60:	60f8      	str	r0, [r7, #12]
    while (state != NULL)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1eb      	bne.n	8003a40 <findRxState+0x12>
    }
    return NULL;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	330c      	adds	r3, #12
 8003a80:	6839      	ldr	r1, [r7, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f81a 	bl	8003abc <createRxState>
 8003a88:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d101      	bne.n	8003a94 <prependRxState+0x22>
    {
        return NULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e00f      	b.n	8003ab4 <prependRxState+0x42>
    }

    state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f103 020c 	add.w	r2, r3, #12
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f7ff f975 	bl	8002d90 <canardRxToIdx>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	621a      	str	r2, [r3, #32]
    return state;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b08c      	sub	sp, #48	@ 0x30
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 8003ac6:	f107 0308 	add.w	r3, r7, #8
 8003aca:	2220      	movs	r2, #32
 8003acc:	2100      	movs	r1, #0
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f001 f9a7 	bl	8004e22 <memset>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	61bb      	str	r3, [r7, #24]
        .next = CANARD_BUFFER_IDX_NONE,
        .buffer_blocks = CANARD_BUFFER_IDX_NONE,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fbb7 	bl	800424c <allocateBlock>
 8003ade:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (state == NULL)
 8003ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <createRxState+0x2e>
    {
        return NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	e007      	b.n	8003afa <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 8003aea:	f107 0308 	add.w	r3, r7, #8
 8003aee:	2220      	movs	r2, #32
 8003af0:	4619      	mov	r1, r3
 8003af2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003af4:	f001 f9c2 	bl	8004e7c <memcpy>

    return state;
 8003af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3730      	adds	r7, #48	@ 0x30
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8003b0c:	e01b      	b.n	8003b46 <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f103 020c 	add.w	r2, r3, #12
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	f7ff f914 	bl	8002d48 <canardBufferFromIdx>
 8003b20:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	68f9      	ldr	r1, [r7, #12]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f000 fbb5 	bl	800429e <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	330c      	adds	r3, #12
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff f910 	bl	8002d60 <canardBufferToIdx>
 8003b40:	4602      	mov	r2, r0
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1df      	bne.n	8003b0e <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	8ad3      	ldrh	r3, [r2, #22]
 8003b52:	f36f 0309 	bfc	r3, #0, #10
 8003b56:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 8003b58:	f04f 0200 	mov.w	r2, #0
 8003b5c:	f04f 0300 	mov.w	r3, #0
}
 8003b60:	4610      	mov	r0, r2
 8003b62:	4619      	mov	r1, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	@ 0x28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
 8003b78:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	8adb      	ldrh	r3, [r3, #22]
 8003b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d036      	beq.n	8003bfa <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	8adb      	ldrh	r3, [r3, #22]
 8003b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003b98:	e00e      	b.n	8003bb8 <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 8003b9a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	441a      	add	r2, r3
 8003ba0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ba2:	7811      	ldrb	r1, [r2, #0]
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	460a      	mov	r2, r1
 8003baa:	76da      	strb	r2, [r3, #27]
             i++, data_index++)
 8003bac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bae:	3301      	adds	r3, #1
 8003bb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8003bb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 8003bb8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d804      	bhi.n	8003bc8 <bufferBlockPushBytes+0x5c>
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d3e8      	bcc.n	8003b9a <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d313      	bcc.n	8003bfa <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	8adb      	ldrh	r3, [r3, #22]
 8003bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	461a      	mov	r2, r3
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bea:	b299      	uxth	r1, r3
            state->payload_len =
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	8ad3      	ldrh	r3, [r2, #22]
 8003bf0:	f361 0309 	bfi	r3, r1, #0, #10
 8003bf4:	82d3      	strh	r3, [r2, #22]
            return 1;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e0ae      	b.n	8003d58 <bufferBlockPushBytes+0x1ec>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	8adb      	ldrh	r3, [r3, #22]
 8003bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	1f5a      	subs	r2, r3, #5
 8003c06:	0893      	lsrs	r3, r2, #2
 8003c08:	4955      	ldr	r1, [pc, #340]	@ (8003d60 <bufferBlockPushBytes+0x1f4>)
 8003c0a:	fba1 3103 	umull	r3, r1, r1, r3
 8003c0e:	460b      	mov	r3, r1
 8003c10:	00db      	lsls	r3, r3, #3
 8003c12:	1a5b      	subs	r3, r3, r1
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 8003c18:	847b      	strh	r3, [r7, #34]	@ 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d113      	bne.n	8003c4e <bufferBlockPushBytes+0xe2>
    {
        block = createBufferBlock(allocator);
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f89c 	bl	8003d64 <createBufferBlock>
 8003c2c:	61f8      	str	r0, [r7, #28]
        state->buffer_blocks = canardBufferToIdx(allocator, block);
 8003c2e:	69f9      	ldr	r1, [r7, #28]
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f7ff f895 	bl	8002d60 <canardBufferToIdx>
 8003c36:	4602      	mov	r2, r0
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	605a      	str	r2, [r3, #4]
        if (block == NULL)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <bufferBlockPushBytes+0xdc>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8003c42:	f06f 0302 	mvn.w	r3, #2
 8003c46:	e087      	b.n	8003d58 <bufferBlockPushBytes+0x1ec>
        }

        index_at_nth_block = 0;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003c4c:	e06c      	b.n	8003d28 <bufferBlockPushBytes+0x1bc>
    }
    else
    {
        uint16_t nth_block = 1;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	837b      	strh	r3, [r7, #26]

        // get to block
        block = canardBufferFromIdx(allocator, state->buffer_blocks);
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4619      	mov	r1, r3
 8003c58:	68f8      	ldr	r0, [r7, #12]
 8003c5a:	f7ff f875 	bl	8002d48 <canardBufferFromIdx>
 8003c5e:	61f8      	str	r0, [r7, #28]
        while (block->next != NULL)
 8003c60:	e005      	b.n	8003c6e <bufferBlockPushBytes+0x102>
        {
            nth_block++;
 8003c62:	8b7b      	ldrh	r3, [r7, #26]
 8003c64:	3301      	adds	r3, #1
 8003c66:	837b      	strh	r3, [r7, #26]
            block = block->next;
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f5      	bne.n	8003c62 <bufferBlockPushBytes+0xf6>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	8adb      	ldrh	r3, [r3, #22]
 8003c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	78fb      	ldrb	r3, [r7, #3]
 8003c84:	4413      	add	r3, r2
 8003c86:	3b05      	subs	r3, #5
 8003c88:	089b      	lsrs	r3, r3, #2
 8003c8a:	4a35      	ldr	r2, [pc, #212]	@ (8003d60 <bufferBlockPushBytes+0x1f4>)
 8003c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c90:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 8003c92:	3301      	adds	r3, #1
 8003c94:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 8003c96:	8afa      	ldrh	r2, [r7, #22]
 8003c98:	8b7b      	ldrh	r3, [r7, #26]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d944      	bls.n	8003d28 <bufferBlockPushBytes+0x1bc>
 8003c9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d141      	bne.n	8003d28 <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 f85d 	bl	8003d64 <createBufferBlock>
 8003caa:	4602      	mov	r2, r0
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <bufferBlockPushBytes+0x152>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8003cb8:	f06f 0302 	mvn.w	r3, #2
 8003cbc:	e04c      	b.n	8003d58 <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8003cbe:	69fb      	ldr	r3, [r7, #28]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 8003cc4:	e030      	b.n	8003d28 <bufferBlockPushBytes+0x1bc>
    {
        for (uint16_t i = index_at_nth_block;
 8003cc6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8003cc8:	833b      	strh	r3, [r7, #24]
 8003cca:	e00e      	b.n	8003cea <bufferBlockPushBytes+0x17e>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8003ccc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	441a      	add	r2, r3
 8003cd2:	8b3b      	ldrh	r3, [r7, #24]
 8003cd4:	7811      	ldrb	r1, [r2, #0]
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	4413      	add	r3, r2
 8003cda:	460a      	mov	r2, r1
 8003cdc:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 8003cde:	8b3b      	ldrh	r3, [r7, #24]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	833b      	strh	r3, [r7, #24]
 8003ce4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 8003cea:	8b3b      	ldrh	r3, [r7, #24]
 8003cec:	2b1b      	cmp	r3, #27
 8003cee:	d804      	bhi.n	8003cfa <bufferBlockPushBytes+0x18e>
 8003cf0:	78fb      	ldrb	r3, [r7, #3]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3e8      	bcc.n	8003ccc <bufferBlockPushBytes+0x160>
        }

        if (data_index < data_len)
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d211      	bcs.n	8003d28 <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f82d 	bl	8003d64 <createBufferBlock>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d102      	bne.n	8003d1e <bufferBlockPushBytes+0x1b2>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8003d18:	f06f 0302 	mvn.w	r3, #2
 8003d1c:	e01c      	b.n	8003d58 <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	847b      	strh	r3, [r7, #34]	@ 0x22
    while (data_index < data_len)
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d3c9      	bcc.n	8003cc6 <bufferBlockPushBytes+0x15a>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	8adb      	ldrh	r3, [r3, #22]
 8003d36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d4a:	b299      	uxth	r1, r3
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	8ad3      	ldrh	r3, [r2, #22]
 8003d50:	f361 0309 	bfi	r3, r1, #0, #10
 8003d54:	82d3      	strh	r3, [r2, #22]

    return 1;
 8003d56:	2301      	movs	r3, #1
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3728      	adds	r7, #40	@ 0x28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	24924925 	.word	0x24924925

08003d64 <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fa6d 	bl	800424c <allocateBlock>
 8003d72:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <createBufferBlock+0x1a>
    {
        return NULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e003      	b.n	8003d86 <createBufferBlock+0x22>
    }
    block->next = NULL;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
    return block;
 8003d84:	68fb      	ldr	r3, [r7, #12]
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b089      	sub	sp, #36	@ 0x24
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	60f8      	str	r0, [r7, #12]
 8003d96:	60b9      	str	r1, [r7, #8]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	08db      	lsrs	r3, r3, #3
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	4413      	add	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 8003da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da8:	08db      	lsrs	r3, r3, #3
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	4413      	add	r3, r2
 8003dae:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 8003db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dba:	f003 0307 	and.w	r3, r3, #7
 8003dbe:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 8003dc8:	e04d      	b.n	8003e66 <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8003dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8003dde:	7eba      	ldrb	r2, [r7, #26]
 8003de0:	7efb      	ldrb	r3, [r7, #27]
 8003de2:	4293      	cmp	r3, r2
 8003de4:	bf38      	it	cc
 8003de6:	4613      	movcc	r3, r2
 8003de8:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 8003dea:	7e7b      	ldrb	r3, [r7, #25]
 8003dec:	f1c3 0208 	rsb	r2, r3, #8
 8003df0:	69f9      	ldr	r1, [r7, #28]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	1acb      	subs	r3, r1, r3
 8003df6:	4293      	cmp	r3, r2
 8003df8:	bf28      	it	cs
 8003dfa:	4613      	movcs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8003dfe:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	7ebb      	ldrb	r3, [r7, #26]
 8003e0e:	fa42 f303 	asr.w	r3, r2, r3
 8003e12:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	08db      	lsrs	r3, r3, #3
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	7efb      	ldrb	r3, [r7, #27]
 8003e22:	409a      	lsls	r2, r3
 8003e24:	7ebb      	ldrb	r3, [r7, #26]
 8003e26:	fa22 f303 	lsr.w	r3, r2, r3
 8003e2a:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8003e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2e:	08db      	lsrs	r3, r3, #3
 8003e30:	683a      	ldr	r2, [r7, #0]
 8003e32:	4413      	add	r3, r2
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	b2d9      	uxtb	r1, r3
 8003e40:	7cba      	ldrb	r2, [r7, #18]
 8003e42:	7cfb      	ldrb	r3, [r7, #19]
 8003e44:	4013      	ands	r3, r2
 8003e46:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 8003e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e4a:	08db      	lsrs	r3, r3, #3
 8003e4c:	6838      	ldr	r0, [r7, #0]
 8003e4e:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8003e50:	430a      	orrs	r2, r1
 8003e52:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 8003e54:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	4413      	add	r3, r2
 8003e5c:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 8003e5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	4413      	add	r3, r2
 8003e64:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d1ad      	bne.n	8003dca <copyBitArray+0x3c>
    }
}
 8003e6e:	bf00      	nop
 8003e70:	bf00      	nop
 8003e72:	3724      	adds	r7, #36	@ 0x24
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b090      	sub	sp, #64	@ 0x40
 8003e80:	af02      	add	r7, sp, #8
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	603b      	str	r3, [r7, #0]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8a9b      	ldrh	r3, [r3, #20]
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	461a      	mov	r2, r3
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d301      	bcc.n	8003e9e <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	e0df      	b.n	800405e <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 8003e9e:	79fa      	ldrb	r2, [r7, #7]
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	8a92      	ldrh	r2, [r2, #20]
 8003ea8:	00d2      	lsls	r2, r2, #3
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d908      	bls.n	8003ec0 <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8a9b      	ldrh	r3, [r3, #20]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d104      	bne.n	8003ed2 <descatterTransferPayload+0x56>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	691b      	ldr	r3, [r3, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80b9 	beq.w	8004044 <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t output_bit_offset = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        uint8_t remaining_bit_length = bit_length;
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8003ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee4:	2b27      	cmp	r3, #39	@ 0x27
 8003ee6:	d82d      	bhi.n	8003f44 <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 8003ee8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8003eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eee:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d305      	bcc.n	8003f02 <descatterTransferPayload+0x86>
 8003ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	e001      	b.n	8003f06 <descatterTransferPayload+0x8a>
 8003f02:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6898      	ldr	r0, [r3, #8]
 8003f0e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003f12:	2300      	movs	r3, #0
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003f1a:	f7ff ff38 	bl	8003d8e <copyBitArray>

            input_bit_offset += amount;
 8003f1e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f22:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f24:	4413      	add	r3, r2
 8003f26:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8003f28:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8003f2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f30:	4413      	add	r3, r2
 8003f32:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8003f36:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8003f3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	8a9b      	ldrh	r3, [r3, #20]
 8003f48:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8003f4c:	3b05      	subs	r3, #5
 8003f4e:	00db      	lsls	r3, r3, #3
 8003f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8003f52:	2328      	movs	r3, #40	@ 0x28
 8003f54:	62bb      	str	r3, [r7, #40]	@ 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	627b      	str	r3, [r7, #36]	@ 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 8003f5c:	e044      	b.n	8003fe8 <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8003f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f60:	2be0      	cmp	r3, #224	@ 0xe0
 8003f62:	bf28      	it	cs
 8003f64:	23e0      	movcs	r3, #224	@ 0xe0
 8003f66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f68:	4413      	add	r3, r2
 8003f6a:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 8003f6c:	69fa      	ldr	r2, [r7, #28]
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d92e      	bls.n	8003fd2 <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 8003f74:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8003f78:	69f9      	ldr	r1, [r7, #28]
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7c:	1acb      	subs	r3, r1, r3
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d306      	bcc.n	8003f90 <descatterTransferPayload+0x114>
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	e001      	b.n	8003f94 <descatterTransferPayload+0x118>
 8003f90:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003f94:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 8003f96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	1d18      	adds	r0, r3, #4
 8003fa2:	7efa      	ldrb	r2, [r7, #27]
 8003fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6979      	ldr	r1, [r7, #20]
 8003fae:	f7ff feee 	bl	8003d8e <copyBitArray>

                input_bit_offset += amount;
 8003fb2:	7efb      	ldrb	r3, [r7, #27]
 8003fb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003fb6:	4413      	add	r3, r2
 8003fb8:	637b      	str	r3, [r7, #52]	@ 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8003fba:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8003fbe:	7efb      	ldrb	r3, [r7, #27]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 8003fc6:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8003fca:	7efb      	ldrb	r3, [r7, #27]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8003fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fda:	4413      	add	r3, r2
 8003fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            block_bit_offset = block_end_bit_offset;
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	62bb      	str	r3, [r7, #40]	@ 0x28
            block = block->next;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 8003fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <descatterTransferPayload+0x17a>
 8003fee:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1b3      	bne.n	8003f5e <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d02c      	beq.n	8004058 <descatterTransferPayload+0x1dc>
 8003ffe:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004002:	2b00      	cmp	r3, #0
 8004004:	d028      	beq.n	8004058 <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 8004006:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6918      	ldr	r0, [r3, #16]
 8004012:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8004016:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	6939      	ldr	r1, [r7, #16]
 8004020:	f7ff feb5 	bl	8003d8e <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 8004024:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004028:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800402a:	4413      	add	r3, r2
 800402c:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 800402e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8004032:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8004036:	4413      	add	r3, r2
 8004038:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    {
 8004042:	e009      	b.n	8004058 <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6898      	ldr	r0, [r3, #8]
 8004048:	79fa      	ldrb	r2, [r7, #7]
 800404a:	2300      	movs	r3, #0
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68b9      	ldr	r1, [r7, #8]
 8004052:	f7ff fe9c 	bl	8003d8e <copyBitArray>
 8004056:	e000      	b.n	800405a <descatterTransferPayload+0x1de>
    {
 8004058:	bf00      	nop
    }

    return bit_length;
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	b21b      	sxth	r3, r3
}
 800405e:	4618      	mov	r0, r3
 8004060:	3738      	adds	r7, #56	@ 0x38
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 800406c:	2301      	movs	r3, #1
 800406e:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 8004070:	797b      	ldrb	r3, [r7, #5]
 8004072:	2b01      	cmp	r3, #1
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	b2db      	uxtb	r3, r3
#endif
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 8004096:	2300      	movs	r3, #0
 8004098:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	3b01      	subs	r3, #1
 800409e:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 80040a0:	e017      	b.n	80040d2 <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	4413      	add	r3, r2
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	441a      	add	r2, r3
 80040b2:	68f9      	ldr	r1, [r7, #12]
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	440b      	add	r3, r1
 80040b8:	7812      	ldrb	r2, [r2, #0]
 80040ba:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4413      	add	r3, r2
 80040c2:	7afa      	ldrb	r2, [r7, #11]
 80040c4:	701a      	strb	r2, [r3, #0]
        fwd++;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	3301      	adds	r3, #1
 80040ca:	617b      	str	r3, [r7, #20]
        rev--;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d3e3      	bcc.n	80040a2 <swapByteOrder+0x1a>
    }
}
 80040da:	bf00      	nop
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	460a      	mov	r2, r1
 80040f2:	80fb      	strh	r3, [r7, #6]
 80040f4:	4613      	mov	r3, r2
 80040f6:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 80040f8:	797b      	ldrb	r3, [r7, #5]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	021b      	lsls	r3, r3, #8
 80040fe:	b29a      	uxth	r2, r3
 8004100:	88fb      	ldrh	r3, [r7, #6]
 8004102:	4053      	eors	r3, r2
 8004104:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8004106:	2300      	movs	r3, #0
 8004108:	73fb      	strb	r3, [r7, #15]
 800410a:	e012      	b.n	8004132 <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 800410c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004110:	2b00      	cmp	r3, #0
 8004112:	da08      	bge.n	8004126 <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8004114:	88fb      	ldrh	r3, [r7, #6]
 8004116:	005b      	lsls	r3, r3, #1
 8004118:	b29b      	uxth	r3, r3
 800411a:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 800411e:	f083 0301 	eor.w	r3, r3, #1
 8004122:	80fb      	strh	r3, [r7, #6]
 8004124:	e002      	b.n	800412c <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 800412c:	7bfb      	ldrb	r3, [r7, #15]
 800412e:	3301      	adds	r3, #1
 8004130:	73fb      	strb	r3, [r7, #15]
 8004132:	7bfb      	ldrb	r3, [r7, #15]
 8004134:	2b07      	cmp	r3, #7
 8004136:	d9e9      	bls.n	800410c <crcAddByte+0x24>
        }
    }
    return crc_val;
 8004138:	88fb      	ldrh	r3, [r7, #6]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr

08004146 <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 8004146:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004148:	b087      	sub	sp, #28
 800414a:	af00      	add	r7, sp, #0
 800414c:	4601      	mov	r1, r0
 800414e:	e9c7 2300 	strd	r2, r3, [r7]
 8004152:	460b      	mov	r3, r1
 8004154:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8004156:	2300      	movs	r3, #0
 8004158:	82fb      	strh	r3, [r7, #22]
 800415a:	e01b      	b.n	8004194 <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 800415c:	8af9      	ldrh	r1, [r7, #22]
 800415e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004162:	f1c1 0620 	rsb	r6, r1, #32
 8004166:	f1a1 0020 	sub.w	r0, r1, #32
 800416a:	fa22 f401 	lsr.w	r4, r2, r1
 800416e:	fa03 f606 	lsl.w	r6, r3, r6
 8004172:	4334      	orrs	r4, r6
 8004174:	fa23 f000 	lsr.w	r0, r3, r0
 8004178:	4304      	orrs	r4, r0
 800417a:	fa23 f501 	lsr.w	r5, r3, r1
 800417e:	b2e2      	uxtb	r2, r4
 8004180:	89fb      	ldrh	r3, [r7, #14]
 8004182:	4611      	mov	r1, r2
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ffaf 	bl	80040e8 <crcAddByte>
 800418a:	4603      	mov	r3, r0
 800418c:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 800418e:	8afb      	ldrh	r3, [r7, #22]
 8004190:	3308      	adds	r3, #8
 8004192:	82fb      	strh	r3, [r7, #22]
 8004194:	8afb      	ldrh	r3, [r7, #22]
 8004196:	2b3f      	cmp	r3, #63	@ 0x3f
 8004198:	d9e0      	bls.n	800415c <crcAddSignature+0x16>
    }
    return crc_val;
 800419a:	89fb      	ldrh	r3, [r7, #14]
}
 800419c:	4618      	mov	r0, r3
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041a4 <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80041b2:	e00a      	b.n	80041ca <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	1c5a      	adds	r2, r3, #1
 80041b8:	60ba      	str	r2, [r7, #8]
 80041ba:	781a      	ldrb	r2, [r3, #0]
 80041bc:	89fb      	ldrh	r3, [r7, #14]
 80041be:	4611      	mov	r1, r2
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff ff91 	bl	80040e8 <crcAddByte>
 80041c6:	4603      	mov	r3, r0
 80041c8:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	1e5a      	subs	r2, r3, #1
 80041ce:	607a      	str	r2, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1ef      	bne.n	80041b4 <crcAdd+0x10>
    }
    return crc_val;
 80041d4:	89fb      	ldrh	r3, [r7, #14]
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 80041de:	b480      	push	{r7}
 80041e0:	b089      	sub	sp, #36	@ 0x24
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	60f8      	str	r0, [r7, #12]
 80041e6:	60b9      	str	r1, [r7, #8]
 80041e8:	4613      	mov	r3, r2
 80041ea:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 80041ec:	2300      	movs	r3, #0
 80041ee:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3304      	adds	r3, #4
 80041fe:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 8004200:	e00b      	b.n	800421a <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	015b      	lsls	r3, r3, #5
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	441a      	add	r2, r3
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	61bb      	str	r3, [r7, #24]
        current_index++;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	3301      	adds	r3, #1
 8004218:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 800421a:	88fb      	ldrh	r3, [r7, #6]
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	429a      	cmp	r2, r3
 8004220:	d3ef      	bcc.n	8004202 <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	601a      	str	r2, [r3, #0]
}
 8004240:	bf00      	nop
 8004242:	3724      	adds	r7, #36	@ 0x24
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d101      	bne.n	8004260 <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	e018      	b.n	8004292 <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	895b      	ldrh	r3, [r3, #10]
 8004274:	3301      	adds	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	899a      	ldrh	r2, [r3, #12]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	895b      	ldrh	r3, [r3, #10]
 8004284:	429a      	cmp	r2, r3
 8004286:	d203      	bcs.n	8004290 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	895a      	ldrh	r2, [r3, #10]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 8004290:	68fb      	ldr	r3, [r7, #12]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 800429e:	b480      	push	{r7}
 80042a0:	b085      	sub	sp, #20
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	895b      	ldrh	r3, [r3, #10]
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 80042c6:	bf00      	nop
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <_hyp_aes_Encryption_Hyp_decode>:
}

/*
 decode hyp_aes_Encryption_Hyp, return true on failure, false on success
*/
bool _hyp_aes_Encryption_Hyp_decode(const CanardRxTransfer* transfer, uint32_t* bit_ofs, struct hyp_aes_Encryption_Hyp* msg, bool tao) {
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b088      	sub	sp, #32
 80042d6:	af02      	add	r7, sp, #8
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	60b9      	str	r1, [r7, #8]
 80042dc:	607a      	str	r2, [r7, #4]
 80042de:	70fb      	strb	r3, [r7, #3]





    for (size_t i=0; i < 32; i++) {
 80042e0:	2300      	movs	r3, #0
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	e014      	b.n	8004310 <_hyp_aes_Encryption_Hyp_decode+0x3e>




        canardDecodeScalar(transfer, *bit_ofs, 32, false, &msg->payload_ciphertext[i]);
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	6819      	ldr	r1, [r3, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	4413      	add	r3, r2
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2300      	movs	r3, #0
 80042f6:	2220      	movs	r2, #32
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff f931 	bl	8003560 <canardDecodeScalar>

        *bit_ofs += 32;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f103 0220 	add.w	r2, r3, #32
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < 32; i++) {
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	3301      	adds	r3, #1
 800430e:	617b      	str	r3, [r7, #20]
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2b1f      	cmp	r3, #31
 8004314:	d9e7      	bls.n	80042e6 <_hyp_aes_Encryption_Hyp_decode+0x14>





    for (size_t i=0; i < 128; i++) {
 8004316:	2300      	movs	r3, #0
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	e014      	b.n	8004346 <_hyp_aes_Encryption_Hyp_decode+0x74>




        canardDecodeScalar(transfer, *bit_ofs, 8, false, &msg->payload_ciphertext_tiny[i]);
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	3380      	adds	r3, #128	@ 0x80
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	4413      	add	r3, r2
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	2300      	movs	r3, #0
 800432c:	2208      	movs	r2, #8
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f7ff f916 	bl	8003560 <canardDecodeScalar>

        *bit_ofs += 8;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f103 0208 	add.w	r2, r3, #8
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	601a      	str	r2, [r3, #0]
    for (size_t i=0; i < 128; i++) {
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	3301      	adds	r3, #1
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	2b7f      	cmp	r3, #127	@ 0x7f
 800434a:	d9e7      	bls.n	800431c <_hyp_aes_Encryption_Hyp_decode+0x4a>





    return false; /* success */
 800434c:	2300      	movs	r3, #0

}
 800434e:	4618      	mov	r0, r3
 8004350:	3718      	adds	r7, #24
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}

08004356 <hyp_aes_Encryption_Hyp_decode>:
}

/*
  return true if the decode is invalid
 */
bool hyp_aes_Encryption_Hyp_decode(const CanardRxTransfer* transfer, struct hyp_aes_Encryption_Hyp* msg) {
 8004356:	b580      	push	{r7, lr}
 8004358:	b084      	sub	sp, #16
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
 800435e:	6039      	str	r1, [r7, #0]
#if CANARD_ENABLE_TAO_OPTION
    if (transfer->tao && (transfer->payload_len > HYP_AES_ENCRYPTION_HYP_MAX_SIZE)) {
        return true; /* invalid payload length */
    }
#endif
    uint32_t bit_ofs = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	60bb      	str	r3, [r7, #8]
    if (_hyp_aes_Encryption_Hyp_decode(transfer, &bit_ofs, msg,
 8004364:	f107 0108 	add.w	r1, r7, #8
 8004368:	2301      	movs	r3, #1
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ffb0 	bl	80042d2 <_hyp_aes_Encryption_Hyp_decode>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <hyp_aes_Encryption_Hyp_decode+0x26>
    transfer->tao
#else
    true
#endif
    )) {
        return true; /* invalid payload */
 8004378:	2301      	movs	r3, #1
 800437a:	e00c      	b.n	8004396 <hyp_aes_Encryption_Hyp_decode+0x40>
    }

    const uint32_t byte_len = (bit_ofs+7U)/8U;
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	3307      	adds	r3, #7
 8004380:	08db      	lsrs	r3, r3, #3
 8004382:	60fb      	str	r3, [r7, #12]
    // we actually have
    if (!transfer->tao) {
        return byte_len > transfer->payload_len;
    }
#endif
    return byte_len != transfer->payload_len;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	8a9b      	ldrh	r3, [r3, #20]
 8004388:	461a      	mov	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	4293      	cmp	r3, r2
 800438e:	bf14      	ite	ne
 8004390:	2301      	movne	r3, #1
 8004392:	2300      	moveq	r3, #0
 8004394:	b2db      	uxtb	r3, r3
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	@ 0x24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	e030      	b.n	8004412 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	441a      	add	r2, r3
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	440b      	add	r3, r1
 80043c0:	7812      	ldrb	r2, [r2, #0]
 80043c2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	3301      	adds	r3, #1
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	441a      	add	r2, r3
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	3301      	adds	r3, #1
 80043d4:	6879      	ldr	r1, [r7, #4]
 80043d6:	440b      	add	r3, r1
 80043d8:	7812      	ldrb	r2, [r2, #0]
 80043da:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	3302      	adds	r3, #2
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	441a      	add	r2, r3
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	3302      	adds	r3, #2
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	440b      	add	r3, r1
 80043f0:	7812      	ldrb	r2, [r2, #0]
 80043f2:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	3303      	adds	r3, #3
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	441a      	add	r2, r3
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	3303      	adds	r3, #3
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	440b      	add	r3, r1
 8004408:	7812      	ldrb	r2, [r2, #0]
 800440a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	3301      	adds	r3, #1
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	2b03      	cmp	r3, #3
 8004416:	d9cb      	bls.n	80043b0 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 8004418:	2304      	movs	r3, #4
 800441a:	61fb      	str	r3, [r7, #28]
 800441c:	e081      	b.n	8004522 <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3b01      	subs	r3, #1
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	4413      	add	r3, r2
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	3301      	adds	r3, #1
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4413      	add	r3, r2
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	3302      	adds	r3, #2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	3303      	adds	r3, #3
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4413      	add	r3, r2
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d125      	bne.n	80044aa <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 800445e:	7b3b      	ldrb	r3, [r7, #12]
 8004460:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 8004462:	7b7b      	ldrb	r3, [r7, #13]
 8004464:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 8004466:	7bbb      	ldrb	r3, [r7, #14]
 8004468:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 800446a:	7bfb      	ldrb	r3, [r7, #15]
 800446c:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8004472:	7b3b      	ldrb	r3, [r7, #12]
 8004474:	461a      	mov	r2, r3
 8004476:	4b30      	ldr	r3, [pc, #192]	@ (8004538 <KeyExpansion+0x198>)
 8004478:	5c9b      	ldrb	r3, [r3, r2]
 800447a:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 800447c:	7b7b      	ldrb	r3, [r7, #13]
 800447e:	461a      	mov	r2, r3
 8004480:	4b2d      	ldr	r3, [pc, #180]	@ (8004538 <KeyExpansion+0x198>)
 8004482:	5c9b      	ldrb	r3, [r3, r2]
 8004484:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 8004486:	7bbb      	ldrb	r3, [r7, #14]
 8004488:	461a      	mov	r2, r3
 800448a:	4b2b      	ldr	r3, [pc, #172]	@ (8004538 <KeyExpansion+0x198>)
 800448c:	5c9b      	ldrb	r3, [r3, r2]
 800448e:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8004490:	7bfb      	ldrb	r3, [r7, #15]
 8004492:	461a      	mov	r2, r3
 8004494:	4b28      	ldr	r3, [pc, #160]	@ (8004538 <KeyExpansion+0x198>)
 8004496:	5c9b      	ldrb	r3, [r3, r2]
 8004498:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 800449a:	7b3a      	ldrb	r2, [r7, #12]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	089b      	lsrs	r3, r3, #2
 80044a0:	4926      	ldr	r1, [pc, #152]	@ (800453c <KeyExpansion+0x19c>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	4053      	eors	r3, r2
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	613b      	str	r3, [r7, #16]
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	3b04      	subs	r3, #4
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	4413      	add	r3, r2
 80044be:	7819      	ldrb	r1, [r3, #0]
 80044c0:	7b3a      	ldrb	r2, [r7, #12]
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	4403      	add	r3, r0
 80044c8:	404a      	eors	r2, r1
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	3301      	adds	r3, #1
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	4413      	add	r3, r2
 80044d6:	7819      	ldrb	r1, [r3, #0]
 80044d8:	7b7a      	ldrb	r2, [r7, #13]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	3301      	adds	r3, #1
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4403      	add	r3, r0
 80044e2:	404a      	eors	r2, r1
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	3302      	adds	r3, #2
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	4413      	add	r3, r2
 80044f0:	7819      	ldrb	r1, [r3, #0]
 80044f2:	7bba      	ldrb	r2, [r7, #14]
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	3302      	adds	r3, #2
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4403      	add	r3, r0
 80044fc:	404a      	eors	r2, r1
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	3303      	adds	r3, #3
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	4413      	add	r3, r2
 800450a:	7819      	ldrb	r1, [r3, #0]
 800450c:	7bfa      	ldrb	r2, [r7, #15]
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	3303      	adds	r3, #3
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	4403      	add	r3, r0
 8004516:	404a      	eors	r2, r1
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	3301      	adds	r3, #1
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	2b2b      	cmp	r3, #43	@ 0x2b
 8004526:	f67f af7a 	bls.w	800441e <KeyExpansion+0x7e>
  }
}
 800452a:	bf00      	nop
 800452c:	bf00      	nop
 800452e:	3724      	adds	r7, #36	@ 0x24
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	08004ef0 	.word	0x08004ef0
 800453c:	080050f0 	.word	0x080050f0

08004540 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6839      	ldr	r1, [r7, #0]
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff ff26 	bl	80043a0 <KeyExpansion>
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 800456a:	2300      	movs	r3, #0
 800456c:	75fb      	strb	r3, [r7, #23]
 800456e:	e027      	b.n	80045c0 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8004570:	2300      	movs	r3, #0
 8004572:	75bb      	strb	r3, [r7, #22]
 8004574:	e01e      	b.n	80045b4 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 8004576:	7dfa      	ldrb	r2, [r7, #23]
 8004578:	7dbb      	ldrb	r3, [r7, #22]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	0092      	lsls	r2, r2, #2
 800457e:	440a      	add	r2, r1
 8004580:	4413      	add	r3, r2
 8004582:	7818      	ldrb	r0, [r3, #0]
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	009a      	lsls	r2, r3, #2
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	4413      	add	r3, r2
 800458c:	009a      	lsls	r2, r3, #2
 800458e:	7dbb      	ldrb	r3, [r7, #22]
 8004590:	4413      	add	r3, r2
 8004592:	461a      	mov	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4413      	add	r3, r2
 8004598:	7819      	ldrb	r1, [r3, #0]
 800459a:	7dfa      	ldrb	r2, [r7, #23]
 800459c:	7dbb      	ldrb	r3, [r7, #22]
 800459e:	4041      	eors	r1, r0
 80045a0:	b2c8      	uxtb	r0, r1
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	0092      	lsls	r2, r2, #2
 80045a6:	440a      	add	r2, r1
 80045a8:	4413      	add	r3, r2
 80045aa:	4602      	mov	r2, r0
 80045ac:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80045ae:	7dbb      	ldrb	r3, [r7, #22]
 80045b0:	3301      	adds	r3, #1
 80045b2:	75bb      	strb	r3, [r7, #22]
 80045b4:	7dbb      	ldrb	r3, [r7, #22]
 80045b6:	2b03      	cmp	r3, #3
 80045b8:	d9dd      	bls.n	8004576 <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 80045ba:	7dfb      	ldrb	r3, [r7, #23]
 80045bc:	3301      	adds	r3, #1
 80045be:	75fb      	strb	r3, [r7, #23]
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	2b03      	cmp	r3, #3
 80045c4:	d9d4      	bls.n	8004570 <AddRoundKey+0x14>
    }
  }
}
 80045c6:	bf00      	nop
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <xtime>:
  (*state)[2][3] = (*state)[1][3];
  (*state)[1][3] = temp;
}

static uint8_t xtime(uint8_t x)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	b25a      	sxtb	r2, r3
 80045e6:	79fb      	ldrb	r3, [r7, #7]
 80045e8:	09db      	lsrs	r3, r3, #7
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	b25b      	sxtb	r3, r3
 80045ee:	4619      	mov	r1, r3
 80045f0:	0049      	lsls	r1, r1, #1
 80045f2:	440b      	add	r3, r1
 80045f4:	4619      	mov	r1, r3
 80045f6:	00c8      	lsls	r0, r1, #3
 80045f8:	4619      	mov	r1, r3
 80045fa:	4603      	mov	r3, r0
 80045fc:	440b      	add	r3, r1
 80045fe:	b25b      	sxtb	r3, r3
 8004600:	4053      	eors	r3, r2
 8004602:	b25b      	sxtb	r3, r3
 8004604:	b2db      	uxtb	r3, r3
}
 8004606:	4618      	mov	r0, r3
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 8004612:	b5b0      	push	{r4, r5, r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	e33b      	b.n	8004c98 <InvMixColumns+0x686>
  { 
    a = (*state)[i][0];
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8004628:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	785b      	ldrb	r3, [r3, #1]
 8004634:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	789b      	ldrb	r3, [r3, #2]
 8004640:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4413      	add	r3, r2
 800464a:	78db      	ldrb	r3, [r3, #3]
 800464c:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800464e:	7afb      	ldrb	r3, [r7, #11]
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff ffbf 	bl	80045d4 <xtime>
 8004656:	4603      	mov	r3, r0
 8004658:	4618      	mov	r0, r3
 800465a:	f7ff ffbb 	bl	80045d4 <xtime>
 800465e:	4603      	mov	r3, r0
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff ffb7 	bl	80045d4 <xtime>
 8004666:	4603      	mov	r3, r0
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ffb3 	bl	80045d4 <xtime>
 800466e:	7abb      	ldrb	r3, [r7, #10]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff ffaf 	bl	80045d4 <xtime>
 8004676:	4603      	mov	r3, r0
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff ffab 	bl	80045d4 <xtime>
 800467e:	7abb      	ldrb	r3, [r7, #10]
 8004680:	4618      	mov	r0, r3
 8004682:	f7ff ffa7 	bl	80045d4 <xtime>
 8004686:	4603      	mov	r3, r0
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ffa3 	bl	80045d4 <xtime>
 800468e:	4603      	mov	r3, r0
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff9f 	bl	80045d4 <xtime>
 8004696:	4603      	mov	r3, r0
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff ff9b 	bl	80045d4 <xtime>
 800469e:	7a7b      	ldrb	r3, [r7, #9]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff ff97 	bl	80045d4 <xtime>
 80046a6:	7a7b      	ldrb	r3, [r7, #9]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ff93 	bl	80045d4 <xtime>
 80046ae:	4603      	mov	r3, r0
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff ff8f 	bl	80045d4 <xtime>
 80046b6:	4603      	mov	r3, r0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff ff8b 	bl	80045d4 <xtime>
 80046be:	4603      	mov	r3, r0
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff ff87 	bl	80045d4 <xtime>
 80046c6:	7a3b      	ldrb	r3, [r7, #8]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7ff ff83 	bl	80045d4 <xtime>
 80046ce:	7a3b      	ldrb	r3, [r7, #8]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff7f 	bl	80045d4 <xtime>
 80046d6:	4603      	mov	r3, r0
 80046d8:	4618      	mov	r0, r3
 80046da:	f7ff ff7b 	bl	80045d4 <xtime>
 80046de:	7a3b      	ldrb	r3, [r7, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff ff77 	bl	80045d4 <xtime>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7ff ff73 	bl	80045d4 <xtime>
 80046ee:	4603      	mov	r3, r0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff6f 	bl	80045d4 <xtime>
 80046f6:	4603      	mov	r3, r0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff6b 	bl	80045d4 <xtime>
 80046fe:	7afb      	ldrb	r3, [r7, #11]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff ff67 	bl	80045d4 <xtime>
 8004706:	4603      	mov	r3, r0
 8004708:	461c      	mov	r4, r3
 800470a:	7afb      	ldrb	r3, [r7, #11]
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff ff61 	bl	80045d4 <xtime>
 8004712:	4603      	mov	r3, r0
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ff5d 	bl	80045d4 <xtime>
 800471a:	4603      	mov	r3, r0
 800471c:	4063      	eors	r3, r4
 800471e:	b2dc      	uxtb	r4, r3
 8004720:	7afb      	ldrb	r3, [r7, #11]
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff ff56 	bl	80045d4 <xtime>
 8004728:	4603      	mov	r3, r0
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff ff52 	bl	80045d4 <xtime>
 8004730:	4603      	mov	r3, r0
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff ff4e 	bl	80045d4 <xtime>
 8004738:	4603      	mov	r3, r0
 800473a:	4063      	eors	r3, r4
 800473c:	b2dc      	uxtb	r4, r3
 800473e:	7abb      	ldrb	r3, [r7, #10]
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff ff47 	bl	80045d4 <xtime>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	7abb      	ldrb	r3, [r7, #10]
 800474c:	4053      	eors	r3, r2
 800474e:	b2dd      	uxtb	r5, r3
 8004750:	7abb      	ldrb	r3, [r7, #10]
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff ff3e 	bl	80045d4 <xtime>
 8004758:	4603      	mov	r3, r0
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff ff3a 	bl	80045d4 <xtime>
 8004760:	4603      	mov	r3, r0
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff ff36 	bl	80045d4 <xtime>
 8004768:	4603      	mov	r3, r0
 800476a:	406b      	eors	r3, r5
 800476c:	b2db      	uxtb	r3, r3
 800476e:	4063      	eors	r3, r4
 8004770:	b2dc      	uxtb	r4, r3
 8004772:	7a7b      	ldrb	r3, [r7, #9]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff ff2d 	bl	80045d4 <xtime>
 800477a:	4603      	mov	r3, r0
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff ff29 	bl	80045d4 <xtime>
 8004782:	4603      	mov	r3, r0
 8004784:	461a      	mov	r2, r3
 8004786:	7a7b      	ldrb	r3, [r7, #9]
 8004788:	4053      	eors	r3, r2
 800478a:	b2dd      	uxtb	r5, r3
 800478c:	7a7b      	ldrb	r3, [r7, #9]
 800478e:	4618      	mov	r0, r3
 8004790:	f7ff ff20 	bl	80045d4 <xtime>
 8004794:	4603      	mov	r3, r0
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff ff1c 	bl	80045d4 <xtime>
 800479c:	4603      	mov	r3, r0
 800479e:	4618      	mov	r0, r3
 80047a0:	f7ff ff18 	bl	80045d4 <xtime>
 80047a4:	4603      	mov	r3, r0
 80047a6:	406b      	eors	r3, r5
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	4063      	eors	r3, r4
 80047ac:	b2dc      	uxtb	r4, r3
 80047ae:	7a3b      	ldrb	r3, [r7, #8]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7ff ff0f 	bl	80045d4 <xtime>
 80047b6:	4603      	mov	r3, r0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff ff0b 	bl	80045d4 <xtime>
 80047be:	4603      	mov	r3, r0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff ff07 	bl	80045d4 <xtime>
 80047c6:	4603      	mov	r3, r0
 80047c8:	461a      	mov	r2, r3
 80047ca:	7a3b      	ldrb	r3, [r7, #8]
 80047cc:	4053      	eors	r3, r2
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	4063      	eors	r3, r4
 80047d2:	b2d9      	uxtb	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80047dc:	7afb      	ldrb	r3, [r7, #11]
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fef8 	bl	80045d4 <xtime>
 80047e4:	7afb      	ldrb	r3, [r7, #11]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7ff fef4 	bl	80045d4 <xtime>
 80047ec:	4603      	mov	r3, r0
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7ff fef0 	bl	80045d4 <xtime>
 80047f4:	7afb      	ldrb	r3, [r7, #11]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff feec 	bl	80045d4 <xtime>
 80047fc:	4603      	mov	r3, r0
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff fee8 	bl	80045d4 <xtime>
 8004804:	4603      	mov	r3, r0
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fee4 	bl	80045d4 <xtime>
 800480c:	4603      	mov	r3, r0
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fee0 	bl	80045d4 <xtime>
 8004814:	7abb      	ldrb	r3, [r7, #10]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff fedc 	bl	80045d4 <xtime>
 800481c:	4603      	mov	r3, r0
 800481e:	4618      	mov	r0, r3
 8004820:	f7ff fed8 	bl	80045d4 <xtime>
 8004824:	4603      	mov	r3, r0
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff fed4 	bl	80045d4 <xtime>
 800482c:	4603      	mov	r3, r0
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fed0 	bl	80045d4 <xtime>
 8004834:	7a7b      	ldrb	r3, [r7, #9]
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff fecc 	bl	80045d4 <xtime>
 800483c:	4603      	mov	r3, r0
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff fec8 	bl	80045d4 <xtime>
 8004844:	7a7b      	ldrb	r3, [r7, #9]
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fec4 	bl	80045d4 <xtime>
 800484c:	4603      	mov	r3, r0
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff fec0 	bl	80045d4 <xtime>
 8004854:	4603      	mov	r3, r0
 8004856:	4618      	mov	r0, r3
 8004858:	f7ff febc 	bl	80045d4 <xtime>
 800485c:	4603      	mov	r3, r0
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff feb8 	bl	80045d4 <xtime>
 8004864:	7a3b      	ldrb	r3, [r7, #8]
 8004866:	4618      	mov	r0, r3
 8004868:	f7ff feb4 	bl	80045d4 <xtime>
 800486c:	7a3b      	ldrb	r3, [r7, #8]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff feb0 	bl	80045d4 <xtime>
 8004874:	4603      	mov	r3, r0
 8004876:	4618      	mov	r0, r3
 8004878:	f7ff feac 	bl	80045d4 <xtime>
 800487c:	4603      	mov	r3, r0
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff fea8 	bl	80045d4 <xtime>
 8004884:	4603      	mov	r3, r0
 8004886:	4618      	mov	r0, r3
 8004888:	f7ff fea4 	bl	80045d4 <xtime>
 800488c:	7afb      	ldrb	r3, [r7, #11]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff fea0 	bl	80045d4 <xtime>
 8004894:	4603      	mov	r3, r0
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fe9c 	bl	80045d4 <xtime>
 800489c:	4603      	mov	r3, r0
 800489e:	4618      	mov	r0, r3
 80048a0:	f7ff fe98 	bl	80045d4 <xtime>
 80048a4:	4603      	mov	r3, r0
 80048a6:	461a      	mov	r2, r3
 80048a8:	7afb      	ldrb	r3, [r7, #11]
 80048aa:	4053      	eors	r3, r2
 80048ac:	b2dc      	uxtb	r4, r3
 80048ae:	7abb      	ldrb	r3, [r7, #10]
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fe8f 	bl	80045d4 <xtime>
 80048b6:	4603      	mov	r3, r0
 80048b8:	461d      	mov	r5, r3
 80048ba:	7abb      	ldrb	r3, [r7, #10]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff fe89 	bl	80045d4 <xtime>
 80048c2:	4603      	mov	r3, r0
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fe85 	bl	80045d4 <xtime>
 80048ca:	4603      	mov	r3, r0
 80048cc:	406b      	eors	r3, r5
 80048ce:	b2dd      	uxtb	r5, r3
 80048d0:	7abb      	ldrb	r3, [r7, #10]
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff fe7e 	bl	80045d4 <xtime>
 80048d8:	4603      	mov	r3, r0
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fe7a 	bl	80045d4 <xtime>
 80048e0:	4603      	mov	r3, r0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fe76 	bl	80045d4 <xtime>
 80048e8:	4603      	mov	r3, r0
 80048ea:	406b      	eors	r3, r5
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	4063      	eors	r3, r4
 80048f0:	b2dc      	uxtb	r4, r3
 80048f2:	7a7b      	ldrb	r3, [r7, #9]
 80048f4:	4618      	mov	r0, r3
 80048f6:	f7ff fe6d 	bl	80045d4 <xtime>
 80048fa:	4603      	mov	r3, r0
 80048fc:	461a      	mov	r2, r3
 80048fe:	7a7b      	ldrb	r3, [r7, #9]
 8004900:	4053      	eors	r3, r2
 8004902:	b2dd      	uxtb	r5, r3
 8004904:	7a7b      	ldrb	r3, [r7, #9]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fe64 	bl	80045d4 <xtime>
 800490c:	4603      	mov	r3, r0
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fe60 	bl	80045d4 <xtime>
 8004914:	4603      	mov	r3, r0
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff fe5c 	bl	80045d4 <xtime>
 800491c:	4603      	mov	r3, r0
 800491e:	406b      	eors	r3, r5
 8004920:	b2db      	uxtb	r3, r3
 8004922:	4063      	eors	r3, r4
 8004924:	b2dc      	uxtb	r4, r3
 8004926:	7a3b      	ldrb	r3, [r7, #8]
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff fe53 	bl	80045d4 <xtime>
 800492e:	4603      	mov	r3, r0
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff fe4f 	bl	80045d4 <xtime>
 8004936:	4603      	mov	r3, r0
 8004938:	461a      	mov	r2, r3
 800493a:	7a3b      	ldrb	r3, [r7, #8]
 800493c:	4053      	eors	r3, r2
 800493e:	b2dd      	uxtb	r5, r3
 8004940:	7a3b      	ldrb	r3, [r7, #8]
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff fe46 	bl	80045d4 <xtime>
 8004948:	4603      	mov	r3, r0
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fe42 	bl	80045d4 <xtime>
 8004950:	4603      	mov	r3, r0
 8004952:	4618      	mov	r0, r3
 8004954:	f7ff fe3e 	bl	80045d4 <xtime>
 8004958:	4603      	mov	r3, r0
 800495a:	406b      	eors	r3, r5
 800495c:	b2db      	uxtb	r3, r3
 800495e:	4063      	eors	r3, r4
 8004960:	b2d9      	uxtb	r1, r3
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	460a      	mov	r2, r1
 800496c:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 800496e:	7afb      	ldrb	r3, [r7, #11]
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fe2f 	bl	80045d4 <xtime>
 8004976:	7afb      	ldrb	r3, [r7, #11]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fe2b 	bl	80045d4 <xtime>
 800497e:	4603      	mov	r3, r0
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff fe27 	bl	80045d4 <xtime>
 8004986:	4603      	mov	r3, r0
 8004988:	4618      	mov	r0, r3
 800498a:	f7ff fe23 	bl	80045d4 <xtime>
 800498e:	4603      	mov	r3, r0
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff fe1f 	bl	80045d4 <xtime>
 8004996:	7abb      	ldrb	r3, [r7, #10]
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff fe1b 	bl	80045d4 <xtime>
 800499e:	7abb      	ldrb	r3, [r7, #10]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff fe17 	bl	80045d4 <xtime>
 80049a6:	4603      	mov	r3, r0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fe13 	bl	80045d4 <xtime>
 80049ae:	7abb      	ldrb	r3, [r7, #10]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f7ff fe0f 	bl	80045d4 <xtime>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7ff fe0b 	bl	80045d4 <xtime>
 80049be:	4603      	mov	r3, r0
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff fe07 	bl	80045d4 <xtime>
 80049c6:	4603      	mov	r3, r0
 80049c8:	4618      	mov	r0, r3
 80049ca:	f7ff fe03 	bl	80045d4 <xtime>
 80049ce:	7a7b      	ldrb	r3, [r7, #9]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7ff fdff 	bl	80045d4 <xtime>
 80049d6:	4603      	mov	r3, r0
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fdfb 	bl	80045d4 <xtime>
 80049de:	4603      	mov	r3, r0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fdf7 	bl	80045d4 <xtime>
 80049e6:	4603      	mov	r3, r0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fdf3 	bl	80045d4 <xtime>
 80049ee:	7a3b      	ldrb	r3, [r7, #8]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fdef 	bl	80045d4 <xtime>
 80049f6:	4603      	mov	r3, r0
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7ff fdeb 	bl	80045d4 <xtime>
 80049fe:	7a3b      	ldrb	r3, [r7, #8]
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7ff fde7 	bl	80045d4 <xtime>
 8004a06:	4603      	mov	r3, r0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff fde3 	bl	80045d4 <xtime>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fddf 	bl	80045d4 <xtime>
 8004a16:	4603      	mov	r3, r0
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fddb 	bl	80045d4 <xtime>
 8004a1e:	7afb      	ldrb	r3, [r7, #11]
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff fdd7 	bl	80045d4 <xtime>
 8004a26:	4603      	mov	r3, r0
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7ff fdd3 	bl	80045d4 <xtime>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	461a      	mov	r2, r3
 8004a32:	7afb      	ldrb	r3, [r7, #11]
 8004a34:	4053      	eors	r3, r2
 8004a36:	b2dc      	uxtb	r4, r3
 8004a38:	7afb      	ldrb	r3, [r7, #11]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7ff fdca 	bl	80045d4 <xtime>
 8004a40:	4603      	mov	r3, r0
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7ff fdc6 	bl	80045d4 <xtime>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fdc2 	bl	80045d4 <xtime>
 8004a50:	4603      	mov	r3, r0
 8004a52:	4063      	eors	r3, r4
 8004a54:	b2dc      	uxtb	r4, r3
 8004a56:	7abb      	ldrb	r3, [r7, #10]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff fdbb 	bl	80045d4 <xtime>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7ff fdb7 	bl	80045d4 <xtime>
 8004a66:	4603      	mov	r3, r0
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff fdb3 	bl	80045d4 <xtime>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	461a      	mov	r2, r3
 8004a72:	7abb      	ldrb	r3, [r7, #10]
 8004a74:	4053      	eors	r3, r2
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	4063      	eors	r3, r4
 8004a7a:	b2dc      	uxtb	r4, r3
 8004a7c:	7a7b      	ldrb	r3, [r7, #9]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fda8 	bl	80045d4 <xtime>
 8004a84:	4603      	mov	r3, r0
 8004a86:	461d      	mov	r5, r3
 8004a88:	7a7b      	ldrb	r3, [r7, #9]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7ff fda2 	bl	80045d4 <xtime>
 8004a90:	4603      	mov	r3, r0
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fd9e 	bl	80045d4 <xtime>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	406b      	eors	r3, r5
 8004a9c:	b2dd      	uxtb	r5, r3
 8004a9e:	7a7b      	ldrb	r3, [r7, #9]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f7ff fd97 	bl	80045d4 <xtime>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7ff fd93 	bl	80045d4 <xtime>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f7ff fd8f 	bl	80045d4 <xtime>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	406b      	eors	r3, r5
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	4063      	eors	r3, r4
 8004abe:	b2dc      	uxtb	r4, r3
 8004ac0:	7a3b      	ldrb	r3, [r7, #8]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7ff fd86 	bl	80045d4 <xtime>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	461a      	mov	r2, r3
 8004acc:	7a3b      	ldrb	r3, [r7, #8]
 8004ace:	4053      	eors	r3, r2
 8004ad0:	b2dd      	uxtb	r5, r3
 8004ad2:	7a3b      	ldrb	r3, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fd7d 	bl	80045d4 <xtime>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff fd79 	bl	80045d4 <xtime>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff fd75 	bl	80045d4 <xtime>
 8004aea:	4603      	mov	r3, r0
 8004aec:	406b      	eors	r3, r5
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	4063      	eors	r3, r4
 8004af2:	b2d9      	uxtb	r1, r3
 8004af4:	687a      	ldr	r2, [r7, #4]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	460a      	mov	r2, r1
 8004afe:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8004b00:	7afb      	ldrb	r3, [r7, #11]
 8004b02:	4618      	mov	r0, r3
 8004b04:	f7ff fd66 	bl	80045d4 <xtime>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff fd62 	bl	80045d4 <xtime>
 8004b10:	7afb      	ldrb	r3, [r7, #11]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff fd5e 	bl	80045d4 <xtime>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff fd5a 	bl	80045d4 <xtime>
 8004b20:	4603      	mov	r3, r0
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fd56 	bl	80045d4 <xtime>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fd52 	bl	80045d4 <xtime>
 8004b30:	7abb      	ldrb	r3, [r7, #10]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7ff fd4e 	bl	80045d4 <xtime>
 8004b38:	7abb      	ldrb	r3, [r7, #10]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fd4a 	bl	80045d4 <xtime>
 8004b40:	4603      	mov	r3, r0
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff fd46 	bl	80045d4 <xtime>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff fd42 	bl	80045d4 <xtime>
 8004b50:	4603      	mov	r3, r0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff fd3e 	bl	80045d4 <xtime>
 8004b58:	7a7b      	ldrb	r3, [r7, #9]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f7ff fd3a 	bl	80045d4 <xtime>
 8004b60:	7a7b      	ldrb	r3, [r7, #9]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7ff fd36 	bl	80045d4 <xtime>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7ff fd32 	bl	80045d4 <xtime>
 8004b70:	7a7b      	ldrb	r3, [r7, #9]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff fd2e 	bl	80045d4 <xtime>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff fd2a 	bl	80045d4 <xtime>
 8004b80:	4603      	mov	r3, r0
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7ff fd26 	bl	80045d4 <xtime>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7ff fd22 	bl	80045d4 <xtime>
 8004b90:	7a3b      	ldrb	r3, [r7, #8]
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7ff fd1e 	bl	80045d4 <xtime>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7ff fd1a 	bl	80045d4 <xtime>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff fd16 	bl	80045d4 <xtime>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff fd12 	bl	80045d4 <xtime>
 8004bb0:	7afb      	ldrb	r3, [r7, #11]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fd0e 	bl	80045d4 <xtime>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	7afb      	ldrb	r3, [r7, #11]
 8004bbe:	4053      	eors	r3, r2
 8004bc0:	b2dc      	uxtb	r4, r3
 8004bc2:	7afb      	ldrb	r3, [r7, #11]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7ff fd05 	bl	80045d4 <xtime>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7ff fd01 	bl	80045d4 <xtime>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff fcfd 	bl	80045d4 <xtime>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	4063      	eors	r3, r4
 8004bde:	b2dc      	uxtb	r4, r3
 8004be0:	7abb      	ldrb	r3, [r7, #10]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7ff fcf6 	bl	80045d4 <xtime>
 8004be8:	4603      	mov	r3, r0
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7ff fcf2 	bl	80045d4 <xtime>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	7abb      	ldrb	r3, [r7, #10]
 8004bf6:	4053      	eors	r3, r2
 8004bf8:	b2dd      	uxtb	r5, r3
 8004bfa:	7abb      	ldrb	r3, [r7, #10]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7ff fce9 	bl	80045d4 <xtime>
 8004c02:	4603      	mov	r3, r0
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7ff fce5 	bl	80045d4 <xtime>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7ff fce1 	bl	80045d4 <xtime>
 8004c12:	4603      	mov	r3, r0
 8004c14:	406b      	eors	r3, r5
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	4063      	eors	r3, r4
 8004c1a:	b2dc      	uxtb	r4, r3
 8004c1c:	7a7b      	ldrb	r3, [r7, #9]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff fcd8 	bl	80045d4 <xtime>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fcd4 	bl	80045d4 <xtime>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff fcd0 	bl	80045d4 <xtime>
 8004c34:	4603      	mov	r3, r0
 8004c36:	461a      	mov	r2, r3
 8004c38:	7a7b      	ldrb	r3, [r7, #9]
 8004c3a:	4053      	eors	r3, r2
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	4063      	eors	r3, r4
 8004c40:	b2dc      	uxtb	r4, r3
 8004c42:	7a3b      	ldrb	r3, [r7, #8]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fcc5 	bl	80045d4 <xtime>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	461d      	mov	r5, r3
 8004c4e:	7a3b      	ldrb	r3, [r7, #8]
 8004c50:	4618      	mov	r0, r3
 8004c52:	f7ff fcbf 	bl	80045d4 <xtime>
 8004c56:	4603      	mov	r3, r0
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7ff fcbb 	bl	80045d4 <xtime>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	406b      	eors	r3, r5
 8004c62:	b2dd      	uxtb	r5, r3
 8004c64:	7a3b      	ldrb	r3, [r7, #8]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7ff fcb4 	bl	80045d4 <xtime>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7ff fcb0 	bl	80045d4 <xtime>
 8004c74:	4603      	mov	r3, r0
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7ff fcac 	bl	80045d4 <xtime>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	406b      	eors	r3, r5
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	4063      	eors	r3, r4
 8004c84:	b2d9      	uxtb	r1, r3
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4413      	add	r3, r2
 8004c8e:	460a      	mov	r2, r1
 8004c90:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3301      	adds	r3, #1
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	f77f acc0 	ble.w	8004620 <InvMixColumns+0xe>
  }
}
 8004ca0:	bf00      	nop
 8004ca2:	bf00      	nop
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004cac <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	73fb      	strb	r3, [r7, #15]
 8004cb8:	e01d      	b.n	8004cf6 <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73bb      	strb	r3, [r7, #14]
 8004cbe:	e014      	b.n	8004cea <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8004cc0:	7bba      	ldrb	r2, [r7, #14]
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	0092      	lsls	r2, r2, #2
 8004cc8:	440a      	add	r2, r1
 8004cca:	4413      	add	r3, r2
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	7bba      	ldrb	r2, [r7, #14]
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	490d      	ldr	r1, [pc, #52]	@ (8004d0c <InvSubBytes+0x60>)
 8004cd6:	5c08      	ldrb	r0, [r1, r0]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	0092      	lsls	r2, r2, #2
 8004cdc:	440a      	add	r2, r1
 8004cde:	4413      	add	r3, r2
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8004ce4:	7bbb      	ldrb	r3, [r7, #14]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	73bb      	strb	r3, [r7, #14]
 8004cea:	7bbb      	ldrb	r3, [r7, #14]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d9e7      	bls.n	8004cc0 <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8004cf0:	7bfb      	ldrb	r3, [r7, #15]
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d9de      	bls.n	8004cba <InvSubBytes+0xe>
    }
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	bf00      	nop
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	08004ff0 	.word	0x08004ff0

08004d10 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	7b5b      	ldrb	r3, [r3, #13]
 8004d1c:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	7a5a      	ldrb	r2, [r3, #9]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	795a      	ldrb	r2, [r3, #5]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	785a      	ldrb	r2, [r3, #1]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	7bfa      	ldrb	r2, [r7, #15]
 8004d3a:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	789b      	ldrb	r3, [r3, #2]
 8004d40:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	7a9a      	ldrb	r2, [r3, #10]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7bfa      	ldrb	r2, [r7, #15]
 8004d4e:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	799b      	ldrb	r3, [r3, #6]
 8004d54:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	7b9a      	ldrb	r2, [r3, #14]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	7bfa      	ldrb	r2, [r7, #15]
 8004d62:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	78db      	ldrb	r3, [r3, #3]
 8004d68:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	79da      	ldrb	r2, [r3, #7]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	7ada      	ldrb	r2, [r3, #11]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7bda      	ldrb	r2, [r3, #15]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	7bfa      	ldrb	r2, [r7, #15]
 8004d86:	73da      	strb	r2, [r3, #15]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <InvCipher>:
  AddRoundKey(Nr, state, RoundKey);
}

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8004da2:	683a      	ldr	r2, [r7, #0]
 8004da4:	6879      	ldr	r1, [r7, #4]
 8004da6:	200a      	movs	r0, #10
 8004da8:	f7ff fbd8 	bl	800455c <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8004dac:	2309      	movs	r3, #9
 8004dae:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff ffad 	bl	8004d10 <InvShiftRows>
    InvSubBytes(state);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff ff78 	bl	8004cac <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fbca 	bl	800455c <AddRoundKey>
    if (round == 0) {
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d006      	beq.n	8004ddc <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff fc1f 	bl	8004612 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8004dda:	e7e9      	b.n	8004db0 <InvCipher+0x1c>
      break;
 8004ddc:	bf00      	nop
  }

}
 8004dde:	bf00      	nop
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <AES_ECB_decrypt>:
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
}

void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	b082      	sub	sp, #8
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
 8004dee:	6039      	str	r1, [r7, #0]
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4619      	mov	r1, r3
 8004df4:	6838      	ldr	r0, [r7, #0]
 8004df6:	f7ff ffcd 	bl	8004d94 <InvCipher>
}
 8004dfa:	bf00      	nop
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <memcmp>:
 8004e02:	b510      	push	{r4, lr}
 8004e04:	3901      	subs	r1, #1
 8004e06:	4402      	add	r2, r0
 8004e08:	4290      	cmp	r0, r2
 8004e0a:	d101      	bne.n	8004e10 <memcmp+0xe>
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	e005      	b.n	8004e1c <memcmp+0x1a>
 8004e10:	7803      	ldrb	r3, [r0, #0]
 8004e12:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004e16:	42a3      	cmp	r3, r4
 8004e18:	d001      	beq.n	8004e1e <memcmp+0x1c>
 8004e1a:	1b18      	subs	r0, r3, r4
 8004e1c:	bd10      	pop	{r4, pc}
 8004e1e:	3001      	adds	r0, #1
 8004e20:	e7f2      	b.n	8004e08 <memcmp+0x6>

08004e22 <memset>:
 8004e22:	4402      	add	r2, r0
 8004e24:	4603      	mov	r3, r0
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d100      	bne.n	8004e2c <memset+0xa>
 8004e2a:	4770      	bx	lr
 8004e2c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e30:	e7f9      	b.n	8004e26 <memset+0x4>
	...

08004e34 <__libc_init_array>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	4d0d      	ldr	r5, [pc, #52]	@ (8004e6c <__libc_init_array+0x38>)
 8004e38:	4c0d      	ldr	r4, [pc, #52]	@ (8004e70 <__libc_init_array+0x3c>)
 8004e3a:	1b64      	subs	r4, r4, r5
 8004e3c:	10a4      	asrs	r4, r4, #2
 8004e3e:	2600      	movs	r6, #0
 8004e40:	42a6      	cmp	r6, r4
 8004e42:	d109      	bne.n	8004e58 <__libc_init_array+0x24>
 8004e44:	4d0b      	ldr	r5, [pc, #44]	@ (8004e74 <__libc_init_array+0x40>)
 8004e46:	4c0c      	ldr	r4, [pc, #48]	@ (8004e78 <__libc_init_array+0x44>)
 8004e48:	f000 f826 	bl	8004e98 <_init>
 8004e4c:	1b64      	subs	r4, r4, r5
 8004e4e:	10a4      	asrs	r4, r4, #2
 8004e50:	2600      	movs	r6, #0
 8004e52:	42a6      	cmp	r6, r4
 8004e54:	d105      	bne.n	8004e62 <__libc_init_array+0x2e>
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
 8004e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e5c:	4798      	blx	r3
 8004e5e:	3601      	adds	r6, #1
 8004e60:	e7ee      	b.n	8004e40 <__libc_init_array+0xc>
 8004e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e66:	4798      	blx	r3
 8004e68:	3601      	adds	r6, #1
 8004e6a:	e7f2      	b.n	8004e52 <__libc_init_array+0x1e>
 8004e6c:	080050fc 	.word	0x080050fc
 8004e70:	080050fc 	.word	0x080050fc
 8004e74:	080050fc 	.word	0x080050fc
 8004e78:	08005100 	.word	0x08005100

08004e7c <memcpy>:
 8004e7c:	440a      	add	r2, r1
 8004e7e:	4291      	cmp	r1, r2
 8004e80:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004e84:	d100      	bne.n	8004e88 <memcpy+0xc>
 8004e86:	4770      	bx	lr
 8004e88:	b510      	push	{r4, lr}
 8004e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e92:	4291      	cmp	r1, r2
 8004e94:	d1f9      	bne.n	8004e8a <memcpy+0xe>
 8004e96:	bd10      	pop	{r4, pc}

08004e98 <_init>:
 8004e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9a:	bf00      	nop
 8004e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e9e:	bc08      	pop	{r3}
 8004ea0:	469e      	mov	lr, r3
 8004ea2:	4770      	bx	lr

08004ea4 <_fini>:
 8004ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea6:	bf00      	nop
 8004ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004eaa:	bc08      	pop	{r3}
 8004eac:	469e      	mov	lr, r3
 8004eae:	4770      	bx	lr
