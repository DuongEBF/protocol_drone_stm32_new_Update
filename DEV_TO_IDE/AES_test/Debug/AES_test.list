
AES_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d44  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08003e50  08003e50  00004e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040fc  080040fc  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080040fc  080040fc  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080040fc  080040fc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040fc  080040fc  000050fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004100  08004100  00005100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004104  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000068  0800416c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000240  0800416c  00006240  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fdf  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a47  00000000  00000000  0000e070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0000fab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000615  00000000  00000000  000102c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ba1  00000000  00000000  000108d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000935a  00000000  00000000  00028476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008412e  00000000  00000000  000317d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b58fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002754  00000000  00000000  000b5944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000b8098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e38 	.word	0x08003e38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003e38 	.word	0x08003e38

0800014c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE* f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t* )&ch, 1, HAL_MAX_DELAY);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <__io_putchar+0x20>)
 800015e:	f001 faa3 	bl	80016a8 <HAL_UART_Transmit>
	return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000084 	.word	0x20000084

08000170 <aes_test>:

uint8_t encrypted[16];
uint8_t decrypted[16];

void aes_test(void)
{
 8000170:	b590      	push	{r4, r7, lr}
 8000172:	b0b3      	sub	sp, #204	@ 0xcc
 8000174:	af00      	add	r7, sp, #0
    struct AES_ctx ctx;

    // Khởi tạo context với key
    AES_init_ctx(&ctx, key);
 8000176:	463b      	mov	r3, r7
 8000178:	492a      	ldr	r1, [pc, #168]	@ (8000224 <aes_test+0xb4>)
 800017a:	4618      	mov	r0, r3
 800017c:	f002 f92a 	bl	80023d4 <AES_init_ctx>

    // Sao chép dữ liệu để mã hóa (tránh ghi đè plain_text gốc)
    memcpy(encrypted, plain_text, 16);
 8000180:	4a29      	ldr	r2, [pc, #164]	@ (8000228 <aes_test+0xb8>)
 8000182:	4b2a      	ldr	r3, [pc, #168]	@ (800022c <aes_test+0xbc>)
 8000184:	4614      	mov	r4, r2
 8000186:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000188:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    AES_ECB_encrypt(&ctx, encrypted);
 800018c:	463b      	mov	r3, r7
 800018e:	4926      	ldr	r1, [pc, #152]	@ (8000228 <aes_test+0xb8>)
 8000190:	4618      	mov	r0, r3
 8000192:	f002 fec1 	bl	8002f18 <AES_ECB_encrypt>

    printf("Encrypted: ");
 8000196:	4826      	ldr	r0, [pc, #152]	@ (8000230 <aes_test+0xc0>)
 8000198:	f002 ff9c 	bl	80030d4 <iprintf>
    for (int i = 0; i < 16; i++) {
 800019c:	2300      	movs	r3, #0
 800019e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80001a2:	e00d      	b.n	80001c0 <aes_test+0x50>
        printf("%02X ", encrypted[i]);
 80001a4:	4a20      	ldr	r2, [pc, #128]	@ (8000228 <aes_test+0xb8>)
 80001a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80001aa:	4413      	add	r3, r2
 80001ac:	781b      	ldrb	r3, [r3, #0]
 80001ae:	4619      	mov	r1, r3
 80001b0:	4820      	ldr	r0, [pc, #128]	@ (8000234 <aes_test+0xc4>)
 80001b2:	f002 ff8f 	bl	80030d4 <iprintf>
    for (int i = 0; i < 16; i++) {
 80001b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80001ba:	3301      	adds	r3, #1
 80001bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80001c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80001c4:	2b0f      	cmp	r3, #15
 80001c6:	dded      	ble.n	80001a4 <aes_test+0x34>
    }
    printf("\n");
 80001c8:	200a      	movs	r0, #10
 80001ca:	f002 ff95 	bl	80030f8 <putchar>

    // Giải mã lại
    memcpy(decrypted, encrypted, 16);
 80001ce:	4a1a      	ldr	r2, [pc, #104]	@ (8000238 <aes_test+0xc8>)
 80001d0:	4b15      	ldr	r3, [pc, #84]	@ (8000228 <aes_test+0xb8>)
 80001d2:	4614      	mov	r4, r2
 80001d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    AES_ECB_decrypt(&ctx, decrypted);
 80001da:	463b      	mov	r3, r7
 80001dc:	4916      	ldr	r1, [pc, #88]	@ (8000238 <aes_test+0xc8>)
 80001de:	4618      	mov	r0, r3
 80001e0:	f002 fea8 	bl	8002f34 <AES_ECB_decrypt>

    printf("Decrypted: ");
 80001e4:	4815      	ldr	r0, [pc, #84]	@ (800023c <aes_test+0xcc>)
 80001e6:	f002 ff75 	bl	80030d4 <iprintf>
    for (int i = 0; i < 16; i++) {
 80001ea:	2300      	movs	r3, #0
 80001ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80001f0:	e00c      	b.n	800020c <aes_test+0x9c>
        printf("%c", decrypted[i]);
 80001f2:	4a11      	ldr	r2, [pc, #68]	@ (8000238 <aes_test+0xc8>)
 80001f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80001f8:	4413      	add	r3, r2
 80001fa:	781b      	ldrb	r3, [r3, #0]
 80001fc:	4618      	mov	r0, r3
 80001fe:	f002 ff7b 	bl	80030f8 <putchar>
    for (int i = 0; i < 16; i++) {
 8000202:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000206:	3301      	adds	r3, #1
 8000208:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800020c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8000210:	2b0f      	cmp	r3, #15
 8000212:	ddee      	ble.n	80001f2 <aes_test+0x82>
    }
    printf("\n");
 8000214:	200a      	movs	r0, #10
 8000216:	f002 ff6f 	bl	80030f8 <putchar>
}
 800021a:	bf00      	nop
 800021c:	37cc      	adds	r7, #204	@ 0xcc
 800021e:	46bd      	mov	sp, r7
 8000220:	bd90      	pop	{r4, r7, pc}
 8000222:	bf00      	nop
 8000224:	08003e70 	.word	0x08003e70
 8000228:	200000cc 	.word	0x200000cc
 800022c:	08003e80 	.word	0x08003e80
 8000230:	08003e50 	.word	0x08003e50
 8000234:	08003e5c 	.word	0x08003e5c
 8000238:	200000dc 	.word	0x200000dc
 800023c:	08003e64 	.word	0x08003e64

08000240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000244:	f000 fa2a 	bl	800069c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000248:	f000 f808 	bl	800025c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024c:	f000 f876 	bl	800033c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000250:	f000 f84a 	bl	80002e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  aes_test();
 8000254:	f7ff ff8c 	bl	8000170 <aes_test>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	bf00      	nop
 800025a:	e7fd      	b.n	8000258 <main+0x18>

0800025c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b090      	sub	sp, #64	@ 0x40
 8000260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000262:	f107 0318 	add.w	r3, r7, #24
 8000266:	2228      	movs	r2, #40	@ 0x28
 8000268:	2100      	movs	r1, #0
 800026a:	4618      	mov	r0, r3
 800026c:	f002 ff8f 	bl	800318e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000270:	1d3b      	adds	r3, r7, #4
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
 800027c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800027e:	2301      	movs	r3, #1
 8000280:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000282:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000286:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	2301      	movs	r3, #1
 800028e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000290:	2302      	movs	r3, #2
 8000292:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000294:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000298:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800029e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	f107 0318 	add.w	r3, r7, #24
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 fd9f 	bl	8000de8 <HAL_RCC_OscConfig>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002b0:	f000 f866 	bl	8000380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b4:	230f      	movs	r3, #15
 80002b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002b8:	2302      	movs	r3, #2
 80002ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c6:	2300      	movs	r3, #0
 80002c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2102      	movs	r1, #2
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 f80c 	bl	80012ec <HAL_RCC_ClockConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002da:	f000 f851 	bl	8000380 <Error_Handler>
  }
}
 80002de:	bf00      	nop
 80002e0:	3740      	adds	r7, #64	@ 0x40
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002ec:	4b11      	ldr	r3, [pc, #68]	@ (8000334 <MX_USART1_UART_Init+0x4c>)
 80002ee:	4a12      	ldr	r2, [pc, #72]	@ (8000338 <MX_USART1_UART_Init+0x50>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002f2:	4b10      	ldr	r3, [pc, #64]	@ (8000334 <MX_USART1_UART_Init+0x4c>)
 80002f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000334 <MX_USART1_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0c      	ldr	r3, [pc, #48]	@ (8000334 <MX_USART1_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	@ (8000334 <MX_USART1_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b09      	ldr	r3, [pc, #36]	@ (8000334 <MX_USART1_UART_Init+0x4c>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b08      	ldr	r3, [pc, #32]	@ (8000334 <MX_USART1_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b06      	ldr	r3, [pc, #24]	@ (8000334 <MX_USART1_UART_Init+0x4c>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800031e:	4805      	ldr	r0, [pc, #20]	@ (8000334 <MX_USART1_UART_Init+0x4c>)
 8000320:	f001 f972 	bl	8001608 <HAL_UART_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800032a:	f000 f829 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	20000084 	.word	0x20000084
 8000338:	40013800 	.word	0x40013800

0800033c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000342:	4b0e      	ldr	r3, [pc, #56]	@ (800037c <MX_GPIO_Init+0x40>)
 8000344:	699b      	ldr	r3, [r3, #24]
 8000346:	4a0d      	ldr	r2, [pc, #52]	@ (800037c <MX_GPIO_Init+0x40>)
 8000348:	f043 0320 	orr.w	r3, r3, #32
 800034c:	6193      	str	r3, [r2, #24]
 800034e:	4b0b      	ldr	r3, [pc, #44]	@ (800037c <MX_GPIO_Init+0x40>)
 8000350:	699b      	ldr	r3, [r3, #24]
 8000352:	f003 0320 	and.w	r3, r3, #32
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035a:	4b08      	ldr	r3, [pc, #32]	@ (800037c <MX_GPIO_Init+0x40>)
 800035c:	699b      	ldr	r3, [r3, #24]
 800035e:	4a07      	ldr	r2, [pc, #28]	@ (800037c <MX_GPIO_Init+0x40>)
 8000360:	f043 0304 	orr.w	r3, r3, #4
 8000364:	6193      	str	r3, [r2, #24]
 8000366:	4b05      	ldr	r3, [pc, #20]	@ (800037c <MX_GPIO_Init+0x40>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	f003 0304 	and.w	r3, r3, #4
 800036e:	603b      	str	r3, [r7, #0]
 8000370:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000372:	bf00      	nop
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr
 800037c:	40021000 	.word	0x40021000

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	bf00      	nop
 800038a:	e7fd      	b.n	8000388 <Error_Handler+0x8>

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000392:	4b15      	ldr	r3, [pc, #84]	@ (80003e8 <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a14      	ldr	r2, [pc, #80]	@ (80003e8 <HAL_MspInit+0x5c>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b12      	ldr	r3, [pc, #72]	@ (80003e8 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	@ (80003e8 <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	@ (80003e8 <HAL_MspInit+0x5c>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	@ (80003e8 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	@ (80003ec <HAL_MspInit+0x60>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	4a04      	ldr	r2, [pc, #16]	@ (80003ec <HAL_MspInit+0x60>)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010000 	.word	0x40010000

080003f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a20      	ldr	r2, [pc, #128]	@ (800048c <HAL_UART_MspInit+0x9c>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d139      	bne.n	8000484 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000410:	4b1f      	ldr	r3, [pc, #124]	@ (8000490 <HAL_UART_MspInit+0xa0>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a1e      	ldr	r2, [pc, #120]	@ (8000490 <HAL_UART_MspInit+0xa0>)
 8000416:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b1c      	ldr	r3, [pc, #112]	@ (8000490 <HAL_UART_MspInit+0xa0>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b19      	ldr	r3, [pc, #100]	@ (8000490 <HAL_UART_MspInit+0xa0>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a18      	ldr	r2, [pc, #96]	@ (8000490 <HAL_UART_MspInit+0xa0>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b16      	ldr	r3, [pc, #88]	@ (8000490 <HAL_UART_MspInit+0xa0>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000440:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000444:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000446:	2302      	movs	r3, #2
 8000448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800044a:	2303      	movs	r3, #3
 800044c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044e:	f107 0310 	add.w	r3, r7, #16
 8000452:	4619      	mov	r1, r3
 8000454:	480f      	ldr	r0, [pc, #60]	@ (8000494 <HAL_UART_MspInit+0xa4>)
 8000456:	f000 fb43 	bl	8000ae0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800045a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800045e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000464:	2300      	movs	r3, #0
 8000466:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	4809      	ldr	r0, [pc, #36]	@ (8000494 <HAL_UART_MspInit+0xa4>)
 8000470:	f000 fb36 	bl	8000ae0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000474:	2200      	movs	r2, #0
 8000476:	2100      	movs	r1, #0
 8000478:	2025      	movs	r0, #37	@ 0x25
 800047a:	f000 fa48 	bl	800090e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800047e:	2025      	movs	r0, #37	@ 0x25
 8000480:	f000 fa61 	bl	8000946 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40013800 	.word	0x40013800
 8000490:	40021000 	.word	0x40021000
 8000494:	40010800 	.word	0x40010800

08000498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <NMI_Handler+0x4>

080004a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004a4:	bf00      	nop
 80004a6:	e7fd      	b.n	80004a4 <HardFault_Handler+0x4>

080004a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ac:	bf00      	nop
 80004ae:	e7fd      	b.n	80004ac <MemManage_Handler+0x4>

080004b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004b4:	bf00      	nop
 80004b6:	e7fd      	b.n	80004b4 <BusFault_Handler+0x4>

080004b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004bc:	bf00      	nop
 80004be:	e7fd      	b.n	80004bc <UsageFault_Handler+0x4>

080004c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004c4:	bf00      	nop
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr

080004cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004e8:	f000 f91e 	bl	8000728 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80004f4:	4802      	ldr	r0, [pc, #8]	@ (8000500 <USART1_IRQHandler+0x10>)
 80004f6:	f001 f963 	bl	80017c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	20000084 	.word	0x20000084

08000504 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	e00a      	b.n	800052c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000516:	f3af 8000 	nop.w
 800051a:	4601      	mov	r1, r0
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	1c5a      	adds	r2, r3, #1
 8000520:	60ba      	str	r2, [r7, #8]
 8000522:	b2ca      	uxtb	r2, r1
 8000524:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	3301      	adds	r3, #1
 800052a:	617b      	str	r3, [r7, #20]
 800052c:	697a      	ldr	r2, [r7, #20]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	429a      	cmp	r2, r3
 8000532:	dbf0      	blt.n	8000516 <_read+0x12>
  }

  return len;
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800053e:	b580      	push	{r7, lr}
 8000540:	b086      	sub	sp, #24
 8000542:	af00      	add	r7, sp, #0
 8000544:	60f8      	str	r0, [r7, #12]
 8000546:	60b9      	str	r1, [r7, #8]
 8000548:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054a:	2300      	movs	r3, #0
 800054c:	617b      	str	r3, [r7, #20]
 800054e:	e009      	b.n	8000564 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	1c5a      	adds	r2, r3, #1
 8000554:	60ba      	str	r2, [r7, #8]
 8000556:	781b      	ldrb	r3, [r3, #0]
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff fdf7 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055e:	697b      	ldr	r3, [r7, #20]
 8000560:	3301      	adds	r3, #1
 8000562:	617b      	str	r3, [r7, #20]
 8000564:	697a      	ldr	r2, [r7, #20]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	429a      	cmp	r2, r3
 800056a:	dbf1      	blt.n	8000550 <_write+0x12>
  }
  return len;
 800056c:	687b      	ldr	r3, [r7, #4]
}
 800056e:	4618      	mov	r0, r3
 8000570:	3718      	adds	r7, #24
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}

08000576 <_close>:

int _close(int file)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800057e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000582:	4618      	mov	r0, r3
 8000584:	370c      	adds	r7, #12
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800059c:	605a      	str	r2, [r3, #4]
  return 0;
 800059e:	2300      	movs	r3, #0
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bc80      	pop	{r7}
 80005a8:	4770      	bx	lr

080005aa <_isatty>:

int _isatty(int file)
{
 80005aa:	b480      	push	{r7}
 80005ac:	b083      	sub	sp, #12
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr

080005be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005be:	b480      	push	{r7}
 80005c0:	b085      	sub	sp, #20
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	60f8      	str	r0, [r7, #12]
 80005c6:	60b9      	str	r1, [r7, #8]
 80005c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ca:	2300      	movs	r3, #0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
	...

080005d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e0:	4a14      	ldr	r2, [pc, #80]	@ (8000634 <_sbrk+0x5c>)
 80005e2:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <_sbrk+0x60>)
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005ec:	4b13      	ldr	r3, [pc, #76]	@ (800063c <_sbrk+0x64>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d102      	bne.n	80005fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f4:	4b11      	ldr	r3, [pc, #68]	@ (800063c <_sbrk+0x64>)
 80005f6:	4a12      	ldr	r2, [pc, #72]	@ (8000640 <_sbrk+0x68>)
 80005f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fa:	4b10      	ldr	r3, [pc, #64]	@ (800063c <_sbrk+0x64>)
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4413      	add	r3, r2
 8000602:	693a      	ldr	r2, [r7, #16]
 8000604:	429a      	cmp	r2, r3
 8000606:	d207      	bcs.n	8000618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000608:	f002 fe10 	bl	800322c <__errno>
 800060c:	4603      	mov	r3, r0
 800060e:	220c      	movs	r2, #12
 8000610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000612:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000616:	e009      	b.n	800062c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <_sbrk+0x64>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800061e:	4b07      	ldr	r3, [pc, #28]	@ (800063c <_sbrk+0x64>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4413      	add	r3, r2
 8000626:	4a05      	ldr	r2, [pc, #20]	@ (800063c <_sbrk+0x64>)
 8000628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800062a:	68fb      	ldr	r3, [r7, #12]
}
 800062c:	4618      	mov	r0, r3
 800062e:	3718      	adds	r7, #24
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20005000 	.word	0x20005000
 8000638:	00000400 	.word	0x00000400
 800063c:	200000ec 	.word	0x200000ec
 8000640:	20000240 	.word	0x20000240

08000644 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000650:	f7ff fff8 	bl	8000644 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000654:	480b      	ldr	r0, [pc, #44]	@ (8000684 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000656:	490c      	ldr	r1, [pc, #48]	@ (8000688 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000658:	4a0c      	ldr	r2, [pc, #48]	@ (800068c <LoopFillZerobss+0x16>)
  movs r3, #0
 800065a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800065c:	e002      	b.n	8000664 <LoopCopyDataInit>

0800065e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000660:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000662:	3304      	adds	r3, #4

08000664 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000664:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000666:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000668:	d3f9      	bcc.n	800065e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066a:	4a09      	ldr	r2, [pc, #36]	@ (8000690 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800066c:	4c09      	ldr	r4, [pc, #36]	@ (8000694 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800066e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000670:	e001      	b.n	8000676 <LoopFillZerobss>

08000672 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000672:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000674:	3204      	adds	r2, #4

08000676 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000676:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000678:	d3fb      	bcc.n	8000672 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800067a:	f002 fddd 	bl	8003238 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067e:	f7ff fddf 	bl	8000240 <main>
  bx lr
 8000682:	4770      	bx	lr
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800068c:	08004104 	.word	0x08004104
  ldr r2, =_sbss
 8000690:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000694:	20000240 	.word	0x20000240

08000698 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC1_2_IRQHandler>
	...

0800069c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <HAL_Init+0x28>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a07      	ldr	r2, [pc, #28]	@ (80006c4 <HAL_Init+0x28>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f923 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006b2:	200f      	movs	r0, #15
 80006b4:	f000 f808 	bl	80006c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b8:	f7ff fe68 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	4618      	mov	r0, r3
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40022000 	.word	0x40022000

080006c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d0:	4b12      	ldr	r3, [pc, #72]	@ (800071c <HAL_InitTick+0x54>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <HAL_InitTick+0x58>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006de:	fbb3 f3f1 	udiv	r3, r3, r1
 80006e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f93b 	bl	8000962 <HAL_SYSTICK_Config>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006f2:	2301      	movs	r3, #1
 80006f4:	e00e      	b.n	8000714 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	2b0f      	cmp	r3, #15
 80006fa:	d80a      	bhi.n	8000712 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006fc:	2200      	movs	r2, #0
 80006fe:	6879      	ldr	r1, [r7, #4]
 8000700:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000704:	f000 f903 	bl	800090e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000708:	4a06      	ldr	r2, [pc, #24]	@ (8000724 <HAL_InitTick+0x5c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800070e:	2300      	movs	r3, #0
 8000710:	e000      	b.n	8000714 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000712:	2301      	movs	r3, #1
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000000 	.word	0x20000000
 8000720:	20000008 	.word	0x20000008
 8000724:	20000004 	.word	0x20000004

08000728 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800072c:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <HAL_IncTick+0x1c>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b05      	ldr	r3, [pc, #20]	@ (8000748 <HAL_IncTick+0x20>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4413      	add	r3, r2
 8000738:	4a03      	ldr	r2, [pc, #12]	@ (8000748 <HAL_IncTick+0x20>)
 800073a:	6013      	str	r3, [r2, #0]
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bc80      	pop	{r7}
 8000742:	4770      	bx	lr
 8000744:	20000008 	.word	0x20000008
 8000748:	200000f0 	.word	0x200000f0

0800074c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  return uwTick;
 8000750:	4b02      	ldr	r3, [pc, #8]	@ (800075c <HAL_GetTick+0x10>)
 8000752:	681b      	ldr	r3, [r3, #0]
}
 8000754:	4618      	mov	r0, r3
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	200000f0 	.word	0x200000f0

08000760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800077c:	4013      	ands	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800078c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000792:	4a04      	ldr	r2, [pc, #16]	@ (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	60d3      	str	r3, [r2, #12]
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ac:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	f003 0307 	and.w	r3, r3, #7
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	db0b      	blt.n	80007ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	f003 021f 	and.w	r2, r3, #31
 80007dc:	4906      	ldr	r1, [pc, #24]	@ (80007f8 <__NVIC_EnableIRQ+0x34>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	2001      	movs	r0, #1
 80007e6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	e000e100 	.word	0xe000e100

080007fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	6039      	str	r1, [r7, #0]
 8000806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080c:	2b00      	cmp	r3, #0
 800080e:	db0a      	blt.n	8000826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000810:	683b      	ldr	r3, [r7, #0]
 8000812:	b2da      	uxtb	r2, r3
 8000814:	490c      	ldr	r1, [pc, #48]	@ (8000848 <__NVIC_SetPriority+0x4c>)
 8000816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081a:	0112      	lsls	r2, r2, #4
 800081c:	b2d2      	uxtb	r2, r2
 800081e:	440b      	add	r3, r1
 8000820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000824:	e00a      	b.n	800083c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	b2da      	uxtb	r2, r3
 800082a:	4908      	ldr	r1, [pc, #32]	@ (800084c <__NVIC_SetPriority+0x50>)
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	f003 030f 	and.w	r3, r3, #15
 8000832:	3b04      	subs	r3, #4
 8000834:	0112      	lsls	r2, r2, #4
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	440b      	add	r3, r1
 800083a:	761a      	strb	r2, [r3, #24]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000e100 	.word	0xe000e100
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000850:	b480      	push	{r7}
 8000852:	b089      	sub	sp, #36	@ 0x24
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f003 0307 	and.w	r3, r3, #7
 8000862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	f1c3 0307 	rsb	r3, r3, #7
 800086a:	2b04      	cmp	r3, #4
 800086c:	bf28      	it	cs
 800086e:	2304      	movcs	r3, #4
 8000870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	3304      	adds	r3, #4
 8000876:	2b06      	cmp	r3, #6
 8000878:	d902      	bls.n	8000880 <NVIC_EncodePriority+0x30>
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	3b03      	subs	r3, #3
 800087e:	e000      	b.n	8000882 <NVIC_EncodePriority+0x32>
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	43da      	mvns	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	401a      	ands	r2, r3
 8000894:	697b      	ldr	r3, [r7, #20]
 8000896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000898:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	fa01 f303 	lsl.w	r3, r1, r3
 80008a2:	43d9      	mvns	r1, r3
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a8:	4313      	orrs	r3, r2
         );
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3724      	adds	r7, #36	@ 0x24
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c4:	d301      	bcc.n	80008ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00f      	b.n	80008ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <SysTick_Config+0x40>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d2:	210f      	movs	r1, #15
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008d8:	f7ff ff90 	bl	80007fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <SysTick_Config+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <SysTick_Config+0x40>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff2d 	bl	8000760 <__NVIC_SetPriorityGrouping>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000920:	f7ff ff42 	bl	80007a8 <__NVIC_GetPriorityGrouping>
 8000924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff ff90 	bl	8000850 <NVIC_EncodePriority>
 8000930:	4602      	mov	r2, r0
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff5f 	bl	80007fc <__NVIC_SetPriority>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	4603      	mov	r3, r0
 800094e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ff35 	bl	80007c4 <__NVIC_EnableIRQ>
}
 800095a:	bf00      	nop
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff ffa2 	bl	80008b4 <SysTick_Config>
 8000970:	4603      	mov	r3, r0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800097a:	b480      	push	{r7}
 800097c:	b085      	sub	sp, #20
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b02      	cmp	r3, #2
 8000990:	d008      	beq.n	80009a4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2204      	movs	r2, #4
 8000996:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80009a0:	2301      	movs	r3, #1
 80009a2:	e020      	b.n	80009e6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f022 020e 	bic.w	r2, r2, #14
 80009b2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	f022 0201 	bic.w	r2, r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009cc:	2101      	movs	r1, #1
 80009ce:	fa01 f202 	lsl.w	r2, r1, r2
 80009d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2201      	movs	r2, #1
 80009d8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80009e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d005      	beq.n	8000a14 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2204      	movs	r2, #4
 8000a0c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
 8000a12:	e051      	b.n	8000ab8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f022 020e 	bic.w	r2, r2, #14
 8000a22:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	f022 0201 	bic.w	r2, r2, #1
 8000a32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a22      	ldr	r2, [pc, #136]	@ (8000ac4 <HAL_DMA_Abort_IT+0xd4>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d029      	beq.n	8000a92 <HAL_DMA_Abort_IT+0xa2>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a21      	ldr	r2, [pc, #132]	@ (8000ac8 <HAL_DMA_Abort_IT+0xd8>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d022      	beq.n	8000a8e <HAL_DMA_Abort_IT+0x9e>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000acc <HAL_DMA_Abort_IT+0xdc>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d01a      	beq.n	8000a88 <HAL_DMA_Abort_IT+0x98>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a1e      	ldr	r2, [pc, #120]	@ (8000ad0 <HAL_DMA_Abort_IT+0xe0>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d012      	beq.n	8000a82 <HAL_DMA_Abort_IT+0x92>
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad4 <HAL_DMA_Abort_IT+0xe4>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d00a      	beq.n	8000a7c <HAL_DMA_Abort_IT+0x8c>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ad8 <HAL_DMA_Abort_IT+0xe8>)
 8000a6c:	4293      	cmp	r3, r2
 8000a6e:	d102      	bne.n	8000a76 <HAL_DMA_Abort_IT+0x86>
 8000a70:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000a74:	e00e      	b.n	8000a94 <HAL_DMA_Abort_IT+0xa4>
 8000a76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000a7a:	e00b      	b.n	8000a94 <HAL_DMA_Abort_IT+0xa4>
 8000a7c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a80:	e008      	b.n	8000a94 <HAL_DMA_Abort_IT+0xa4>
 8000a82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a86:	e005      	b.n	8000a94 <HAL_DMA_Abort_IT+0xa4>
 8000a88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a8c:	e002      	b.n	8000a94 <HAL_DMA_Abort_IT+0xa4>
 8000a8e:	2310      	movs	r3, #16
 8000a90:	e000      	b.n	8000a94 <HAL_DMA_Abort_IT+0xa4>
 8000a92:	2301      	movs	r3, #1
 8000a94:	4a11      	ldr	r2, [pc, #68]	@ (8000adc <HAL_DMA_Abort_IT+0xec>)
 8000a96:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d003      	beq.n	8000ab8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ab4:	6878      	ldr	r0, [r7, #4]
 8000ab6:	4798      	blx	r3
    } 
  }
  return status;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40020008 	.word	0x40020008
 8000ac8:	4002001c 	.word	0x4002001c
 8000acc:	40020030 	.word	0x40020030
 8000ad0:	40020044 	.word	0x40020044
 8000ad4:	40020058 	.word	0x40020058
 8000ad8:	4002006c 	.word	0x4002006c
 8000adc:	40020000 	.word	0x40020000

08000ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b08b      	sub	sp, #44	@ 0x2c
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aea:	2300      	movs	r3, #0
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000af2:	e169      	b.n	8000dc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000af4:	2201      	movs	r2, #1
 8000af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	69fa      	ldr	r2, [r7, #28]
 8000b04:	4013      	ands	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b08:	69ba      	ldr	r2, [r7, #24]
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	f040 8158 	bne.w	8000dc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	4a9a      	ldr	r2, [pc, #616]	@ (8000d80 <HAL_GPIO_Init+0x2a0>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d05e      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b1c:	4a98      	ldr	r2, [pc, #608]	@ (8000d80 <HAL_GPIO_Init+0x2a0>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d875      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b22:	4a98      	ldr	r2, [pc, #608]	@ (8000d84 <HAL_GPIO_Init+0x2a4>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d058      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b28:	4a96      	ldr	r2, [pc, #600]	@ (8000d84 <HAL_GPIO_Init+0x2a4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d86f      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b2e:	4a96      	ldr	r2, [pc, #600]	@ (8000d88 <HAL_GPIO_Init+0x2a8>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d052      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b34:	4a94      	ldr	r2, [pc, #592]	@ (8000d88 <HAL_GPIO_Init+0x2a8>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d869      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b3a:	4a94      	ldr	r2, [pc, #592]	@ (8000d8c <HAL_GPIO_Init+0x2ac>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d04c      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b40:	4a92      	ldr	r2, [pc, #584]	@ (8000d8c <HAL_GPIO_Init+0x2ac>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d863      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b46:	4a92      	ldr	r2, [pc, #584]	@ (8000d90 <HAL_GPIO_Init+0x2b0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d046      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
 8000b4c:	4a90      	ldr	r2, [pc, #576]	@ (8000d90 <HAL_GPIO_Init+0x2b0>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d85d      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b52:	2b12      	cmp	r3, #18
 8000b54:	d82a      	bhi.n	8000bac <HAL_GPIO_Init+0xcc>
 8000b56:	2b12      	cmp	r3, #18
 8000b58:	d859      	bhi.n	8000c0e <HAL_GPIO_Init+0x12e>
 8000b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b60 <HAL_GPIO_Init+0x80>)
 8000b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b60:	08000bdb 	.word	0x08000bdb
 8000b64:	08000bb5 	.word	0x08000bb5
 8000b68:	08000bc7 	.word	0x08000bc7
 8000b6c:	08000c09 	.word	0x08000c09
 8000b70:	08000c0f 	.word	0x08000c0f
 8000b74:	08000c0f 	.word	0x08000c0f
 8000b78:	08000c0f 	.word	0x08000c0f
 8000b7c:	08000c0f 	.word	0x08000c0f
 8000b80:	08000c0f 	.word	0x08000c0f
 8000b84:	08000c0f 	.word	0x08000c0f
 8000b88:	08000c0f 	.word	0x08000c0f
 8000b8c:	08000c0f 	.word	0x08000c0f
 8000b90:	08000c0f 	.word	0x08000c0f
 8000b94:	08000c0f 	.word	0x08000c0f
 8000b98:	08000c0f 	.word	0x08000c0f
 8000b9c:	08000c0f 	.word	0x08000c0f
 8000ba0:	08000c0f 	.word	0x08000c0f
 8000ba4:	08000bbd 	.word	0x08000bbd
 8000ba8:	08000bd1 	.word	0x08000bd1
 8000bac:	4a79      	ldr	r2, [pc, #484]	@ (8000d94 <HAL_GPIO_Init+0x2b4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d013      	beq.n	8000bda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bb2:	e02c      	b.n	8000c0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	623b      	str	r3, [r7, #32]
          break;
 8000bba:	e029      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	623b      	str	r3, [r7, #32]
          break;
 8000bc4:	e024      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	68db      	ldr	r3, [r3, #12]
 8000bca:	3308      	adds	r3, #8
 8000bcc:	623b      	str	r3, [r7, #32]
          break;
 8000bce:	e01f      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	330c      	adds	r3, #12
 8000bd6:	623b      	str	r3, [r7, #32]
          break;
 8000bd8:	e01a      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d102      	bne.n	8000be8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000be2:	2304      	movs	r3, #4
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e013      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d105      	bne.n	8000bfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	69fa      	ldr	r2, [r7, #28]
 8000bf8:	611a      	str	r2, [r3, #16]
          break;
 8000bfa:	e009      	b.n	8000c10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	69fa      	ldr	r2, [r7, #28]
 8000c04:	615a      	str	r2, [r3, #20]
          break;
 8000c06:	e003      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
          break;
 8000c0c:	e000      	b.n	8000c10 <HAL_GPIO_Init+0x130>
          break;
 8000c0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d801      	bhi.n	8000c1a <HAL_GPIO_Init+0x13a>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	e001      	b.n	8000c1e <HAL_GPIO_Init+0x13e>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	2bff      	cmp	r3, #255	@ 0xff
 8000c24:	d802      	bhi.n	8000c2c <HAL_GPIO_Init+0x14c>
 8000c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	e002      	b.n	8000c32 <HAL_GPIO_Init+0x152>
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2e:	3b08      	subs	r3, #8
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	210f      	movs	r1, #15
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	401a      	ands	r2, r3
 8000c44:	6a39      	ldr	r1, [r7, #32]
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4c:	431a      	orrs	r2, r3
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 80b1 	beq.w	8000dc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c60:	4b4d      	ldr	r3, [pc, #308]	@ (8000d98 <HAL_GPIO_Init+0x2b8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a4c      	ldr	r2, [pc, #304]	@ (8000d98 <HAL_GPIO_Init+0x2b8>)
 8000c66:	f043 0301 	orr.w	r3, r3, #1
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b4a      	ldr	r3, [pc, #296]	@ (8000d98 <HAL_GPIO_Init+0x2b8>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0301 	and.w	r3, r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]
 8000c76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c78:	4a48      	ldr	r2, [pc, #288]	@ (8000d9c <HAL_GPIO_Init+0x2bc>)
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c7c:	089b      	lsrs	r3, r3, #2
 8000c7e:	3302      	adds	r3, #2
 8000c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	009b      	lsls	r3, r3, #2
 8000c8e:	220f      	movs	r2, #15
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	43db      	mvns	r3, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a40      	ldr	r2, [pc, #256]	@ (8000da0 <HAL_GPIO_Init+0x2c0>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d013      	beq.n	8000ccc <HAL_GPIO_Init+0x1ec>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a3f      	ldr	r2, [pc, #252]	@ (8000da4 <HAL_GPIO_Init+0x2c4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d00d      	beq.n	8000cc8 <HAL_GPIO_Init+0x1e8>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a3e      	ldr	r2, [pc, #248]	@ (8000da8 <HAL_GPIO_Init+0x2c8>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d007      	beq.n	8000cc4 <HAL_GPIO_Init+0x1e4>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a3d      	ldr	r2, [pc, #244]	@ (8000dac <HAL_GPIO_Init+0x2cc>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d101      	bne.n	8000cc0 <HAL_GPIO_Init+0x1e0>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e006      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	e004      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	e002      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cd0:	f002 0203 	and.w	r2, r2, #3
 8000cd4:	0092      	lsls	r2, r2, #2
 8000cd6:	4093      	lsls	r3, r2
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cde:	492f      	ldr	r1, [pc, #188]	@ (8000d9c <HAL_GPIO_Init+0x2bc>)
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d006      	beq.n	8000d06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	492c      	ldr	r1, [pc, #176]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	608b      	str	r3, [r1, #8]
 8000d04:	e006      	b.n	8000d14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d06:	4b2a      	ldr	r3, [pc, #168]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d08:	689a      	ldr	r2, [r3, #8]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	4928      	ldr	r1, [pc, #160]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d006      	beq.n	8000d2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d20:	4b23      	ldr	r3, [pc, #140]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	4922      	ldr	r1, [pc, #136]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	60cb      	str	r3, [r1, #12]
 8000d2c:	e006      	b.n	8000d3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d2e:	4b20      	ldr	r3, [pc, #128]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d30:	68da      	ldr	r2, [r3, #12]
 8000d32:	69bb      	ldr	r3, [r7, #24]
 8000d34:	43db      	mvns	r3, r3
 8000d36:	491e      	ldr	r1, [pc, #120]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d006      	beq.n	8000d56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d48:	4b19      	ldr	r3, [pc, #100]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	685a      	ldr	r2, [r3, #4]
 8000d4c:	4918      	ldr	r1, [pc, #96]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d4e:	69bb      	ldr	r3, [r7, #24]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	604b      	str	r3, [r1, #4]
 8000d54:	e006      	b.n	8000d64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d56:	4b16      	ldr	r3, [pc, #88]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4914      	ldr	r1, [pc, #80]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d60:	4013      	ands	r3, r2
 8000d62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d021      	beq.n	8000db4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d70:	4b0f      	ldr	r3, [pc, #60]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	490e      	ldr	r1, [pc, #56]	@ (8000db0 <HAL_GPIO_Init+0x2d0>)
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	600b      	str	r3, [r1, #0]
 8000d7c:	e021      	b.n	8000dc2 <HAL_GPIO_Init+0x2e2>
 8000d7e:	bf00      	nop
 8000d80:	10320000 	.word	0x10320000
 8000d84:	10310000 	.word	0x10310000
 8000d88:	10220000 	.word	0x10220000
 8000d8c:	10210000 	.word	0x10210000
 8000d90:	10120000 	.word	0x10120000
 8000d94:	10110000 	.word	0x10110000
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010000 	.word	0x40010000
 8000da0:	40010800 	.word	0x40010800
 8000da4:	40010c00 	.word	0x40010c00
 8000da8:	40011000 	.word	0x40011000
 8000dac:	40011400 	.word	0x40011400
 8000db0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000db4:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <HAL_GPIO_Init+0x304>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	4909      	ldr	r1, [pc, #36]	@ (8000de4 <HAL_GPIO_Init+0x304>)
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dce:	fa22 f303 	lsr.w	r3, r2, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f47f ae8e 	bne.w	8000af4 <HAL_GPIO_Init+0x14>
  }
}
 8000dd8:	bf00      	nop
 8000dda:	bf00      	nop
 8000ddc:	372c      	adds	r7, #44	@ 0x2c
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr
 8000de4:	40010400 	.word	0x40010400

08000de8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e272      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f000 8087 	beq.w	8000f16 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e08:	4b92      	ldr	r3, [pc, #584]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b04      	cmp	r3, #4
 8000e12:	d00c      	beq.n	8000e2e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e14:	4b8f      	ldr	r3, [pc, #572]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 030c 	and.w	r3, r3, #12
 8000e1c:	2b08      	cmp	r3, #8
 8000e1e:	d112      	bne.n	8000e46 <HAL_RCC_OscConfig+0x5e>
 8000e20:	4b8c      	ldr	r3, [pc, #560]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e2c:	d10b      	bne.n	8000e46 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2e:	4b89      	ldr	r3, [pc, #548]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d06c      	beq.n	8000f14 <HAL_RCC_OscConfig+0x12c>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d168      	bne.n	8000f14 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e24c      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e4e:	d106      	bne.n	8000e5e <HAL_RCC_OscConfig+0x76>
 8000e50:	4b80      	ldr	r3, [pc, #512]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a7f      	ldr	r2, [pc, #508]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	e02e      	b.n	8000ebc <HAL_RCC_OscConfig+0xd4>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x98>
 8000e66:	4b7b      	ldr	r3, [pc, #492]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a7a      	ldr	r2, [pc, #488]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	4b78      	ldr	r3, [pc, #480]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a77      	ldr	r2, [pc, #476]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e7c:	6013      	str	r3, [r2, #0]
 8000e7e:	e01d      	b.n	8000ebc <HAL_RCC_OscConfig+0xd4>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e88:	d10c      	bne.n	8000ea4 <HAL_RCC_OscConfig+0xbc>
 8000e8a:	4b72      	ldr	r3, [pc, #456]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a71      	ldr	r2, [pc, #452]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	4b6f      	ldr	r3, [pc, #444]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	e00b      	b.n	8000ebc <HAL_RCC_OscConfig+0xd4>
 8000ea4:	4b6b      	ldr	r3, [pc, #428]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a6a      	ldr	r2, [pc, #424]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	4b68      	ldr	r3, [pc, #416]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a67      	ldr	r2, [pc, #412]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eba:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d013      	beq.n	8000eec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fc42 	bl	800074c <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ecc:	f7ff fc3e 	bl	800074c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b64      	cmp	r3, #100	@ 0x64
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e200      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ede:	4b5d      	ldr	r3, [pc, #372]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f0      	beq.n	8000ecc <HAL_RCC_OscConfig+0xe4>
 8000eea:	e014      	b.n	8000f16 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eec:	f7ff fc2e 	bl	800074c <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ef4:	f7ff fc2a 	bl	800074c <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b64      	cmp	r3, #100	@ 0x64
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e1ec      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f06:	4b53      	ldr	r3, [pc, #332]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1f0      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x10c>
 8000f12:	e000      	b.n	8000f16 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d063      	beq.n	8000fea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f22:	4b4c      	ldr	r3, [pc, #304]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00b      	beq.n	8000f46 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f2e:	4b49      	ldr	r3, [pc, #292]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 030c 	and.w	r3, r3, #12
 8000f36:	2b08      	cmp	r3, #8
 8000f38:	d11c      	bne.n	8000f74 <HAL_RCC_OscConfig+0x18c>
 8000f3a:	4b46      	ldr	r3, [pc, #280]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d116      	bne.n	8000f74 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f46:	4b43      	ldr	r3, [pc, #268]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d005      	beq.n	8000f5e <HAL_RCC_OscConfig+0x176>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d001      	beq.n	8000f5e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e1c0      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	4939      	ldr	r1, [pc, #228]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f72:	e03a      	b.n	8000fea <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d020      	beq.n	8000fbe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f7c:	4b36      	ldr	r3, [pc, #216]	@ (8001058 <HAL_RCC_OscConfig+0x270>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f82:	f7ff fbe3 	bl	800074c <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f8a:	f7ff fbdf 	bl	800074c <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e1a1      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f0      	beq.n	8000f8a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa8:	4b2a      	ldr	r3, [pc, #168]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4927      	ldr	r1, [pc, #156]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	600b      	str	r3, [r1, #0]
 8000fbc:	e015      	b.n	8000fea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fbe:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <HAL_RCC_OscConfig+0x270>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc4:	f7ff fbc2 	bl	800074c <HAL_GetTick>
 8000fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fca:	e008      	b.n	8000fde <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fcc:	f7ff fbbe 	bl	800074c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d901      	bls.n	8000fde <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e180      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fde:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d1f0      	bne.n	8000fcc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d03a      	beq.n	800106c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d019      	beq.n	8001032 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ffe:	4b17      	ldr	r3, [pc, #92]	@ (800105c <HAL_RCC_OscConfig+0x274>)
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001004:	f7ff fba2 	bl	800074c <HAL_GetTick>
 8001008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100a:	e008      	b.n	800101e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800100c:	f7ff fb9e 	bl	800074c <HAL_GetTick>
 8001010:	4602      	mov	r2, r0
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b02      	cmp	r3, #2
 8001018:	d901      	bls.n	800101e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800101a:	2303      	movs	r3, #3
 800101c:	e160      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <HAL_RCC_OscConfig+0x26c>)
 8001020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d0f0      	beq.n	800100c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800102a:	2001      	movs	r0, #1
 800102c:	f000 face 	bl	80015cc <RCC_Delay>
 8001030:	e01c      	b.n	800106c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001032:	4b0a      	ldr	r3, [pc, #40]	@ (800105c <HAL_RCC_OscConfig+0x274>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001038:	f7ff fb88 	bl	800074c <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800103e:	e00f      	b.n	8001060 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff fb84 	bl	800074c <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d908      	bls.n	8001060 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e146      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	42420000 	.word	0x42420000
 800105c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001060:	4b92      	ldr	r3, [pc, #584]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001064:	f003 0302 	and.w	r3, r3, #2
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1e9      	bne.n	8001040 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 80a6 	beq.w	80011c6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800107a:	2300      	movs	r3, #0
 800107c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800107e:	4b8b      	ldr	r3, [pc, #556]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d10d      	bne.n	80010a6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b88      	ldr	r3, [pc, #544]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	4a87      	ldr	r2, [pc, #540]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001094:	61d3      	str	r3, [r2, #28]
 8001096:	4b85      	ldr	r3, [pc, #532]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001098:	69db      	ldr	r3, [r3, #28]
 800109a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010a2:	2301      	movs	r3, #1
 80010a4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010a6:	4b82      	ldr	r3, [pc, #520]	@ (80012b0 <HAL_RCC_OscConfig+0x4c8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d118      	bne.n	80010e4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010b2:	4b7f      	ldr	r3, [pc, #508]	@ (80012b0 <HAL_RCC_OscConfig+0x4c8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a7e      	ldr	r2, [pc, #504]	@ (80012b0 <HAL_RCC_OscConfig+0x4c8>)
 80010b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010be:	f7ff fb45 	bl	800074c <HAL_GetTick>
 80010c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010c6:	f7ff fb41 	bl	800074c <HAL_GetTick>
 80010ca:	4602      	mov	r2, r0
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b64      	cmp	r3, #100	@ 0x64
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e103      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010d8:	4b75      	ldr	r3, [pc, #468]	@ (80012b0 <HAL_RCC_OscConfig+0x4c8>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0f0      	beq.n	80010c6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d106      	bne.n	80010fa <HAL_RCC_OscConfig+0x312>
 80010ec:	4b6f      	ldr	r3, [pc, #444]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	6a1b      	ldr	r3, [r3, #32]
 80010f0:	4a6e      	ldr	r2, [pc, #440]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6213      	str	r3, [r2, #32]
 80010f8:	e02d      	b.n	8001156 <HAL_RCC_OscConfig+0x36e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x334>
 8001102:	4b6a      	ldr	r3, [pc, #424]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4a69      	ldr	r2, [pc, #420]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001108:	f023 0301 	bic.w	r3, r3, #1
 800110c:	6213      	str	r3, [r2, #32]
 800110e:	4b67      	ldr	r3, [pc, #412]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	4a66      	ldr	r2, [pc, #408]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001114:	f023 0304 	bic.w	r3, r3, #4
 8001118:	6213      	str	r3, [r2, #32]
 800111a:	e01c      	b.n	8001156 <HAL_RCC_OscConfig+0x36e>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	2b05      	cmp	r3, #5
 8001122:	d10c      	bne.n	800113e <HAL_RCC_OscConfig+0x356>
 8001124:	4b61      	ldr	r3, [pc, #388]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a60      	ldr	r2, [pc, #384]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6213      	str	r3, [r2, #32]
 8001130:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	4a5d      	ldr	r2, [pc, #372]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6213      	str	r3, [r2, #32]
 800113c:	e00b      	b.n	8001156 <HAL_RCC_OscConfig+0x36e>
 800113e:	4b5b      	ldr	r3, [pc, #364]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a5a      	ldr	r2, [pc, #360]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001144:	f023 0301 	bic.w	r3, r3, #1
 8001148:	6213      	str	r3, [r2, #32]
 800114a:	4b58      	ldr	r3, [pc, #352]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	4a57      	ldr	r2, [pc, #348]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001150:	f023 0304 	bic.w	r3, r3, #4
 8001154:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d015      	beq.n	800118a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800115e:	f7ff faf5 	bl	800074c <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001164:	e00a      	b.n	800117c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001166:	f7ff faf1 	bl	800074c <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001174:	4293      	cmp	r3, r2
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e0b1      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800117c:	4b4b      	ldr	r3, [pc, #300]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	f003 0302 	and.w	r3, r3, #2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d0ee      	beq.n	8001166 <HAL_RCC_OscConfig+0x37e>
 8001188:	e014      	b.n	80011b4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118a:	f7ff fadf 	bl	800074c <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001190:	e00a      	b.n	80011a8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001192:	f7ff fadb 	bl	800074c <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e09b      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011a8:	4b40      	ldr	r3, [pc, #256]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 80011aa:	6a1b      	ldr	r3, [r3, #32]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1ee      	bne.n	8001192 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d105      	bne.n	80011c6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ba:	4b3c      	ldr	r3, [pc, #240]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	4a3b      	ldr	r2, [pc, #236]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 80011c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011c4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8087 	beq.w	80012de <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d0:	4b36      	ldr	r3, [pc, #216]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b08      	cmp	r3, #8
 80011da:	d061      	beq.n	80012a0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	69db      	ldr	r3, [r3, #28]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d146      	bne.n	8001272 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011e4:	4b33      	ldr	r3, [pc, #204]	@ (80012b4 <HAL_RCC_OscConfig+0x4cc>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ea:	f7ff faaf 	bl	800074c <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011f2:	f7ff faab 	bl	800074c <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e06d      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001204:	4b29      	ldr	r3, [pc, #164]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d1f0      	bne.n	80011f2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001218:	d108      	bne.n	800122c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800121a:	4b24      	ldr	r3, [pc, #144]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	4921      	ldr	r1, [pc, #132]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800122c:	4b1f      	ldr	r3, [pc, #124]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a19      	ldr	r1, [r3, #32]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800123c:	430b      	orrs	r3, r1
 800123e:	491b      	ldr	r1, [pc, #108]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001244:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <HAL_RCC_OscConfig+0x4cc>)
 8001246:	2201      	movs	r2, #1
 8001248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124a:	f7ff fa7f 	bl	800074c <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001250:	e008      	b.n	8001264 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001252:	f7ff fa7b 	bl	800074c <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	2b02      	cmp	r3, #2
 800125e:	d901      	bls.n	8001264 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001260:	2303      	movs	r3, #3
 8001262:	e03d      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001264:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f0      	beq.n	8001252 <HAL_RCC_OscConfig+0x46a>
 8001270:	e035      	b.n	80012de <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001272:	4b10      	ldr	r3, [pc, #64]	@ (80012b4 <HAL_RCC_OscConfig+0x4cc>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fa68 	bl	800074c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001280:	f7ff fa64 	bl	800074c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e026      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001292:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <HAL_RCC_OscConfig+0x4c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x498>
 800129e:	e01e      	b.n	80012de <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d107      	bne.n	80012b8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e019      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
 80012ac:	40021000 	.word	0x40021000
 80012b0:	40007000 	.word	0x40007000
 80012b4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <HAL_RCC_OscConfig+0x500>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40021000 	.word	0x40021000

080012ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0d0      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001300:	4b6a      	ldr	r3, [pc, #424]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	429a      	cmp	r2, r3
 800130c:	d910      	bls.n	8001330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800130e:	4b67      	ldr	r3, [pc, #412]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f023 0207 	bic.w	r2, r3, #7
 8001316:	4965      	ldr	r1, [pc, #404]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	4313      	orrs	r3, r2
 800131c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800131e:	4b63      	ldr	r3, [pc, #396]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	683a      	ldr	r2, [r7, #0]
 8001328:	429a      	cmp	r2, r3
 800132a:	d001      	beq.n	8001330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0b8      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0302 	and.w	r3, r3, #2
 8001338:	2b00      	cmp	r3, #0
 800133a:	d020      	beq.n	800137e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0304 	and.w	r3, r3, #4
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001348:	4b59      	ldr	r3, [pc, #356]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	4a58      	ldr	r2, [pc, #352]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 800134e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0308 	and.w	r3, r3, #8
 800135c:	2b00      	cmp	r3, #0
 800135e:	d005      	beq.n	800136c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001360:	4b53      	ldr	r3, [pc, #332]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4a52      	ldr	r2, [pc, #328]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800136a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800136c:	4b50      	ldr	r3, [pc, #320]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	494d      	ldr	r1, [pc, #308]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 800137a:	4313      	orrs	r3, r2
 800137c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	2b00      	cmp	r3, #0
 8001388:	d040      	beq.n	800140c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001392:	4b47      	ldr	r3, [pc, #284]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d115      	bne.n	80013ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e07f      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d107      	bne.n	80013ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013aa:	4b41      	ldr	r3, [pc, #260]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e073      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ba:	4b3d      	ldr	r3, [pc, #244]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d101      	bne.n	80013ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e06b      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ca:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f023 0203 	bic.w	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4936      	ldr	r1, [pc, #216]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 80013d8:	4313      	orrs	r3, r2
 80013da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013dc:	f7ff f9b6 	bl	800074c <HAL_GetTick>
 80013e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e4:	f7ff f9b2 	bl	800074c <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e053      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013fa:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 020c 	and.w	r2, r3, #12
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	429a      	cmp	r2, r3
 800140a:	d1eb      	bne.n	80013e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800140c:	4b27      	ldr	r3, [pc, #156]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f003 0307 	and.w	r3, r3, #7
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	429a      	cmp	r2, r3
 8001418:	d210      	bcs.n	800143c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800141a:	4b24      	ldr	r3, [pc, #144]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 0207 	bic.w	r2, r3, #7
 8001422:	4922      	ldr	r1, [pc, #136]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800142a:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <HAL_RCC_ClockConfig+0x1c0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	683a      	ldr	r2, [r7, #0]
 8001434:	429a      	cmp	r2, r3
 8001436:	d001      	beq.n	800143c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e032      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d008      	beq.n	800145a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001448:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	4916      	ldr	r1, [pc, #88]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0308 	and.w	r3, r3, #8
 8001462:	2b00      	cmp	r3, #0
 8001464:	d009      	beq.n	800147a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001466:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	00db      	lsls	r3, r3, #3
 8001474:	490e      	ldr	r1, [pc, #56]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	4313      	orrs	r3, r2
 8001478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800147a:	f000 f821 	bl	80014c0 <HAL_RCC_GetSysClockFreq>
 800147e:	4602      	mov	r2, r0
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <HAL_RCC_ClockConfig+0x1c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	091b      	lsrs	r3, r3, #4
 8001486:	f003 030f 	and.w	r3, r3, #15
 800148a:	490a      	ldr	r1, [pc, #40]	@ (80014b4 <HAL_RCC_ClockConfig+0x1c8>)
 800148c:	5ccb      	ldrb	r3, [r1, r3]
 800148e:	fa22 f303 	lsr.w	r3, r2, r3
 8001492:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <HAL_RCC_ClockConfig+0x1cc>)
 8001494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <HAL_RCC_ClockConfig+0x1d0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f914 	bl	80006c8 <HAL_InitTick>

  return HAL_OK;
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	40022000 	.word	0x40022000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	08003e90 	.word	0x08003e90
 80014b8:	20000000 	.word	0x20000000
 80014bc:	20000004 	.word	0x20000004

080014c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014c6:	2300      	movs	r3, #0
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	2300      	movs	r3, #0
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014da:	4b1e      	ldr	r3, [pc, #120]	@ (8001554 <HAL_RCC_GetSysClockFreq+0x94>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 030c 	and.w	r3, r3, #12
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	d002      	beq.n	80014f0 <HAL_RCC_GetSysClockFreq+0x30>
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d003      	beq.n	80014f6 <HAL_RCC_GetSysClockFreq+0x36>
 80014ee:	e027      	b.n	8001540 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014f0:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x98>)
 80014f2:	613b      	str	r3, [r7, #16]
      break;
 80014f4:	e027      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	0c9b      	lsrs	r3, r3, #18
 80014fa:	f003 030f 	and.w	r3, r3, #15
 80014fe:	4a17      	ldr	r2, [pc, #92]	@ (800155c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001500:	5cd3      	ldrb	r3, [r2, r3]
 8001502:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d010      	beq.n	8001530 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800150e:	4b11      	ldr	r3, [pc, #68]	@ (8001554 <HAL_RCC_GetSysClockFreq+0x94>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	0c5b      	lsrs	r3, r3, #17
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	4a11      	ldr	r2, [pc, #68]	@ (8001560 <HAL_RCC_GetSysClockFreq+0xa0>)
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a0d      	ldr	r2, [pc, #52]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x98>)
 8001522:	fb03 f202 	mul.w	r2, r3, r2
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	fbb2 f3f3 	udiv	r3, r2, r3
 800152c:	617b      	str	r3, [r7, #20]
 800152e:	e004      	b.n	800153a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a0c      	ldr	r2, [pc, #48]	@ (8001564 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001534:	fb02 f303 	mul.w	r3, r2, r3
 8001538:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	613b      	str	r3, [r7, #16]
      break;
 800153e:	e002      	b.n	8001546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001540:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <HAL_RCC_GetSysClockFreq+0x98>)
 8001542:	613b      	str	r3, [r7, #16]
      break;
 8001544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001546:	693b      	ldr	r3, [r7, #16]
}
 8001548:	4618      	mov	r0, r3
 800154a:	371c      	adds	r7, #28
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40021000 	.word	0x40021000
 8001558:	007a1200 	.word	0x007a1200
 800155c:	08003ea8 	.word	0x08003ea8
 8001560:	08003eb8 	.word	0x08003eb8
 8001564:	003d0900 	.word	0x003d0900

08001568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800156c:	4b02      	ldr	r3, [pc, #8]	@ (8001578 <HAL_RCC_GetHCLKFreq+0x10>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	20000000 	.word	0x20000000

0800157c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001580:	f7ff fff2 	bl	8001568 <HAL_RCC_GetHCLKFreq>
 8001584:	4602      	mov	r2, r0
 8001586:	4b05      	ldr	r3, [pc, #20]	@ (800159c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	0a1b      	lsrs	r3, r3, #8
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	4903      	ldr	r1, [pc, #12]	@ (80015a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001592:	5ccb      	ldrb	r3, [r1, r3]
 8001594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001598:	4618      	mov	r0, r3
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021000 	.word	0x40021000
 80015a0:	08003ea0 	.word	0x08003ea0

080015a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015a8:	f7ff ffde 	bl	8001568 <HAL_RCC_GetHCLKFreq>
 80015ac:	4602      	mov	r2, r0
 80015ae:	4b05      	ldr	r3, [pc, #20]	@ (80015c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	0adb      	lsrs	r3, r3, #11
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	4903      	ldr	r1, [pc, #12]	@ (80015c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ba:	5ccb      	ldrb	r3, [r1, r3]
 80015bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40021000 	.word	0x40021000
 80015c8:	08003ea0 	.word	0x08003ea0

080015cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <RCC_Delay+0x34>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <RCC_Delay+0x38>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	0a5b      	lsrs	r3, r3, #9
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	fb02 f303 	mul.w	r3, r2, r3
 80015e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015e8:	bf00      	nop
  }
  while (Delay --);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	1e5a      	subs	r2, r3, #1
 80015ee:	60fa      	str	r2, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f9      	bne.n	80015e8 <RCC_Delay+0x1c>
}
 80015f4:	bf00      	nop
 80015f6:	bf00      	nop
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000000 	.word	0x20000000
 8001604:	10624dd3 	.word	0x10624dd3

08001608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e042      	b.n	80016a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7fe fede 	bl	80003f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2224      	movs	r2, #36	@ 0x24
 8001638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68da      	ldr	r2, [r3, #12]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800164a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f000 fd63 	bl	8002118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	691a      	ldr	r2, [r3, #16]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	695a      	ldr	r2, [r3, #20]
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2220      	movs	r2, #32
 800168c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2220      	movs	r2, #32
 8001694:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3708      	adds	r7, #8
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08a      	sub	sp, #40	@ 0x28
 80016ac:	af02      	add	r7, sp, #8
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	4613      	mov	r3, r2
 80016b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	d175      	bne.n	80017b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <HAL_UART_Transmit+0x2c>
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e06e      	b.n	80017b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2221      	movs	r2, #33	@ 0x21
 80016e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80016e6:	f7ff f831 	bl	800074c <HAL_GetTick>
 80016ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	88fa      	ldrh	r2, [r7, #6]
 80016f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	88fa      	ldrh	r2, [r7, #6]
 80016f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001700:	d108      	bne.n	8001714 <HAL_UART_Transmit+0x6c>
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d104      	bne.n	8001714 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	e003      	b.n	800171c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800171c:	e02e      	b.n	800177c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	9300      	str	r3, [sp, #0]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	2200      	movs	r2, #0
 8001726:	2180      	movs	r1, #128	@ 0x80
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	f000 fb01 	bl	8001d30 <UART_WaitOnFlagUntilTimeout>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2220      	movs	r2, #32
 8001738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e03a      	b.n	80017b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10b      	bne.n	800175e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	881b      	ldrh	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001754:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	3302      	adds	r3, #2
 800175a:	61bb      	str	r3, [r7, #24]
 800175c:	e007      	b.n	800176e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	3301      	adds	r3, #1
 800176c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001772:	b29b      	uxth	r3, r3
 8001774:	3b01      	subs	r3, #1
 8001776:	b29a      	uxth	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001780:	b29b      	uxth	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1cb      	bne.n	800171e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	2200      	movs	r2, #0
 800178e:	2140      	movs	r1, #64	@ 0x40
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 facd 	bl	8001d30 <UART_WaitOnFlagUntilTimeout>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2220      	movs	r2, #32
 80017a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e006      	b.n	80017b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2220      	movs	r2, #32
 80017ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e000      	b.n	80017b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80017b4:	2302      	movs	r3, #2
  }
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
	...

080017c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0ba      	sub	sp, #232	@ 0xe8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80017f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80017fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10f      	bne.n	8001826 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800180a:	f003 0320 	and.w	r3, r3, #32
 800180e:	2b00      	cmp	r3, #0
 8001810:	d009      	beq.n	8001826 <HAL_UART_IRQHandler+0x66>
 8001812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fbbc 	bl	8001f9c <UART_Receive_IT>
      return;
 8001824:	e25b      	b.n	8001cde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001826:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 80de 	beq.w	80019ec <HAL_UART_IRQHandler+0x22c>
 8001830:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d106      	bne.n	800184a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800183c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001840:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80d1 	beq.w	80019ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800184a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_UART_IRQHandler+0xae>
 8001856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800185a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	f043 0201 	orr.w	r2, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800186e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	2b00      	cmp	r3, #0
 8001878:	d00b      	beq.n	8001892 <HAL_UART_IRQHandler+0xd2>
 800187a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b00      	cmp	r3, #0
 8001884:	d005      	beq.n	8001892 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188a:	f043 0202 	orr.w	r2, r3, #2
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00b      	beq.n	80018b6 <HAL_UART_IRQHandler+0xf6>
 800189e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d005      	beq.n	80018b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ae:	f043 0204 	orr.w	r2, r3, #4
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80018b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d011      	beq.n	80018e6 <HAL_UART_IRQHandler+0x126>
 80018c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80018c6:	f003 0320 	and.w	r3, r3, #32
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d105      	bne.n	80018da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80018ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d005      	beq.n	80018e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	f043 0208 	orr.w	r2, r3, #8
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 81f2 	beq.w	8001cd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80018f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80018f4:	f003 0320 	and.w	r3, r3, #32
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d008      	beq.n	800190e <HAL_UART_IRQHandler+0x14e>
 80018fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001900:	f003 0320 	and.w	r3, r3, #32
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 fb47 	bl	8001f9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001918:	2b00      	cmp	r3, #0
 800191a:	bf14      	ite	ne
 800191c:	2301      	movne	r3, #1
 800191e:	2300      	moveq	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d103      	bne.n	800193a <HAL_UART_IRQHandler+0x17a>
 8001932:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001936:	2b00      	cmp	r3, #0
 8001938:	d04f      	beq.n	80019da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 fa51 	bl	8001de2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	695b      	ldr	r3, [r3, #20]
 8001946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800194a:	2b00      	cmp	r3, #0
 800194c:	d041      	beq.n	80019d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3314      	adds	r3, #20
 8001954:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001958:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800195c:	e853 3f00 	ldrex	r3, [r3]
 8001960:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001964:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001968:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800196c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	3314      	adds	r3, #20
 8001976:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800197a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800197e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001982:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001986:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800198a:	e841 2300 	strex	r3, r2, [r1]
 800198e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001992:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1d9      	bne.n	800194e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d013      	beq.n	80019ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ba0 <HAL_UART_IRQHandler+0x3e0>)
 80019a8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff f81e 	bl	80009f0 <HAL_DMA_Abort_IT>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d016      	beq.n	80019e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80019c4:	4610      	mov	r0, r2
 80019c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019c8:	e00e      	b.n	80019e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f000 f99c 	bl	8001d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019d0:	e00a      	b.n	80019e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f998 	bl	8001d08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019d8:	e006      	b.n	80019e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f000 f994 	bl	8001d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80019e6:	e175      	b.n	8001cd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80019e8:	bf00      	nop
    return;
 80019ea:	e173      	b.n	8001cd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	f040 814f 	bne.w	8001c94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80019f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80019fa:	f003 0310 	and.w	r3, r3, #16
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 8148 	beq.w	8001c94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8141 	beq.w	8001c94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 80b6 	beq.w	8001ba4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001a44:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	f000 8145 	beq.w	8001cd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001a52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001a56:	429a      	cmp	r2, r3
 8001a58:	f080 813e 	bcs.w	8001cd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001a62:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b20      	cmp	r3, #32
 8001a6c:	f000 8088 	beq.w	8001b80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	330c      	adds	r3, #12
 8001a76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001a7e:	e853 3f00 	ldrex	r3, [r3]
 8001a82:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001a86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	330c      	adds	r3, #12
 8001a98:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001a9c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001aa0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aa4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001aa8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001aac:	e841 2300 	strex	r3, r2, [r1]
 8001ab0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1d9      	bne.n	8001a70 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	3314      	adds	r3, #20
 8001ac2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ac4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ac6:	e853 3f00 	ldrex	r3, [r3]
 8001aca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001acc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ace:	f023 0301 	bic.w	r3, r3, #1
 8001ad2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	3314      	adds	r3, #20
 8001adc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ae0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001ae4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ae6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001ae8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001aec:	e841 2300 	strex	r3, r2, [r1]
 8001af0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001af2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e1      	bne.n	8001abc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	3314      	adds	r3, #20
 8001afe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b02:	e853 3f00 	ldrex	r3, [r3]
 8001b06:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001b08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3314      	adds	r3, #20
 8001b18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001b1c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b1e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b20:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001b22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001b24:	e841 2300 	strex	r3, r2, [r1]
 8001b28:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001b2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1e3      	bne.n	8001af8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2220      	movs	r2, #32
 8001b34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	330c      	adds	r3, #12
 8001b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b48:	e853 3f00 	ldrex	r3, [r3]
 8001b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001b4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001b50:	f023 0310 	bic.w	r3, r3, #16
 8001b54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	330c      	adds	r3, #12
 8001b5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001b62:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001b64:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001b68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b6a:	e841 2300 	strex	r3, r2, [r1]
 8001b6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001b70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1e3      	bne.n	8001b3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7fe fefd 	bl	800097a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	4619      	mov	r1, r3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f000 f8bf 	bl	8001d1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001b9c:	e09c      	b.n	8001cd8 <HAL_UART_IRQHandler+0x518>
 8001b9e:	bf00      	nop
 8001ba0:	08001ea7 	.word	0x08001ea7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	f000 808e 	beq.w	8001cdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001bc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 8089 	beq.w	8001cdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	330c      	adds	r3, #12
 8001bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bd4:	e853 3f00 	ldrex	r3, [r3]
 8001bd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001bda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001be0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	330c      	adds	r3, #12
 8001bea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8001bee:	647a      	str	r2, [r7, #68]	@ 0x44
 8001bf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001bf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001bf6:	e841 2300 	strex	r3, r2, [r1]
 8001bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1e3      	bne.n	8001bca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3314      	adds	r3, #20
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	e853 3f00 	ldrex	r3, [r3]
 8001c10:	623b      	str	r3, [r7, #32]
   return(result);
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	3314      	adds	r3, #20
 8001c22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001c26:	633a      	str	r2, [r7, #48]	@ 0x30
 8001c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c2e:	e841 2300 	strex	r3, r2, [r1]
 8001c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8001c34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1e3      	bne.n	8001c02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	330c      	adds	r3, #12
 8001c4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	e853 3f00 	ldrex	r3, [r3]
 8001c56:	60fb      	str	r3, [r7, #12]
   return(result);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f023 0310 	bic.w	r3, r3, #16
 8001c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	330c      	adds	r3, #12
 8001c68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8001c6c:	61fa      	str	r2, [r7, #28]
 8001c6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c70:	69b9      	ldr	r1, [r7, #24]
 8001c72:	69fa      	ldr	r2, [r7, #28]
 8001c74:	e841 2300 	strex	r3, r2, [r1]
 8001c78:	617b      	str	r3, [r7, #20]
   return(result);
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e3      	bne.n	8001c48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8001c86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f844 	bl	8001d1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001c92:	e023      	b.n	8001cdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d009      	beq.n	8001cb4 <HAL_UART_IRQHandler+0x4f4>
 8001ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 f90e 	bl	8001ece <UART_Transmit_IT>
    return;
 8001cb2:	e014      	b.n	8001cde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00e      	beq.n	8001cde <HAL_UART_IRQHandler+0x51e>
 8001cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f94d 	bl	8001f6c <UART_EndTransmit_IT>
    return;
 8001cd2:	e004      	b.n	8001cde <HAL_UART_IRQHandler+0x51e>
    return;
 8001cd4:	bf00      	nop
 8001cd6:	e002      	b.n	8001cde <HAL_UART_IRQHandler+0x51e>
      return;
 8001cd8:	bf00      	nop
 8001cda:	e000      	b.n	8001cde <HAL_UART_IRQHandler+0x51e>
      return;
 8001cdc:	bf00      	nop
  }
}
 8001cde:	37e8      	adds	r7, #232	@ 0xe8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bc80      	pop	{r7}
 8001cf4:	4770      	bx	lr

08001cf6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d10:	bf00      	nop
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bc80      	pop	{r7}
 8001d18:	4770      	bx	lr

08001d1a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]
 8001d22:	460b      	mov	r3, r1
 8001d24:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d40:	e03b      	b.n	8001dba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d48:	d037      	beq.n	8001dba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d4a:	f7fe fcff 	bl	800074c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	6a3a      	ldr	r2, [r7, #32]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d302      	bcc.n	8001d60 <UART_WaitOnFlagUntilTimeout+0x30>
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e03a      	b.n	8001dda <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d023      	beq.n	8001dba <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2b80      	cmp	r3, #128	@ 0x80
 8001d76:	d020      	beq.n	8001dba <UART_WaitOnFlagUntilTimeout+0x8a>
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2b40      	cmp	r3, #64	@ 0x40
 8001d7c:	d01d      	beq.n	8001dba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d116      	bne.n	8001dba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	617b      	str	r3, [r7, #20]
 8001da0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001da2:	68f8      	ldr	r0, [r7, #12]
 8001da4:	f000 f81d 	bl	8001de2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2208      	movs	r2, #8
 8001dac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e00f      	b.n	8001dda <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	bf0c      	ite	eq
 8001dca:	2301      	moveq	r3, #1
 8001dcc:	2300      	movne	r3, #0
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d0b4      	beq.n	8001d42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b095      	sub	sp, #84	@ 0x54
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	330c      	adds	r3, #12
 8001df0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001df2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df4:	e853 3f00 	ldrex	r3, [r3]
 8001df8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001e00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	330c      	adds	r3, #12
 8001e08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8001e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001e10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e12:	e841 2300 	strex	r3, r2, [r1]
 8001e16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1e5      	bne.n	8001dea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	3314      	adds	r3, #20
 8001e24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e26:	6a3b      	ldr	r3, [r7, #32]
 8001e28:	e853 3f00 	ldrex	r3, [r3]
 8001e2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3314      	adds	r3, #20
 8001e3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001e40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001e44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e46:	e841 2300 	strex	r3, r2, [r1]
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1e5      	bne.n	8001e1e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d119      	bne.n	8001e8e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	330c      	adds	r3, #12
 8001e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	e853 3f00 	ldrex	r3, [r3]
 8001e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	f023 0310 	bic.w	r3, r3, #16
 8001e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	330c      	adds	r3, #12
 8001e78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e7a:	61ba      	str	r2, [r7, #24]
 8001e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e7e:	6979      	ldr	r1, [r7, #20]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	e841 2300 	strex	r3, r2, [r1]
 8001e86:	613b      	str	r3, [r7, #16]
   return(result);
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d1e5      	bne.n	8001e5a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001e9c:	bf00      	nop
 8001e9e:	3754      	adds	r7, #84	@ 0x54
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001ec0:	68f8      	ldr	r0, [r7, #12]
 8001ec2:	f7ff ff21 	bl	8001d08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b085      	sub	sp, #20
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b21      	cmp	r3, #33	@ 0x21
 8001ee0:	d13e      	bne.n	8001f60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eea:	d114      	bne.n	8001f16 <UART_Transmit_IT+0x48>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d110      	bne.n	8001f16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	461a      	mov	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	1c9a      	adds	r2, r3, #2
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	621a      	str	r2, [r3, #32]
 8001f14:	e008      	b.n	8001f28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	1c59      	adds	r1, r3, #1
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	6211      	str	r1, [r2, #32]
 8001f20:	781a      	ldrb	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	4619      	mov	r1, r3
 8001f36:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10f      	bne.n	8001f5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e000      	b.n	8001f62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8001f60:	2302      	movs	r3, #2
  }
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff fea9 	bl	8001ce4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08c      	sub	sp, #48	@ 0x30
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b22      	cmp	r3, #34	@ 0x22
 8001fae:	f040 80ae 	bne.w	800210e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fba:	d117      	bne.n	8001fec <UART_Receive_IT+0x50>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d113      	bne.n	8001fec <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fde:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	1c9a      	adds	r2, r3, #2
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fea:	e026      	b.n	800203a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ffe:	d007      	beq.n	8002010 <UART_Receive_IT+0x74>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <UART_Receive_IT+0x82>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d106      	bne.n	800201e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	b2da      	uxtb	r2, r3
 8002018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	e008      	b.n	8002030 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800202a:	b2da      	uxtb	r2, r3
 800202c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800202e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002034:	1c5a      	adds	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800203e:	b29b      	uxth	r3, r3
 8002040:	3b01      	subs	r3, #1
 8002042:	b29b      	uxth	r3, r3
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	4619      	mov	r1, r3
 8002048:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800204a:	2b00      	cmp	r3, #0
 800204c:	d15d      	bne.n	800210a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0220 	bic.w	r2, r2, #32
 800205c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800206c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002090:	2b01      	cmp	r3, #1
 8002092:	d135      	bne.n	8002100 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	330c      	adds	r3, #12
 80020a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	e853 3f00 	ldrex	r3, [r3]
 80020a8:	613b      	str	r3, [r7, #16]
   return(result);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f023 0310 	bic.w	r3, r3, #16
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	330c      	adds	r3, #12
 80020b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ba:	623a      	str	r2, [r7, #32]
 80020bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020be:	69f9      	ldr	r1, [r7, #28]
 80020c0:	6a3a      	ldr	r2, [r7, #32]
 80020c2:	e841 2300 	strex	r3, r2, [r1]
 80020c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1e5      	bne.n	800209a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b10      	cmp	r3, #16
 80020da:	d10a      	bne.n	80020f2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80020f6:	4619      	mov	r1, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fe0e 	bl	8001d1a <HAL_UARTEx_RxEventCallback>
 80020fe:	e002      	b.n	8002106 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fdf8 	bl	8001cf6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e002      	b.n	8002110 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800210e:	2302      	movs	r3, #2
  }
}
 8002110:	4618      	mov	r0, r3
 8002112:	3730      	adds	r7, #48	@ 0x30
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	695b      	ldr	r3, [r3, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002152:	f023 030c 	bic.w	r3, r3, #12
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6812      	ldr	r2, [r2, #0]
 800215a:	68b9      	ldr	r1, [r7, #8]
 800215c:	430b      	orrs	r3, r1
 800215e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	699a      	ldr	r2, [r3, #24]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a2c      	ldr	r2, [pc, #176]	@ (800222c <UART_SetConfig+0x114>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d103      	bne.n	8002188 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002180:	f7ff fa10 	bl	80015a4 <HAL_RCC_GetPCLK2Freq>
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	e002      	b.n	800218e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002188:	f7ff f9f8 	bl	800157c <HAL_RCC_GetPCLK1Freq>
 800218c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	009a      	lsls	r2, r3, #2
 8002198:	441a      	add	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	4a22      	ldr	r2, [pc, #136]	@ (8002230 <UART_SetConfig+0x118>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	0119      	lsls	r1, r3, #4
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	009a      	lsls	r2, r3, #2
 80021b8:	441a      	add	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002230 <UART_SetConfig+0x118>)
 80021c6:	fba3 0302 	umull	r0, r3, r3, r2
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	2064      	movs	r0, #100	@ 0x64
 80021ce:	fb00 f303 	mul.w	r3, r0, r3
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	3332      	adds	r3, #50	@ 0x32
 80021d8:	4a15      	ldr	r2, [pc, #84]	@ (8002230 <UART_SetConfig+0x118>)
 80021da:	fba2 2303 	umull	r2, r3, r2, r3
 80021de:	095b      	lsrs	r3, r3, #5
 80021e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021e4:	4419      	add	r1, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	009a      	lsls	r2, r3, #2
 80021f0:	441a      	add	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <UART_SetConfig+0x118>)
 80021fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2064      	movs	r0, #100	@ 0x64
 8002206:	fb00 f303 	mul.w	r3, r0, r3
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	3332      	adds	r3, #50	@ 0x32
 8002210:	4a07      	ldr	r2, [pc, #28]	@ (8002230 <UART_SetConfig+0x118>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	f003 020f 	and.w	r2, r3, #15
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	440a      	add	r2, r1
 8002222:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002224:	bf00      	nop
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40013800 	.word	0x40013800
 8002230:	51eb851f 	.word	0x51eb851f

08002234 <KeyExpansion>:
*/
#define getSBoxValue(num) (sbox[(num)])

// This function produces Nb(Nr+1) round keys. The round keys are used in each round to decrypt the states. 
static void KeyExpansion(uint8_t* RoundKey, const uint8_t* Key)
{
 8002234:	b480      	push	{r7}
 8002236:	b089      	sub	sp, #36	@ 0x24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  unsigned i, j, k;
  uint8_t tempa[4]; // Used for the column/row operations
  
  // The first round key is the key itself.
  for (i = 0; i < Nk; ++i)
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	e030      	b.n	80022a6 <KeyExpansion+0x72>
  {
    RoundKey[(i * 4) + 0] = Key[(i * 4) + 0];
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	441a      	add	r2, r3
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	440b      	add	r3, r1
 8002254:	7812      	ldrb	r2, [r2, #0]
 8002256:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 1] = Key[(i * 4) + 1];
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	3301      	adds	r3, #1
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	441a      	add	r2, r3
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	3301      	adds	r3, #1
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	440b      	add	r3, r1
 800226c:	7812      	ldrb	r2, [r2, #0]
 800226e:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 2] = Key[(i * 4) + 2];
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	441a      	add	r2, r3
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	3302      	adds	r3, #2
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	440b      	add	r3, r1
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	701a      	strb	r2, [r3, #0]
    RoundKey[(i * 4) + 3] = Key[(i * 4) + 3];
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	3303      	adds	r3, #3
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	441a      	add	r2, r3
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	3303      	adds	r3, #3
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	440b      	add	r3, r1
 800229c:	7812      	ldrb	r2, [r2, #0]
 800229e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Nk; ++i)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	3301      	adds	r3, #1
 80022a4:	61fb      	str	r3, [r7, #28]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d9cb      	bls.n	8002244 <KeyExpansion+0x10>
  }

  // All other round keys are found from the previous round keys.
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80022ac:	2304      	movs	r3, #4
 80022ae:	61fb      	str	r3, [r7, #28]
 80022b0:	e081      	b.n	80023b6 <KeyExpansion+0x182>
  {
    {
      k = (i - 1) * 4;
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	61bb      	str	r3, [r7, #24]
      tempa[0]=RoundKey[k + 0];
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	4413      	add	r3, r2
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	733b      	strb	r3, [r7, #12]
      tempa[1]=RoundKey[k + 1];
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	3301      	adds	r3, #1
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	4413      	add	r3, r2
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	737b      	strb	r3, [r7, #13]
      tempa[2]=RoundKey[k + 2];
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	3302      	adds	r3, #2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	4413      	add	r3, r2
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	73bb      	strb	r3, [r7, #14]
      tempa[3]=RoundKey[k + 3];
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	3303      	adds	r3, #3
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	4413      	add	r3, r2
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	73fb      	strb	r3, [r7, #15]

    }

    if (i % Nk == 0)
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d125      	bne.n	800233e <KeyExpansion+0x10a>
      // This function shifts the 4 bytes in a word to the left once.
      // [a0,a1,a2,a3] becomes [a1,a2,a3,a0]

      // Function RotWord()
      {
        const uint8_t u8tmp = tempa[0];
 80022f2:	7b3b      	ldrb	r3, [r7, #12]
 80022f4:	75fb      	strb	r3, [r7, #23]
        tempa[0] = tempa[1];
 80022f6:	7b7b      	ldrb	r3, [r7, #13]
 80022f8:	733b      	strb	r3, [r7, #12]
        tempa[1] = tempa[2];
 80022fa:	7bbb      	ldrb	r3, [r7, #14]
 80022fc:	737b      	strb	r3, [r7, #13]
        tempa[2] = tempa[3];
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	73bb      	strb	r3, [r7, #14]
        tempa[3] = u8tmp;
 8002302:	7dfb      	ldrb	r3, [r7, #23]
 8002304:	73fb      	strb	r3, [r7, #15]
      // SubWord() is a function that takes a four-byte input word and 
      // applies the S-box to each of the four bytes to produce an output word.

      // Function Subword()
      {
        tempa[0] = getSBoxValue(tempa[0]);
 8002306:	7b3b      	ldrb	r3, [r7, #12]
 8002308:	461a      	mov	r2, r3
 800230a:	4b30      	ldr	r3, [pc, #192]	@ (80023cc <KeyExpansion+0x198>)
 800230c:	5c9b      	ldrb	r3, [r3, r2]
 800230e:	733b      	strb	r3, [r7, #12]
        tempa[1] = getSBoxValue(tempa[1]);
 8002310:	7b7b      	ldrb	r3, [r7, #13]
 8002312:	461a      	mov	r2, r3
 8002314:	4b2d      	ldr	r3, [pc, #180]	@ (80023cc <KeyExpansion+0x198>)
 8002316:	5c9b      	ldrb	r3, [r3, r2]
 8002318:	737b      	strb	r3, [r7, #13]
        tempa[2] = getSBoxValue(tempa[2]);
 800231a:	7bbb      	ldrb	r3, [r7, #14]
 800231c:	461a      	mov	r2, r3
 800231e:	4b2b      	ldr	r3, [pc, #172]	@ (80023cc <KeyExpansion+0x198>)
 8002320:	5c9b      	ldrb	r3, [r3, r2]
 8002322:	73bb      	strb	r3, [r7, #14]
        tempa[3] = getSBoxValue(tempa[3]);
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	461a      	mov	r2, r3
 8002328:	4b28      	ldr	r3, [pc, #160]	@ (80023cc <KeyExpansion+0x198>)
 800232a:	5c9b      	ldrb	r3, [r3, r2]
 800232c:	73fb      	strb	r3, [r7, #15]
      }

      tempa[0] = tempa[0] ^ Rcon[i/Nk];
 800232e:	7b3a      	ldrb	r2, [r7, #12]
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	4926      	ldr	r1, [pc, #152]	@ (80023d0 <KeyExpansion+0x19c>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	4053      	eors	r3, r2
 800233a:	b2db      	uxtb	r3, r3
 800233c:	733b      	strb	r3, [r7, #12]
        tempa[2] = getSBoxValue(tempa[2]);
        tempa[3] = getSBoxValue(tempa[3]);
      }
    }
#endif
    j = i * 4; k=(i - Nk) * 4;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	3b04      	subs	r3, #4
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
    RoundKey[j + 0] = RoundKey[k + 0] ^ tempa[0];
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4413      	add	r3, r2
 8002352:	7819      	ldrb	r1, [r3, #0]
 8002354:	7b3a      	ldrb	r2, [r7, #12]
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	4403      	add	r3, r0
 800235c:	404a      	eors	r2, r1
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 1] = RoundKey[k + 1] ^ tempa[1];
 8002362:	69bb      	ldr	r3, [r7, #24]
 8002364:	3301      	adds	r3, #1
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4413      	add	r3, r2
 800236a:	7819      	ldrb	r1, [r3, #0]
 800236c:	7b7a      	ldrb	r2, [r7, #13]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	3301      	adds	r3, #1
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	4403      	add	r3, r0
 8002376:	404a      	eors	r2, r1
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 2] = RoundKey[k + 2] ^ tempa[2];
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	3302      	adds	r3, #2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	7819      	ldrb	r1, [r3, #0]
 8002386:	7bba      	ldrb	r2, [r7, #14]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	3302      	adds	r3, #2
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	4403      	add	r3, r0
 8002390:	404a      	eors	r2, r1
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]
    RoundKey[j + 3] = RoundKey[k + 3] ^ tempa[3];
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	3303      	adds	r3, #3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	7819      	ldrb	r1, [r3, #0]
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	3303      	adds	r3, #3
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	4403      	add	r3, r0
 80023aa:	404a      	eors	r2, r1
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]
  for (i = Nk; i < Nb * (Nr + 1); ++i)
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	3301      	adds	r3, #1
 80023b4:	61fb      	str	r3, [r7, #28]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	2b2b      	cmp	r3, #43	@ 0x2b
 80023ba:	f67f af7a 	bls.w	80022b2 <KeyExpansion+0x7e>
  }
}
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	3724      	adds	r7, #36	@ 0x24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	08003ebc 	.word	0x08003ebc
 80023d0:	080040bc 	.word	0x080040bc

080023d4 <AES_init_ctx>:

void AES_init_ctx(struct AES_ctx* ctx, const uint8_t* key)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  KeyExpansion(ctx->RoundKey, key);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6839      	ldr	r1, [r7, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7ff ff26 	bl	8002234 <KeyExpansion>
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <AddRoundKey>:
#endif

// This function adds the round key to state.
// The round key is added to the state by an XOR function.
static void AddRoundKey(uint8_t round, state_t* state, const uint8_t* RoundKey)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b087      	sub	sp, #28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	73fb      	strb	r3, [r7, #15]
  uint8_t i,j;
  for (i = 0; i < 4; ++i)
 80023fe:	2300      	movs	r3, #0
 8002400:	75fb      	strb	r3, [r7, #23]
 8002402:	e027      	b.n	8002454 <AddRoundKey+0x64>
  {
    for (j = 0; j < 4; ++j)
 8002404:	2300      	movs	r3, #0
 8002406:	75bb      	strb	r3, [r7, #22]
 8002408:	e01e      	b.n	8002448 <AddRoundKey+0x58>
    {
      (*state)[i][j] ^= RoundKey[(round * Nb * 4) + (i * Nb) + j];
 800240a:	7dfa      	ldrb	r2, [r7, #23]
 800240c:	7dbb      	ldrb	r3, [r7, #22]
 800240e:	68b9      	ldr	r1, [r7, #8]
 8002410:	0092      	lsls	r2, r2, #2
 8002412:	440a      	add	r2, r1
 8002414:	4413      	add	r3, r2
 8002416:	7818      	ldrb	r0, [r3, #0]
 8002418:	7bfb      	ldrb	r3, [r7, #15]
 800241a:	009a      	lsls	r2, r3, #2
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	4413      	add	r3, r2
 8002420:	009a      	lsls	r2, r3, #2
 8002422:	7dbb      	ldrb	r3, [r7, #22]
 8002424:	4413      	add	r3, r2
 8002426:	461a      	mov	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	7819      	ldrb	r1, [r3, #0]
 800242e:	7dfa      	ldrb	r2, [r7, #23]
 8002430:	7dbb      	ldrb	r3, [r7, #22]
 8002432:	4041      	eors	r1, r0
 8002434:	b2c8      	uxtb	r0, r1
 8002436:	68b9      	ldr	r1, [r7, #8]
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	440a      	add	r2, r1
 800243c:	4413      	add	r3, r2
 800243e:	4602      	mov	r2, r0
 8002440:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8002442:	7dbb      	ldrb	r3, [r7, #22]
 8002444:	3301      	adds	r3, #1
 8002446:	75bb      	strb	r3, [r7, #22]
 8002448:	7dbb      	ldrb	r3, [r7, #22]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d9dd      	bls.n	800240a <AddRoundKey+0x1a>
  for (i = 0; i < 4; ++i)
 800244e:	7dfb      	ldrb	r3, [r7, #23]
 8002450:	3301      	adds	r3, #1
 8002452:	75fb      	strb	r3, [r7, #23]
 8002454:	7dfb      	ldrb	r3, [r7, #23]
 8002456:	2b03      	cmp	r3, #3
 8002458:	d9d4      	bls.n	8002404 <AddRoundKey+0x14>
    }
  }
}
 800245a:	bf00      	nop
 800245c:	bf00      	nop
 800245e:	371c      	adds	r7, #28
 8002460:	46bd      	mov	sp, r7
 8002462:	bc80      	pop	{r7}
 8002464:	4770      	bx	lr
	...

08002468 <SubBytes>:

// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void SubBytes(state_t* state)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8002470:	2300      	movs	r3, #0
 8002472:	73fb      	strb	r3, [r7, #15]
 8002474:	e01d      	b.n	80024b2 <SubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8002476:	2300      	movs	r3, #0
 8002478:	73bb      	strb	r3, [r7, #14]
 800247a:	e014      	b.n	80024a6 <SubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxValue((*state)[j][i]);
 800247c:	7bba      	ldrb	r2, [r7, #14]
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	0092      	lsls	r2, r2, #2
 8002484:	440a      	add	r2, r1
 8002486:	4413      	add	r3, r2
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	7bba      	ldrb	r2, [r7, #14]
 800248e:	7bfb      	ldrb	r3, [r7, #15]
 8002490:	490c      	ldr	r1, [pc, #48]	@ (80024c4 <SubBytes+0x5c>)
 8002492:	5c08      	ldrb	r0, [r1, r0]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	0092      	lsls	r2, r2, #2
 8002498:	440a      	add	r2, r1
 800249a:	4413      	add	r3, r2
 800249c:	4602      	mov	r2, r0
 800249e:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 80024a0:	7bbb      	ldrb	r3, [r7, #14]
 80024a2:	3301      	adds	r3, #1
 80024a4:	73bb      	strb	r3, [r7, #14]
 80024a6:	7bbb      	ldrb	r3, [r7, #14]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d9e7      	bls.n	800247c <SubBytes+0x14>
  for (i = 0; i < 4; ++i)
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	3301      	adds	r3, #1
 80024b0:	73fb      	strb	r3, [r7, #15]
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d9de      	bls.n	8002476 <SubBytes+0xe>
    }
  }
}
 80024b8:	bf00      	nop
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	08003ebc 	.word	0x08003ebc

080024c8 <ShiftRows>:

// The ShiftRows() function shifts the rows in the state to the left.
// Each row is shifted with different offset.
// Offset = Row number. So the first row is not shifted.
static void ShiftRows(state_t* state)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to left  
  temp           = (*state)[0][1];
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	785b      	ldrb	r3, [r3, #1]
 80024d4:	73fb      	strb	r3, [r7, #15]
  (*state)[0][1] = (*state)[1][1];
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	795a      	ldrb	r2, [r3, #5]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	705a      	strb	r2, [r3, #1]
  (*state)[1][1] = (*state)[2][1];
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	7a5a      	ldrb	r2, [r3, #9]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	715a      	strb	r2, [r3, #5]
  (*state)[2][1] = (*state)[3][1];
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7b5a      	ldrb	r2, [r3, #13]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	725a      	strb	r2, [r3, #9]
  (*state)[3][1] = temp;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	735a      	strb	r2, [r3, #13]

  // Rotate second row 2 columns to left  
  temp           = (*state)[0][2];
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	789b      	ldrb	r3, [r3, #2]
 80024f8:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	7a9a      	ldrb	r2, [r3, #10]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	7bfa      	ldrb	r2, [r7, #15]
 8002506:	729a      	strb	r2, [r3, #10]

  temp           = (*state)[1][2];
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	799b      	ldrb	r3, [r3, #6]
 800250c:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7b9a      	ldrb	r2, [r3, #14]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7bfa      	ldrb	r2, [r7, #15]
 800251a:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to left
  temp           = (*state)[0][3];
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	78db      	ldrb	r3, [r3, #3]
 8002520:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[3][3];
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	7bda      	ldrb	r2, [r3, #15]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	70da      	strb	r2, [r3, #3]
  (*state)[3][3] = (*state)[2][3];
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	7ada      	ldrb	r2, [r3, #11]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	73da      	strb	r2, [r3, #15]
  (*state)[2][3] = (*state)[1][3];
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	79da      	ldrb	r2, [r3, #7]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	72da      	strb	r2, [r3, #11]
  (*state)[1][3] = temp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	7bfa      	ldrb	r2, [r7, #15]
 800253e:	71da      	strb	r2, [r3, #7]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr

0800254a <xtime>:

static uint8_t xtime(uint8_t x)
{
 800254a:	b480      	push	{r7}
 800254c:	b083      	sub	sp, #12
 800254e:	af00      	add	r7, sp, #0
 8002550:	4603      	mov	r3, r0
 8002552:	71fb      	strb	r3, [r7, #7]
  return ((x<<1) ^ (((x>>7) & 1) * 0x1b));
 8002554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	b25a      	sxtb	r2, r3
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	09db      	lsrs	r3, r3, #7
 8002560:	b2db      	uxtb	r3, r3
 8002562:	b25b      	sxtb	r3, r3
 8002564:	4619      	mov	r1, r3
 8002566:	0049      	lsls	r1, r1, #1
 8002568:	440b      	add	r3, r1
 800256a:	4619      	mov	r1, r3
 800256c:	00c8      	lsls	r0, r1, #3
 800256e:	4619      	mov	r1, r3
 8002570:	4603      	mov	r3, r0
 8002572:	440b      	add	r3, r1
 8002574:	b25b      	sxtb	r3, r3
 8002576:	4053      	eors	r3, r2
 8002578:	b25b      	sxtb	r3, r3
 800257a:	b2db      	uxtb	r3, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <MixColumns>:

// MixColumns function mixes the columns of the state matrix
static void MixColumns(state_t* state)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  uint8_t i;
  uint8_t Tmp, Tm, t;
  for (i = 0; i < 4; ++i)
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	e0a4      	b.n	80026de <MixColumns+0x158>
  {  
    t   = (*state)[i][0];
 8002594:	7bfa      	ldrb	r2, [r7, #15]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 800259c:	73bb      	strb	r3, [r7, #14]
    Tmp = (*state)[i][0] ^ (*state)[i][1] ^ (*state)[i][2] ^ (*state)[i][3] ;
 800259e:	7bfa      	ldrb	r2, [r7, #15]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	785b      	ldrb	r3, [r3, #1]
 80025b0:	4053      	eors	r3, r2
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	009b      	lsls	r3, r3, #2
 80025ba:	440b      	add	r3, r1
 80025bc:	789b      	ldrb	r3, [r3, #2]
 80025be:	4053      	eors	r3, r2
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	78db      	ldrb	r3, [r3, #3]
 80025cc:	4053      	eors	r3, r2
 80025ce:	737b      	strb	r3, [r7, #13]
    Tm  = (*state)[i][0] ^ (*state)[i][1] ; Tm = xtime(Tm);  (*state)[i][0] ^= Tm ^ Tmp ;
 80025d0:	7bfa      	ldrb	r2, [r7, #15]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f813 2022 	ldrb.w	r2, [r3, r2, lsl #2]
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	785b      	ldrb	r3, [r3, #1]
 80025e2:	4053      	eors	r3, r2
 80025e4:	733b      	strb	r3, [r7, #12]
 80025e6:	7b3b      	ldrb	r3, [r7, #12]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff ffae 	bl	800254a <xtime>
 80025ee:	4603      	mov	r3, r0
 80025f0:	733b      	strb	r3, [r7, #12]
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
 80025fa:	7b3a      	ldrb	r2, [r7, #12]
 80025fc:	7b7b      	ldrb	r3, [r7, #13]
 80025fe:	4053      	eors	r3, r2
 8002600:	b2db      	uxtb	r3, r3
 8002602:	7bfa      	ldrb	r2, [r7, #15]
 8002604:	404b      	eors	r3, r1
 8002606:	b2d9      	uxtb	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    Tm  = (*state)[i][1] ^ (*state)[i][2] ; Tm = xtime(Tm);  (*state)[i][1] ^= Tm ^ Tmp ;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	785a      	ldrb	r2, [r3, #1]
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	789b      	ldrb	r3, [r3, #2]
 8002622:	4053      	eors	r3, r2
 8002624:	733b      	strb	r3, [r7, #12]
 8002626:	7b3b      	ldrb	r3, [r7, #12]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff8e 	bl	800254a <xtime>
 800262e:	4603      	mov	r3, r0
 8002630:	733b      	strb	r3, [r7, #12]
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	7859      	ldrb	r1, [r3, #1]
 800263c:	7b3a      	ldrb	r2, [r7, #12]
 800263e:	7b7b      	ldrb	r3, [r7, #13]
 8002640:	4053      	eors	r3, r2
 8002642:	b2da      	uxtb	r2, r3
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	404a      	eors	r2, r1
 8002648:	b2d1      	uxtb	r1, r2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4413      	add	r3, r2
 8002650:	460a      	mov	r2, r1
 8002652:	705a      	strb	r2, [r3, #1]
    Tm  = (*state)[i][2] ^ (*state)[i][3] ; Tm = xtime(Tm);  (*state)[i][2] ^= Tm ^ Tmp ;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	789a      	ldrb	r2, [r3, #2]
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	78db      	ldrb	r3, [r3, #3]
 8002668:	4053      	eors	r3, r2
 800266a:	733b      	strb	r3, [r7, #12]
 800266c:	7b3b      	ldrb	r3, [r7, #12]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff6b 	bl	800254a <xtime>
 8002674:	4603      	mov	r3, r0
 8002676:	733b      	strb	r3, [r7, #12]
 8002678:	7bfb      	ldrb	r3, [r7, #15]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	7899      	ldrb	r1, [r3, #2]
 8002682:	7b3a      	ldrb	r2, [r7, #12]
 8002684:	7b7b      	ldrb	r3, [r7, #13]
 8002686:	4053      	eors	r3, r2
 8002688:	b2da      	uxtb	r2, r3
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	404a      	eors	r2, r1
 800268e:	b2d1      	uxtb	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	460a      	mov	r2, r1
 8002698:	709a      	strb	r2, [r3, #2]
    Tm  = (*state)[i][3] ^ t ;              Tm = xtime(Tm);  (*state)[i][3] ^= Tm ^ Tmp ;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	78da      	ldrb	r2, [r3, #3]
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	4053      	eors	r3, r2
 80026a8:	733b      	strb	r3, [r7, #12]
 80026aa:	7b3b      	ldrb	r3, [r7, #12]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff ff4c 	bl	800254a <xtime>
 80026b2:	4603      	mov	r3, r0
 80026b4:	733b      	strb	r3, [r7, #12]
 80026b6:	7bfb      	ldrb	r3, [r7, #15]
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	78d9      	ldrb	r1, [r3, #3]
 80026c0:	7b3a      	ldrb	r2, [r7, #12]
 80026c2:	7b7b      	ldrb	r3, [r7, #13]
 80026c4:	4053      	eors	r3, r2
 80026c6:	b2da      	uxtb	r2, r3
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	404a      	eors	r2, r1
 80026cc:	b2d1      	uxtb	r1, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4413      	add	r3, r2
 80026d4:	460a      	mov	r2, r1
 80026d6:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 80026d8:	7bfb      	ldrb	r3, [r7, #15]
 80026da:	3301      	adds	r3, #1
 80026dc:	73fb      	strb	r3, [r7, #15]
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	f67f af57 	bls.w	8002594 <MixColumns+0xe>
  }
}
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <InvMixColumns>:

// MixColumns function mixes the columns of the state matrix.
// The method used to multiply may be difficult to understand for the inexperienced.
// Please use the references to gain more information.
static void InvMixColumns(state_t* state)
{
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  int i;
  uint8_t a, b, c, d;
  for (i = 0; i < 4; ++i)
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	e33b      	b.n	8002d76 <InvMixColumns+0x686>
  { 
    a = (*state)[i][0];
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
 8002706:	72fb      	strb	r3, [r7, #11]
    b = (*state)[i][1];
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	785b      	ldrb	r3, [r3, #1]
 8002712:	72bb      	strb	r3, [r7, #10]
    c = (*state)[i][2];
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4413      	add	r3, r2
 800271c:	789b      	ldrb	r3, [r3, #2]
 800271e:	727b      	strb	r3, [r7, #9]
    d = (*state)[i][3];
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	78db      	ldrb	r3, [r3, #3]
 800272a:	723b      	strb	r3, [r7, #8]

    (*state)[i][0] = Multiply(a, 0x0e) ^ Multiply(b, 0x0b) ^ Multiply(c, 0x0d) ^ Multiply(d, 0x09);
 800272c:	7afb      	ldrb	r3, [r7, #11]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff ff0b 	bl	800254a <xtime>
 8002734:	4603      	mov	r3, r0
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff ff07 	bl	800254a <xtime>
 800273c:	4603      	mov	r3, r0
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ff03 	bl	800254a <xtime>
 8002744:	4603      	mov	r3, r0
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff feff 	bl	800254a <xtime>
 800274c:	7abb      	ldrb	r3, [r7, #10]
 800274e:	4618      	mov	r0, r3
 8002750:	f7ff fefb 	bl	800254a <xtime>
 8002754:	4603      	mov	r3, r0
 8002756:	4618      	mov	r0, r3
 8002758:	f7ff fef7 	bl	800254a <xtime>
 800275c:	7abb      	ldrb	r3, [r7, #10]
 800275e:	4618      	mov	r0, r3
 8002760:	f7ff fef3 	bl	800254a <xtime>
 8002764:	4603      	mov	r3, r0
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff feef 	bl	800254a <xtime>
 800276c:	4603      	mov	r3, r0
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff feeb 	bl	800254a <xtime>
 8002774:	4603      	mov	r3, r0
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fee7 	bl	800254a <xtime>
 800277c:	7a7b      	ldrb	r3, [r7, #9]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fee3 	bl	800254a <xtime>
 8002784:	7a7b      	ldrb	r3, [r7, #9]
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff fedf 	bl	800254a <xtime>
 800278c:	4603      	mov	r3, r0
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff fedb 	bl	800254a <xtime>
 8002794:	4603      	mov	r3, r0
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fed7 	bl	800254a <xtime>
 800279c:	4603      	mov	r3, r0
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fed3 	bl	800254a <xtime>
 80027a4:	7a3b      	ldrb	r3, [r7, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fecf 	bl	800254a <xtime>
 80027ac:	7a3b      	ldrb	r3, [r7, #8]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fecb 	bl	800254a <xtime>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fec7 	bl	800254a <xtime>
 80027bc:	7a3b      	ldrb	r3, [r7, #8]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff fec3 	bl	800254a <xtime>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff febf 	bl	800254a <xtime>
 80027cc:	4603      	mov	r3, r0
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff febb 	bl	800254a <xtime>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff feb7 	bl	800254a <xtime>
 80027dc:	7afb      	ldrb	r3, [r7, #11]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff feb3 	bl	800254a <xtime>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461c      	mov	r4, r3
 80027e8:	7afb      	ldrb	r3, [r7, #11]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fead 	bl	800254a <xtime>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4618      	mov	r0, r3
 80027f4:	f7ff fea9 	bl	800254a <xtime>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4063      	eors	r3, r4
 80027fc:	b2dc      	uxtb	r4, r3
 80027fe:	7afb      	ldrb	r3, [r7, #11]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fea2 	bl	800254a <xtime>
 8002806:	4603      	mov	r3, r0
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fe9e 	bl	800254a <xtime>
 800280e:	4603      	mov	r3, r0
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fe9a 	bl	800254a <xtime>
 8002816:	4603      	mov	r3, r0
 8002818:	4063      	eors	r3, r4
 800281a:	b2dc      	uxtb	r4, r3
 800281c:	7abb      	ldrb	r3, [r7, #10]
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff fe93 	bl	800254a <xtime>
 8002824:	4603      	mov	r3, r0
 8002826:	461a      	mov	r2, r3
 8002828:	7abb      	ldrb	r3, [r7, #10]
 800282a:	4053      	eors	r3, r2
 800282c:	b2dd      	uxtb	r5, r3
 800282e:	7abb      	ldrb	r3, [r7, #10]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fe8a 	bl	800254a <xtime>
 8002836:	4603      	mov	r3, r0
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fe86 	bl	800254a <xtime>
 800283e:	4603      	mov	r3, r0
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fe82 	bl	800254a <xtime>
 8002846:	4603      	mov	r3, r0
 8002848:	406b      	eors	r3, r5
 800284a:	b2db      	uxtb	r3, r3
 800284c:	4063      	eors	r3, r4
 800284e:	b2dc      	uxtb	r4, r3
 8002850:	7a7b      	ldrb	r3, [r7, #9]
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fe79 	bl	800254a <xtime>
 8002858:	4603      	mov	r3, r0
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fe75 	bl	800254a <xtime>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	7a7b      	ldrb	r3, [r7, #9]
 8002866:	4053      	eors	r3, r2
 8002868:	b2dd      	uxtb	r5, r3
 800286a:	7a7b      	ldrb	r3, [r7, #9]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fe6c 	bl	800254a <xtime>
 8002872:	4603      	mov	r3, r0
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fe68 	bl	800254a <xtime>
 800287a:	4603      	mov	r3, r0
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fe64 	bl	800254a <xtime>
 8002882:	4603      	mov	r3, r0
 8002884:	406b      	eors	r3, r5
 8002886:	b2db      	uxtb	r3, r3
 8002888:	4063      	eors	r3, r4
 800288a:	b2dc      	uxtb	r4, r3
 800288c:	7a3b      	ldrb	r3, [r7, #8]
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fe5b 	bl	800254a <xtime>
 8002894:	4603      	mov	r3, r0
 8002896:	4618      	mov	r0, r3
 8002898:	f7ff fe57 	bl	800254a <xtime>
 800289c:	4603      	mov	r3, r0
 800289e:	4618      	mov	r0, r3
 80028a0:	f7ff fe53 	bl	800254a <xtime>
 80028a4:	4603      	mov	r3, r0
 80028a6:	461a      	mov	r2, r3
 80028a8:	7a3b      	ldrb	r3, [r7, #8]
 80028aa:	4053      	eors	r3, r2
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	4063      	eors	r3, r4
 80028b0:	b2d9      	uxtb	r1, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68fa      	ldr	r2, [r7, #12]
 80028b6:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
    (*state)[i][1] = Multiply(a, 0x09) ^ Multiply(b, 0x0e) ^ Multiply(c, 0x0b) ^ Multiply(d, 0x0d);
 80028ba:	7afb      	ldrb	r3, [r7, #11]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fe44 	bl	800254a <xtime>
 80028c2:	7afb      	ldrb	r3, [r7, #11]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff fe40 	bl	800254a <xtime>
 80028ca:	4603      	mov	r3, r0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fe3c 	bl	800254a <xtime>
 80028d2:	7afb      	ldrb	r3, [r7, #11]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fe38 	bl	800254a <xtime>
 80028da:	4603      	mov	r3, r0
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fe34 	bl	800254a <xtime>
 80028e2:	4603      	mov	r3, r0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fe30 	bl	800254a <xtime>
 80028ea:	4603      	mov	r3, r0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fe2c 	bl	800254a <xtime>
 80028f2:	7abb      	ldrb	r3, [r7, #10]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fe28 	bl	800254a <xtime>
 80028fa:	4603      	mov	r3, r0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fe24 	bl	800254a <xtime>
 8002902:	4603      	mov	r3, r0
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fe20 	bl	800254a <xtime>
 800290a:	4603      	mov	r3, r0
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff fe1c 	bl	800254a <xtime>
 8002912:	7a7b      	ldrb	r3, [r7, #9]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fe18 	bl	800254a <xtime>
 800291a:	4603      	mov	r3, r0
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fe14 	bl	800254a <xtime>
 8002922:	7a7b      	ldrb	r3, [r7, #9]
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fe10 	bl	800254a <xtime>
 800292a:	4603      	mov	r3, r0
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff fe0c 	bl	800254a <xtime>
 8002932:	4603      	mov	r3, r0
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fe08 	bl	800254a <xtime>
 800293a:	4603      	mov	r3, r0
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff fe04 	bl	800254a <xtime>
 8002942:	7a3b      	ldrb	r3, [r7, #8]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff fe00 	bl	800254a <xtime>
 800294a:	7a3b      	ldrb	r3, [r7, #8]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fdfc 	bl	800254a <xtime>
 8002952:	4603      	mov	r3, r0
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fdf8 	bl	800254a <xtime>
 800295a:	4603      	mov	r3, r0
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fdf4 	bl	800254a <xtime>
 8002962:	4603      	mov	r3, r0
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fdf0 	bl	800254a <xtime>
 800296a:	7afb      	ldrb	r3, [r7, #11]
 800296c:	4618      	mov	r0, r3
 800296e:	f7ff fdec 	bl	800254a <xtime>
 8002972:	4603      	mov	r3, r0
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fde8 	bl	800254a <xtime>
 800297a:	4603      	mov	r3, r0
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fde4 	bl	800254a <xtime>
 8002982:	4603      	mov	r3, r0
 8002984:	461a      	mov	r2, r3
 8002986:	7afb      	ldrb	r3, [r7, #11]
 8002988:	4053      	eors	r3, r2
 800298a:	b2dc      	uxtb	r4, r3
 800298c:	7abb      	ldrb	r3, [r7, #10]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fddb 	bl	800254a <xtime>
 8002994:	4603      	mov	r3, r0
 8002996:	461d      	mov	r5, r3
 8002998:	7abb      	ldrb	r3, [r7, #10]
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fdd5 	bl	800254a <xtime>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff fdd1 	bl	800254a <xtime>
 80029a8:	4603      	mov	r3, r0
 80029aa:	406b      	eors	r3, r5
 80029ac:	b2dd      	uxtb	r5, r3
 80029ae:	7abb      	ldrb	r3, [r7, #10]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fdca 	bl	800254a <xtime>
 80029b6:	4603      	mov	r3, r0
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fdc6 	bl	800254a <xtime>
 80029be:	4603      	mov	r3, r0
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff fdc2 	bl	800254a <xtime>
 80029c6:	4603      	mov	r3, r0
 80029c8:	406b      	eors	r3, r5
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	4063      	eors	r3, r4
 80029ce:	b2dc      	uxtb	r4, r3
 80029d0:	7a7b      	ldrb	r3, [r7, #9]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fdb9 	bl	800254a <xtime>
 80029d8:	4603      	mov	r3, r0
 80029da:	461a      	mov	r2, r3
 80029dc:	7a7b      	ldrb	r3, [r7, #9]
 80029de:	4053      	eors	r3, r2
 80029e0:	b2dd      	uxtb	r5, r3
 80029e2:	7a7b      	ldrb	r3, [r7, #9]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fdb0 	bl	800254a <xtime>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fdac 	bl	800254a <xtime>
 80029f2:	4603      	mov	r3, r0
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fda8 	bl	800254a <xtime>
 80029fa:	4603      	mov	r3, r0
 80029fc:	406b      	eors	r3, r5
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	4063      	eors	r3, r4
 8002a02:	b2dc      	uxtb	r4, r3
 8002a04:	7a3b      	ldrb	r3, [r7, #8]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fd9f 	bl	800254a <xtime>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fd9b 	bl	800254a <xtime>
 8002a14:	4603      	mov	r3, r0
 8002a16:	461a      	mov	r2, r3
 8002a18:	7a3b      	ldrb	r3, [r7, #8]
 8002a1a:	4053      	eors	r3, r2
 8002a1c:	b2dd      	uxtb	r5, r3
 8002a1e:	7a3b      	ldrb	r3, [r7, #8]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fd92 	bl	800254a <xtime>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fd8e 	bl	800254a <xtime>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fd8a 	bl	800254a <xtime>
 8002a36:	4603      	mov	r3, r0
 8002a38:	406b      	eors	r3, r5
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4063      	eors	r3, r4
 8002a3e:	b2d9      	uxtb	r1, r3
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	460a      	mov	r2, r1
 8002a4a:	705a      	strb	r2, [r3, #1]
    (*state)[i][2] = Multiply(a, 0x0d) ^ Multiply(b, 0x09) ^ Multiply(c, 0x0e) ^ Multiply(d, 0x0b);
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fd7b 	bl	800254a <xtime>
 8002a54:	7afb      	ldrb	r3, [r7, #11]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fd77 	bl	800254a <xtime>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fd73 	bl	800254a <xtime>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff fd6f 	bl	800254a <xtime>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fd6b 	bl	800254a <xtime>
 8002a74:	7abb      	ldrb	r3, [r7, #10]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fd67 	bl	800254a <xtime>
 8002a7c:	7abb      	ldrb	r3, [r7, #10]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fd63 	bl	800254a <xtime>
 8002a84:	4603      	mov	r3, r0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fd5f 	bl	800254a <xtime>
 8002a8c:	7abb      	ldrb	r3, [r7, #10]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff fd5b 	bl	800254a <xtime>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fd57 	bl	800254a <xtime>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff fd53 	bl	800254a <xtime>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fd4f 	bl	800254a <xtime>
 8002aac:	7a7b      	ldrb	r3, [r7, #9]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fd4b 	bl	800254a <xtime>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fd47 	bl	800254a <xtime>
 8002abc:	4603      	mov	r3, r0
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7ff fd43 	bl	800254a <xtime>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fd3f 	bl	800254a <xtime>
 8002acc:	7a3b      	ldrb	r3, [r7, #8]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fd3b 	bl	800254a <xtime>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fd37 	bl	800254a <xtime>
 8002adc:	7a3b      	ldrb	r3, [r7, #8]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fd33 	bl	800254a <xtime>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fd2f 	bl	800254a <xtime>
 8002aec:	4603      	mov	r3, r0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fd2b 	bl	800254a <xtime>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fd27 	bl	800254a <xtime>
 8002afc:	7afb      	ldrb	r3, [r7, #11]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fd23 	bl	800254a <xtime>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff fd1f 	bl	800254a <xtime>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	461a      	mov	r2, r3
 8002b10:	7afb      	ldrb	r3, [r7, #11]
 8002b12:	4053      	eors	r3, r2
 8002b14:	b2dc      	uxtb	r4, r3
 8002b16:	7afb      	ldrb	r3, [r7, #11]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fd16 	bl	800254a <xtime>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fd12 	bl	800254a <xtime>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fd0e 	bl	800254a <xtime>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4063      	eors	r3, r4
 8002b32:	b2dc      	uxtb	r4, r3
 8002b34:	7abb      	ldrb	r3, [r7, #10]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fd07 	bl	800254a <xtime>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff fd03 	bl	800254a <xtime>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7ff fcff 	bl	800254a <xtime>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	461a      	mov	r2, r3
 8002b50:	7abb      	ldrb	r3, [r7, #10]
 8002b52:	4053      	eors	r3, r2
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	4063      	eors	r3, r4
 8002b58:	b2dc      	uxtb	r4, r3
 8002b5a:	7a7b      	ldrb	r3, [r7, #9]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fcf4 	bl	800254a <xtime>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461d      	mov	r5, r3
 8002b66:	7a7b      	ldrb	r3, [r7, #9]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fcee 	bl	800254a <xtime>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fcea 	bl	800254a <xtime>
 8002b76:	4603      	mov	r3, r0
 8002b78:	406b      	eors	r3, r5
 8002b7a:	b2dd      	uxtb	r5, r3
 8002b7c:	7a7b      	ldrb	r3, [r7, #9]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fce3 	bl	800254a <xtime>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fcdf 	bl	800254a <xtime>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fcdb 	bl	800254a <xtime>
 8002b94:	4603      	mov	r3, r0
 8002b96:	406b      	eors	r3, r5
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	4063      	eors	r3, r4
 8002b9c:	b2dc      	uxtb	r4, r3
 8002b9e:	7a3b      	ldrb	r3, [r7, #8]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fcd2 	bl	800254a <xtime>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	461a      	mov	r2, r3
 8002baa:	7a3b      	ldrb	r3, [r7, #8]
 8002bac:	4053      	eors	r3, r2
 8002bae:	b2dd      	uxtb	r5, r3
 8002bb0:	7a3b      	ldrb	r3, [r7, #8]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff fcc9 	bl	800254a <xtime>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7ff fcc5 	bl	800254a <xtime>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fcc1 	bl	800254a <xtime>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	406b      	eors	r3, r5
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	4063      	eors	r3, r4
 8002bd0:	b2d9      	uxtb	r1, r3
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4413      	add	r3, r2
 8002bda:	460a      	mov	r2, r1
 8002bdc:	709a      	strb	r2, [r3, #2]
    (*state)[i][3] = Multiply(a, 0x0b) ^ Multiply(b, 0x0d) ^ Multiply(c, 0x09) ^ Multiply(d, 0x0e);
 8002bde:	7afb      	ldrb	r3, [r7, #11]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fcb2 	bl	800254a <xtime>
 8002be6:	4603      	mov	r3, r0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fcae 	bl	800254a <xtime>
 8002bee:	7afb      	ldrb	r3, [r7, #11]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f7ff fcaa 	bl	800254a <xtime>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff fca6 	bl	800254a <xtime>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fca2 	bl	800254a <xtime>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fc9e 	bl	800254a <xtime>
 8002c0e:	7abb      	ldrb	r3, [r7, #10]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fc9a 	bl	800254a <xtime>
 8002c16:	7abb      	ldrb	r3, [r7, #10]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff fc96 	bl	800254a <xtime>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fc92 	bl	800254a <xtime>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fc8e 	bl	800254a <xtime>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4618      	mov	r0, r3
 8002c32:	f7ff fc8a 	bl	800254a <xtime>
 8002c36:	7a7b      	ldrb	r3, [r7, #9]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fc86 	bl	800254a <xtime>
 8002c3e:	7a7b      	ldrb	r3, [r7, #9]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff fc82 	bl	800254a <xtime>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fc7e 	bl	800254a <xtime>
 8002c4e:	7a7b      	ldrb	r3, [r7, #9]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fc7a 	bl	800254a <xtime>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fc76 	bl	800254a <xtime>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fc72 	bl	800254a <xtime>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fc6e 	bl	800254a <xtime>
 8002c6e:	7a3b      	ldrb	r3, [r7, #8]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fc6a 	bl	800254a <xtime>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fc66 	bl	800254a <xtime>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fc62 	bl	800254a <xtime>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fc5e 	bl	800254a <xtime>
 8002c8e:	7afb      	ldrb	r3, [r7, #11]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fc5a 	bl	800254a <xtime>
 8002c96:	4603      	mov	r3, r0
 8002c98:	461a      	mov	r2, r3
 8002c9a:	7afb      	ldrb	r3, [r7, #11]
 8002c9c:	4053      	eors	r3, r2
 8002c9e:	b2dc      	uxtb	r4, r3
 8002ca0:	7afb      	ldrb	r3, [r7, #11]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fc51 	bl	800254a <xtime>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff fc4d 	bl	800254a <xtime>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fc49 	bl	800254a <xtime>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4063      	eors	r3, r4
 8002cbc:	b2dc      	uxtb	r4, r3
 8002cbe:	7abb      	ldrb	r3, [r7, #10]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fc42 	bl	800254a <xtime>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fc3e 	bl	800254a <xtime>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	7abb      	ldrb	r3, [r7, #10]
 8002cd4:	4053      	eors	r3, r2
 8002cd6:	b2dd      	uxtb	r5, r3
 8002cd8:	7abb      	ldrb	r3, [r7, #10]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fc35 	bl	800254a <xtime>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fc31 	bl	800254a <xtime>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7ff fc2d 	bl	800254a <xtime>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	406b      	eors	r3, r5
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	4063      	eors	r3, r4
 8002cf8:	b2dc      	uxtb	r4, r3
 8002cfa:	7a7b      	ldrb	r3, [r7, #9]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fc24 	bl	800254a <xtime>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff fc20 	bl	800254a <xtime>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fc1c 	bl	800254a <xtime>
 8002d12:	4603      	mov	r3, r0
 8002d14:	461a      	mov	r2, r3
 8002d16:	7a7b      	ldrb	r3, [r7, #9]
 8002d18:	4053      	eors	r3, r2
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	4063      	eors	r3, r4
 8002d1e:	b2dc      	uxtb	r4, r3
 8002d20:	7a3b      	ldrb	r3, [r7, #8]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fc11 	bl	800254a <xtime>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	461d      	mov	r5, r3
 8002d2c:	7a3b      	ldrb	r3, [r7, #8]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fc0b 	bl	800254a <xtime>
 8002d34:	4603      	mov	r3, r0
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fc07 	bl	800254a <xtime>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	406b      	eors	r3, r5
 8002d40:	b2dd      	uxtb	r5, r3
 8002d42:	7a3b      	ldrb	r3, [r7, #8]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fc00 	bl	800254a <xtime>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fbfc 	bl	800254a <xtime>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fbf8 	bl	800254a <xtime>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	406b      	eors	r3, r5
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	4063      	eors	r3, r4
 8002d62:	b2d9      	uxtb	r1, r3
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	460a      	mov	r2, r1
 8002d6e:	70da      	strb	r2, [r3, #3]
  for (i = 0; i < 4; ++i)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3301      	adds	r3, #1
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	f77f acc0 	ble.w	80026fe <InvMixColumns+0xe>
  }
}
 8002d7e:	bf00      	nop
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bdb0      	pop	{r4, r5, r7, pc}

08002d88 <InvSubBytes>:


// The SubBytes Function Substitutes the values in the
// state matrix with values in an S-box.
static void InvSubBytes(state_t* state)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint8_t i, j;
  for (i = 0; i < 4; ++i)
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	e01d      	b.n	8002dd2 <InvSubBytes+0x4a>
  {
    for (j = 0; j < 4; ++j)
 8002d96:	2300      	movs	r3, #0
 8002d98:	73bb      	strb	r3, [r7, #14]
 8002d9a:	e014      	b.n	8002dc6 <InvSubBytes+0x3e>
    {
      (*state)[j][i] = getSBoxInvert((*state)[j][i]);
 8002d9c:	7bba      	ldrb	r2, [r7, #14]
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	0092      	lsls	r2, r2, #2
 8002da4:	440a      	add	r2, r1
 8002da6:	4413      	add	r3, r2
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	7bba      	ldrb	r2, [r7, #14]
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	490c      	ldr	r1, [pc, #48]	@ (8002de4 <InvSubBytes+0x5c>)
 8002db2:	5c08      	ldrb	r0, [r1, r0]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	0092      	lsls	r2, r2, #2
 8002db8:	440a      	add	r2, r1
 8002dba:	4413      	add	r3, r2
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	701a      	strb	r2, [r3, #0]
    for (j = 0; j < 4; ++j)
 8002dc0:	7bbb      	ldrb	r3, [r7, #14]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	73bb      	strb	r3, [r7, #14]
 8002dc6:	7bbb      	ldrb	r3, [r7, #14]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d9e7      	bls.n	8002d9c <InvSubBytes+0x14>
  for (i = 0; i < 4; ++i)
 8002dcc:	7bfb      	ldrb	r3, [r7, #15]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	73fb      	strb	r3, [r7, #15]
 8002dd2:	7bfb      	ldrb	r3, [r7, #15]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d9de      	bls.n	8002d96 <InvSubBytes+0xe>
    }
  }
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	3714      	adds	r7, #20
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	08003fbc 	.word	0x08003fbc

08002de8 <InvShiftRows>:

static void InvShiftRows(state_t* state)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint8_t temp;

  // Rotate first row 1 columns to right  
  temp = (*state)[3][1];
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7b5b      	ldrb	r3, [r3, #13]
 8002df4:	73fb      	strb	r3, [r7, #15]
  (*state)[3][1] = (*state)[2][1];
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7a5a      	ldrb	r2, [r3, #9]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	735a      	strb	r2, [r3, #13]
  (*state)[2][1] = (*state)[1][1];
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	795a      	ldrb	r2, [r3, #5]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	725a      	strb	r2, [r3, #9]
  (*state)[1][1] = (*state)[0][1];
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	785a      	ldrb	r2, [r3, #1]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	715a      	strb	r2, [r3, #5]
  (*state)[0][1] = temp;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	7bfa      	ldrb	r2, [r7, #15]
 8002e12:	705a      	strb	r2, [r3, #1]

  // Rotate second row 2 columns to right 
  temp = (*state)[0][2];
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	789b      	ldrb	r3, [r3, #2]
 8002e18:	73fb      	strb	r3, [r7, #15]
  (*state)[0][2] = (*state)[2][2];
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	7a9a      	ldrb	r2, [r3, #10]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	709a      	strb	r2, [r3, #2]
  (*state)[2][2] = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	729a      	strb	r2, [r3, #10]

  temp = (*state)[1][2];
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	799b      	ldrb	r3, [r3, #6]
 8002e2c:	73fb      	strb	r3, [r7, #15]
  (*state)[1][2] = (*state)[3][2];
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	7b9a      	ldrb	r2, [r3, #14]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	719a      	strb	r2, [r3, #6]
  (*state)[3][2] = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7bfa      	ldrb	r2, [r7, #15]
 8002e3a:	739a      	strb	r2, [r3, #14]

  // Rotate third row 3 columns to right
  temp = (*state)[0][3];
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	78db      	ldrb	r3, [r3, #3]
 8002e40:	73fb      	strb	r3, [r7, #15]
  (*state)[0][3] = (*state)[1][3];
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	79da      	ldrb	r2, [r3, #7]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	70da      	strb	r2, [r3, #3]
  (*state)[1][3] = (*state)[2][3];
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	7ada      	ldrb	r2, [r3, #11]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	71da      	strb	r2, [r3, #7]
  (*state)[2][3] = (*state)[3][3];
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7bda      	ldrb	r2, [r3, #15]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	72da      	strb	r2, [r3, #11]
  (*state)[3][3] = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	7bfa      	ldrb	r2, [r7, #15]
 8002e5e:	73da      	strb	r2, [r3, #15]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <Cipher>:
#endif // #if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)

// Cipher is the main function that encrypts the PlainText.
static void Cipher(state_t* state, const uint8_t* RoundKey)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(0, state, RoundKey);
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	f7ff fab7 	bl	80023f0 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without MixColumns()
  for (round = 1; ; ++round)
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
  {
    SubBytes(state);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff faee 	bl	8002468 <SubBytes>
    ShiftRows(state);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff fb1b 	bl	80024c8 <ShiftRows>
    if (round == Nr) {
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
 8002e94:	2b0a      	cmp	r3, #10
 8002e96:	d00c      	beq.n	8002eb2 <Cipher+0x48>
      break;
    }
    MixColumns(state);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f7ff fb74 	bl	8002586 <MixColumns>
    AddRoundKey(round, state, RoundKey);
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff faa3 	bl	80023f0 <AddRoundKey>
  for (round = 1; ; ++round)
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	3301      	adds	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
    SubBytes(state);
 8002eb0:	e7e9      	b.n	8002e86 <Cipher+0x1c>
      break;
 8002eb2:	bf00      	nop
  }
  // Add round key to last round
  AddRoundKey(Nr, state, RoundKey);
 8002eb4:	683a      	ldr	r2, [r7, #0]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	200a      	movs	r0, #10
 8002eba:	f7ff fa99 	bl	80023f0 <AddRoundKey>
}
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}

08002ec6 <InvCipher>:

#if (defined(CBC) && CBC == 1) || (defined(ECB) && ECB == 1)
static void InvCipher(state_t* state, const uint8_t* RoundKey)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	6039      	str	r1, [r7, #0]
  uint8_t round = 0;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	73fb      	strb	r3, [r7, #15]

  // Add the First round key to the state before starting the rounds.
  AddRoundKey(Nr, state, RoundKey);
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	200a      	movs	r0, #10
 8002eda:	f7ff fa89 	bl	80023f0 <AddRoundKey>

  // There will be Nr rounds.
  // The first Nr-1 rounds are identical.
  // These Nr rounds are executed in the loop below.
  // Last one without InvMixColumn()
  for (round = (Nr - 1); ; --round)
 8002ede:	2309      	movs	r3, #9
 8002ee0:	73fb      	strb	r3, [r7, #15]
  {
    InvShiftRows(state);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ff80 	bl	8002de8 <InvShiftRows>
    InvSubBytes(state);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ff4d 	bl	8002d88 <InvSubBytes>
    AddRoundKey(round, state, RoundKey);
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff fa7b 	bl	80023f0 <AddRoundKey>
    if (round == 0) {
 8002efa:	7bfb      	ldrb	r3, [r7, #15]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <InvCipher+0x48>
      break;
    }
    InvMixColumns(state);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7ff fbf5 	bl	80026f0 <InvMixColumns>
  for (round = (Nr - 1); ; --round)
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
    InvShiftRows(state);
 8002f0c:	e7e9      	b.n	8002ee2 <InvCipher+0x1c>
      break;
 8002f0e:	bf00      	nop
  }

}
 8002f10:	bf00      	nop
 8002f12:	3710      	adds	r7, #16
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <AES_ECB_encrypt>:
/*****************************************************************************/
#if defined(ECB) && (ECB == 1)


void AES_ECB_encrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  // The next function call encrypts the PlainText with the Key using AES algorithm.
  Cipher((state_t*)buf, ctx->RoundKey);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4619      	mov	r1, r3
 8002f26:	6838      	ldr	r0, [r7, #0]
 8002f28:	f7ff ff9f 	bl	8002e6a <Cipher>
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <AES_ECB_decrypt>:

void AES_ECB_decrypt(const struct AES_ctx* ctx, uint8_t* buf)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  // The next function call decrypts the PlainText with the Key using AES algorithm.
  InvCipher((state_t*)buf, ctx->RoundKey);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4619      	mov	r1, r3
 8002f42:	6838      	ldr	r0, [r7, #0]
 8002f44:	f7ff ffbf 	bl	8002ec6 <InvCipher>
}
 8002f48:	bf00      	nop
 8002f4a:	3708      	adds	r7, #8
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <std>:
 8002f50:	2300      	movs	r3, #0
 8002f52:	b510      	push	{r4, lr}
 8002f54:	4604      	mov	r4, r0
 8002f56:	e9c0 3300 	strd	r3, r3, [r0]
 8002f5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f5e:	6083      	str	r3, [r0, #8]
 8002f60:	8181      	strh	r1, [r0, #12]
 8002f62:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f64:	81c2      	strh	r2, [r0, #14]
 8002f66:	6183      	str	r3, [r0, #24]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	305c      	adds	r0, #92	@ 0x5c
 8002f6e:	f000 f90e 	bl	800318e <memset>
 8002f72:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa8 <std+0x58>)
 8002f74:	6224      	str	r4, [r4, #32]
 8002f76:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f78:	4b0c      	ldr	r3, [pc, #48]	@ (8002fac <std+0x5c>)
 8002f7a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <std+0x60>)
 8002f7e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f80:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb4 <std+0x64>)
 8002f82:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f84:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb8 <std+0x68>)
 8002f86:	429c      	cmp	r4, r3
 8002f88:	d006      	beq.n	8002f98 <std+0x48>
 8002f8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f8e:	4294      	cmp	r4, r2
 8002f90:	d002      	beq.n	8002f98 <std+0x48>
 8002f92:	33d0      	adds	r3, #208	@ 0xd0
 8002f94:	429c      	cmp	r4, r3
 8002f96:	d105      	bne.n	8002fa4 <std+0x54>
 8002f98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fa0:	f000 b96e 	b.w	8003280 <__retarget_lock_init_recursive>
 8002fa4:	bd10      	pop	{r4, pc}
 8002fa6:	bf00      	nop
 8002fa8:	08003109 	.word	0x08003109
 8002fac:	0800312b 	.word	0x0800312b
 8002fb0:	08003163 	.word	0x08003163
 8002fb4:	08003187 	.word	0x08003187
 8002fb8:	200000f4 	.word	0x200000f4

08002fbc <stdio_exit_handler>:
 8002fbc:	4a02      	ldr	r2, [pc, #8]	@ (8002fc8 <stdio_exit_handler+0xc>)
 8002fbe:	4903      	ldr	r1, [pc, #12]	@ (8002fcc <stdio_exit_handler+0x10>)
 8002fc0:	4803      	ldr	r0, [pc, #12]	@ (8002fd0 <stdio_exit_handler+0x14>)
 8002fc2:	f000 b869 	b.w	8003098 <_fwalk_sglue>
 8002fc6:	bf00      	nop
 8002fc8:	2000000c 	.word	0x2000000c
 8002fcc:	08003b15 	.word	0x08003b15
 8002fd0:	2000001c 	.word	0x2000001c

08002fd4 <cleanup_stdio>:
 8002fd4:	6841      	ldr	r1, [r0, #4]
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003008 <cleanup_stdio+0x34>)
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	4299      	cmp	r1, r3
 8002fdc:	4604      	mov	r4, r0
 8002fde:	d001      	beq.n	8002fe4 <cleanup_stdio+0x10>
 8002fe0:	f000 fd98 	bl	8003b14 <_fflush_r>
 8002fe4:	68a1      	ldr	r1, [r4, #8]
 8002fe6:	4b09      	ldr	r3, [pc, #36]	@ (800300c <cleanup_stdio+0x38>)
 8002fe8:	4299      	cmp	r1, r3
 8002fea:	d002      	beq.n	8002ff2 <cleanup_stdio+0x1e>
 8002fec:	4620      	mov	r0, r4
 8002fee:	f000 fd91 	bl	8003b14 <_fflush_r>
 8002ff2:	68e1      	ldr	r1, [r4, #12]
 8002ff4:	4b06      	ldr	r3, [pc, #24]	@ (8003010 <cleanup_stdio+0x3c>)
 8002ff6:	4299      	cmp	r1, r3
 8002ff8:	d004      	beq.n	8003004 <cleanup_stdio+0x30>
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003000:	f000 bd88 	b.w	8003b14 <_fflush_r>
 8003004:	bd10      	pop	{r4, pc}
 8003006:	bf00      	nop
 8003008:	200000f4 	.word	0x200000f4
 800300c:	2000015c 	.word	0x2000015c
 8003010:	200001c4 	.word	0x200001c4

08003014 <global_stdio_init.part.0>:
 8003014:	b510      	push	{r4, lr}
 8003016:	4b0b      	ldr	r3, [pc, #44]	@ (8003044 <global_stdio_init.part.0+0x30>)
 8003018:	4c0b      	ldr	r4, [pc, #44]	@ (8003048 <global_stdio_init.part.0+0x34>)
 800301a:	4a0c      	ldr	r2, [pc, #48]	@ (800304c <global_stdio_init.part.0+0x38>)
 800301c:	4620      	mov	r0, r4
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	2104      	movs	r1, #4
 8003022:	2200      	movs	r2, #0
 8003024:	f7ff ff94 	bl	8002f50 <std>
 8003028:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800302c:	2201      	movs	r2, #1
 800302e:	2109      	movs	r1, #9
 8003030:	f7ff ff8e 	bl	8002f50 <std>
 8003034:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003038:	2202      	movs	r2, #2
 800303a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800303e:	2112      	movs	r1, #18
 8003040:	f7ff bf86 	b.w	8002f50 <std>
 8003044:	2000022c 	.word	0x2000022c
 8003048:	200000f4 	.word	0x200000f4
 800304c:	08002fbd 	.word	0x08002fbd

08003050 <__sfp_lock_acquire>:
 8003050:	4801      	ldr	r0, [pc, #4]	@ (8003058 <__sfp_lock_acquire+0x8>)
 8003052:	f000 b916 	b.w	8003282 <__retarget_lock_acquire_recursive>
 8003056:	bf00      	nop
 8003058:	20000235 	.word	0x20000235

0800305c <__sfp_lock_release>:
 800305c:	4801      	ldr	r0, [pc, #4]	@ (8003064 <__sfp_lock_release+0x8>)
 800305e:	f000 b911 	b.w	8003284 <__retarget_lock_release_recursive>
 8003062:	bf00      	nop
 8003064:	20000235 	.word	0x20000235

08003068 <__sinit>:
 8003068:	b510      	push	{r4, lr}
 800306a:	4604      	mov	r4, r0
 800306c:	f7ff fff0 	bl	8003050 <__sfp_lock_acquire>
 8003070:	6a23      	ldr	r3, [r4, #32]
 8003072:	b11b      	cbz	r3, 800307c <__sinit+0x14>
 8003074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003078:	f7ff bff0 	b.w	800305c <__sfp_lock_release>
 800307c:	4b04      	ldr	r3, [pc, #16]	@ (8003090 <__sinit+0x28>)
 800307e:	6223      	str	r3, [r4, #32]
 8003080:	4b04      	ldr	r3, [pc, #16]	@ (8003094 <__sinit+0x2c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f5      	bne.n	8003074 <__sinit+0xc>
 8003088:	f7ff ffc4 	bl	8003014 <global_stdio_init.part.0>
 800308c:	e7f2      	b.n	8003074 <__sinit+0xc>
 800308e:	bf00      	nop
 8003090:	08002fd5 	.word	0x08002fd5
 8003094:	2000022c 	.word	0x2000022c

08003098 <_fwalk_sglue>:
 8003098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800309c:	4607      	mov	r7, r0
 800309e:	4688      	mov	r8, r1
 80030a0:	4614      	mov	r4, r2
 80030a2:	2600      	movs	r6, #0
 80030a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80030a8:	f1b9 0901 	subs.w	r9, r9, #1
 80030ac:	d505      	bpl.n	80030ba <_fwalk_sglue+0x22>
 80030ae:	6824      	ldr	r4, [r4, #0]
 80030b0:	2c00      	cmp	r4, #0
 80030b2:	d1f7      	bne.n	80030a4 <_fwalk_sglue+0xc>
 80030b4:	4630      	mov	r0, r6
 80030b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030ba:	89ab      	ldrh	r3, [r5, #12]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d907      	bls.n	80030d0 <_fwalk_sglue+0x38>
 80030c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80030c4:	3301      	adds	r3, #1
 80030c6:	d003      	beq.n	80030d0 <_fwalk_sglue+0x38>
 80030c8:	4629      	mov	r1, r5
 80030ca:	4638      	mov	r0, r7
 80030cc:	47c0      	blx	r8
 80030ce:	4306      	orrs	r6, r0
 80030d0:	3568      	adds	r5, #104	@ 0x68
 80030d2:	e7e9      	b.n	80030a8 <_fwalk_sglue+0x10>

080030d4 <iprintf>:
 80030d4:	b40f      	push	{r0, r1, r2, r3}
 80030d6:	b507      	push	{r0, r1, r2, lr}
 80030d8:	4906      	ldr	r1, [pc, #24]	@ (80030f4 <iprintf+0x20>)
 80030da:	ab04      	add	r3, sp, #16
 80030dc:	6808      	ldr	r0, [r1, #0]
 80030de:	f853 2b04 	ldr.w	r2, [r3], #4
 80030e2:	6881      	ldr	r1, [r0, #8]
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	f000 f9ed 	bl	80034c4 <_vfiprintf_r>
 80030ea:	b003      	add	sp, #12
 80030ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80030f0:	b004      	add	sp, #16
 80030f2:	4770      	bx	lr
 80030f4:	20000018 	.word	0x20000018

080030f8 <putchar>:
 80030f8:	4b02      	ldr	r3, [pc, #8]	@ (8003104 <putchar+0xc>)
 80030fa:	4601      	mov	r1, r0
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	6882      	ldr	r2, [r0, #8]
 8003100:	f000 bd30 	b.w	8003b64 <_putc_r>
 8003104:	20000018 	.word	0x20000018

08003108 <__sread>:
 8003108:	b510      	push	{r4, lr}
 800310a:	460c      	mov	r4, r1
 800310c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003110:	f000 f868 	bl	80031e4 <_read_r>
 8003114:	2800      	cmp	r0, #0
 8003116:	bfab      	itete	ge
 8003118:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800311a:	89a3      	ldrhlt	r3, [r4, #12]
 800311c:	181b      	addge	r3, r3, r0
 800311e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003122:	bfac      	ite	ge
 8003124:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003126:	81a3      	strhlt	r3, [r4, #12]
 8003128:	bd10      	pop	{r4, pc}

0800312a <__swrite>:
 800312a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800312e:	461f      	mov	r7, r3
 8003130:	898b      	ldrh	r3, [r1, #12]
 8003132:	4605      	mov	r5, r0
 8003134:	05db      	lsls	r3, r3, #23
 8003136:	460c      	mov	r4, r1
 8003138:	4616      	mov	r6, r2
 800313a:	d505      	bpl.n	8003148 <__swrite+0x1e>
 800313c:	2302      	movs	r3, #2
 800313e:	2200      	movs	r2, #0
 8003140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003144:	f000 f83c 	bl	80031c0 <_lseek_r>
 8003148:	89a3      	ldrh	r3, [r4, #12]
 800314a:	4632      	mov	r2, r6
 800314c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003150:	81a3      	strh	r3, [r4, #12]
 8003152:	4628      	mov	r0, r5
 8003154:	463b      	mov	r3, r7
 8003156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800315a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800315e:	f000 b853 	b.w	8003208 <_write_r>

08003162 <__sseek>:
 8003162:	b510      	push	{r4, lr}
 8003164:	460c      	mov	r4, r1
 8003166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800316a:	f000 f829 	bl	80031c0 <_lseek_r>
 800316e:	1c43      	adds	r3, r0, #1
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	bf15      	itete	ne
 8003174:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003176:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800317a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800317e:	81a3      	strheq	r3, [r4, #12]
 8003180:	bf18      	it	ne
 8003182:	81a3      	strhne	r3, [r4, #12]
 8003184:	bd10      	pop	{r4, pc}

08003186 <__sclose>:
 8003186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800318a:	f000 b809 	b.w	80031a0 <_close_r>

0800318e <memset>:
 800318e:	4603      	mov	r3, r0
 8003190:	4402      	add	r2, r0
 8003192:	4293      	cmp	r3, r2
 8003194:	d100      	bne.n	8003198 <memset+0xa>
 8003196:	4770      	bx	lr
 8003198:	f803 1b01 	strb.w	r1, [r3], #1
 800319c:	e7f9      	b.n	8003192 <memset+0x4>
	...

080031a0 <_close_r>:
 80031a0:	b538      	push	{r3, r4, r5, lr}
 80031a2:	2300      	movs	r3, #0
 80031a4:	4d05      	ldr	r5, [pc, #20]	@ (80031bc <_close_r+0x1c>)
 80031a6:	4604      	mov	r4, r0
 80031a8:	4608      	mov	r0, r1
 80031aa:	602b      	str	r3, [r5, #0]
 80031ac:	f7fd f9e3 	bl	8000576 <_close>
 80031b0:	1c43      	adds	r3, r0, #1
 80031b2:	d102      	bne.n	80031ba <_close_r+0x1a>
 80031b4:	682b      	ldr	r3, [r5, #0]
 80031b6:	b103      	cbz	r3, 80031ba <_close_r+0x1a>
 80031b8:	6023      	str	r3, [r4, #0]
 80031ba:	bd38      	pop	{r3, r4, r5, pc}
 80031bc:	20000230 	.word	0x20000230

080031c0 <_lseek_r>:
 80031c0:	b538      	push	{r3, r4, r5, lr}
 80031c2:	4604      	mov	r4, r0
 80031c4:	4608      	mov	r0, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	2200      	movs	r2, #0
 80031ca:	4d05      	ldr	r5, [pc, #20]	@ (80031e0 <_lseek_r+0x20>)
 80031cc:	602a      	str	r2, [r5, #0]
 80031ce:	461a      	mov	r2, r3
 80031d0:	f7fd f9f5 	bl	80005be <_lseek>
 80031d4:	1c43      	adds	r3, r0, #1
 80031d6:	d102      	bne.n	80031de <_lseek_r+0x1e>
 80031d8:	682b      	ldr	r3, [r5, #0]
 80031da:	b103      	cbz	r3, 80031de <_lseek_r+0x1e>
 80031dc:	6023      	str	r3, [r4, #0]
 80031de:	bd38      	pop	{r3, r4, r5, pc}
 80031e0:	20000230 	.word	0x20000230

080031e4 <_read_r>:
 80031e4:	b538      	push	{r3, r4, r5, lr}
 80031e6:	4604      	mov	r4, r0
 80031e8:	4608      	mov	r0, r1
 80031ea:	4611      	mov	r1, r2
 80031ec:	2200      	movs	r2, #0
 80031ee:	4d05      	ldr	r5, [pc, #20]	@ (8003204 <_read_r+0x20>)
 80031f0:	602a      	str	r2, [r5, #0]
 80031f2:	461a      	mov	r2, r3
 80031f4:	f7fd f986 	bl	8000504 <_read>
 80031f8:	1c43      	adds	r3, r0, #1
 80031fa:	d102      	bne.n	8003202 <_read_r+0x1e>
 80031fc:	682b      	ldr	r3, [r5, #0]
 80031fe:	b103      	cbz	r3, 8003202 <_read_r+0x1e>
 8003200:	6023      	str	r3, [r4, #0]
 8003202:	bd38      	pop	{r3, r4, r5, pc}
 8003204:	20000230 	.word	0x20000230

08003208 <_write_r>:
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	4604      	mov	r4, r0
 800320c:	4608      	mov	r0, r1
 800320e:	4611      	mov	r1, r2
 8003210:	2200      	movs	r2, #0
 8003212:	4d05      	ldr	r5, [pc, #20]	@ (8003228 <_write_r+0x20>)
 8003214:	602a      	str	r2, [r5, #0]
 8003216:	461a      	mov	r2, r3
 8003218:	f7fd f991 	bl	800053e <_write>
 800321c:	1c43      	adds	r3, r0, #1
 800321e:	d102      	bne.n	8003226 <_write_r+0x1e>
 8003220:	682b      	ldr	r3, [r5, #0]
 8003222:	b103      	cbz	r3, 8003226 <_write_r+0x1e>
 8003224:	6023      	str	r3, [r4, #0]
 8003226:	bd38      	pop	{r3, r4, r5, pc}
 8003228:	20000230 	.word	0x20000230

0800322c <__errno>:
 800322c:	4b01      	ldr	r3, [pc, #4]	@ (8003234 <__errno+0x8>)
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	20000018 	.word	0x20000018

08003238 <__libc_init_array>:
 8003238:	b570      	push	{r4, r5, r6, lr}
 800323a:	2600      	movs	r6, #0
 800323c:	4d0c      	ldr	r5, [pc, #48]	@ (8003270 <__libc_init_array+0x38>)
 800323e:	4c0d      	ldr	r4, [pc, #52]	@ (8003274 <__libc_init_array+0x3c>)
 8003240:	1b64      	subs	r4, r4, r5
 8003242:	10a4      	asrs	r4, r4, #2
 8003244:	42a6      	cmp	r6, r4
 8003246:	d109      	bne.n	800325c <__libc_init_array+0x24>
 8003248:	f000 fdf6 	bl	8003e38 <_init>
 800324c:	2600      	movs	r6, #0
 800324e:	4d0a      	ldr	r5, [pc, #40]	@ (8003278 <__libc_init_array+0x40>)
 8003250:	4c0a      	ldr	r4, [pc, #40]	@ (800327c <__libc_init_array+0x44>)
 8003252:	1b64      	subs	r4, r4, r5
 8003254:	10a4      	asrs	r4, r4, #2
 8003256:	42a6      	cmp	r6, r4
 8003258:	d105      	bne.n	8003266 <__libc_init_array+0x2e>
 800325a:	bd70      	pop	{r4, r5, r6, pc}
 800325c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003260:	4798      	blx	r3
 8003262:	3601      	adds	r6, #1
 8003264:	e7ee      	b.n	8003244 <__libc_init_array+0xc>
 8003266:	f855 3b04 	ldr.w	r3, [r5], #4
 800326a:	4798      	blx	r3
 800326c:	3601      	adds	r6, #1
 800326e:	e7f2      	b.n	8003256 <__libc_init_array+0x1e>
 8003270:	080040fc 	.word	0x080040fc
 8003274:	080040fc 	.word	0x080040fc
 8003278:	080040fc 	.word	0x080040fc
 800327c:	08004100 	.word	0x08004100

08003280 <__retarget_lock_init_recursive>:
 8003280:	4770      	bx	lr

08003282 <__retarget_lock_acquire_recursive>:
 8003282:	4770      	bx	lr

08003284 <__retarget_lock_release_recursive>:
 8003284:	4770      	bx	lr
	...

08003288 <_free_r>:
 8003288:	b538      	push	{r3, r4, r5, lr}
 800328a:	4605      	mov	r5, r0
 800328c:	2900      	cmp	r1, #0
 800328e:	d040      	beq.n	8003312 <_free_r+0x8a>
 8003290:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003294:	1f0c      	subs	r4, r1, #4
 8003296:	2b00      	cmp	r3, #0
 8003298:	bfb8      	it	lt
 800329a:	18e4      	addlt	r4, r4, r3
 800329c:	f000 f8de 	bl	800345c <__malloc_lock>
 80032a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003314 <_free_r+0x8c>)
 80032a2:	6813      	ldr	r3, [r2, #0]
 80032a4:	b933      	cbnz	r3, 80032b4 <_free_r+0x2c>
 80032a6:	6063      	str	r3, [r4, #4]
 80032a8:	6014      	str	r4, [r2, #0]
 80032aa:	4628      	mov	r0, r5
 80032ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032b0:	f000 b8da 	b.w	8003468 <__malloc_unlock>
 80032b4:	42a3      	cmp	r3, r4
 80032b6:	d908      	bls.n	80032ca <_free_r+0x42>
 80032b8:	6820      	ldr	r0, [r4, #0]
 80032ba:	1821      	adds	r1, r4, r0
 80032bc:	428b      	cmp	r3, r1
 80032be:	bf01      	itttt	eq
 80032c0:	6819      	ldreq	r1, [r3, #0]
 80032c2:	685b      	ldreq	r3, [r3, #4]
 80032c4:	1809      	addeq	r1, r1, r0
 80032c6:	6021      	streq	r1, [r4, #0]
 80032c8:	e7ed      	b.n	80032a6 <_free_r+0x1e>
 80032ca:	461a      	mov	r2, r3
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	b10b      	cbz	r3, 80032d4 <_free_r+0x4c>
 80032d0:	42a3      	cmp	r3, r4
 80032d2:	d9fa      	bls.n	80032ca <_free_r+0x42>
 80032d4:	6811      	ldr	r1, [r2, #0]
 80032d6:	1850      	adds	r0, r2, r1
 80032d8:	42a0      	cmp	r0, r4
 80032da:	d10b      	bne.n	80032f4 <_free_r+0x6c>
 80032dc:	6820      	ldr	r0, [r4, #0]
 80032de:	4401      	add	r1, r0
 80032e0:	1850      	adds	r0, r2, r1
 80032e2:	4283      	cmp	r3, r0
 80032e4:	6011      	str	r1, [r2, #0]
 80032e6:	d1e0      	bne.n	80032aa <_free_r+0x22>
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	4408      	add	r0, r1
 80032ee:	6010      	str	r0, [r2, #0]
 80032f0:	6053      	str	r3, [r2, #4]
 80032f2:	e7da      	b.n	80032aa <_free_r+0x22>
 80032f4:	d902      	bls.n	80032fc <_free_r+0x74>
 80032f6:	230c      	movs	r3, #12
 80032f8:	602b      	str	r3, [r5, #0]
 80032fa:	e7d6      	b.n	80032aa <_free_r+0x22>
 80032fc:	6820      	ldr	r0, [r4, #0]
 80032fe:	1821      	adds	r1, r4, r0
 8003300:	428b      	cmp	r3, r1
 8003302:	bf01      	itttt	eq
 8003304:	6819      	ldreq	r1, [r3, #0]
 8003306:	685b      	ldreq	r3, [r3, #4]
 8003308:	1809      	addeq	r1, r1, r0
 800330a:	6021      	streq	r1, [r4, #0]
 800330c:	6063      	str	r3, [r4, #4]
 800330e:	6054      	str	r4, [r2, #4]
 8003310:	e7cb      	b.n	80032aa <_free_r+0x22>
 8003312:	bd38      	pop	{r3, r4, r5, pc}
 8003314:	2000023c 	.word	0x2000023c

08003318 <sbrk_aligned>:
 8003318:	b570      	push	{r4, r5, r6, lr}
 800331a:	4e0f      	ldr	r6, [pc, #60]	@ (8003358 <sbrk_aligned+0x40>)
 800331c:	460c      	mov	r4, r1
 800331e:	6831      	ldr	r1, [r6, #0]
 8003320:	4605      	mov	r5, r0
 8003322:	b911      	cbnz	r1, 800332a <sbrk_aligned+0x12>
 8003324:	f000 fce6 	bl	8003cf4 <_sbrk_r>
 8003328:	6030      	str	r0, [r6, #0]
 800332a:	4621      	mov	r1, r4
 800332c:	4628      	mov	r0, r5
 800332e:	f000 fce1 	bl	8003cf4 <_sbrk_r>
 8003332:	1c43      	adds	r3, r0, #1
 8003334:	d103      	bne.n	800333e <sbrk_aligned+0x26>
 8003336:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800333a:	4620      	mov	r0, r4
 800333c:	bd70      	pop	{r4, r5, r6, pc}
 800333e:	1cc4      	adds	r4, r0, #3
 8003340:	f024 0403 	bic.w	r4, r4, #3
 8003344:	42a0      	cmp	r0, r4
 8003346:	d0f8      	beq.n	800333a <sbrk_aligned+0x22>
 8003348:	1a21      	subs	r1, r4, r0
 800334a:	4628      	mov	r0, r5
 800334c:	f000 fcd2 	bl	8003cf4 <_sbrk_r>
 8003350:	3001      	adds	r0, #1
 8003352:	d1f2      	bne.n	800333a <sbrk_aligned+0x22>
 8003354:	e7ef      	b.n	8003336 <sbrk_aligned+0x1e>
 8003356:	bf00      	nop
 8003358:	20000238 	.word	0x20000238

0800335c <_malloc_r>:
 800335c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003360:	1ccd      	adds	r5, r1, #3
 8003362:	f025 0503 	bic.w	r5, r5, #3
 8003366:	3508      	adds	r5, #8
 8003368:	2d0c      	cmp	r5, #12
 800336a:	bf38      	it	cc
 800336c:	250c      	movcc	r5, #12
 800336e:	2d00      	cmp	r5, #0
 8003370:	4606      	mov	r6, r0
 8003372:	db01      	blt.n	8003378 <_malloc_r+0x1c>
 8003374:	42a9      	cmp	r1, r5
 8003376:	d904      	bls.n	8003382 <_malloc_r+0x26>
 8003378:	230c      	movs	r3, #12
 800337a:	6033      	str	r3, [r6, #0]
 800337c:	2000      	movs	r0, #0
 800337e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003382:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003458 <_malloc_r+0xfc>
 8003386:	f000 f869 	bl	800345c <__malloc_lock>
 800338a:	f8d8 3000 	ldr.w	r3, [r8]
 800338e:	461c      	mov	r4, r3
 8003390:	bb44      	cbnz	r4, 80033e4 <_malloc_r+0x88>
 8003392:	4629      	mov	r1, r5
 8003394:	4630      	mov	r0, r6
 8003396:	f7ff ffbf 	bl	8003318 <sbrk_aligned>
 800339a:	1c43      	adds	r3, r0, #1
 800339c:	4604      	mov	r4, r0
 800339e:	d158      	bne.n	8003452 <_malloc_r+0xf6>
 80033a0:	f8d8 4000 	ldr.w	r4, [r8]
 80033a4:	4627      	mov	r7, r4
 80033a6:	2f00      	cmp	r7, #0
 80033a8:	d143      	bne.n	8003432 <_malloc_r+0xd6>
 80033aa:	2c00      	cmp	r4, #0
 80033ac:	d04b      	beq.n	8003446 <_malloc_r+0xea>
 80033ae:	6823      	ldr	r3, [r4, #0]
 80033b0:	4639      	mov	r1, r7
 80033b2:	4630      	mov	r0, r6
 80033b4:	eb04 0903 	add.w	r9, r4, r3
 80033b8:	f000 fc9c 	bl	8003cf4 <_sbrk_r>
 80033bc:	4581      	cmp	r9, r0
 80033be:	d142      	bne.n	8003446 <_malloc_r+0xea>
 80033c0:	6821      	ldr	r1, [r4, #0]
 80033c2:	4630      	mov	r0, r6
 80033c4:	1a6d      	subs	r5, r5, r1
 80033c6:	4629      	mov	r1, r5
 80033c8:	f7ff ffa6 	bl	8003318 <sbrk_aligned>
 80033cc:	3001      	adds	r0, #1
 80033ce:	d03a      	beq.n	8003446 <_malloc_r+0xea>
 80033d0:	6823      	ldr	r3, [r4, #0]
 80033d2:	442b      	add	r3, r5
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	f8d8 3000 	ldr.w	r3, [r8]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	bb62      	cbnz	r2, 8003438 <_malloc_r+0xdc>
 80033de:	f8c8 7000 	str.w	r7, [r8]
 80033e2:	e00f      	b.n	8003404 <_malloc_r+0xa8>
 80033e4:	6822      	ldr	r2, [r4, #0]
 80033e6:	1b52      	subs	r2, r2, r5
 80033e8:	d420      	bmi.n	800342c <_malloc_r+0xd0>
 80033ea:	2a0b      	cmp	r2, #11
 80033ec:	d917      	bls.n	800341e <_malloc_r+0xc2>
 80033ee:	1961      	adds	r1, r4, r5
 80033f0:	42a3      	cmp	r3, r4
 80033f2:	6025      	str	r5, [r4, #0]
 80033f4:	bf18      	it	ne
 80033f6:	6059      	strne	r1, [r3, #4]
 80033f8:	6863      	ldr	r3, [r4, #4]
 80033fa:	bf08      	it	eq
 80033fc:	f8c8 1000 	streq.w	r1, [r8]
 8003400:	5162      	str	r2, [r4, r5]
 8003402:	604b      	str	r3, [r1, #4]
 8003404:	4630      	mov	r0, r6
 8003406:	f000 f82f 	bl	8003468 <__malloc_unlock>
 800340a:	f104 000b 	add.w	r0, r4, #11
 800340e:	1d23      	adds	r3, r4, #4
 8003410:	f020 0007 	bic.w	r0, r0, #7
 8003414:	1ac2      	subs	r2, r0, r3
 8003416:	bf1c      	itt	ne
 8003418:	1a1b      	subne	r3, r3, r0
 800341a:	50a3      	strne	r3, [r4, r2]
 800341c:	e7af      	b.n	800337e <_malloc_r+0x22>
 800341e:	6862      	ldr	r2, [r4, #4]
 8003420:	42a3      	cmp	r3, r4
 8003422:	bf0c      	ite	eq
 8003424:	f8c8 2000 	streq.w	r2, [r8]
 8003428:	605a      	strne	r2, [r3, #4]
 800342a:	e7eb      	b.n	8003404 <_malloc_r+0xa8>
 800342c:	4623      	mov	r3, r4
 800342e:	6864      	ldr	r4, [r4, #4]
 8003430:	e7ae      	b.n	8003390 <_malloc_r+0x34>
 8003432:	463c      	mov	r4, r7
 8003434:	687f      	ldr	r7, [r7, #4]
 8003436:	e7b6      	b.n	80033a6 <_malloc_r+0x4a>
 8003438:	461a      	mov	r2, r3
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	42a3      	cmp	r3, r4
 800343e:	d1fb      	bne.n	8003438 <_malloc_r+0xdc>
 8003440:	2300      	movs	r3, #0
 8003442:	6053      	str	r3, [r2, #4]
 8003444:	e7de      	b.n	8003404 <_malloc_r+0xa8>
 8003446:	230c      	movs	r3, #12
 8003448:	4630      	mov	r0, r6
 800344a:	6033      	str	r3, [r6, #0]
 800344c:	f000 f80c 	bl	8003468 <__malloc_unlock>
 8003450:	e794      	b.n	800337c <_malloc_r+0x20>
 8003452:	6005      	str	r5, [r0, #0]
 8003454:	e7d6      	b.n	8003404 <_malloc_r+0xa8>
 8003456:	bf00      	nop
 8003458:	2000023c 	.word	0x2000023c

0800345c <__malloc_lock>:
 800345c:	4801      	ldr	r0, [pc, #4]	@ (8003464 <__malloc_lock+0x8>)
 800345e:	f7ff bf10 	b.w	8003282 <__retarget_lock_acquire_recursive>
 8003462:	bf00      	nop
 8003464:	20000234 	.word	0x20000234

08003468 <__malloc_unlock>:
 8003468:	4801      	ldr	r0, [pc, #4]	@ (8003470 <__malloc_unlock+0x8>)
 800346a:	f7ff bf0b 	b.w	8003284 <__retarget_lock_release_recursive>
 800346e:	bf00      	nop
 8003470:	20000234 	.word	0x20000234

08003474 <__sfputc_r>:
 8003474:	6893      	ldr	r3, [r2, #8]
 8003476:	b410      	push	{r4}
 8003478:	3b01      	subs	r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	6093      	str	r3, [r2, #8]
 800347e:	da07      	bge.n	8003490 <__sfputc_r+0x1c>
 8003480:	6994      	ldr	r4, [r2, #24]
 8003482:	42a3      	cmp	r3, r4
 8003484:	db01      	blt.n	800348a <__sfputc_r+0x16>
 8003486:	290a      	cmp	r1, #10
 8003488:	d102      	bne.n	8003490 <__sfputc_r+0x1c>
 800348a:	bc10      	pop	{r4}
 800348c:	f000 bb9e 	b.w	8003bcc <__swbuf_r>
 8003490:	6813      	ldr	r3, [r2, #0]
 8003492:	1c58      	adds	r0, r3, #1
 8003494:	6010      	str	r0, [r2, #0]
 8003496:	7019      	strb	r1, [r3, #0]
 8003498:	4608      	mov	r0, r1
 800349a:	bc10      	pop	{r4}
 800349c:	4770      	bx	lr

0800349e <__sfputs_r>:
 800349e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034a0:	4606      	mov	r6, r0
 80034a2:	460f      	mov	r7, r1
 80034a4:	4614      	mov	r4, r2
 80034a6:	18d5      	adds	r5, r2, r3
 80034a8:	42ac      	cmp	r4, r5
 80034aa:	d101      	bne.n	80034b0 <__sfputs_r+0x12>
 80034ac:	2000      	movs	r0, #0
 80034ae:	e007      	b.n	80034c0 <__sfputs_r+0x22>
 80034b0:	463a      	mov	r2, r7
 80034b2:	4630      	mov	r0, r6
 80034b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034b8:	f7ff ffdc 	bl	8003474 <__sfputc_r>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d1f3      	bne.n	80034a8 <__sfputs_r+0xa>
 80034c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080034c4 <_vfiprintf_r>:
 80034c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034c8:	460d      	mov	r5, r1
 80034ca:	4614      	mov	r4, r2
 80034cc:	4698      	mov	r8, r3
 80034ce:	4606      	mov	r6, r0
 80034d0:	b09d      	sub	sp, #116	@ 0x74
 80034d2:	b118      	cbz	r0, 80034dc <_vfiprintf_r+0x18>
 80034d4:	6a03      	ldr	r3, [r0, #32]
 80034d6:	b90b      	cbnz	r3, 80034dc <_vfiprintf_r+0x18>
 80034d8:	f7ff fdc6 	bl	8003068 <__sinit>
 80034dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034de:	07d9      	lsls	r1, r3, #31
 80034e0:	d405      	bmi.n	80034ee <_vfiprintf_r+0x2a>
 80034e2:	89ab      	ldrh	r3, [r5, #12]
 80034e4:	059a      	lsls	r2, r3, #22
 80034e6:	d402      	bmi.n	80034ee <_vfiprintf_r+0x2a>
 80034e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034ea:	f7ff feca 	bl	8003282 <__retarget_lock_acquire_recursive>
 80034ee:	89ab      	ldrh	r3, [r5, #12]
 80034f0:	071b      	lsls	r3, r3, #28
 80034f2:	d501      	bpl.n	80034f8 <_vfiprintf_r+0x34>
 80034f4:	692b      	ldr	r3, [r5, #16]
 80034f6:	b99b      	cbnz	r3, 8003520 <_vfiprintf_r+0x5c>
 80034f8:	4629      	mov	r1, r5
 80034fa:	4630      	mov	r0, r6
 80034fc:	f000 fba4 	bl	8003c48 <__swsetup_r>
 8003500:	b170      	cbz	r0, 8003520 <_vfiprintf_r+0x5c>
 8003502:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003504:	07dc      	lsls	r4, r3, #31
 8003506:	d504      	bpl.n	8003512 <_vfiprintf_r+0x4e>
 8003508:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800350c:	b01d      	add	sp, #116	@ 0x74
 800350e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003512:	89ab      	ldrh	r3, [r5, #12]
 8003514:	0598      	lsls	r0, r3, #22
 8003516:	d4f7      	bmi.n	8003508 <_vfiprintf_r+0x44>
 8003518:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800351a:	f7ff feb3 	bl	8003284 <__retarget_lock_release_recursive>
 800351e:	e7f3      	b.n	8003508 <_vfiprintf_r+0x44>
 8003520:	2300      	movs	r3, #0
 8003522:	9309      	str	r3, [sp, #36]	@ 0x24
 8003524:	2320      	movs	r3, #32
 8003526:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800352a:	2330      	movs	r3, #48	@ 0x30
 800352c:	f04f 0901 	mov.w	r9, #1
 8003530:	f8cd 800c 	str.w	r8, [sp, #12]
 8003534:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80036e0 <_vfiprintf_r+0x21c>
 8003538:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800353c:	4623      	mov	r3, r4
 800353e:	469a      	mov	sl, r3
 8003540:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003544:	b10a      	cbz	r2, 800354a <_vfiprintf_r+0x86>
 8003546:	2a25      	cmp	r2, #37	@ 0x25
 8003548:	d1f9      	bne.n	800353e <_vfiprintf_r+0x7a>
 800354a:	ebba 0b04 	subs.w	fp, sl, r4
 800354e:	d00b      	beq.n	8003568 <_vfiprintf_r+0xa4>
 8003550:	465b      	mov	r3, fp
 8003552:	4622      	mov	r2, r4
 8003554:	4629      	mov	r1, r5
 8003556:	4630      	mov	r0, r6
 8003558:	f7ff ffa1 	bl	800349e <__sfputs_r>
 800355c:	3001      	adds	r0, #1
 800355e:	f000 80a7 	beq.w	80036b0 <_vfiprintf_r+0x1ec>
 8003562:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003564:	445a      	add	r2, fp
 8003566:	9209      	str	r2, [sp, #36]	@ 0x24
 8003568:	f89a 3000 	ldrb.w	r3, [sl]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 809f 	beq.w	80036b0 <_vfiprintf_r+0x1ec>
 8003572:	2300      	movs	r3, #0
 8003574:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003578:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800357c:	f10a 0a01 	add.w	sl, sl, #1
 8003580:	9304      	str	r3, [sp, #16]
 8003582:	9307      	str	r3, [sp, #28]
 8003584:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003588:	931a      	str	r3, [sp, #104]	@ 0x68
 800358a:	4654      	mov	r4, sl
 800358c:	2205      	movs	r2, #5
 800358e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003592:	4853      	ldr	r0, [pc, #332]	@ (80036e0 <_vfiprintf_r+0x21c>)
 8003594:	f000 fbbe 	bl	8003d14 <memchr>
 8003598:	9a04      	ldr	r2, [sp, #16]
 800359a:	b9d8      	cbnz	r0, 80035d4 <_vfiprintf_r+0x110>
 800359c:	06d1      	lsls	r1, r2, #27
 800359e:	bf44      	itt	mi
 80035a0:	2320      	movmi	r3, #32
 80035a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035a6:	0713      	lsls	r3, r2, #28
 80035a8:	bf44      	itt	mi
 80035aa:	232b      	movmi	r3, #43	@ 0x2b
 80035ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035b0:	f89a 3000 	ldrb.w	r3, [sl]
 80035b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80035b6:	d015      	beq.n	80035e4 <_vfiprintf_r+0x120>
 80035b8:	4654      	mov	r4, sl
 80035ba:	2000      	movs	r0, #0
 80035bc:	f04f 0c0a 	mov.w	ip, #10
 80035c0:	9a07      	ldr	r2, [sp, #28]
 80035c2:	4621      	mov	r1, r4
 80035c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035c8:	3b30      	subs	r3, #48	@ 0x30
 80035ca:	2b09      	cmp	r3, #9
 80035cc:	d94b      	bls.n	8003666 <_vfiprintf_r+0x1a2>
 80035ce:	b1b0      	cbz	r0, 80035fe <_vfiprintf_r+0x13a>
 80035d0:	9207      	str	r2, [sp, #28]
 80035d2:	e014      	b.n	80035fe <_vfiprintf_r+0x13a>
 80035d4:	eba0 0308 	sub.w	r3, r0, r8
 80035d8:	fa09 f303 	lsl.w	r3, r9, r3
 80035dc:	4313      	orrs	r3, r2
 80035de:	46a2      	mov	sl, r4
 80035e0:	9304      	str	r3, [sp, #16]
 80035e2:	e7d2      	b.n	800358a <_vfiprintf_r+0xc6>
 80035e4:	9b03      	ldr	r3, [sp, #12]
 80035e6:	1d19      	adds	r1, r3, #4
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	9103      	str	r1, [sp, #12]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bfbb      	ittet	lt
 80035f0:	425b      	neglt	r3, r3
 80035f2:	f042 0202 	orrlt.w	r2, r2, #2
 80035f6:	9307      	strge	r3, [sp, #28]
 80035f8:	9307      	strlt	r3, [sp, #28]
 80035fa:	bfb8      	it	lt
 80035fc:	9204      	strlt	r2, [sp, #16]
 80035fe:	7823      	ldrb	r3, [r4, #0]
 8003600:	2b2e      	cmp	r3, #46	@ 0x2e
 8003602:	d10a      	bne.n	800361a <_vfiprintf_r+0x156>
 8003604:	7863      	ldrb	r3, [r4, #1]
 8003606:	2b2a      	cmp	r3, #42	@ 0x2a
 8003608:	d132      	bne.n	8003670 <_vfiprintf_r+0x1ac>
 800360a:	9b03      	ldr	r3, [sp, #12]
 800360c:	3402      	adds	r4, #2
 800360e:	1d1a      	adds	r2, r3, #4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	9203      	str	r2, [sp, #12]
 8003614:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003618:	9305      	str	r3, [sp, #20]
 800361a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80036e4 <_vfiprintf_r+0x220>
 800361e:	2203      	movs	r2, #3
 8003620:	4650      	mov	r0, sl
 8003622:	7821      	ldrb	r1, [r4, #0]
 8003624:	f000 fb76 	bl	8003d14 <memchr>
 8003628:	b138      	cbz	r0, 800363a <_vfiprintf_r+0x176>
 800362a:	2240      	movs	r2, #64	@ 0x40
 800362c:	9b04      	ldr	r3, [sp, #16]
 800362e:	eba0 000a 	sub.w	r0, r0, sl
 8003632:	4082      	lsls	r2, r0
 8003634:	4313      	orrs	r3, r2
 8003636:	3401      	adds	r4, #1
 8003638:	9304      	str	r3, [sp, #16]
 800363a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800363e:	2206      	movs	r2, #6
 8003640:	4829      	ldr	r0, [pc, #164]	@ (80036e8 <_vfiprintf_r+0x224>)
 8003642:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003646:	f000 fb65 	bl	8003d14 <memchr>
 800364a:	2800      	cmp	r0, #0
 800364c:	d03f      	beq.n	80036ce <_vfiprintf_r+0x20a>
 800364e:	4b27      	ldr	r3, [pc, #156]	@ (80036ec <_vfiprintf_r+0x228>)
 8003650:	bb1b      	cbnz	r3, 800369a <_vfiprintf_r+0x1d6>
 8003652:	9b03      	ldr	r3, [sp, #12]
 8003654:	3307      	adds	r3, #7
 8003656:	f023 0307 	bic.w	r3, r3, #7
 800365a:	3308      	adds	r3, #8
 800365c:	9303      	str	r3, [sp, #12]
 800365e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003660:	443b      	add	r3, r7
 8003662:	9309      	str	r3, [sp, #36]	@ 0x24
 8003664:	e76a      	b.n	800353c <_vfiprintf_r+0x78>
 8003666:	460c      	mov	r4, r1
 8003668:	2001      	movs	r0, #1
 800366a:	fb0c 3202 	mla	r2, ip, r2, r3
 800366e:	e7a8      	b.n	80035c2 <_vfiprintf_r+0xfe>
 8003670:	2300      	movs	r3, #0
 8003672:	f04f 0c0a 	mov.w	ip, #10
 8003676:	4619      	mov	r1, r3
 8003678:	3401      	adds	r4, #1
 800367a:	9305      	str	r3, [sp, #20]
 800367c:	4620      	mov	r0, r4
 800367e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003682:	3a30      	subs	r2, #48	@ 0x30
 8003684:	2a09      	cmp	r2, #9
 8003686:	d903      	bls.n	8003690 <_vfiprintf_r+0x1cc>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0c6      	beq.n	800361a <_vfiprintf_r+0x156>
 800368c:	9105      	str	r1, [sp, #20]
 800368e:	e7c4      	b.n	800361a <_vfiprintf_r+0x156>
 8003690:	4604      	mov	r4, r0
 8003692:	2301      	movs	r3, #1
 8003694:	fb0c 2101 	mla	r1, ip, r1, r2
 8003698:	e7f0      	b.n	800367c <_vfiprintf_r+0x1b8>
 800369a:	ab03      	add	r3, sp, #12
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	462a      	mov	r2, r5
 80036a0:	4630      	mov	r0, r6
 80036a2:	4b13      	ldr	r3, [pc, #76]	@ (80036f0 <_vfiprintf_r+0x22c>)
 80036a4:	a904      	add	r1, sp, #16
 80036a6:	f3af 8000 	nop.w
 80036aa:	4607      	mov	r7, r0
 80036ac:	1c78      	adds	r0, r7, #1
 80036ae:	d1d6      	bne.n	800365e <_vfiprintf_r+0x19a>
 80036b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80036b2:	07d9      	lsls	r1, r3, #31
 80036b4:	d405      	bmi.n	80036c2 <_vfiprintf_r+0x1fe>
 80036b6:	89ab      	ldrh	r3, [r5, #12]
 80036b8:	059a      	lsls	r2, r3, #22
 80036ba:	d402      	bmi.n	80036c2 <_vfiprintf_r+0x1fe>
 80036bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80036be:	f7ff fde1 	bl	8003284 <__retarget_lock_release_recursive>
 80036c2:	89ab      	ldrh	r3, [r5, #12]
 80036c4:	065b      	lsls	r3, r3, #25
 80036c6:	f53f af1f 	bmi.w	8003508 <_vfiprintf_r+0x44>
 80036ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036cc:	e71e      	b.n	800350c <_vfiprintf_r+0x48>
 80036ce:	ab03      	add	r3, sp, #12
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	462a      	mov	r2, r5
 80036d4:	4630      	mov	r0, r6
 80036d6:	4b06      	ldr	r3, [pc, #24]	@ (80036f0 <_vfiprintf_r+0x22c>)
 80036d8:	a904      	add	r1, sp, #16
 80036da:	f000 f87d 	bl	80037d8 <_printf_i>
 80036de:	e7e4      	b.n	80036aa <_vfiprintf_r+0x1e6>
 80036e0:	080040c7 	.word	0x080040c7
 80036e4:	080040cd 	.word	0x080040cd
 80036e8:	080040d1 	.word	0x080040d1
 80036ec:	00000000 	.word	0x00000000
 80036f0:	0800349f 	.word	0x0800349f

080036f4 <_printf_common>:
 80036f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f8:	4616      	mov	r6, r2
 80036fa:	4698      	mov	r8, r3
 80036fc:	688a      	ldr	r2, [r1, #8]
 80036fe:	690b      	ldr	r3, [r1, #16]
 8003700:	4607      	mov	r7, r0
 8003702:	4293      	cmp	r3, r2
 8003704:	bfb8      	it	lt
 8003706:	4613      	movlt	r3, r2
 8003708:	6033      	str	r3, [r6, #0]
 800370a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800370e:	460c      	mov	r4, r1
 8003710:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003714:	b10a      	cbz	r2, 800371a <_printf_common+0x26>
 8003716:	3301      	adds	r3, #1
 8003718:	6033      	str	r3, [r6, #0]
 800371a:	6823      	ldr	r3, [r4, #0]
 800371c:	0699      	lsls	r1, r3, #26
 800371e:	bf42      	ittt	mi
 8003720:	6833      	ldrmi	r3, [r6, #0]
 8003722:	3302      	addmi	r3, #2
 8003724:	6033      	strmi	r3, [r6, #0]
 8003726:	6825      	ldr	r5, [r4, #0]
 8003728:	f015 0506 	ands.w	r5, r5, #6
 800372c:	d106      	bne.n	800373c <_printf_common+0x48>
 800372e:	f104 0a19 	add.w	sl, r4, #25
 8003732:	68e3      	ldr	r3, [r4, #12]
 8003734:	6832      	ldr	r2, [r6, #0]
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	42ab      	cmp	r3, r5
 800373a:	dc2b      	bgt.n	8003794 <_printf_common+0xa0>
 800373c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003740:	6822      	ldr	r2, [r4, #0]
 8003742:	3b00      	subs	r3, #0
 8003744:	bf18      	it	ne
 8003746:	2301      	movne	r3, #1
 8003748:	0692      	lsls	r2, r2, #26
 800374a:	d430      	bmi.n	80037ae <_printf_common+0xba>
 800374c:	4641      	mov	r1, r8
 800374e:	4638      	mov	r0, r7
 8003750:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003754:	47c8      	blx	r9
 8003756:	3001      	adds	r0, #1
 8003758:	d023      	beq.n	80037a2 <_printf_common+0xae>
 800375a:	6823      	ldr	r3, [r4, #0]
 800375c:	6922      	ldr	r2, [r4, #16]
 800375e:	f003 0306 	and.w	r3, r3, #6
 8003762:	2b04      	cmp	r3, #4
 8003764:	bf14      	ite	ne
 8003766:	2500      	movne	r5, #0
 8003768:	6833      	ldreq	r3, [r6, #0]
 800376a:	f04f 0600 	mov.w	r6, #0
 800376e:	bf08      	it	eq
 8003770:	68e5      	ldreq	r5, [r4, #12]
 8003772:	f104 041a 	add.w	r4, r4, #26
 8003776:	bf08      	it	eq
 8003778:	1aed      	subeq	r5, r5, r3
 800377a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800377e:	bf08      	it	eq
 8003780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003784:	4293      	cmp	r3, r2
 8003786:	bfc4      	itt	gt
 8003788:	1a9b      	subgt	r3, r3, r2
 800378a:	18ed      	addgt	r5, r5, r3
 800378c:	42b5      	cmp	r5, r6
 800378e:	d11a      	bne.n	80037c6 <_printf_common+0xd2>
 8003790:	2000      	movs	r0, #0
 8003792:	e008      	b.n	80037a6 <_printf_common+0xb2>
 8003794:	2301      	movs	r3, #1
 8003796:	4652      	mov	r2, sl
 8003798:	4641      	mov	r1, r8
 800379a:	4638      	mov	r0, r7
 800379c:	47c8      	blx	r9
 800379e:	3001      	adds	r0, #1
 80037a0:	d103      	bne.n	80037aa <_printf_common+0xb6>
 80037a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80037a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037aa:	3501      	adds	r5, #1
 80037ac:	e7c1      	b.n	8003732 <_printf_common+0x3e>
 80037ae:	2030      	movs	r0, #48	@ 0x30
 80037b0:	18e1      	adds	r1, r4, r3
 80037b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80037bc:	4422      	add	r2, r4
 80037be:	3302      	adds	r3, #2
 80037c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80037c4:	e7c2      	b.n	800374c <_printf_common+0x58>
 80037c6:	2301      	movs	r3, #1
 80037c8:	4622      	mov	r2, r4
 80037ca:	4641      	mov	r1, r8
 80037cc:	4638      	mov	r0, r7
 80037ce:	47c8      	blx	r9
 80037d0:	3001      	adds	r0, #1
 80037d2:	d0e6      	beq.n	80037a2 <_printf_common+0xae>
 80037d4:	3601      	adds	r6, #1
 80037d6:	e7d9      	b.n	800378c <_printf_common+0x98>

080037d8 <_printf_i>:
 80037d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037dc:	7e0f      	ldrb	r7, [r1, #24]
 80037de:	4691      	mov	r9, r2
 80037e0:	2f78      	cmp	r7, #120	@ 0x78
 80037e2:	4680      	mov	r8, r0
 80037e4:	460c      	mov	r4, r1
 80037e6:	469a      	mov	sl, r3
 80037e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037ee:	d807      	bhi.n	8003800 <_printf_i+0x28>
 80037f0:	2f62      	cmp	r7, #98	@ 0x62
 80037f2:	d80a      	bhi.n	800380a <_printf_i+0x32>
 80037f4:	2f00      	cmp	r7, #0
 80037f6:	f000 80d1 	beq.w	800399c <_printf_i+0x1c4>
 80037fa:	2f58      	cmp	r7, #88	@ 0x58
 80037fc:	f000 80b8 	beq.w	8003970 <_printf_i+0x198>
 8003800:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003804:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003808:	e03a      	b.n	8003880 <_printf_i+0xa8>
 800380a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800380e:	2b15      	cmp	r3, #21
 8003810:	d8f6      	bhi.n	8003800 <_printf_i+0x28>
 8003812:	a101      	add	r1, pc, #4	@ (adr r1, 8003818 <_printf_i+0x40>)
 8003814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003818:	08003871 	.word	0x08003871
 800381c:	08003885 	.word	0x08003885
 8003820:	08003801 	.word	0x08003801
 8003824:	08003801 	.word	0x08003801
 8003828:	08003801 	.word	0x08003801
 800382c:	08003801 	.word	0x08003801
 8003830:	08003885 	.word	0x08003885
 8003834:	08003801 	.word	0x08003801
 8003838:	08003801 	.word	0x08003801
 800383c:	08003801 	.word	0x08003801
 8003840:	08003801 	.word	0x08003801
 8003844:	08003983 	.word	0x08003983
 8003848:	080038af 	.word	0x080038af
 800384c:	0800393d 	.word	0x0800393d
 8003850:	08003801 	.word	0x08003801
 8003854:	08003801 	.word	0x08003801
 8003858:	080039a5 	.word	0x080039a5
 800385c:	08003801 	.word	0x08003801
 8003860:	080038af 	.word	0x080038af
 8003864:	08003801 	.word	0x08003801
 8003868:	08003801 	.word	0x08003801
 800386c:	08003945 	.word	0x08003945
 8003870:	6833      	ldr	r3, [r6, #0]
 8003872:	1d1a      	adds	r2, r3, #4
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	6032      	str	r2, [r6, #0]
 8003878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800387c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003880:	2301      	movs	r3, #1
 8003882:	e09c      	b.n	80039be <_printf_i+0x1e6>
 8003884:	6833      	ldr	r3, [r6, #0]
 8003886:	6820      	ldr	r0, [r4, #0]
 8003888:	1d19      	adds	r1, r3, #4
 800388a:	6031      	str	r1, [r6, #0]
 800388c:	0606      	lsls	r6, r0, #24
 800388e:	d501      	bpl.n	8003894 <_printf_i+0xbc>
 8003890:	681d      	ldr	r5, [r3, #0]
 8003892:	e003      	b.n	800389c <_printf_i+0xc4>
 8003894:	0645      	lsls	r5, r0, #25
 8003896:	d5fb      	bpl.n	8003890 <_printf_i+0xb8>
 8003898:	f9b3 5000 	ldrsh.w	r5, [r3]
 800389c:	2d00      	cmp	r5, #0
 800389e:	da03      	bge.n	80038a8 <_printf_i+0xd0>
 80038a0:	232d      	movs	r3, #45	@ 0x2d
 80038a2:	426d      	negs	r5, r5
 80038a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038a8:	230a      	movs	r3, #10
 80038aa:	4858      	ldr	r0, [pc, #352]	@ (8003a0c <_printf_i+0x234>)
 80038ac:	e011      	b.n	80038d2 <_printf_i+0xfa>
 80038ae:	6821      	ldr	r1, [r4, #0]
 80038b0:	6833      	ldr	r3, [r6, #0]
 80038b2:	0608      	lsls	r0, r1, #24
 80038b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80038b8:	d402      	bmi.n	80038c0 <_printf_i+0xe8>
 80038ba:	0649      	lsls	r1, r1, #25
 80038bc:	bf48      	it	mi
 80038be:	b2ad      	uxthmi	r5, r5
 80038c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80038c2:	6033      	str	r3, [r6, #0]
 80038c4:	bf14      	ite	ne
 80038c6:	230a      	movne	r3, #10
 80038c8:	2308      	moveq	r3, #8
 80038ca:	4850      	ldr	r0, [pc, #320]	@ (8003a0c <_printf_i+0x234>)
 80038cc:	2100      	movs	r1, #0
 80038ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038d2:	6866      	ldr	r6, [r4, #4]
 80038d4:	2e00      	cmp	r6, #0
 80038d6:	60a6      	str	r6, [r4, #8]
 80038d8:	db05      	blt.n	80038e6 <_printf_i+0x10e>
 80038da:	6821      	ldr	r1, [r4, #0]
 80038dc:	432e      	orrs	r6, r5
 80038de:	f021 0104 	bic.w	r1, r1, #4
 80038e2:	6021      	str	r1, [r4, #0]
 80038e4:	d04b      	beq.n	800397e <_printf_i+0x1a6>
 80038e6:	4616      	mov	r6, r2
 80038e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80038ec:	fb03 5711 	mls	r7, r3, r1, r5
 80038f0:	5dc7      	ldrb	r7, [r0, r7]
 80038f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038f6:	462f      	mov	r7, r5
 80038f8:	42bb      	cmp	r3, r7
 80038fa:	460d      	mov	r5, r1
 80038fc:	d9f4      	bls.n	80038e8 <_printf_i+0x110>
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d10b      	bne.n	800391a <_printf_i+0x142>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	07df      	lsls	r7, r3, #31
 8003906:	d508      	bpl.n	800391a <_printf_i+0x142>
 8003908:	6923      	ldr	r3, [r4, #16]
 800390a:	6861      	ldr	r1, [r4, #4]
 800390c:	4299      	cmp	r1, r3
 800390e:	bfde      	ittt	le
 8003910:	2330      	movle	r3, #48	@ 0x30
 8003912:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003916:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800391a:	1b92      	subs	r2, r2, r6
 800391c:	6122      	str	r2, [r4, #16]
 800391e:	464b      	mov	r3, r9
 8003920:	4621      	mov	r1, r4
 8003922:	4640      	mov	r0, r8
 8003924:	f8cd a000 	str.w	sl, [sp]
 8003928:	aa03      	add	r2, sp, #12
 800392a:	f7ff fee3 	bl	80036f4 <_printf_common>
 800392e:	3001      	adds	r0, #1
 8003930:	d14a      	bne.n	80039c8 <_printf_i+0x1f0>
 8003932:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003936:	b004      	add	sp, #16
 8003938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	f043 0320 	orr.w	r3, r3, #32
 8003942:	6023      	str	r3, [r4, #0]
 8003944:	2778      	movs	r7, #120	@ 0x78
 8003946:	4832      	ldr	r0, [pc, #200]	@ (8003a10 <_printf_i+0x238>)
 8003948:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	6831      	ldr	r1, [r6, #0]
 8003950:	061f      	lsls	r7, r3, #24
 8003952:	f851 5b04 	ldr.w	r5, [r1], #4
 8003956:	d402      	bmi.n	800395e <_printf_i+0x186>
 8003958:	065f      	lsls	r7, r3, #25
 800395a:	bf48      	it	mi
 800395c:	b2ad      	uxthmi	r5, r5
 800395e:	6031      	str	r1, [r6, #0]
 8003960:	07d9      	lsls	r1, r3, #31
 8003962:	bf44      	itt	mi
 8003964:	f043 0320 	orrmi.w	r3, r3, #32
 8003968:	6023      	strmi	r3, [r4, #0]
 800396a:	b11d      	cbz	r5, 8003974 <_printf_i+0x19c>
 800396c:	2310      	movs	r3, #16
 800396e:	e7ad      	b.n	80038cc <_printf_i+0xf4>
 8003970:	4826      	ldr	r0, [pc, #152]	@ (8003a0c <_printf_i+0x234>)
 8003972:	e7e9      	b.n	8003948 <_printf_i+0x170>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	f023 0320 	bic.w	r3, r3, #32
 800397a:	6023      	str	r3, [r4, #0]
 800397c:	e7f6      	b.n	800396c <_printf_i+0x194>
 800397e:	4616      	mov	r6, r2
 8003980:	e7bd      	b.n	80038fe <_printf_i+0x126>
 8003982:	6833      	ldr	r3, [r6, #0]
 8003984:	6825      	ldr	r5, [r4, #0]
 8003986:	1d18      	adds	r0, r3, #4
 8003988:	6961      	ldr	r1, [r4, #20]
 800398a:	6030      	str	r0, [r6, #0]
 800398c:	062e      	lsls	r6, r5, #24
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	d501      	bpl.n	8003996 <_printf_i+0x1be>
 8003992:	6019      	str	r1, [r3, #0]
 8003994:	e002      	b.n	800399c <_printf_i+0x1c4>
 8003996:	0668      	lsls	r0, r5, #25
 8003998:	d5fb      	bpl.n	8003992 <_printf_i+0x1ba>
 800399a:	8019      	strh	r1, [r3, #0]
 800399c:	2300      	movs	r3, #0
 800399e:	4616      	mov	r6, r2
 80039a0:	6123      	str	r3, [r4, #16]
 80039a2:	e7bc      	b.n	800391e <_printf_i+0x146>
 80039a4:	6833      	ldr	r3, [r6, #0]
 80039a6:	2100      	movs	r1, #0
 80039a8:	1d1a      	adds	r2, r3, #4
 80039aa:	6032      	str	r2, [r6, #0]
 80039ac:	681e      	ldr	r6, [r3, #0]
 80039ae:	6862      	ldr	r2, [r4, #4]
 80039b0:	4630      	mov	r0, r6
 80039b2:	f000 f9af 	bl	8003d14 <memchr>
 80039b6:	b108      	cbz	r0, 80039bc <_printf_i+0x1e4>
 80039b8:	1b80      	subs	r0, r0, r6
 80039ba:	6060      	str	r0, [r4, #4]
 80039bc:	6863      	ldr	r3, [r4, #4]
 80039be:	6123      	str	r3, [r4, #16]
 80039c0:	2300      	movs	r3, #0
 80039c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039c6:	e7aa      	b.n	800391e <_printf_i+0x146>
 80039c8:	4632      	mov	r2, r6
 80039ca:	4649      	mov	r1, r9
 80039cc:	4640      	mov	r0, r8
 80039ce:	6923      	ldr	r3, [r4, #16]
 80039d0:	47d0      	blx	sl
 80039d2:	3001      	adds	r0, #1
 80039d4:	d0ad      	beq.n	8003932 <_printf_i+0x15a>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	079b      	lsls	r3, r3, #30
 80039da:	d413      	bmi.n	8003a04 <_printf_i+0x22c>
 80039dc:	68e0      	ldr	r0, [r4, #12]
 80039de:	9b03      	ldr	r3, [sp, #12]
 80039e0:	4298      	cmp	r0, r3
 80039e2:	bfb8      	it	lt
 80039e4:	4618      	movlt	r0, r3
 80039e6:	e7a6      	b.n	8003936 <_printf_i+0x15e>
 80039e8:	2301      	movs	r3, #1
 80039ea:	4632      	mov	r2, r6
 80039ec:	4649      	mov	r1, r9
 80039ee:	4640      	mov	r0, r8
 80039f0:	47d0      	blx	sl
 80039f2:	3001      	adds	r0, #1
 80039f4:	d09d      	beq.n	8003932 <_printf_i+0x15a>
 80039f6:	3501      	adds	r5, #1
 80039f8:	68e3      	ldr	r3, [r4, #12]
 80039fa:	9903      	ldr	r1, [sp, #12]
 80039fc:	1a5b      	subs	r3, r3, r1
 80039fe:	42ab      	cmp	r3, r5
 8003a00:	dcf2      	bgt.n	80039e8 <_printf_i+0x210>
 8003a02:	e7eb      	b.n	80039dc <_printf_i+0x204>
 8003a04:	2500      	movs	r5, #0
 8003a06:	f104 0619 	add.w	r6, r4, #25
 8003a0a:	e7f5      	b.n	80039f8 <_printf_i+0x220>
 8003a0c:	080040d8 	.word	0x080040d8
 8003a10:	080040e9 	.word	0x080040e9

08003a14 <__sflush_r>:
 8003a14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	0716      	lsls	r6, r2, #28
 8003a1c:	4605      	mov	r5, r0
 8003a1e:	460c      	mov	r4, r1
 8003a20:	d454      	bmi.n	8003acc <__sflush_r+0xb8>
 8003a22:	684b      	ldr	r3, [r1, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	dc02      	bgt.n	8003a2e <__sflush_r+0x1a>
 8003a28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	dd48      	ble.n	8003ac0 <__sflush_r+0xac>
 8003a2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a30:	2e00      	cmp	r6, #0
 8003a32:	d045      	beq.n	8003ac0 <__sflush_r+0xac>
 8003a34:	2300      	movs	r3, #0
 8003a36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a3a:	682f      	ldr	r7, [r5, #0]
 8003a3c:	6a21      	ldr	r1, [r4, #32]
 8003a3e:	602b      	str	r3, [r5, #0]
 8003a40:	d030      	beq.n	8003aa4 <__sflush_r+0x90>
 8003a42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	0759      	lsls	r1, r3, #29
 8003a48:	d505      	bpl.n	8003a56 <__sflush_r+0x42>
 8003a4a:	6863      	ldr	r3, [r4, #4]
 8003a4c:	1ad2      	subs	r2, r2, r3
 8003a4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a50:	b10b      	cbz	r3, 8003a56 <__sflush_r+0x42>
 8003a52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a54:	1ad2      	subs	r2, r2, r3
 8003a56:	2300      	movs	r3, #0
 8003a58:	4628      	mov	r0, r5
 8003a5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a5c:	6a21      	ldr	r1, [r4, #32]
 8003a5e:	47b0      	blx	r6
 8003a60:	1c43      	adds	r3, r0, #1
 8003a62:	89a3      	ldrh	r3, [r4, #12]
 8003a64:	d106      	bne.n	8003a74 <__sflush_r+0x60>
 8003a66:	6829      	ldr	r1, [r5, #0]
 8003a68:	291d      	cmp	r1, #29
 8003a6a:	d82b      	bhi.n	8003ac4 <__sflush_r+0xb0>
 8003a6c:	4a28      	ldr	r2, [pc, #160]	@ (8003b10 <__sflush_r+0xfc>)
 8003a6e:	40ca      	lsrs	r2, r1
 8003a70:	07d6      	lsls	r6, r2, #31
 8003a72:	d527      	bpl.n	8003ac4 <__sflush_r+0xb0>
 8003a74:	2200      	movs	r2, #0
 8003a76:	6062      	str	r2, [r4, #4]
 8003a78:	6922      	ldr	r2, [r4, #16]
 8003a7a:	04d9      	lsls	r1, r3, #19
 8003a7c:	6022      	str	r2, [r4, #0]
 8003a7e:	d504      	bpl.n	8003a8a <__sflush_r+0x76>
 8003a80:	1c42      	adds	r2, r0, #1
 8003a82:	d101      	bne.n	8003a88 <__sflush_r+0x74>
 8003a84:	682b      	ldr	r3, [r5, #0]
 8003a86:	b903      	cbnz	r3, 8003a8a <__sflush_r+0x76>
 8003a88:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a8c:	602f      	str	r7, [r5, #0]
 8003a8e:	b1b9      	cbz	r1, 8003ac0 <__sflush_r+0xac>
 8003a90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a94:	4299      	cmp	r1, r3
 8003a96:	d002      	beq.n	8003a9e <__sflush_r+0x8a>
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f7ff fbf5 	bl	8003288 <_free_r>
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003aa2:	e00d      	b.n	8003ac0 <__sflush_r+0xac>
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	4628      	mov	r0, r5
 8003aa8:	47b0      	blx	r6
 8003aaa:	4602      	mov	r2, r0
 8003aac:	1c50      	adds	r0, r2, #1
 8003aae:	d1c9      	bne.n	8003a44 <__sflush_r+0x30>
 8003ab0:	682b      	ldr	r3, [r5, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0c6      	beq.n	8003a44 <__sflush_r+0x30>
 8003ab6:	2b1d      	cmp	r3, #29
 8003ab8:	d001      	beq.n	8003abe <__sflush_r+0xaa>
 8003aba:	2b16      	cmp	r3, #22
 8003abc:	d11d      	bne.n	8003afa <__sflush_r+0xe6>
 8003abe:	602f      	str	r7, [r5, #0]
 8003ac0:	2000      	movs	r0, #0
 8003ac2:	e021      	b.n	8003b08 <__sflush_r+0xf4>
 8003ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ac8:	b21b      	sxth	r3, r3
 8003aca:	e01a      	b.n	8003b02 <__sflush_r+0xee>
 8003acc:	690f      	ldr	r7, [r1, #16]
 8003ace:	2f00      	cmp	r7, #0
 8003ad0:	d0f6      	beq.n	8003ac0 <__sflush_r+0xac>
 8003ad2:	0793      	lsls	r3, r2, #30
 8003ad4:	bf18      	it	ne
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	680e      	ldr	r6, [r1, #0]
 8003ada:	bf08      	it	eq
 8003adc:	694b      	ldreq	r3, [r1, #20]
 8003ade:	1bf6      	subs	r6, r6, r7
 8003ae0:	600f      	str	r7, [r1, #0]
 8003ae2:	608b      	str	r3, [r1, #8]
 8003ae4:	2e00      	cmp	r6, #0
 8003ae6:	ddeb      	ble.n	8003ac0 <__sflush_r+0xac>
 8003ae8:	4633      	mov	r3, r6
 8003aea:	463a      	mov	r2, r7
 8003aec:	4628      	mov	r0, r5
 8003aee:	6a21      	ldr	r1, [r4, #32]
 8003af0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003af4:	47e0      	blx	ip
 8003af6:	2800      	cmp	r0, #0
 8003af8:	dc07      	bgt.n	8003b0a <__sflush_r+0xf6>
 8003afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003afe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b06:	81a3      	strh	r3, [r4, #12]
 8003b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b0a:	4407      	add	r7, r0
 8003b0c:	1a36      	subs	r6, r6, r0
 8003b0e:	e7e9      	b.n	8003ae4 <__sflush_r+0xd0>
 8003b10:	20400001 	.word	0x20400001

08003b14 <_fflush_r>:
 8003b14:	b538      	push	{r3, r4, r5, lr}
 8003b16:	690b      	ldr	r3, [r1, #16]
 8003b18:	4605      	mov	r5, r0
 8003b1a:	460c      	mov	r4, r1
 8003b1c:	b913      	cbnz	r3, 8003b24 <_fflush_r+0x10>
 8003b1e:	2500      	movs	r5, #0
 8003b20:	4628      	mov	r0, r5
 8003b22:	bd38      	pop	{r3, r4, r5, pc}
 8003b24:	b118      	cbz	r0, 8003b2e <_fflush_r+0x1a>
 8003b26:	6a03      	ldr	r3, [r0, #32]
 8003b28:	b90b      	cbnz	r3, 8003b2e <_fflush_r+0x1a>
 8003b2a:	f7ff fa9d 	bl	8003068 <__sinit>
 8003b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0f3      	beq.n	8003b1e <_fflush_r+0xa>
 8003b36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b38:	07d0      	lsls	r0, r2, #31
 8003b3a:	d404      	bmi.n	8003b46 <_fflush_r+0x32>
 8003b3c:	0599      	lsls	r1, r3, #22
 8003b3e:	d402      	bmi.n	8003b46 <_fflush_r+0x32>
 8003b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b42:	f7ff fb9e 	bl	8003282 <__retarget_lock_acquire_recursive>
 8003b46:	4628      	mov	r0, r5
 8003b48:	4621      	mov	r1, r4
 8003b4a:	f7ff ff63 	bl	8003a14 <__sflush_r>
 8003b4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b50:	4605      	mov	r5, r0
 8003b52:	07da      	lsls	r2, r3, #31
 8003b54:	d4e4      	bmi.n	8003b20 <_fflush_r+0xc>
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	059b      	lsls	r3, r3, #22
 8003b5a:	d4e1      	bmi.n	8003b20 <_fflush_r+0xc>
 8003b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b5e:	f7ff fb91 	bl	8003284 <__retarget_lock_release_recursive>
 8003b62:	e7dd      	b.n	8003b20 <_fflush_r+0xc>

08003b64 <_putc_r>:
 8003b64:	b570      	push	{r4, r5, r6, lr}
 8003b66:	460d      	mov	r5, r1
 8003b68:	4614      	mov	r4, r2
 8003b6a:	4606      	mov	r6, r0
 8003b6c:	b118      	cbz	r0, 8003b76 <_putc_r+0x12>
 8003b6e:	6a03      	ldr	r3, [r0, #32]
 8003b70:	b90b      	cbnz	r3, 8003b76 <_putc_r+0x12>
 8003b72:	f7ff fa79 	bl	8003068 <__sinit>
 8003b76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b78:	07d8      	lsls	r0, r3, #31
 8003b7a:	d405      	bmi.n	8003b88 <_putc_r+0x24>
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	0599      	lsls	r1, r3, #22
 8003b80:	d402      	bmi.n	8003b88 <_putc_r+0x24>
 8003b82:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b84:	f7ff fb7d 	bl	8003282 <__retarget_lock_acquire_recursive>
 8003b88:	68a3      	ldr	r3, [r4, #8]
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	60a3      	str	r3, [r4, #8]
 8003b90:	da05      	bge.n	8003b9e <_putc_r+0x3a>
 8003b92:	69a2      	ldr	r2, [r4, #24]
 8003b94:	4293      	cmp	r3, r2
 8003b96:	db12      	blt.n	8003bbe <_putc_r+0x5a>
 8003b98:	b2eb      	uxtb	r3, r5
 8003b9a:	2b0a      	cmp	r3, #10
 8003b9c:	d00f      	beq.n	8003bbe <_putc_r+0x5a>
 8003b9e:	6823      	ldr	r3, [r4, #0]
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	6022      	str	r2, [r4, #0]
 8003ba4:	701d      	strb	r5, [r3, #0]
 8003ba6:	b2ed      	uxtb	r5, r5
 8003ba8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003baa:	07da      	lsls	r2, r3, #31
 8003bac:	d405      	bmi.n	8003bba <_putc_r+0x56>
 8003bae:	89a3      	ldrh	r3, [r4, #12]
 8003bb0:	059b      	lsls	r3, r3, #22
 8003bb2:	d402      	bmi.n	8003bba <_putc_r+0x56>
 8003bb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003bb6:	f7ff fb65 	bl	8003284 <__retarget_lock_release_recursive>
 8003bba:	4628      	mov	r0, r5
 8003bbc:	bd70      	pop	{r4, r5, r6, pc}
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4630      	mov	r0, r6
 8003bc4:	f000 f802 	bl	8003bcc <__swbuf_r>
 8003bc8:	4605      	mov	r5, r0
 8003bca:	e7ed      	b.n	8003ba8 <_putc_r+0x44>

08003bcc <__swbuf_r>:
 8003bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bce:	460e      	mov	r6, r1
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	4605      	mov	r5, r0
 8003bd4:	b118      	cbz	r0, 8003bde <__swbuf_r+0x12>
 8003bd6:	6a03      	ldr	r3, [r0, #32]
 8003bd8:	b90b      	cbnz	r3, 8003bde <__swbuf_r+0x12>
 8003bda:	f7ff fa45 	bl	8003068 <__sinit>
 8003bde:	69a3      	ldr	r3, [r4, #24]
 8003be0:	60a3      	str	r3, [r4, #8]
 8003be2:	89a3      	ldrh	r3, [r4, #12]
 8003be4:	071a      	lsls	r2, r3, #28
 8003be6:	d501      	bpl.n	8003bec <__swbuf_r+0x20>
 8003be8:	6923      	ldr	r3, [r4, #16]
 8003bea:	b943      	cbnz	r3, 8003bfe <__swbuf_r+0x32>
 8003bec:	4621      	mov	r1, r4
 8003bee:	4628      	mov	r0, r5
 8003bf0:	f000 f82a 	bl	8003c48 <__swsetup_r>
 8003bf4:	b118      	cbz	r0, 8003bfe <__swbuf_r+0x32>
 8003bf6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8003bfa:	4638      	mov	r0, r7
 8003bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	6922      	ldr	r2, [r4, #16]
 8003c02:	b2f6      	uxtb	r6, r6
 8003c04:	1a98      	subs	r0, r3, r2
 8003c06:	6963      	ldr	r3, [r4, #20]
 8003c08:	4637      	mov	r7, r6
 8003c0a:	4283      	cmp	r3, r0
 8003c0c:	dc05      	bgt.n	8003c1a <__swbuf_r+0x4e>
 8003c0e:	4621      	mov	r1, r4
 8003c10:	4628      	mov	r0, r5
 8003c12:	f7ff ff7f 	bl	8003b14 <_fflush_r>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	d1ed      	bne.n	8003bf6 <__swbuf_r+0x2a>
 8003c1a:	68a3      	ldr	r3, [r4, #8]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	60a3      	str	r3, [r4, #8]
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	6022      	str	r2, [r4, #0]
 8003c26:	701e      	strb	r6, [r3, #0]
 8003c28:	6962      	ldr	r2, [r4, #20]
 8003c2a:	1c43      	adds	r3, r0, #1
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d004      	beq.n	8003c3a <__swbuf_r+0x6e>
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	07db      	lsls	r3, r3, #31
 8003c34:	d5e1      	bpl.n	8003bfa <__swbuf_r+0x2e>
 8003c36:	2e0a      	cmp	r6, #10
 8003c38:	d1df      	bne.n	8003bfa <__swbuf_r+0x2e>
 8003c3a:	4621      	mov	r1, r4
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f7ff ff69 	bl	8003b14 <_fflush_r>
 8003c42:	2800      	cmp	r0, #0
 8003c44:	d0d9      	beq.n	8003bfa <__swbuf_r+0x2e>
 8003c46:	e7d6      	b.n	8003bf6 <__swbuf_r+0x2a>

08003c48 <__swsetup_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	4b29      	ldr	r3, [pc, #164]	@ (8003cf0 <__swsetup_r+0xa8>)
 8003c4c:	4605      	mov	r5, r0
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	460c      	mov	r4, r1
 8003c52:	b118      	cbz	r0, 8003c5c <__swsetup_r+0x14>
 8003c54:	6a03      	ldr	r3, [r0, #32]
 8003c56:	b90b      	cbnz	r3, 8003c5c <__swsetup_r+0x14>
 8003c58:	f7ff fa06 	bl	8003068 <__sinit>
 8003c5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c60:	0719      	lsls	r1, r3, #28
 8003c62:	d422      	bmi.n	8003caa <__swsetup_r+0x62>
 8003c64:	06da      	lsls	r2, r3, #27
 8003c66:	d407      	bmi.n	8003c78 <__swsetup_r+0x30>
 8003c68:	2209      	movs	r2, #9
 8003c6a:	602a      	str	r2, [r5, #0]
 8003c6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003c74:	81a3      	strh	r3, [r4, #12]
 8003c76:	e033      	b.n	8003ce0 <__swsetup_r+0x98>
 8003c78:	0758      	lsls	r0, r3, #29
 8003c7a:	d512      	bpl.n	8003ca2 <__swsetup_r+0x5a>
 8003c7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003c7e:	b141      	cbz	r1, 8003c92 <__swsetup_r+0x4a>
 8003c80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003c84:	4299      	cmp	r1, r3
 8003c86:	d002      	beq.n	8003c8e <__swsetup_r+0x46>
 8003c88:	4628      	mov	r0, r5
 8003c8a:	f7ff fafd 	bl	8003288 <_free_r>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	6363      	str	r3, [r4, #52]	@ 0x34
 8003c92:	89a3      	ldrh	r3, [r4, #12]
 8003c94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c98:	81a3      	strh	r3, [r4, #12]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	6063      	str	r3, [r4, #4]
 8003c9e:	6923      	ldr	r3, [r4, #16]
 8003ca0:	6023      	str	r3, [r4, #0]
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	f043 0308 	orr.w	r3, r3, #8
 8003ca8:	81a3      	strh	r3, [r4, #12]
 8003caa:	6923      	ldr	r3, [r4, #16]
 8003cac:	b94b      	cbnz	r3, 8003cc2 <__swsetup_r+0x7a>
 8003cae:	89a3      	ldrh	r3, [r4, #12]
 8003cb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb8:	d003      	beq.n	8003cc2 <__swsetup_r+0x7a>
 8003cba:	4621      	mov	r1, r4
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f000 f85c 	bl	8003d7a <__smakebuf_r>
 8003cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cc6:	f013 0201 	ands.w	r2, r3, #1
 8003cca:	d00a      	beq.n	8003ce2 <__swsetup_r+0x9a>
 8003ccc:	2200      	movs	r2, #0
 8003cce:	60a2      	str	r2, [r4, #8]
 8003cd0:	6962      	ldr	r2, [r4, #20]
 8003cd2:	4252      	negs	r2, r2
 8003cd4:	61a2      	str	r2, [r4, #24]
 8003cd6:	6922      	ldr	r2, [r4, #16]
 8003cd8:	b942      	cbnz	r2, 8003cec <__swsetup_r+0xa4>
 8003cda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003cde:	d1c5      	bne.n	8003c6c <__swsetup_r+0x24>
 8003ce0:	bd38      	pop	{r3, r4, r5, pc}
 8003ce2:	0799      	lsls	r1, r3, #30
 8003ce4:	bf58      	it	pl
 8003ce6:	6962      	ldrpl	r2, [r4, #20]
 8003ce8:	60a2      	str	r2, [r4, #8]
 8003cea:	e7f4      	b.n	8003cd6 <__swsetup_r+0x8e>
 8003cec:	2000      	movs	r0, #0
 8003cee:	e7f7      	b.n	8003ce0 <__swsetup_r+0x98>
 8003cf0:	20000018 	.word	0x20000018

08003cf4 <_sbrk_r>:
 8003cf4:	b538      	push	{r3, r4, r5, lr}
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	4d05      	ldr	r5, [pc, #20]	@ (8003d10 <_sbrk_r+0x1c>)
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	4608      	mov	r0, r1
 8003cfe:	602b      	str	r3, [r5, #0]
 8003d00:	f7fc fc6a 	bl	80005d8 <_sbrk>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d102      	bne.n	8003d0e <_sbrk_r+0x1a>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	b103      	cbz	r3, 8003d0e <_sbrk_r+0x1a>
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
 8003d10:	20000230 	.word	0x20000230

08003d14 <memchr>:
 8003d14:	4603      	mov	r3, r0
 8003d16:	b510      	push	{r4, lr}
 8003d18:	b2c9      	uxtb	r1, r1
 8003d1a:	4402      	add	r2, r0
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	d101      	bne.n	8003d26 <memchr+0x12>
 8003d22:	2000      	movs	r0, #0
 8003d24:	e003      	b.n	8003d2e <memchr+0x1a>
 8003d26:	7804      	ldrb	r4, [r0, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	428c      	cmp	r4, r1
 8003d2c:	d1f6      	bne.n	8003d1c <memchr+0x8>
 8003d2e:	bd10      	pop	{r4, pc}

08003d30 <__swhatbuf_r>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	460c      	mov	r4, r1
 8003d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d38:	4615      	mov	r5, r2
 8003d3a:	2900      	cmp	r1, #0
 8003d3c:	461e      	mov	r6, r3
 8003d3e:	b096      	sub	sp, #88	@ 0x58
 8003d40:	da0c      	bge.n	8003d5c <__swhatbuf_r+0x2c>
 8003d42:	89a3      	ldrh	r3, [r4, #12]
 8003d44:	2100      	movs	r1, #0
 8003d46:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003d4a:	bf14      	ite	ne
 8003d4c:	2340      	movne	r3, #64	@ 0x40
 8003d4e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003d52:	2000      	movs	r0, #0
 8003d54:	6031      	str	r1, [r6, #0]
 8003d56:	602b      	str	r3, [r5, #0]
 8003d58:	b016      	add	sp, #88	@ 0x58
 8003d5a:	bd70      	pop	{r4, r5, r6, pc}
 8003d5c:	466a      	mov	r2, sp
 8003d5e:	f000 f849 	bl	8003df4 <_fstat_r>
 8003d62:	2800      	cmp	r0, #0
 8003d64:	dbed      	blt.n	8003d42 <__swhatbuf_r+0x12>
 8003d66:	9901      	ldr	r1, [sp, #4]
 8003d68:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003d6c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003d70:	4259      	negs	r1, r3
 8003d72:	4159      	adcs	r1, r3
 8003d74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d78:	e7eb      	b.n	8003d52 <__swhatbuf_r+0x22>

08003d7a <__smakebuf_r>:
 8003d7a:	898b      	ldrh	r3, [r1, #12]
 8003d7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d7e:	079d      	lsls	r5, r3, #30
 8003d80:	4606      	mov	r6, r0
 8003d82:	460c      	mov	r4, r1
 8003d84:	d507      	bpl.n	8003d96 <__smakebuf_r+0x1c>
 8003d86:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003d8a:	6023      	str	r3, [r4, #0]
 8003d8c:	6123      	str	r3, [r4, #16]
 8003d8e:	2301      	movs	r3, #1
 8003d90:	6163      	str	r3, [r4, #20]
 8003d92:	b003      	add	sp, #12
 8003d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d96:	466a      	mov	r2, sp
 8003d98:	ab01      	add	r3, sp, #4
 8003d9a:	f7ff ffc9 	bl	8003d30 <__swhatbuf_r>
 8003d9e:	9f00      	ldr	r7, [sp, #0]
 8003da0:	4605      	mov	r5, r0
 8003da2:	4639      	mov	r1, r7
 8003da4:	4630      	mov	r0, r6
 8003da6:	f7ff fad9 	bl	800335c <_malloc_r>
 8003daa:	b948      	cbnz	r0, 8003dc0 <__smakebuf_r+0x46>
 8003dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003db0:	059a      	lsls	r2, r3, #22
 8003db2:	d4ee      	bmi.n	8003d92 <__smakebuf_r+0x18>
 8003db4:	f023 0303 	bic.w	r3, r3, #3
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	81a3      	strh	r3, [r4, #12]
 8003dbe:	e7e2      	b.n	8003d86 <__smakebuf_r+0xc>
 8003dc0:	89a3      	ldrh	r3, [r4, #12]
 8003dc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dca:	81a3      	strh	r3, [r4, #12]
 8003dcc:	9b01      	ldr	r3, [sp, #4]
 8003dce:	6020      	str	r0, [r4, #0]
 8003dd0:	b15b      	cbz	r3, 8003dea <__smakebuf_r+0x70>
 8003dd2:	4630      	mov	r0, r6
 8003dd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dd8:	f000 f81e 	bl	8003e18 <_isatty_r>
 8003ddc:	b128      	cbz	r0, 8003dea <__smakebuf_r+0x70>
 8003dde:	89a3      	ldrh	r3, [r4, #12]
 8003de0:	f023 0303 	bic.w	r3, r3, #3
 8003de4:	f043 0301 	orr.w	r3, r3, #1
 8003de8:	81a3      	strh	r3, [r4, #12]
 8003dea:	89a3      	ldrh	r3, [r4, #12]
 8003dec:	431d      	orrs	r5, r3
 8003dee:	81a5      	strh	r5, [r4, #12]
 8003df0:	e7cf      	b.n	8003d92 <__smakebuf_r+0x18>
	...

08003df4 <_fstat_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	2300      	movs	r3, #0
 8003df8:	4d06      	ldr	r5, [pc, #24]	@ (8003e14 <_fstat_r+0x20>)
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	602b      	str	r3, [r5, #0]
 8003e02:	f7fc fbc3 	bl	800058c <_fstat>
 8003e06:	1c43      	adds	r3, r0, #1
 8003e08:	d102      	bne.n	8003e10 <_fstat_r+0x1c>
 8003e0a:	682b      	ldr	r3, [r5, #0]
 8003e0c:	b103      	cbz	r3, 8003e10 <_fstat_r+0x1c>
 8003e0e:	6023      	str	r3, [r4, #0]
 8003e10:	bd38      	pop	{r3, r4, r5, pc}
 8003e12:	bf00      	nop
 8003e14:	20000230 	.word	0x20000230

08003e18 <_isatty_r>:
 8003e18:	b538      	push	{r3, r4, r5, lr}
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	4d05      	ldr	r5, [pc, #20]	@ (8003e34 <_isatty_r+0x1c>)
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4608      	mov	r0, r1
 8003e22:	602b      	str	r3, [r5, #0]
 8003e24:	f7fc fbc1 	bl	80005aa <_isatty>
 8003e28:	1c43      	adds	r3, r0, #1
 8003e2a:	d102      	bne.n	8003e32 <_isatty_r+0x1a>
 8003e2c:	682b      	ldr	r3, [r5, #0]
 8003e2e:	b103      	cbz	r3, 8003e32 <_isatty_r+0x1a>
 8003e30:	6023      	str	r3, [r4, #0]
 8003e32:	bd38      	pop	{r3, r4, r5, pc}
 8003e34:	20000230 	.word	0x20000230

08003e38 <_init>:
 8003e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3a:	bf00      	nop
 8003e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3e:	bc08      	pop	{r3}
 8003e40:	469e      	mov	lr, r3
 8003e42:	4770      	bx	lr

08003e44 <_fini>:
 8003e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e46:	bf00      	nop
 8003e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4a:	bc08      	pop	{r3}
 8003e4c:	469e      	mov	lr, r3
 8003e4e:	4770      	bx	lr
